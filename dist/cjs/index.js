'use strict';

var React = require('react');

const Button = ({ label }) => {
    const [enabled, setEnabled] = React.useState(true);
    return (React.createElement("button", null,
        label,
        "- is ",
        enabled));
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var fromByteArray_1 = fromByteArray;

var lookup = [];

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    );
  }

  return parts.join('')
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function _typeof$1(o) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$1(o);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
  }
  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$5(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray$5(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$5(arr) || _nonIterableSpread();
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function toPrimitive(t, r) {
  if ("object" != _typeof$1(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof$1(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof$1(i) ? i : i + "";
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var regeneratorRuntime$1 = {exports: {}};

var _typeof = {exports: {}};

(function (module) {
	function _typeof(o) {
	  "@babel/helpers - typeof";

	  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	    return typeof o;
	  } : function (o) {
	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
	}
	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (_typeof));

var _typeofExports = _typeof.exports;

(function (module) {
	var _typeof = _typeofExports["default"];
	function _regeneratorRuntime() {
	  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
	    return e;
	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
	  var t,
	    e = {},
	    r = Object.prototype,
	    n = r.hasOwnProperty,
	    o = Object.defineProperty || function (t, e, r) {
	      t[e] = r.value;
	    },
	    i = "function" == typeof Symbol ? Symbol : {},
	    a = i.iterator || "@@iterator",
	    c = i.asyncIterator || "@@asyncIterator",
	    u = i.toStringTag || "@@toStringTag";
	  function define(t, e, r) {
	    return Object.defineProperty(t, e, {
	      value: r,
	      enumerable: !0,
	      configurable: !0,
	      writable: !0
	    }), t[e];
	  }
	  try {
	    define({}, "");
	  } catch (t) {
	    define = function define(t, e, r) {
	      return t[e] = r;
	    };
	  }
	  function wrap(t, e, r, n) {
	    var i = e && e.prototype instanceof Generator ? e : Generator,
	      a = Object.create(i.prototype),
	      c = new Context(n || []);
	    return o(a, "_invoke", {
	      value: makeInvokeMethod(t, r, c)
	    }), a;
	  }
	  function tryCatch(t, e, r) {
	    try {
	      return {
	        type: "normal",
	        arg: t.call(e, r)
	      };
	    } catch (t) {
	      return {
	        type: "throw",
	        arg: t
	      };
	    }
	  }
	  e.wrap = wrap;
	  var h = "suspendedStart",
	    l = "suspendedYield",
	    f = "executing",
	    s = "completed",
	    y = {};
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	  var p = {};
	  define(p, a, function () {
	    return this;
	  });
	  var d = Object.getPrototypeOf,
	    v = d && d(d(values([])));
	  v && v !== r && n.call(v, a) && (p = v);
	  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
	  function defineIteratorMethods(t) {
	    ["next", "throw", "return"].forEach(function (e) {
	      define(t, e, function (t) {
	        return this._invoke(e, t);
	      });
	    });
	  }
	  function AsyncIterator(t, e) {
	    function invoke(r, o, i, a) {
	      var c = tryCatch(t[r], t, o);
	      if ("throw" !== c.type) {
	        var u = c.arg,
	          h = u.value;
	        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
	          invoke("next", t, i, a);
	        }, function (t) {
	          invoke("throw", t, i, a);
	        }) : e.resolve(h).then(function (t) {
	          u.value = t, i(u);
	        }, function (t) {
	          return invoke("throw", t, i, a);
	        });
	      }
	      a(c.arg);
	    }
	    var r;
	    o(this, "_invoke", {
	      value: function value(t, n) {
	        function callInvokeWithMethodAndArg() {
	          return new e(function (e, r) {
	            invoke(t, n, e, r);
	          });
	        }
	        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      }
	    });
	  }
	  function makeInvokeMethod(e, r, n) {
	    var o = h;
	    return function (i, a) {
	      if (o === f) throw Error("Generator is already running");
	      if (o === s) {
	        if ("throw" === i) throw a;
	        return {
	          value: t,
	          done: !0
	        };
	      }
	      for (n.method = i, n.arg = a;;) {
	        var c = n.delegate;
	        if (c) {
	          var u = maybeInvokeDelegate(c, n);
	          if (u) {
	            if (u === y) continue;
	            return u;
	          }
	        }
	        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
	          if (o === h) throw o = s, n.arg;
	          n.dispatchException(n.arg);
	        } else "return" === n.method && n.abrupt("return", n.arg);
	        o = f;
	        var p = tryCatch(e, r, n);
	        if ("normal" === p.type) {
	          if (o = n.done ? s : l, p.arg === y) continue;
	          return {
	            value: p.arg,
	            done: n.done
	          };
	        }
	        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
	      }
	    };
	  }
	  function maybeInvokeDelegate(e, r) {
	    var n = r.method,
	      o = e.iterator[n];
	    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
	    var i = tryCatch(o, e.iterator, r.arg);
	    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
	    var a = i.arg;
	    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
	  }
	  function pushTryEntry(t) {
	    var e = {
	      tryLoc: t[0]
	    };
	    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
	  }
	  function resetTryEntry(t) {
	    var e = t.completion || {};
	    e.type = "normal", delete e.arg, t.completion = e;
	  }
	  function Context(t) {
	    this.tryEntries = [{
	      tryLoc: "root"
	    }], t.forEach(pushTryEntry, this), this.reset(!0);
	  }
	  function values(e) {
	    if (e || "" === e) {
	      var r = e[a];
	      if (r) return r.call(e);
	      if ("function" == typeof e.next) return e;
	      if (!isNaN(e.length)) {
	        var o = -1,
	          i = function next() {
	            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
	            return next.value = t, next.done = !0, next;
	          };
	        return i.next = i;
	      }
	    }
	    throw new TypeError(_typeof(e) + " is not iterable");
	  }
	  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
	    value: GeneratorFunctionPrototype,
	    configurable: !0
	  }), o(GeneratorFunctionPrototype, "constructor", {
	    value: GeneratorFunction,
	    configurable: !0
	  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
	    var e = "function" == typeof t && t.constructor;
	    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
	  }, e.mark = function (t) {
	    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
	  }, e.awrap = function (t) {
	    return {
	      __await: t
	    };
	  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
	    return this;
	  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
	    void 0 === i && (i = Promise);
	    var a = new AsyncIterator(wrap(t, r, n, o), i);
	    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
	      return t.done ? t.value : a.next();
	    });
	  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
	    return this;
	  }), define(g, "toString", function () {
	    return "[object Generator]";
	  }), e.keys = function (t) {
	    var e = Object(t),
	      r = [];
	    for (var n in e) r.push(n);
	    return r.reverse(), function next() {
	      for (; r.length;) {
	        var t = r.pop();
	        if (t in e) return next.value = t, next.done = !1, next;
	      }
	      return next.done = !0, next;
	    };
	  }, e.values = values, Context.prototype = {
	    constructor: Context,
	    reset: function reset(e) {
	      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
	    },
	    stop: function stop() {
	      this.done = !0;
	      var t = this.tryEntries[0].completion;
	      if ("throw" === t.type) throw t.arg;
	      return this.rval;
	    },
	    dispatchException: function dispatchException(e) {
	      if (this.done) throw e;
	      var r = this;
	      function handle(n, o) {
	        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
	      }
	      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
	        var i = this.tryEntries[o],
	          a = i.completion;
	        if ("root" === i.tryLoc) return handle("end");
	        if (i.tryLoc <= this.prev) {
	          var c = n.call(i, "catchLoc"),
	            u = n.call(i, "finallyLoc");
	          if (c && u) {
	            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
	            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
	          } else if (c) {
	            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
	          } else {
	            if (!u) throw Error("try statement without catch or finally");
	            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
	          }
	        }
	      }
	    },
	    abrupt: function abrupt(t, e) {
	      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
	        var o = this.tryEntries[r];
	        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
	          var i = o;
	          break;
	        }
	      }
	      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
	      var a = i ? i.completion : {};
	      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
	    },
	    complete: function complete(t, e) {
	      if ("throw" === t.type) throw t.arg;
	      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
	    },
	    finish: function finish(t) {
	      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
	        var r = this.tryEntries[e];
	        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
	      }
	    },
	    "catch": function _catch(t) {
	      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
	        var r = this.tryEntries[e];
	        if (r.tryLoc === t) {
	          var n = r.completion;
	          if ("throw" === n.type) {
	            var o = n.arg;
	            resetTryEntry(r);
	          }
	          return o;
	        }
	      }
	      throw Error("illegal catch attempt");
	    },
	    delegateYield: function delegateYield(e, r, n) {
	      return this.delegate = {
	        iterator: values(e),
	        resultName: r,
	        nextLoc: n
	      }, "next" === this.method && (this.arg = t), y;
	    }
	  }, e;
	}
	module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports; 
} (regeneratorRuntime$1));

var regeneratorRuntimeExports = regeneratorRuntime$1.exports;

// TODO(Babel 8): Remove this file.

var runtime = regeneratorRuntimeExports();
var regenerator = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

var _regeneratorRuntime = /*@__PURE__*/getDefaultExportFromCjs(regenerator);

function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
};

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer$1(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString$2 = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction$1 = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction$1(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction$1(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction$1(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction$1(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction$1(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction$1(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
};

const noop = () => {};

const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};

const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0];
  }

  return str;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction$1(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  };

  return visit(obj, 0);
};

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);

var utils$1 = {
  isArray,
  isArrayBuffer,
  isBuffer: isBuffer$1,
  isFormData,
  isArrayBufferView,
  isString: isString$2,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils$1.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype$1 = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);

  utils$1.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

// eslint-disable-next-line strict
var httpAdapter = null;

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$1.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);

  if (!utils$1.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils$1.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils$1.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils$1.isArray(value) && isFlatArray(value)) ||
        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils$1.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils$1.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$1(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && toFormData(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ?
      params.toString() :
      new AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

var transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

var FormData$2 = typeof FormData !== 'undefined' ? FormData : null;

var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

var platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$2,
    Blob: Blob$1
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasBrowserEnv: hasBrowserEnv,
    hasStandardBrowserEnv: hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv
});

var platform = {
  ...utils,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};

    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: transitionalDefaults,

  adapter: ['xhr', 'http'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$1.isObject(data);

    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils$1.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }

    if (utils$1.isArrayBuffer(data) ||
      utils$1.isBuffer(data) ||
      utils$1.isStream(data) ||
      utils$1.isFile(data) ||
      utils$1.isBlob(data)
    ) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$1.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$1.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils$1.isString(value)) return;

  if (utils$1.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils$1.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils$1.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils$1.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils$1.freezeMethods(AxiosHeaders);

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults;
  const context = response || config;
  const headers = AxiosHeaders.from(context.headers);
  let data = context.data;

  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils$1.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

var cookies = platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils$1.isString(path) && cookie.push('path=' + path);

      utils$1.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  };

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

var isURLSameOrigin = platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (utils$1.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })();

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);

  return e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  };
}

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

var xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders.from(config.headers).normalize();
    let {responseType, withXSRFToken} = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let contentType;

    if (utils$1.isFormData(requestData)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false); // Let the browser set it
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        // fix semicolon duplication issue for ReactNative FormData implementation
        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
      }
    }

    let request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }

    const fullPath = buildFullPath(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if(platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));

      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(fullPath))) {
        // Add xsrf header
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$1.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(fullPath);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
};

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter
};

utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;

var adapters = {
  getAdapter: (adapters) => {
    adapters = utils$1.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = AxiosHeaders.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = AxiosHeaders.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

const headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({caseless}, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

const VERSION = "1.6.8";

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

var validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';

        if (!err.stack) {
          err.stack = stack;
          // match without the 2 top stack lines
        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
          err.stack += '\n' + stack;
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils$1.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = AxiosHeaders.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return utils$1.isObject(payload) && (payload.isAxiosError === true);
}

const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios(defaultConfig);
  const instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils$1.extend(instance, Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils$1.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;

// Expose AxiosError class
axios.AxiosError = AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

// Expose mergeConfig
axios.mergeConfig = mergeConfig;

axios.AxiosHeaders = AxiosHeaders;

axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = HttpStatusCode;

axios.default = axios;

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$5(arr, i) || _nonIterableRest();
}

/* eslint-env browser */

var browser$1 = typeof self == 'object' ? self.FormData : window.FormData;

var FormData$1 = /*@__PURE__*/getDefaultExportFromCjs(browser$1);

// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

var ws = null;

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket;
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket;
} else if (typeof commonjsGlobal !== 'undefined') {
  ws = commonjsGlobal.WebSocket || commonjsGlobal.MozWebSocket;
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket;
} else if (typeof self !== 'undefined') {
  ws = self.WebSocket || self.MozWebSocket;
}

var browser = ws;

var WebSocket$1 = /*@__PURE__*/getDefaultExportFromCjs(browser);

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeFunction(fn) {
  try {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  } catch (e) {
    return typeof fn === "function";
  }
}

function _isNativeReflectConstruct$1() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() {
    return !!t;
  })();
}

function _construct(t, e, r) {
  if (_isNativeReflectConstruct$1()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}

function isString$1(arrayOrString) {
  return typeof arrayOrString === 'string';
}

function isMapStringCallback(arrayOrString, callback) {
  return !!callback && isString$1(arrayOrString);
} // source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72


function map(arrayOrString, callback) {
  var res = [];

  if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {
    for (var k = 0, len = arrayOrString.length; k < len; k++) {
      if (arrayOrString.charAt(k)) {
        var kValue = arrayOrString.charAt(k);
        var mappedValue = callback(kValue, k, arrayOrString);
        res[k] = mappedValue;
      }
    }
  } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {
    for (var _k = 0, _len = arrayOrString.length; _k < _len; _k++) {
      if (_k in arrayOrString) {
        var _kValue = arrayOrString[_k];

        var _mappedValue = callback(_kValue, _k, arrayOrString);

        res[_k] = _mappedValue;
      }
    }
  }

  return res;
}

var encodeBase64 = function encodeBase64(data) {
  return fromByteArray_1(new Uint8Array(map(data, function (char) {
    return char.charCodeAt(0);
  })));
}; // base-64 decoder throws exception if encoded string is not padded by '=' to make string length
// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility
// https://github.com/beatgammit/base64-js/blob/master/index.js#L26

var decodeBase64 = function decodeBase64(s) {
  var e = {},
      w = String.fromCharCode,
      L = s.length;
  var i,
      b = 0,
      c,
      x,
      l = 0,
      a,
      r = '';
  var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (i = 0; i < 64; i++) {
    e[A.charAt(i)] = i;
  }

  for (x = 0; x < L; x++) {
    c = e[s.charAt(x)];
    b = (b << 6) + c;
    l += 6;

    while (l >= 8) {
      ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));
    }
  }

  return r;
};

var https = null;

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike  ) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (_e) { function e(_x) { return _e.apply(this, arguments); } e.toString = function () { return _e.toString(); }; return e; }(function (e) { throw e; }), f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function (_e2) { function e(_x2) { return _e2.apply(this, arguments); } e.toString = function () { return _e2.toString(); }; return e; }(function (e) { didErr = true; err = e; }), f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * logChatPromiseExecution - utility function for logging the execution of a promise..
 *  use this when you want to run the promise and handle errors by logging a warning
 *
 * @param {Promise<T>} promise The promise you want to run and log
 * @param {string} name    A descriptive name of what the promise does for log output
 *
 */
function logChatPromiseExecution(promise, name) {
  promise.then().catch(function (error) {
    console.warn("failed to do ".concat(name, ", ran into error: "), error);
  });
}
var sleep = function sleep(m) {
  return new Promise(function (r) {
    return setTimeout(r, m);
  });
};
function isFunction(value) {
  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);
}
var chatCodes = {
  TOKEN_EXPIRED: 40,
  WS_CLOSED_SUCCESS: 1000
};

function isReadableStream(obj) {
  return obj !== null && _typeof$1(obj) === 'object' && (obj.readable || typeof obj._read === 'function');
}

function isBuffer(obj) {
  return obj != null && obj.constructor != null && // @ts-expect-error
  typeof obj.constructor.isBuffer === 'function' && // @ts-expect-error
  obj.constructor.isBuffer(obj);
}

function isFileWebAPI(uri) {
  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;
}

function isBlobWebAPI(uri) {
  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;
}

function isOwnUserBaseProperty(property) {
  var ownUserBaseProperties = {
    channel_mutes: true,
    devices: true,
    mutes: true,
    total_unread_count: true,
    unread_channels: true,
    unread_count: true,
    unread_threads: true,
    invisible: true,
    roles: true
  };
  return ownUserBaseProperties[property];
}
function addFileToFormData(uri, name, contentType) {
  var data = new FormData$1();

  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {
    if (name) data.append('file', uri, name);else data.append('file', uri);
  } else {
    data.append('file', {
      uri: uri,
      name: name || uri.split('/').reverse()[0],
      contentType: contentType || undefined,
      type: contentType || undefined
    });
  }

  return data;
}
function normalizeQuerySort(sort) {
  var sortFields = [];
  var sortArr = Array.isArray(sort) ? sort : [sort];

  var _iterator = _createForOfIteratorHelper$4(sortArr),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      var entries = Object.entries(item);

      if (entries.length > 1) {
        console.warn("client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed");
      }

      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
        var _entries$_i = _slicedToArray(_entries[_i], 2),
            field = _entries$_i[0],
            direction = _entries$_i[1];

        sortFields.push({
          field: field,
          direction: direction
        });
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return sortFields;
}
/**
 * retryInterval - A retry interval which increases acc to number of failures
 *
 * @return {number} Duration to wait in milliseconds
 */

function retryInterval(numberOfFailures) {
  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)
  var max = Math.min(500 + numberOfFailures * 2000, 25000);
  var min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);
  return Math.floor(Math.random() * (max - min) + min);
}
function randomId() {
  return generateUUIDv4();
}

function hex(bytes) {
  var s = '';

  for (var i = 0; i < bytes.length; i++) {
    s += bytes[i].toString(16).padStart(2, '0');
  }

  return s;
} // https://tools.ietf.org/html/rfc4122


function generateUUIDv4() {
  var bytes = getRandomBytes(16);
  bytes[6] = bytes[6] & 0x0f | 0x40; // version

  bytes[8] = bytes[8] & 0xbf | 0x80; // variant

  return hex(bytes.subarray(0, 4)) + '-' + hex(bytes.subarray(4, 6)) + '-' + hex(bytes.subarray(6, 8)) + '-' + hex(bytes.subarray(8, 10)) + '-' + hex(bytes.subarray(10, 16));
}

function getRandomValuesWithMathRandom(bytes) {
  var max = Math.pow(2, 8 * bytes.byteLength / bytes.length);

  for (var i = 0; i < bytes.length; i++) {
    bytes[i] = Math.random() * max;
  }
}

var getRandomValues = function () {
  var _crypto;

  if (typeof crypto !== 'undefined' && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.getRandomValues) !== 'undefined') {
    return crypto.getRandomValues.bind(crypto);
  } else if (typeof msCrypto !== 'undefined') {
    return msCrypto.getRandomValues.bind(msCrypto);
  } else {
    return getRandomValuesWithMathRandom;
  }
}();

function getRandomBytes(length) {
  var bytes = new Uint8Array(length);
  getRandomValues(bytes);
  return bytes;
}

function convertErrorToJson(err) {
  var jsonObj = {};
  if (!err) return jsonObj;

  try {
    Object.getOwnPropertyNames(err).forEach(function (key) {
      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);
    });
  } catch (_) {
    return {
      error: 'failed to serialize the error'
    };
  }

  return jsonObj;
}
/**
 * isOnline safely return the navigator.online value for browser env
 * if navigator is not in global object, it always return true
 */

function isOnline() {
  var nav = typeof navigator !== 'undefined' ? navigator : typeof window !== 'undefined' && window.navigator ? window.navigator : undefined;

  if (!nav) {
    console.warn('isOnline failed to access window.navigator and assume browser is online');
    return true;
  } // RN navigator has undefined for onLine


  if (typeof nav.onLine !== 'boolean') {
    return true;
  }

  return nav.onLine;
}
/**
 * listenForConnectionChanges - Adds an event listener fired on browser going online or offline
 */

function addConnectionEventListeners(cb) {
  if (typeof window !== 'undefined' && window.addEventListener) {
    window.addEventListener('offline', cb);
    window.addEventListener('online', cb);
  }
}
function removeConnectionEventListeners(cb) {
  if (typeof window !== 'undefined' && window.removeEventListener) {
    window.removeEventListener('offline', cb);
    window.removeEventListener('online', cb);
  }
}
var axiosParamsSerializer = function axiosParamsSerializer(params) {
  var newParams = [];

  for (var k in params) {
    // Stream backend doesn't treat "undefined" value same as value not being present.
    // So, we need to skip the undefined values.
    if (params[k] === undefined) continue;

    if (Array.isArray(params[k]) || _typeof$1(params[k]) === 'object') {
      newParams.push("".concat(k, "=").concat(encodeURIComponent(JSON.stringify(params[k]))));
    } else {
      newParams.push("".concat(k, "=").concat(encodeURIComponent(params[k])));
    }
  }

  return newParams.join('&');
};
/**
 * formatMessage - Takes the message object. Parses the dates, sets __html
 * and sets the status to received if missing. Returns a message object
 *
 * @param {MessageResponse<ErmisChatGenerics>} message a message object
 *
 */

function formatMessage(message) {
  return _objectSpread$8(_objectSpread$8({}, message), {}, {
    /**
     * @deprecated please use `html`
     */
    __html: message.html,
    // parse the date..
    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,
    created_at: message.created_at ? new Date(message.created_at) : new Date(),
    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),
    status: message.status || 'received'
  });
}
function addToMessageList(messages, message) {
  var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';
  var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var addMessageToList = addIfDoesNotExist || timestampChanged;
  var messageArr = messages; // if created_at has changed, message should be filtered and re-inserted in correct order
  // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp

  if (timestampChanged) {
    messageArr = messageArr.filter(function (msg) {
      return !(msg.id && message.id === msg.id);
    });
  } // Get array length after filtering


  var messageArrayLength = messageArr.length; // for empty list just concat and return unless it's an update or deletion

  if (messageArrayLength === 0 && addMessageToList) {
    return messageArr.concat(message);
  } else if (messageArrayLength === 0) {
    return _toConsumableArray(messageArr);
  }

  var messageTime = message[sortBy].getTime();
  var messageIsNewest = messageArr[messageArrayLength - 1][sortBy].getTime() < messageTime; // if message is newer than last item in the list concat and return unless it's an update or deletion

  if (messageIsNewest && addMessageToList) {
    return messageArr.concat(message);
  } else if (messageIsNewest) {
    return _toConsumableArray(messageArr);
  } // find the closest index to push the new message


  var left = 0;
  var middle = 0;
  var right = messageArrayLength - 1;

  while (left <= right) {
    middle = Math.floor((right + left) / 2);
    if (messageArr[middle][sortBy].getTime() <= messageTime) left = middle + 1;else right = middle - 1;
  } // message already exists and not filtered due to timestampChanged, update and return


  if (!timestampChanged && message.id) {
    if (messageArr[left] && message.id === messageArr[left].id) {
      messageArr[left] = message;
      return _toConsumableArray(messageArr);
    }

    if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {
      messageArr[left - 1] = message;
      return _toConsumableArray(messageArr);
    }
  } // Do not add updated or deleted messages to the list if they do not already exist
  // or have a timestamp change.


  if (addMessageToList) {
    messageArr.splice(left, 0, message);
  }

  return _toConsumableArray(messageArr);
}

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * ChannelState - A container class for the channel state.
 */
var ChannelState = /*#__PURE__*/function () {
  /**
   * Flag which indicates if channel state contain latest/recent messages or no.
   * This flag should be managed by UI sdks using a setter - setIsUpToDate.
   * When false, any new message (received by websocket event - message.new) will not
   * be pushed on to message list.
   */

  /**
   * Disjoint lists of messages
   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages
   * The state manages these lists and merges them when lists overlap
   * The messages array contains the currently active set
   */
  function ChannelState(channel) {
    var _this = this,
        _channel$state;

    _classCallCheck(this, ChannelState);

    _defineProperty(this, "_channel", void 0);

    _defineProperty(this, "watcher_count", void 0);

    _defineProperty(this, "typing", void 0);

    _defineProperty(this, "read", void 0);

    _defineProperty(this, "pinnedMessages", void 0);

    _defineProperty(this, "pending_messages", void 0);

    _defineProperty(this, "threads", void 0);

    _defineProperty(this, "mutedUsers", void 0);

    _defineProperty(this, "watchers", void 0);

    _defineProperty(this, "members", void 0);

    _defineProperty(this, "unreadCount", void 0);

    _defineProperty(this, "membership", void 0);

    _defineProperty(this, "last_message_at", void 0);

    _defineProperty(this, "isUpToDate", void 0);

    _defineProperty(this, "messageSets", []);

    _defineProperty(this, "setIsUpToDate", function (isUpToDate) {
      _this.isUpToDate = isUpToDate;
    });

    _defineProperty(this, "removeMessageFromArray", function (msgArray, msg) {
      var result = msgArray.filter(function (message) {
        return !(!!message.id && !!msg.id && message.id === msg.id);
      });
      return {
        removed: result.length < msgArray.length,
        result: result
      };
    });

    _defineProperty(this, "updateUserMessages", function (user) {
      var _updateUserMessages = function _updateUserMessages(messages, user) {
        for (var i = 0; i < messages.length; i++) {
          var _m$user;

          var m = messages[i];

          if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user.id) {
            messages[i] = _objectSpread$7(_objectSpread$7({}, m), {}, {
              user: user
            });
          }
        }
      };

      _this.messageSets.forEach(function (set) {
        return _updateUserMessages(set.messages, user);
      });

      for (var parentId in _this.threads) {
        _updateUserMessages(_this.threads[parentId], user);
      }

      _updateUserMessages(_this.pinnedMessages, user);
    });

    _defineProperty(this, "deleteUserMessages", function (user) {
      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var _deleteUserMessages = function _deleteUserMessages(messages, user) {
        var hardDelete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        for (var i = 0; i < messages.length; i++) {
          var _m$user2;

          var m = messages[i];

          if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user.id) {
            continue;
          }

          if (hardDelete) {
            /**
             * In case of hard delete, we need to strip down all text, html,
             * attachments and all the custom properties on message
             */
            messages[i] = {
              cid: m.cid,
              created_at: m.created_at,
              deleted_at: user.deleted_at,
              id: m.id,
              latest_reactions: [],
              mentioned_users: [],
              own_reactions: [],
              parent_id: m.parent_id,
              reply_count: m.reply_count,
              status: m.status,
              thread_participants: m.thread_participants,
              type: 'deleted',
              updated_at: m.updated_at,
              user: m.user
            };
          } else {
            messages[i] = _objectSpread$7(_objectSpread$7({}, m), {}, {
              type: 'deleted',
              deleted_at: user.deleted_at
            });
          }
        }
      };

      _this.messageSets.forEach(function (set) {
        return _deleteUserMessages(set.messages, user, hardDelete);
      });

      for (var parentId in _this.threads) {
        _deleteUserMessages(_this.threads[parentId], user, hardDelete);
      }

      _deleteUserMessages(_this.pinnedMessages, user, hardDelete);
    });

    this._channel = channel;
    this.watcher_count = 0;
    this.typing = {};
    this.read = {};
    this.initMessages();
    this.pinnedMessages = [];
    this.pending_messages = [];
    this.threads = {}; // a list of users to hide messages from

    this.mutedUsers = [];
    this.watchers = {};
    this.members = {};
    this.membership = {};
    this.unreadCount = 0;
    /**
     * Flag which indicates if channel state contain latest/recent messages or no.
     * This flag should be managed by UI sdks using a setter - setIsUpToDate.
     * When false, any new message (received by websocket event - message.new) will not
     * be pushed on to message list.
     */

    this.isUpToDate = true;
    this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;
  }

  _createClass(ChannelState, [{
    key: "messages",
    get: function get() {
      var _this$messageSets$fin;

      return ((_this$messageSets$fin = this.messageSets.find(function (s) {
        return s.isCurrent;
      })) === null || _this$messageSets$fin === void 0 ? void 0 : _this$messageSets$fin.messages) || [];
    },
    set: function set(messages) {
      var index = this.messageSets.findIndex(function (s) {
        return s.isCurrent;
      });
      this.messageSets[index].messages = messages;
    }
    /**
     * The list of latest messages
     * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)
     */

  }, {
    key: "latestMessages",
    get: function get() {
      var _this$messageSets$fin2;

      return ((_this$messageSets$fin2 = this.messageSets.find(function (s) {
        return s.isLatest;
      })) === null || _this$messageSets$fin2 === void 0 ? void 0 : _this$messageSets$fin2.messages) || [];
    },
    set: function set(messages) {
      var index = this.messageSets.findIndex(function (s) {
        return s.isLatest;
      });
      this.messageSets[index].messages = messages;
    }
    /**
     * addMessageSorted - Add a message to the state
     *
     * @param {MessageResponse<ErmisChatGenerics>} newMessage A new message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)
     */

  }, {
    key: "addMessageSorted",
    value: function addMessageSorted(newMessage) {
      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'latest';
      return this.addMessagesSorted([newMessage], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);
    }
    /**
     * formatMessage - Takes the message object. Parses the dates, sets __html
     * and sets the status to received if missing. Returns a message object
     *
     * @param {MessageResponse<ErmisChatGenerics>} message a message object
     *
     */

  }, {
    key: "formatMessage",
    value: function formatMessage(message) {
      return _objectSpread$7(_objectSpread$7({}, message), {}, {
        /**
         * @deprecated please use `html`
         */
        __html: message.html,
        // parse the date..
        pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,
        created_at: message.created_at ? new Date(message.created_at) : new Date(),
        updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),
        status: message.status || 'received'
      });
    }
    /**
     * addMessagesSorted - Add the list of messages to state and resorts the messages
     *
     * @param {Array<MessageResponse<ErmisChatGenerics>>} newMessages A list of messages
     * @param {boolean} timestampChanged Whether updating messages with changed created_at value.
     * @param {boolean} initializing Whether channel is being initialized.
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)
     *
     */

  }, {
    key: "addMessagesSorted",
    value: function addMessagesSorted(newMessages) {
      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var initializing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'current';

      var _this$findTargetMessa = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist),
          messagesToAdd = _this$findTargetMessa.messagesToAdd,
          targetMessageSetIndex = _this$findTargetMessa.targetMessageSetIndex;

      for (var i = 0; i < messagesToAdd.length; i += 1) {
        var isFromShadowBannedUser = messagesToAdd[i].shadowed;

        if (isFromShadowBannedUser) {
          continue;
        } // If message is already formatted we can skip the tasks below
        // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets
        // This will be also true for message previews used by some SDKs


        var isMessageFormatted = messagesToAdd[i].created_at instanceof Date;
        var message = void 0;

        if (isMessageFormatted) {
          message = messagesToAdd[i];
        } else {
          var _this$_channel;

          message = this.formatMessage(messagesToAdd[i]);

          if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {
            /**
             * Store the reference to user for this channel, so that when we have to
             * handle updates to user, we can use the reference map, to determine which
             * channels need to be updated with updated user object.
             */
            this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);
          }

          if (initializing && message.id && this.threads[message.id]) {
            // If we are initializing the state of channel (e.g., in case of connection recovery),
            // then in that case we remove thread related to this message from threads object.
            // This way we can ensure that we don't have any stale data in thread object
            // and consumer can refetch the replies.
            delete this.threads[message.id];
          }

          if (!this.last_message_at) {
            this.last_message_at = new Date(message.created_at.getTime());
          }

          if (message.created_at.getTime() > this.last_message_at.getTime()) {
            this.last_message_at = new Date(message.created_at.getTime());
          }
        } // update or append the messages...


        var parentID = message.parent_id; // add to the given message set

        if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {
          this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, 'created_at', addIfDoesNotExist);
        }
        /**
         * Add message to thread if applicable and the message
         * was added when querying for replies, or the thread already exits.
         * This is to prevent the thread state from getting out of sync if
         * a thread message is shown in channel but older than the newest thread
         * message. This situation can result in a thread state where a random
         * message is "oldest" message, and newer messages are therefore not loaded.
         * This can also occur if an old thread message is updated.
         */


        if (parentID && !initializing) {
          var thread = this.threads[parentID] || [];

          var threadMessages = this._addToMessageList(thread, message, timestampChanged, 'created_at', addIfDoesNotExist);

          this.threads[parentID] = threadMessages;
        }
      }

      return {
        messageSet: this.messageSets[targetMessageSetIndex]
      };
    }
    /**
     * addPinnedMessages - adds messages in pinnedMessages property
     *
     * @param {Array<MessageResponse<ErmisChatGenerics>>} pinnedMessages A list of pinned messages
     *
     */

  }, {
    key: "addPinnedMessages",
    value: function addPinnedMessages(pinnedMessages) {
      for (var i = 0; i < pinnedMessages.length; i += 1) {
        this.addPinnedMessage(pinnedMessages[i]);
      }
    }
    /**
     * addPinnedMessage - adds message in pinnedMessages
     *
     * @param {MessageResponse<ErmisChatGenerics>} pinnedMessage message to update
     *
     */

  }, {
    key: "addPinnedMessage",
    value: function addPinnedMessage(pinnedMessage) {
      this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, 'pinned_at');
    }
    /**
     * removePinnedMessage - removes pinned message from pinnedMessages
     *
     * @param {MessageResponse<ErmisChatGenerics>} message message to remove
     *
     */

  }, {
    key: "removePinnedMessage",
    value: function removePinnedMessage(message) {
      var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message),
          result = _this$removeMessageFr.result;

      this.pinnedMessages = result;
    }
  }, {
    key: "addReaction",
    value: function addReaction(reaction, message, enforce_unique) {
      var _this2 = this;

      if (!message) return;
      var messageWithReaction = message;

      this._updateMessage(message, function (msg) {
        messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);
        return _this2.formatMessage(messageWithReaction);
      });

      return messageWithReaction;
    }
  }, {
    key: "_addOwnReactionToMessage",
    value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {
      if (enforce_unique) {
        ownReactions = [];
      } else {
        ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);
      }

      ownReactions = ownReactions || [];

      if (this._channel.getClient().userID === reaction.user_id) {
        ownReactions.push(reaction);
      }

      return ownReactions;
    }
  }, {
    key: "_removeOwnReactionFromMessage",
    value: function _removeOwnReactionFromMessage(ownReactions, reaction) {
      if (ownReactions) {
        return ownReactions.filter(function (item) {
          return item.user_id !== reaction.user_id || item.type !== reaction.type;
        });
      }

      return ownReactions;
    }
  }, {
    key: "removeReaction",
    value: function removeReaction(reaction, message) {
      var _this3 = this;

      if (!message) return;
      var messageWithReaction = message;

      this._updateMessage(message, function (msg) {
        messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);
        return _this3.formatMessage(messageWithReaction);
      });

      return messageWithReaction;
    }
  }, {
    key: "removeQuotedMessageReferences",
    value: function removeQuotedMessageReferences(message) {
      var _this4 = this;

      var parseMessage = function parseMessage(m) {
        var _m$pinned_at, _m$updated_at;

        return _objectSpread$7(_objectSpread$7({}, m), {}, {
          created_at: m.created_at.toISOString(),
          pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toISOString(),
          updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toISOString()
        });
      };

      this.messageSets.forEach(function (set) {
        var updatedMessages = set.messages.filter(function (msg) {
          return msg.quoted_message_id === message.id;
        }).map(parseMessage).map(function (msg) {
          return _objectSpread$7(_objectSpread$7({}, msg), {}, {
            quoted_message: _objectSpread$7(_objectSpread$7({}, message), {}, {
              attachments: []
            })
          });
        });

        _this4.addMessagesSorted(updatedMessages, true);
      });
    }
    /**
     * Updates all instances of given message in channel state
     * @param message
     * @param updateFunc
     */

  }, {
    key: "_updateMessage",
    value: function _updateMessage(message, updateFunc) {
      var parent_id = message.parent_id,
          show_in_channel = message.show_in_channel,
          pinned = message.pinned;

      if (parent_id && this.threads[parent_id]) {
        var thread = this.threads[parent_id];
        var msgIndex = thread.findIndex(function (msg) {
          return msg.id === message.id;
        });

        if (msgIndex !== -1) {
          thread[msgIndex] = updateFunc(thread[msgIndex]);
          this.threads[parent_id] = thread;
        }
      }

      if (!show_in_channel && !parent_id || show_in_channel) {
        var messageSetIndex = this.findMessageSetIndex(message);

        if (messageSetIndex !== -1) {
          var _msgIndex = this.messageSets[messageSetIndex].messages.findIndex(function (msg) {
            return msg.id === message.id;
          });

          if (_msgIndex !== -1) {
            this.messageSets[messageSetIndex].messages[_msgIndex] = updateFunc(this.messageSets[messageSetIndex].messages[_msgIndex]);
          }
        }
      }

      if (pinned) {
        var _msgIndex2 = this.pinnedMessages.findIndex(function (msg) {
          return msg.id === message.id;
        });

        if (_msgIndex2 !== -1) {
          this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);
        }
      }
    }
    /**
     * Setter for isUpToDate.
     *
     * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.
     *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.
     *                    When false, any new message (received by websocket event - message.new) will not
     *                    be pushed on to message list.
     */

  }, {
    key: "_addToMessageList",
    value:
    /**
     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found
     *
     * @param {Array<ReturnType<ChannelState<ErmisChatGenerics>['formatMessage']>>} messages A list of messages
     * @param message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     * @param {string} sortBy field name to use to sort the messages by
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     */
    function _addToMessageList(messages, message) {
      var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';
      var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);
    }
    /**
     * removeMessage - Description
     *
     * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.
     *
     * @return {boolean} Returns if the message was removed
     */

  }, {
    key: "removeMessage",
    value: function removeMessage(messageToRemove) {
      var isRemoved = false;

      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {
        var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove),
            removed = _this$removeMessageFr2.removed,
            threadMessages = _this$removeMessageFr2.result;

        this.threads[messageToRemove.parent_id] = threadMessages;
        isRemoved = removed;
      } else {
        var _messageToRemove$mess;

        var messageSetIndex = (_messageToRemove$mess = messageToRemove.messageSetIndex) !== null && _messageToRemove$mess !== void 0 ? _messageToRemove$mess : this.findMessageSetIndex(messageToRemove);

        if (messageSetIndex !== -1) {
          var _this$removeMessageFr3 = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove),
              _removed = _this$removeMessageFr3.removed,
              messages = _this$removeMessageFr3.result;

          this.messageSets[messageSetIndex].messages = messages;
          isRemoved = _removed;
        }
      }

      return isRemoved;
    }
  }, {
    key: "filterErrorMessages",
    value:
    /**
     * filterErrorMessages - Removes error messages from the channel state.
     *
     */
    function filterErrorMessages() {
      var filteredMessages = this.latestMessages.filter(function (message) {
        return message.type !== 'error';
      });
      this.latestMessages = filteredMessages;
    }
    /**
     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds
     */

  }, {
    key: "clean",
    value: function clean() {
      var now = new Date(); // prevent old users from showing up as typing

      for (var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            userID = _Object$entries$_i[0],
            lastEvent = _Object$entries$_i[1];

        var receivedAt = typeof lastEvent.received_at === 'string' ? new Date(lastEvent.received_at) : lastEvent.received_at || new Date();

        if (now.getTime() - receivedAt.getTime() > 7000) {
          delete this.typing[userID];

          this._channel.getClient().dispatchEvent({
            cid: this._channel.cid,
            type: 'typing.stop',
            user: {
              id: userID
            }
          });
        }
      }
    }
  }, {
    key: "clearMessages",
    value: function clearMessages() {
      this.initMessages();
      this.pinnedMessages = [];
    }
  }, {
    key: "initMessages",
    value: function initMessages() {
      this.messageSets = [{
        messages: [],
        isLatest: true,
        isCurrent: true
      }];
    }
    /**
     * loadMessageIntoState - Loads a given message (and messages around it) into the state
     *
     * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages
     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply
     */

  }, {
    key: "loadMessageIntoState",
    value: function () {
      var _loadMessageIntoState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(messageId, parentMessageId) {
        var _this$threads$parentM;

        var limit,
            messageSetIndex,
            switchedToMessageSet,
            loadedMessageThread,
            messageIdToFind,
            _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                limit = _args.length > 2 && _args[2] !== undefined ? _args[2] : 25;
                switchedToMessageSet = false;
                loadedMessageThread = false;
                messageIdToFind = parentMessageId || messageId;

                if (!(messageId === 'latest')) {
                  _context.next = 10;
                  break;
                }

                if (!(this.messages === this.latestMessages)) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return");

              case 7:
                messageSetIndex = this.messageSets.findIndex(function (s) {
                  return s.isLatest;
                });
                _context.next = 11;
                break;

              case 10:
                messageSetIndex = this.findMessageSetIndex({
                  id: messageIdToFind
                });

              case 11:
                if (messageSetIndex !== -1) {
                  this.switchToMessageSet(messageSetIndex);
                  switchedToMessageSet = true;
                }

                loadedMessageThread = !parentMessageId || !!((_this$threads$parentM = this.threads[parentMessageId]) !== null && _this$threads$parentM !== void 0 && _this$threads$parentM.find(function (m) {
                  return m.id === messageId;
                }));

                if (!(switchedToMessageSet && loadedMessageThread)) {
                  _context.next = 15;
                  break;
                }

                return _context.abrupt("return");

              case 15:
                if (switchedToMessageSet) {
                  _context.next = 18;
                  break;
                }

                _context.next = 18;
                return this._channel.query({
                  messages: {
                    id_around: messageIdToFind,
                    limit: limit
                  }
                }, 'new');

              case 18:
                if (!(!loadedMessageThread && parentMessageId)) {
                  _context.next = 21;
                  break;
                }

                _context.next = 21;
                return this._channel.getReplies(parentMessageId, {
                  id_around: messageId,
                  limit: limit
                });

              case 21:
                messageSetIndex = this.findMessageSetIndex({
                  id: messageIdToFind
                });

                if (messageSetIndex !== -1) {
                  this.switchToMessageSet(messageSetIndex);
                }

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadMessageIntoState(_x, _x2) {
        return _loadMessageIntoState.apply(this, arguments);
      }

      return loadMessageIntoState;
    }()
    /**
     * findMessage - Finds a message inside the state
     *
     * @param {string} messageId The id of the message
     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply
     *
     * @return {ReturnType<ChannelState<ErmisChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found
     */

  }, {
    key: "findMessage",
    value: function findMessage(messageId, parentMessageId) {
      if (parentMessageId) {
        var messages = this.threads[parentMessageId];

        if (!messages) {
          return undefined;
        }

        return messages.find(function (m) {
          return m.id === messageId;
        });
      }

      var messageSetIndex = this.findMessageSetIndex({
        id: messageId
      });

      if (messageSetIndex === -1) {
        return undefined;
      }

      return this.messageSets[messageSetIndex].messages.find(function (m) {
        return m.id === messageId;
      });
    }
  }, {
    key: "switchToMessageSet",
    value: function switchToMessageSet(index) {
      var currentMessages = this.messageSets.find(function (s) {
        return s.isCurrent;
      });

      if (!currentMessages) {
        return;
      }

      currentMessages.isCurrent = false;
      this.messageSets[index].isCurrent = true;
    }
  }, {
    key: "areMessageSetsOverlap",
    value: function areMessageSetsOverlap(messages1, messages2) {
      return messages1.some(function (m1) {
        return messages2.find(function (m2) {
          return m1.id === m2.id;
        });
      });
    }
  }, {
    key: "findMessageSetIndex",
    value: function findMessageSetIndex(message) {
      return this.messageSets.findIndex(function (set) {
        return !!set.messages.find(function (m) {
          return m.id === message.id;
        });
      });
    }
  }, {
    key: "findTargetMessageSet",
    value: function findTargetMessageSet(newMessages) {
      var _this5 = this;

      var addIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'current';
      var messagesToAdd = newMessages;
      var targetMessageSetIndex;

      if (addIfDoesNotExist) {
        var overlappingMessageSetIndices = this.messageSets.map(function (_, i) {
          return i;
        }).filter(function (i) {
          return _this5.areMessageSetsOverlap(_this5.messageSets[i].messages, newMessages);
        });

        switch (messageSetToAddToIfDoesNotExist) {
          case 'new':
            if (overlappingMessageSetIndices.length > 0) {
              targetMessageSetIndex = overlappingMessageSetIndices[0]; // No new message set is created if newMessages only contains thread replies
            } else if (newMessages.some(function (m) {
              return !m.parent_id;
            })) {
              this.messageSets.push({
                messages: [],
                isCurrent: false,
                isLatest: false
              });
              targetMessageSetIndex = this.messageSets.length - 1;
            }

            break;

          case 'current':
            targetMessageSetIndex = this.messageSets.findIndex(function (s) {
              return s.isCurrent;
            });
            break;

          case 'latest':
            targetMessageSetIndex = this.messageSets.findIndex(function (s) {
              return s.isLatest;
            });
            break;

          default:
            targetMessageSetIndex = -1;
        } // when merging the target set will be the first one from the overlapping message sets


        var mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];

        var mergeSourceMessageSetIndices = _toConsumableArray(overlappingMessageSetIndices);

        if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {
          mergeSourceMessageSetIndices.push(targetMessageSetIndex);
        } // merge message sets


        if (mergeSourceMessageSetIndices.length > 0) {
          var target = this.messageSets[mergeTargetMessageSetIndex];
          var sources = this.messageSets.filter(function (_, i) {
            return mergeSourceMessageSetIndices.indexOf(i) !== -1;
          });
          sources.forEach(function (messageSet) {
            target.isLatest = target.isLatest || messageSet.isLatest;
            target.isCurrent = target.isCurrent || messageSet.isCurrent;
            messagesToAdd = [].concat(_toConsumableArray(messagesToAdd), _toConsumableArray(messageSet.messages));
          });
          sources.forEach(function (s) {
            return _this5.messageSets.splice(_this5.messageSets.indexOf(s), 1);
          });
          var overlappingMessageSetIndex = this.messageSets.findIndex(function (s) {
            return _this5.areMessageSetsOverlap(s.messages, newMessages);
          });
          targetMessageSetIndex = overlappingMessageSetIndex;
        }
      } else {
        // assumes that all new messages belong to the same set
        targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);
      }

      return {
        targetMessageSetIndex: targetMessageSetIndex,
        messagesToAdd: messagesToAdd
      };
    }
  }]);

  return ChannelState;
}();

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike  ) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Channel - The Channel class manages it's own state.
 */
var Channel = /*#__PURE__*/function () {
  /**  */

  /**
   * This boolean is a vague indication of weather the channel exists on chat backend.
   *
   * If the value is true, then that means the channel has been initialized by either calling
   * channel.create() or channel.query() or channel.watch().
   *
   * If the value is false, then channel may or may not exist on the backend. The only way to ensure
   * is by calling channel.create() or channel.query() or channel.watch().
   */

  /**
   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.
   * Static state indicates that channel exists on backend, but is not being watched yet.
   */

  /**
   * constructor - Create a channel
   *
   * @param {ErmisChat<ErmisChatGenerics>} client the chat client
   * @param {string} type  the type of channel
   * @param {string} [id]  the id of the chat
   * @param {ChannelData<ErmisChatGenerics>} data any additional custom params
   *
   * @return {Channel<ErmisChatGenerics>} Returns a new uninitialized channel
   */
  function Channel(client, type, id, data) {
    var _this = this;

    _classCallCheck(this, Channel);

    _defineProperty(this, "_client", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "_data", void 0);

    _defineProperty(this, "cid", void 0);

    _defineProperty(this, "listeners", void 0);

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "initialized", void 0);

    _defineProperty(this, "offlineMode", void 0);

    _defineProperty(this, "lastKeyStroke", void 0);

    _defineProperty(this, "lastTypingEvent", void 0);

    _defineProperty(this, "isTyping", void 0);

    _defineProperty(this, "disconnected", void 0);

    _defineProperty(this, "create", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var defaultOptions;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                defaultOptions = _objectSpread$6(_objectSpread$6({}, options), {}, {
                  watch: false,
                  state: false,
                  presence: false
                });
                _context.next = 3;
                return _this.query(defaultOptions, 'latest');

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(this, "_callChannelListeners", function (event) {
      var channel = _this; // gather and call the listeners

      var listeners = [];

      if (channel.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray(channel.listeners.all));
      }

      if (channel.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray(channel.listeners[event.type]));
      } // call the event and send it to the listeners


      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {
        var listener = _listeners[_i];

        if (typeof listener !== 'string') {
          listener(event);
        }
      }
    });

    _defineProperty(this, "_channelURL", function () {
      if (!_this.id) {
        throw new Error('channel id is not defined');
      }

      return "".concat(_this.getClient().baseURL, "/channels/").concat(_this.type, "/").concat(_this.id);
    });

    var validTypeRe = /^[\w_-]+$/;
    var validIDRe = /^[\w!_-]+$/;

    if (!validTypeRe.test(type)) {
      throw new Error("Invalid chat type ".concat(type, ", letters, numbers and \"_-\" are allowed"));
    }

    if (typeof id === 'string' && !validIDRe.test(id)) {
      throw new Error("Invalid chat id ".concat(id, ", letters, numbers and \"!-_\" are allowed"));
    }

    this._client = client;
    this.type = type;
    this.id = id; // used by the frontend, gets updated:

    this.data = data; // this._data is used for the requests...

    this._data = _objectSpread$6({}, data);
    this.cid = "".concat(type, ":").concat(id);
    this.listeners = {}; // perhaps the state variable should be private

    this.state = new ChannelState(this);
    this.initialized = false;
    this.offlineMode = false;
    this.lastTypingEvent = null;
    this.isTyping = false;
    this.disconnected = false;
  }
  /**
   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error
   *
   * @return {ErmisChat<ErmisChatGenerics>}
   */


  _createClass(Channel, [{
    key: "getClient",
    value: function getClient() {
      if (this.disconnected === true) {
        throw Error("You can't use a channel after client.disconnect() was called");
      }

      return this._client;
    }
    /**
     * getConfig - Get the config for this channel id (cid)
     *
     * @return {Record<string, unknown>}
     */

  }, {
    key: "getConfig",
    value: function getConfig() {
      var client = this.getClient();
      return client.configs[this.cid];
    }
    /**
     * sendMessage - Send a message to this channel
     *
     * @param {Message<ErmisChatGenerics>} message The Message object
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     * @param {boolean} [options.skip_push] Skip sending push notifications
     * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.
     * @param {boolean} [options.pending] Make this message pending
     * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message
     * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests
     *
     * @return {Promise<SendMessageAPIResponse<ErmisChatGenerics>>} The Server Response
     */

  }, {
    key: "sendMessage",
    value: function () {
      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message, options) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getClient().post(this._channelURL() + '/message', _objectSpread$6({
                  message: message
                }, options));

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function sendMessage(_x2, _x3) {
        return _sendMessage.apply(this, arguments);
      }

      return sendMessage;
    }()
  }, {
    key: "sendFile",
    value: function sendFile(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/file"), uri, name, contentType, user);
    }
  }, {
    key: "sendImage",
    value: function sendImage(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/image"), uri, name, contentType, user);
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/file"), {
        url: url
      });
    }
  }, {
    key: "deleteImage",
    value: function deleteImage(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/image"), {
        url: url
      });
    }
    /**
     * sendEvent - Send an event on this channel
     *
     * @param {Event<ErmisChatGenerics>} event for example {type: 'message.read'}
     *
     * @return {Promise<EventAPIResponse<ErmisChatGenerics>>} The Server Response
     */

  }, {
    key: "sendEvent",
    value: function () {
      var _sendEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._checkInitialized();

                _context3.next = 3;
                return this.getClient().post(this._channelURL() + '/event', {
                  event: event
                });

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function sendEvent(_x4) {
        return _sendEvent.apply(this, arguments);
      }

      return sendEvent;
    }()
    /**
     * search - Query messages
     *
     * @param {MessageFilters<ErmisChatGenerics> | string}  query search query or object MongoDB style filters
     * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<ErmisChatGenerics>}} options Option object, {user_id: 'tommaso'}
     *
     * @return {Promise<SearchAPIResponse<ErmisChatGenerics>>} search messages response
     */

  }, {
    key: "search",
    value: function () {
      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query) {
        var options,
            payload,
            _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};

                if (!(options.offset && options.next)) {
                  _context4.next = 3;
                  break;
                }

                throw Error("Cannot specify offset with next");

              case 3:
                // Return a list of channels
                payload = _objectSpread$6(_objectSpread$6({
                  filter_conditions: {
                    cid: this.cid
                  }
                }, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined
                });

                if (!(typeof query === 'string')) {
                  _context4.next = 8;
                  break;
                }

                payload.query = query;
                _context4.next = 13;
                break;

              case 8:
                if (!(_typeof$1(query) === 'object')) {
                  _context4.next = 12;
                  break;
                }

                payload.message_filter_conditions = query;
                _context4.next = 13;
                break;

              case 12:
                throw Error("Invalid type ".concat(_typeof$1(query), " for query parameter"));

              case 13:
                _context4.next = 15;
                return this.getClient().wsPromise;

              case 15:
                _context4.next = 17;
                return this.getClient().get(this.getClient().baseURL + '/search', {
                  payload: payload
                });

              case 17:
                return _context4.abrupt("return", _context4.sent);

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function search(_x5) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
    /**
     * queryMembers - Query Members
     *
     * @param {UserFilters<ErmisChatGenerics>}  filterConditions object MongoDB style filters
     * @param {MemberSort<ErmisChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]
     * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}
     *
     * @return {Promise<ChannelMemberAPIResponse<ErmisChatGenerics>>} Query Members response
     */

  }, {
    key: "queryMembers",
    value: function () {
      var _queryMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(filterConditions) {
        var _this$data;

        var sort,
            options,
            id,
            type,
            members,
            _args5 = arguments;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];
                options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                type = this.type;

                if (this.id) {
                  id = this.id;
                } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {
                  members = this.data.members;
                } // Return a list of members


                _context5.next = 6;
                return this.getClient().get(this.getClient().baseURL + '/members', {
                  payload: _objectSpread$6({
                    type: type,
                    id: id,
                    members: members,
                    sort: normalizeQuerySort(sort),
                    filter_conditions: filterConditions
                  }, options)
                });

              case 6:
                return _context5.abrupt("return", _context5.sent);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function queryMembers(_x6) {
        return _queryMembers.apply(this, arguments);
      }

      return queryMembers;
    }()
    /**
     * sendReaction - Send a reaction about a message
     *
     * @param {string} messageID the message id
     * @param {Reaction<ErmisChatGenerics>} reaction the reaction object for instance {type: 'love'}
     * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications
     *
     * @return {Promise<ReactionAPIResponse<ErmisChatGenerics>>} The Server Response
     */

  }, {
    key: "sendReaction",
    value: function () {
      var _sendReaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(messageID, reaction, options) {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (messageID) {
                  _context6.next = 2;
                  break;
                }

                throw Error("Message id is missing");

              case 2:
                if (!(!reaction || Object.keys(reaction).length === 0)) {
                  _context6.next = 4;
                  break;
                }

                throw Error("Reaction object is missing");

              case 4:
                _context6.next = 6;
                return this.getClient().post(this.getClient().baseURL + "/messages/".concat(messageID, "/reaction"), _objectSpread$6({
                  reaction: reaction
                }, options));

              case 6:
                return _context6.abrupt("return", _context6.sent);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function sendReaction(_x7, _x8, _x9) {
        return _sendReaction.apply(this, arguments);
      }

      return sendReaction;
    }()
    /**
     * deleteReaction - Delete a reaction by user and type
     *
     * @param {string} messageID the id of the message from which te remove the reaction
     * @param {string} reactionType the type of reaction that should be removed
     * @param {string} [user_id] the id of the user (used only for server side request) default null
     *
     * @return {Promise<ReactionAPIResponse<ErmisChatGenerics>>} The Server Response
     */

  }, {
    key: "deleteReaction",
    value: function deleteReaction(messageID, reactionType, user_id) {
      this._checkInitialized();

      if (!reactionType || !messageID) {
        throw Error('Deleting a reaction requires specifying both the message and reaction type');
      }

      var url = this.getClient().baseURL + "/messages/".concat(messageID, "/reaction/").concat(reactionType); //provided when server side request

      if (user_id) {
        return this.getClient().delete(url, {
          user_id: user_id
        });
      }

      return this.getClient().delete(url, {});
    }
    /**
     * update - Edit the channel's custom properties
     *
     * @param {ChannelData<ErmisChatGenerics>} channelData The object to update the custom properties of this channel with
     * @param {Message<ErmisChatGenerics>} [updateMessage] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "update",
    value: function () {
      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var channelData,
            updateMessage,
            options,
            reserved,
            _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                channelData = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                updateMessage = _args7.length > 1 ? _args7[1] : undefined;
                options = _args7.length > 2 ? _args7[2] : undefined;
                // Strip out reserved names that will result in API errors.
                reserved = ['config', 'cid', 'created_by', 'id', 'member_count', 'type', 'created_at', 'updated_at', 'last_message_at', 'own_capabilities'];
                reserved.forEach(function (key) {
                  delete channelData[key];
                });
                _context7.next = 7;
                return this._update(_objectSpread$6({
                  message: updateMessage,
                  data: channelData
                }, options));

              case 7:
                return _context7.abrupt("return", _context7.sent);

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function update() {
        return _update2.apply(this, arguments);
      }

      return update;
    }()
    /**
     * updatePartial - partial update channel properties
     *
     * @param {PartialUpdateChannel<ErmisChatGenerics>} partial update request
     *
     * @return {Promise<PartialUpdateChannelAPIResponse<ErmisChatGenerics>>}
     */

  }, {
    key: "updatePartial",
    value: function () {
      var _updatePartial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(update) {
        var _this$data2, _this$data3;

        var data, areCapabilitiesChanged;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.getClient().patch(this._channelURL(), update);

              case 2:
                data = _context8.sent;
                areCapabilitiesChanged = _toConsumableArray(data.channel.own_capabilities || []).sort().join() !== _toConsumableArray(Array.isArray((_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.own_capabilities) ? (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.own_capabilities : []).sort().join();
                this.data = data.channel; // If the capabiltities are changed, we trigger the `capabilities.changed` event.

                if (areCapabilitiesChanged) {
                  this.getClient().dispatchEvent({
                    type: 'capabilities.changed',
                    cid: this.cid,
                    own_capabilities: data.channel.own_capabilities
                  });
                }

                return _context8.abrupt("return", data);

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function updatePartial(_x10) {
        return _updatePartial.apply(this, arguments);
      }

      return updatePartial;
    }()
    /**
     * enableSlowMode - enable slow mode
     *
     * @param {number} coolDownInterval the cooldown interval in seconds
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "enableSlowMode",
    value: function () {
      var _enableSlowMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(coolDownInterval) {
        var data;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getClient().post(this._channelURL(), {
                  cooldown: coolDownInterval
                });

              case 2:
                data = _context9.sent;
                this.data = data.channel;
                return _context9.abrupt("return", data);

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function enableSlowMode(_x11) {
        return _enableSlowMode.apply(this, arguments);
      }

      return enableSlowMode;
    }()
    /**
     * disableSlowMode - disable slow mode
     *
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "disableSlowMode",
    value: function () {
      var _disableSlowMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var data;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getClient().post(this._channelURL(), {
                  cooldown: 0
                });

              case 2:
                data = _context10.sent;
                this.data = data.channel;
                return _context10.abrupt("return", data);

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function disableSlowMode() {
        return _disableSlowMode.apply(this, arguments);
      }

      return disableSlowMode;
    }()
    /**
     * delete - Delete the channel. Messages are permanently removed.
     *
     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not
     *
     * @return {Promise<DeleteChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var options,
            _args11 = arguments;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
                _context11.next = 3;
                return this.getClient().delete(this._channelURL(), _objectSpread$6({}, options));

              case 3:
                return _context11.abrupt("return", _context11.sent);

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * truncate - Removes all messages from the channel
     * @param {TruncateOptions<ErmisChatGenerics>} [options] Defines truncation options
     * @return {Promise<TruncateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "truncate",
    value: function () {
      var _truncate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var options,
            _args12 = arguments;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
                _context12.next = 3;
                return this.getClient().post(this._channelURL() + '/truncate', options);

              case 3:
                return _context12.abrupt("return", _context12.sent);

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function truncate() {
        return _truncate.apply(this, arguments);
      }

      return truncate;
    }()
    /**
     * acceptInvite - accept invitation to the channel
     *
     * @param {InviteOptions<ErmisChatGenerics>} [options] The object to update the custom properties of this channel with
     *
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "acceptInvite",
    value: function () {
      var _acceptInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var options,
            _args13 = arguments;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                _context13.next = 3;
                return this._update(_objectSpread$6({
                  accept_invite: true
                }, options));

              case 3:
                return _context13.abrupt("return", _context13.sent);

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function acceptInvite() {
        return _acceptInvite.apply(this, arguments);
      }

      return acceptInvite;
    }()
    /**
     * rejectInvite - reject invitation to the channel
     *
     * @param {InviteOptions<ErmisChatGenerics>} [options] The object to update the custom properties of this channel with
     *
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "rejectInvite",
    value: function () {
      var _rejectInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        var options,
            _args14 = arguments;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
                _context14.next = 3;
                return this._update(_objectSpread$6({
                  reject_invite: true
                }, options));

              case 3:
                return _context14.abrupt("return", _context14.sent);

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function rejectInvite() {
        return _rejectInvite.apply(this, arguments);
      }

      return rejectInvite;
    }()
    /**
     * addMembers - add members to the channel
     *
     * @param {{user_id: string, channel_role?: Role}[]} members An array of members to add to the channel
     * @param {Message<ErmisChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "addMembers",
    value: function () {
      var _addMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(members, message) {
        var options,
            _args15 = arguments;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};
                _context15.next = 3;
                return this._update(_objectSpread$6({
                  add_members: members,
                  message: message
                }, options));

              case 3:
                return _context15.abrupt("return", _context15.sent);

              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function addMembers(_x12, _x13) {
        return _addMembers.apply(this, arguments);
      }

      return addMembers;
    }()
    /**
     * addModerators - add moderators to the channel
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<ErmisChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "addModerators",
    value: function () {
      var _addModerators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(members, message) {
        var options,
            _args16 = arguments;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                options = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};
                _context16.next = 3;
                return this._update(_objectSpread$6({
                  add_moderators: members,
                  message: message
                }, options));

              case 3:
                return _context16.abrupt("return", _context16.sent);

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function addModerators(_x14, _x15) {
        return _addModerators.apply(this, arguments);
      }

      return addModerators;
    }()
    /**
     * assignRoles - sets member roles in a channel
     *
     * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments
     * @param {Message<ErmisChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "assignRoles",
    value: function () {
      var _assignRoles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(roles, message) {
        var options,
            _args17 = arguments;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};
                _context17.next = 3;
                return this._update(_objectSpread$6({
                  assign_roles: roles,
                  message: message
                }, options));

              case 3:
                return _context17.abrupt("return", _context17.sent);

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function assignRoles(_x16, _x17) {
        return _assignRoles.apply(this, arguments);
      }

      return assignRoles;
    }()
    /**
     * inviteMembers - invite members to the channel
     *
     * @param {{user_id: string, channel_role?: Role}[]} members An array of members to invite to the channel
     * @param {Message<ErmisChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "inviteMembers",
    value: function () {
      var _inviteMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(members, message) {
        var options,
            _args18 = arguments;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};
                _context18.next = 3;
                return this._update(_objectSpread$6({
                  invites: members,
                  message: message
                }, options));

              case 3:
                return _context18.abrupt("return", _context18.sent);

              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function inviteMembers(_x18, _x19) {
        return _inviteMembers.apply(this, arguments);
      }

      return inviteMembers;
    }()
    /**
     * removeMembers - remove members from channel
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<ErmisChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "removeMembers",
    value: function () {
      var _removeMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(members, message) {
        var options,
            _args19 = arguments;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};
                _context19.next = 3;
                return this._update(_objectSpread$6({
                  remove_members: members,
                  message: message
                }, options));

              case 3:
                return _context19.abrupt("return", _context19.sent);

              case 4:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function removeMembers(_x20, _x21) {
        return _removeMembers.apply(this, arguments);
      }

      return removeMembers;
    }()
    /**
     * demoteModerators - remove moderator role from channel members
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<ErmisChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "demoteModerators",
    value: function () {
      var _demoteModerators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(members, message) {
        var options,
            _args20 = arguments;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};
                _context20.next = 3;
                return this._update(_objectSpread$6({
                  demote_moderators: members,
                  message: message
                }, options));

              case 3:
                return _context20.abrupt("return", _context20.sent);

              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function demoteModerators(_x22, _x23) {
        return _demoteModerators.apply(this, arguments);
      }

      return demoteModerators;
    }()
    /**
     * _update - executes channel update request
     * @param payload Object Update Channel payload
     * @return {Promise<UpdateChannelAPIResponse<ErmisChatGenerics>>} The server response
     * TODO: introduce new type instead of Object in the next major update
     */

  }, {
    key: "_update",
    value: function () {
      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(payload) {
        var data;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.getClient().post(this._channelURL(), payload);

              case 2:
                data = _context21.sent;
                this.data = data.channel;
                return _context21.abrupt("return", data);

              case 5:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function _update(_x24) {
        return _update3.apply(this, arguments);
      }

      return _update;
    }()
    /**
     * mute - mutes the current channel
     * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id
     * @return {Promise<MuteChannelAPIResponse<ErmisChatGenerics>>} The server response
     *
     * example with expiration:
     * await channel.mute({expiration: moment.duration(2, 'weeks')});
     *
     * example server side:
     * await channel.mute({user_id: userId});
     *
     */

  }, {
    key: "mute",
    value: function () {
      var _mute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
        var opts,
            _args22 = arguments;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                opts = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};
                _context22.next = 3;
                return this.getClient().post(this.getClient().baseURL + '/moderation/mute/channel', _objectSpread$6({
                  channel_cid: this.cid
                }, opts));

              case 3:
                return _context22.abrupt("return", _context22.sent);

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function mute() {
        return _mute.apply(this, arguments);
      }

      return mute;
    }()
    /**
     * unmute - mutes the current channel
     * @param {{ user_id?: string}} opts user_id
     * @return {Promise<APIResponse>} The server response
     *
     * example server side:
     * await channel.unmute({user_id: userId});
     */

  }, {
    key: "unmute",
    value: function () {
      var _unmute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {
        var opts,
            _args23 = arguments;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                opts = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};
                _context23.next = 3;
                return this.getClient().post(this.getClient().baseURL + '/moderation/unmute/channel', _objectSpread$6({
                  channel_cid: this.cid
                }, opts));

              case 3:
                return _context23.abrupt("return", _context23.sent);

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function unmute() {
        return _unmute.apply(this, arguments);
      }

      return unmute;
    }()
    /**
     * muteStatus - returns the mute status for the current channel
     * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}
     */

  }, {
    key: "muteStatus",
    value: function muteStatus() {
      this._checkInitialized();

      return this.getClient()._muteStatus(this.cid);
    }
  }, {
    key: "sendAction",
    value: function sendAction(messageID, formData) {
      this._checkInitialized();

      if (!messageID) {
        throw Error("Message id is missing");
      }

      return this.getClient().post(this.getClient().baseURL + "/messages/".concat(messageID, "/action"), {
        message_id: messageID,
        form_data: formData,
        id: this.id,
        type: this.type
      });
    }
    /**
     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.
     * Call this on every keystroke
     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}
     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread
     */

  }, {
    key: "keystroke",
    value: function () {
      var _keystroke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(parent_id, options) {
        var _this$getConfig;

        var now, diff;
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                if ((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events) {
                  _context24.next = 2;
                  break;
                }

                return _context24.abrupt("return");

              case 2:
                now = new Date();
                diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();
                this.lastKeyStroke = now;
                this.isTyping = true; // send a typing.start every 2 seconds

                if (!(diff === null || diff > 2000)) {
                  _context24.next = 10;
                  break;
                }

                this.lastTypingEvent = new Date();
                _context24.next = 10;
                return this.sendEvent(_objectSpread$6({
                  type: 'typing.start',
                  parent_id: parent_id
                }, options || {}));

              case 10:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function keystroke(_x25, _x26) {
        return _keystroke.apply(this, arguments);
      }

      return keystroke;
    }()
    /**
     * stopTyping - Sets last typing to null and sends the typing.stop event
     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}
     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread
     */

  }, {
    key: "stopTyping",
    value: function () {
      var _stopTyping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(parent_id, options) {
        var _this$getConfig2;

        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                if ((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.typing_events) {
                  _context25.next = 2;
                  break;
                }

                return _context25.abrupt("return");

              case 2:
                this.lastTypingEvent = null;
                this.isTyping = false;
                _context25.next = 6;
                return this.sendEvent(_objectSpread$6({
                  type: 'typing.stop',
                  parent_id: parent_id
                }, options || {}));

              case 6:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function stopTyping(_x27, _x28) {
        return _stopTyping.apply(this, arguments);
      }

      return stopTyping;
    }()
    /**
     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted
     *
     * @return {ReturnType<ChannelState<ErmisChatGenerics>['formatMessage']> | undefined} Description
     */

  }, {
    key: "lastMessage",
    value: function lastMessage() {
      // get last 5 messages, sort, return the latest
      // get a slice of the last 5
      var min = this.state.latestMessages.length - 5;

      if (min < 0) {
        min = 0;
      }

      var max = this.state.latestMessages.length + 1;
      var messageSlice = this.state.latestMessages.slice(min, max); // sort by pk desc

      messageSlice.sort(function (a, b) {
        return b.created_at.getTime() - a.created_at.getTime();
      });
      return messageSlice[0];
    }
    /**
     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled
     *
     * @param {MarkReadOptions<ErmisChatGenerics>} data
     * @return {Promise<EventAPIResponse<ErmisChatGenerics> | null>} Description
     */

  }, {
    key: "markRead",
    value: function () {
      var _markRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {
        var _this$getConfig3;

        var data,
            _args26 = arguments;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                data = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};

                this._checkInitialized();

                if (!(!((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) && !this.getClient()._isUsingServerAuth())) {
                  _context26.next = 4;
                  break;
                }

                return _context26.abrupt("return", Promise.resolve(null));

              case 4:
                _context26.next = 6;
                return this.getClient().post(this._channelURL() + '/read', _objectSpread$6({}, data));

              case 6:
                return _context26.abrupt("return", _context26.sent);

              case 7:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function markRead() {
        return _markRead.apply(this, arguments);
      }

      return markRead;
    }()
    /**
     * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled
     *
     * @param {MarkUnreadOptions<ErmisChatGenerics>} data
     * @return {APIResponse} An API response
     */

  }, {
    key: "markUnread",
    value: function () {
      var _markUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(data) {
        var _this$getConfig4;

        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                this._checkInitialized();

                if (!(!((_this$getConfig4 = this.getConfig()) !== null && _this$getConfig4 !== void 0 && _this$getConfig4.read_events) && !this.getClient()._isUsingServerAuth())) {
                  _context27.next = 3;
                  break;
                }

                return _context27.abrupt("return", Promise.resolve(null));

              case 3:
                _context27.next = 5;
                return this.getClient().post(this._channelURL() + '/unread', _objectSpread$6({}, data));

              case 5:
                return _context27.abrupt("return", _context27.sent);

              case 6:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function markUnread(_x29) {
        return _markUnread.apply(this, arguments);
      }

      return markUnread;
    }()
    /**
     * clean - Cleans the channel state and fires stop typing if needed
     */

  }, {
    key: "clean",
    value: function clean() {
      if (this.lastKeyStroke) {
        var now = new Date();
        var diff = now.getTime() - this.lastKeyStroke.getTime();

        if (diff > 1000 && this.isTyping) {
          logChatPromiseExecution(this.stopTyping(), 'stop typing event');
        }
      }

      this.state.clean();
    }
    /**
     * watch - Loads the initial channel state and watches for changes
     *
     * @param {ChannelQueryOptions<ErmisChatGenerics>} options additional options for the query endpoint
     *
     * @return {Promise<QueryChannelAPIResponse<ErmisChatGenerics>>} The server response
     */

  }, {
    key: "watch",
    value: function () {
      var _watch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(options) {
        var defaultOptions, combined, state;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context28.next = 3;
                return this.getClient().wsPromise;

              case 3:
                if (!this.getClient()._hasConnectionID()) {
                  defaultOptions.watch = false;
                }

                combined = _objectSpread$6(_objectSpread$6({}, defaultOptions), options);
                _context28.next = 7;
                return this.query(combined, 'latest');

              case 7:
                state = _context28.sent;
                this.initialized = true;
                this.data = state.channel;

                this._client.logger('info', "channel:watch() - started watching channel ".concat(this.cid), {
                  tags: ['channel'],
                  channel: this
                });

                return _context28.abrupt("return", state);

              case 12:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function watch(_x30) {
        return _watch.apply(this, arguments);
      }

      return watch;
    }()
    /**
     * stopWatching - Stops watching the channel
     *
     * @return {Promise<APIResponse>} The server response
     */

  }, {
    key: "stopWatching",
    value: function () {
      var _stopWatching = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {
        var response;
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return this.getClient().post(this._channelURL() + '/stop-watching', {});

              case 2:
                response = _context29.sent;

                this._client.logger('info', "channel:watch() - stopped watching channel ".concat(this.cid), {
                  tags: ['channel'],
                  channel: this
                });

                return _context29.abrupt("return", response);

              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function stopWatching() {
        return _stopWatching.apply(this, arguments);
      }

      return stopWatching;
    }()
    /**
     * getReplies - List the message replies for a parent message
     *
     * @param {string} parent_id The message parent id, ie the top of the thread
     * @param {MessagePaginationOptions & { user?: UserResponse<ErmisChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}
     *
     * @return {Promise<GetRepliesAPIResponse<ErmisChatGenerics>>} A response with a list of messages
     */

  }, {
    key: "getReplies",
    value: function () {
      var _getReplies = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(parent_id, options) {
        var data;
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return this.getClient().get(this.getClient().baseURL + "/messages/".concat(parent_id, "/replies"), _objectSpread$6({}, options));

              case 2:
                data = _context30.sent;

                // add any messages to our thread state
                if (data.messages) {
                  this.state.addMessagesSorted(data.messages);
                }

                return _context30.abrupt("return", data);

              case 5:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function getReplies(_x31, _x32) {
        return _getReplies.apply(this, arguments);
      }

      return getReplies;
    }()
    /**
     * getPinnedMessages - List list pinned messages of the channel
     *
     * @param {PinnedMessagePaginationOptions & { user?: UserResponse<ErmisChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}
     * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages
     *
     * @return {Promise<GetRepliesAPIResponse<ErmisChatGenerics>>} A response with a list of messages
     */

  }, {
    key: "getPinnedMessages",
    value: function () {
      var _getPinnedMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(options) {
        var sort,
            _args31 = arguments;
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                sort = _args31.length > 1 && _args31[1] !== undefined ? _args31[1] : [];
                _context31.next = 3;
                return this.getClient().get(this.getClient().baseURL + "/channels/".concat(this.type, "/").concat(this.id, "/pinned_messages"), {
                  payload: _objectSpread$6(_objectSpread$6({}, options), {}, {
                    sort: normalizeQuerySort(sort)
                  })
                });

              case 3:
                return _context31.abrupt("return", _context31.sent);

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function getPinnedMessages(_x33) {
        return _getPinnedMessages.apply(this, arguments);
      }

      return getPinnedMessages;
    }()
    /**
     * getReactions - List the reactions, supports pagination
     *
     * @param {string} message_id The message id
     * @param {{ limit?: number; offset?: number }} options The pagination options
     *
     * @return {Promise<GetReactionsAPIResponse<ErmisChatGenerics>>} Server response
     */

  }, {
    key: "getReactions",
    value: function getReactions(message_id, options) {
      return this.getClient().get(this.getClient().baseURL + "/messages/".concat(message_id, "/reactions"), _objectSpread$6({}, options));
    }
    /**
     * getMessagesById - Retrieves a list of messages by ID
     *
     * @param {string[]} messageIds The ids of the messages to retrieve from this channel
     *
     * @return {Promise<GetMultipleMessagesAPIResponse<ErmisChatGenerics>>} Server response
     */

  }, {
    key: "getMessagesById",
    value: function getMessagesById(messageIds) {
      return this.getClient().get(this._channelURL() + '/messages', {
        ids: messageIds.join(',')
      });
    }
    /**
     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null
     * @return {Date | null | undefined}
     */

  }, {
    key: "lastRead",
    value: function lastRead() {
      var _this$getClient = this.getClient(),
          userID = _this$getClient.userID;

      if (userID) {
        return this.state.read[userID] ? this.state.read[userID].last_read : null;
      }
    }
  }, {
    key: "_countMessageAsUnread",
    value: function _countMessageAsUnread(message) {
      var _message$user, _message$user2, _this$data4, _this$data5;

      if (message.shadowed) return false;
      if (message.silent) return false;
      if (message.parent_id && !message.show_in_channel) return false;
      if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID) return false;
      if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id)) return false;
      if (message.type === 'system') return false; // Return false if channel doesn't allow read events.

      if (Array.isArray((_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.own_capabilities) && !((_this$data5 = this.data) !== null && _this$data5 !== void 0 && _this$data5.own_capabilities.includes('read-events'))) return false;
      if (this.muteStatus().muted) return false;
      return true;
    }
    /**
     * countUnread - Count of unread messages
     *
     * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state
     *
     * @return {number} Unread count
     */

  }, {
    key: "countUnread",
    value: function countUnread(lastRead) {
      if (!lastRead) return this.state.unreadCount;
      var count = 0;

      for (var i = 0; i < this.state.latestMessages.length; i += 1) {
        var message = this.state.latestMessages[i];

        if (message.created_at > lastRead && this._countMessageAsUnread(message)) {
          count++;
        }
      }

      return count;
    }
    /**
     * countUnreadMentions - Count the number of unread messages mentioning the current user
     *
     * @return {number} Unread mentions count
     */

  }, {
    key: "countUnreadMentions",
    value: function countUnreadMentions() {
      var lastRead = this.lastRead();
      var userID = this.getClient().userID;
      var count = 0;

      for (var i = 0; i < this.state.latestMessages.length; i += 1) {
        var _message$mentioned_us;

        var message = this.state.latestMessages[i];

        if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function (user) {
          return user.id === userID;
        })) {
          count++;
        }
      }

      return count;
    }
    /**
     * create - Creates a new channel
     *
     * @return {Promise<QueryChannelAPIResponse<ErmisChatGenerics>>} The Server Response
     *
     */

  }, {
    key: "query",
    value:
    /**
     * query - Query the API, get messages, members or other channel fields
     *
     * @param {ChannelQueryOptions<ErmisChatGenerics>} options The query options
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings
     *
     * @return {Promise<QueryChannelAPIResponse<ErmisChatGenerics>>} Returns a query response
     */
    function () {
      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(options) {
        var _this$data6, _this$data7;

        var messageSetToAddToIfDoesNotExist,
            queryURL,
            state,
            membersStr,
            tempChannelCid,
            _this$_initializeStat,
            messageSet,
            areCapabilitiesChanged,
            _args32 = arguments;

        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                messageSetToAddToIfDoesNotExist = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : 'current';
                _context32.next = 3;
                return this.getClient().wsPromise;

              case 3:
                queryURL = "".concat(this.getClient().baseURL, "/channels/").concat(this.type);

                if (this.id) {
                  queryURL += "/".concat(this.id);
                }

                _context32.next = 7;
                return this.getClient().post(queryURL + '/query', _objectSpread$6({
                  data: this._data,
                  state: true
                }, options));

              case 7:
                state = _context32.sent;

                // update the channel id if it was missing
                if (!this.id) {
                  this.id = state.channel.id;
                  this.cid = state.channel.cid; // set the channel as active...

                  membersStr = state.members.map(function (member) {
                    var _member$user;

                    return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id);
                  }).sort().join(',');
                  tempChannelCid = "".concat(this.type, ":!members-").concat(membersStr);

                  if (tempChannelCid in this.getClient().activeChannels) {
                    // This gets set in `client.channel()` function, when channel is created
                    // using members, not id.
                    delete this.getClient().activeChannels[tempChannelCid];
                  }

                  if (!(this.cid in this.getClient().activeChannels)) {
                    this.getClient().activeChannels[this.cid] = this;
                  }
                }

                this.getClient()._addChannelConfig(state.channel); // add any messages to our channel state


                _this$_initializeStat = this._initializeState(state, messageSetToAddToIfDoesNotExist), messageSet = _this$_initializeStat.messageSet;
                areCapabilitiesChanged = _toConsumableArray(state.channel.own_capabilities || []).sort().join() !== _toConsumableArray(Array.isArray((_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.own_capabilities) ? (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.own_capabilities : []).sort().join();
                this.data = state.channel;
                this.offlineMode = false;

                if (areCapabilitiesChanged) {
                  this.getClient().dispatchEvent({
                    type: 'capabilities.changed',
                    cid: this.cid,
                    own_capabilities: state.channel.own_capabilities
                  });
                }

                this.getClient().dispatchEvent({
                  type: 'channels.queried',
                  queriedChannels: {
                    channels: [state],
                    isLatestMessageSet: messageSet.isLatest
                  }
                });
                return _context32.abrupt("return", state);

              case 17:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function query(_x34) {
        return _query.apply(this, arguments);
      }

      return query;
    }()
    /**
     * banUser - Bans a user from a channel
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<ErmisChatGenerics>} options
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "banUser",
    value: function () {
      var _banUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                this._checkInitialized();

                _context33.next = 3;
                return this.getClient().banUser(targetUserID, _objectSpread$6(_objectSpread$6({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));

              case 3:
                return _context33.abrupt("return", _context33.sent);

              case 4:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function banUser(_x35, _x36) {
        return _banUser.apply(this, arguments);
      }

      return banUser;
    }()
    /**
     * hides the channel from queryChannels for the user until a message is added
     * If clearHistory is set to true - all messages will be removed for the user
     *
     * @param {string | null} userId
     * @param {boolean} clearHistory
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "hide",
    value: function () {
      var _hide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {
        var userId,
            clearHistory,
            _args34 = arguments;
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                userId = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : null;
                clearHistory = _args34.length > 1 && _args34[1] !== undefined ? _args34[1] : false;

                this._checkInitialized();

                _context34.next = 5;
                return this.getClient().post("".concat(this._channelURL(), "/hide"), {
                  user_id: userId,
                  clear_history: clearHistory
                });

              case 5:
                return _context34.abrupt("return", _context34.sent);

              case 6:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function hide() {
        return _hide.apply(this, arguments);
      }

      return hide;
    }()
    /**
     * removes the hidden status for a channel
     *
     * @param {string | null} userId
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "show",
    value: function () {
      var _show = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {
        var userId,
            _args35 = arguments;
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                userId = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : null;

                this._checkInitialized();

                _context35.next = 4;
                return this.getClient().post("".concat(this._channelURL(), "/show"), {
                  user_id: userId
                });

              case 4:
                return _context35.abrupt("return", _context35.sent);

              case 5:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function show() {
        return _show.apply(this, arguments);
      }

      return show;
    }()
    /**
     * unbanUser - Removes the bans for a user on a channel
     *
     * @param {string} targetUserID
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unbanUser",
    value: function () {
      var _unbanUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(targetUserID) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                this._checkInitialized();

                _context36.next = 3;
                return this.getClient().unbanUser(targetUserID, {
                  type: this.type,
                  id: this.id
                });

              case 3:
                return _context36.abrupt("return", _context36.sent);

              case 4:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function unbanUser(_x37) {
        return _unbanUser.apply(this, arguments);
      }

      return unbanUser;
    }()
    /**
     * shadowBan - Shadow bans a user from a channel
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<ErmisChatGenerics>} options
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "shadowBan",
    value: function () {
      var _shadowBan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                this._checkInitialized();

                _context37.next = 3;
                return this.getClient().shadowBan(targetUserID, _objectSpread$6(_objectSpread$6({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));

              case 3:
                return _context37.abrupt("return", _context37.sent);

              case 4:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function shadowBan(_x38, _x39) {
        return _shadowBan.apply(this, arguments);
      }

      return shadowBan;
    }()
    /**
     * removeShadowBan - Removes the shadow ban for a user on a channel
     *
     * @param {string} targetUserID
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "removeShadowBan",
    value: function () {
      var _removeShadowBan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(targetUserID) {
        return _regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                this._checkInitialized();

                _context38.next = 3;
                return this.getClient().removeShadowBan(targetUserID, {
                  type: this.type,
                  id: this.id
                });

              case 3:
                return _context38.abrupt("return", _context38.sent);

              case 4:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function removeShadowBan(_x40) {
        return _removeShadowBan.apply(this, arguments);
      }

      return removeShadowBan;
    }()
    /**
     * createCall - creates a call for the current channel
     *
     * @param {CreateCallOptions} options
     * @returns {Promise<CreateCallResponse>}
     */

  }, {
    key: "createCall",
    value: function () {
      var _createCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(options) {
        return _regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return this.getClient().post(this._channelURL() + '/call', options);

              case 2:
                return _context39.abrupt("return", _context39.sent);

              case 3:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function createCall(_x41) {
        return _createCall.apply(this, arguments);
      }

      return createCall;
    }()
    /**
     * on - Listen to events on this channel.
     *
     * channel.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * channel.on(event => {console.log(event.type)})
     *
     * @param {EventHandler<ErmisChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)
     * @param {EventHandler<ErmisChatGenerics>} [callbackOrNothing] The callback to call
     */

  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;

      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this._client.logger('info', "Attaching listener for ".concat(key, " event on channel ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2._client.logger('info', "Removing listener for ".concat(key, " event from channel ").concat(_this2.cid), {
            tags: ['event', 'channel'],
            channel: _this2
          });

          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {
            return el !== callback;
          });
        }
      };
    }
    /**
     * off - Remove the event handler
     *
     */

  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this._client.logger('info', "Removing listener for ".concat(key, " event from channel ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      this.listeners[key] = this.listeners[key].filter(function (value) {
        return value !== callback;
      });
    } // eslint-disable-next-line sonarjs/cognitive-complexity

  }, {
    key: "_handleChannelEvent",
    value: function _handleChannelEvent(event) {
      var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$channel, _event$member, _event$user9, _event$user11, _channelState$members, _event$user12, _channelState$members2;

      var channel = this;

      this._client.logger('info', "channel:_handleChannelEvent - Received event of type { ".concat(event.type, " } on ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      var channelState = channel.state;

      switch (event.type) {
        case 'typing.start':
          if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {
            channelState.typing[event.user.id] = event;
          }

          break;

        case 'typing.stop':
          if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {
            delete channelState.typing[event.user.id];
          }

          break;

        case 'message.read':
          if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id && event.created_at) {
            var _event$user4, _this$getClient$user;

            channelState.read[event.user.id] = {
              last_read: new Date(event.created_at),
              last_read_message_id: event.last_read_message_id,
              user: event.user,
              unread_messages: 0
            };

            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : _this$getClient$user.id)) {
              channelState.unreadCount = 0;
            }
          }

          break;

        case 'user.watching.start':
        case 'user.updated':
          if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {
            channelState.watchers[event.user.id] = event.user;
          }

          break;

        case 'user.watching.stop':
          if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {
            delete channelState.watchers[event.user.id];
          }

          break;

        case 'message.deleted':
          if (event.message) {
            this._extendEventWithOwnReactions(event);

            if (event.hard_delete) channelState.removeMessage(event.message);else channelState.addMessageSorted(event.message, false, false);
            channelState.removeQuotedMessageReferences(event.message);

            if (event.message.pinned) {
              channelState.removePinnedMessage(event.message);
            }
          }

          break;

        case 'message.new':
          if (event.message) {
            var _event$user7, _this$getClient$user2, _event$user8;

            /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */
            var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id);
            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;

            if (this.state.isUpToDate || isThreadMessage) {
              channelState.addMessageSorted(event.message, ownMessage);
            }

            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            } // do not increase the unread count - the back-end does not increase the count neither in the following cases:
            // 1. the message is mine
            // 2. the message is a thread reply from any user


            var preventUnreadCountUpdate = ownMessage || isThreadMessage;
            if (preventUnreadCountUpdate) break;

            if ((_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {
              for (var userId in channelState.read) {
                if (userId === event.user.id) {
                  channelState.read[event.user.id] = {
                    last_read: new Date(event.created_at),
                    user: event.user,
                    unread_messages: 0
                  };
                } else {
                  channelState.read[userId].unread_messages += 1;
                }
              }
            }

            if (this._countMessageAsUnread(event.message)) {
              channelState.unreadCount = channelState.unreadCount + 1;
            }
          }

          break;

        case 'message.updated':
        case 'message.undeleted':
          if (event.message) {
            this._extendEventWithOwnReactions(event);

            channelState.addMessageSorted(event.message, false, false);

            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            } else {
              channelState.removePinnedMessage(event.message);
            }
          }

          break;

        case 'channel.truncated':
          if ((_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.truncated_at) {
            var truncatedAt = +new Date(event.channel.truncated_at);
            channelState.messageSets.forEach(function (messageSet, messageSetIndex) {
              messageSet.messages.forEach(function (_ref2) {
                var createdAt = _ref2.created_at,
                    id = _ref2.id;
                if (truncatedAt > +createdAt) channelState.removeMessage({
                  id: id,
                  messageSetIndex: messageSetIndex
                });
              });
            });
            channelState.pinnedMessages.forEach(function (_ref3) {
              var id = _ref3.id,
                  createdAt = _ref3.created_at;
              if (truncatedAt > +createdAt) channelState.removePinnedMessage({
                id: id
              });
            });
          } else {
            channelState.clearMessages();
          }

          channelState.unreadCount = 0; // system messages don't increment unread counts

          if (event.message) {
            channelState.addMessageSorted(event.message);

            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            }
          }

          break;

        case 'member.added':
        case 'member.updated':
          if ((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user_id) {
            channelState.members[event.member.user_id] = event.member;
          }

          break;

        case 'member.removed':
          if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {
            delete channelState.members[event.user.id];
          }

          break;

        case 'notification.mark_unread':
          {
            var _event$user10, _this$getClient$user3, _event$unread_message;

            var _ownMessage = ((_event$user10 = event.user) === null || _event$user10 === void 0 ? void 0 : _event$user10.id) === ((_this$getClient$user3 = this.getClient().user) === null || _this$getClient$user3 === void 0 ? void 0 : _this$getClient$user3.id);

            if (!(_ownMessage && event.user)) break;
            var unreadCount = (_event$unread_message = event.unread_messages) !== null && _event$unread_message !== void 0 ? _event$unread_message : 0;
            channelState.read[event.user.id] = {
              first_unread_message_id: event.first_unread_message_id,
              last_read: new Date(event.last_read_at),
              last_read_message_id: event.last_read_message_id,
              user: event.user,
              unread_messages: unreadCount
            };
            channelState.unreadCount = unreadCount;
            break;
          }

        case 'channel.updated':
          if (event.channel) {
            var _event$channel2, _channel$data, _event$channel$hidden, _event$channel3, _channel$data2, _event$channel$own_ca, _event$channel4, _channel$data3;

            var isFrozenChanged = ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.frozen) !== undefined && event.channel.frozen !== ((_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : _channel$data.frozen);

            if (isFrozenChanged) {
              this.query({
                state: false,
                messages: {
                  limit: 0
                },
                watchers: {
                  limit: 0
                }
              });
            }

            channel.data = _objectSpread$6(_objectSpread$6({}, event.channel), {}, {
              hidden: (_event$channel$hidden = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_channel$data2 = channel.data) === null || _channel$data2 === void 0 ? void 0 : _channel$data2.hidden,
              own_capabilities: (_event$channel$own_ca = (_event$channel4 = event.channel) === null || _event$channel4 === void 0 ? void 0 : _event$channel4.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_channel$data3 = channel.data) === null || _channel$data3 === void 0 ? void 0 : _channel$data3.own_capabilities
            });
          }

          break;

        case 'reaction.new':
          if (event.message && event.reaction) {
            event.message = channelState.addReaction(event.reaction, event.message);
          }

          break;

        case 'reaction.deleted':
          if (event.reaction) {
            event.message = channelState.removeReaction(event.reaction, event.message);
          }

          break;

        case 'reaction.updated':
          if (event.reaction) {
            // assuming reaction.updated is only called if enforce_unique is true
            event.message = channelState.addReaction(event.reaction, event.message, true);
          }

          break;

        case 'channel.hidden':
          channel.data = _objectSpread$6(_objectSpread$6({}, channel.data), {}, {
            hidden: true
          });

          if (event.clear_history) {
            channelState.clearMessages();
          }

          break;

        case 'channel.visible':
          channel.data = _objectSpread$6(_objectSpread$6({}, channel.data), {}, {
            hidden: false
          });
          break;

        case 'user.banned':
          if (!((_event$user11 = event.user) !== null && _event$user11 !== void 0 && _event$user11.id)) break;
          channelState.members[event.user.id] = _objectSpread$6(_objectSpread$6({}, channelState.members[event.user.id] || {}), {}, {
            shadow_banned: !!event.shadow,
            banned: !event.shadow,
            user: _objectSpread$6(_objectSpread$6({}, ((_channelState$members = channelState.members[event.user.id]) === null || _channelState$members === void 0 ? void 0 : _channelState$members.user) || {}), event.user)
          });
          break;

        case 'user.unbanned':
          if (!((_event$user12 = event.user) !== null && _event$user12 !== void 0 && _event$user12.id)) break;
          channelState.members[event.user.id] = _objectSpread$6(_objectSpread$6({}, channelState.members[event.user.id] || {}), {}, {
            shadow_banned: false,
            banned: false,
            user: _objectSpread$6(_objectSpread$6({}, ((_channelState$members2 = channelState.members[event.user.id]) === null || _channelState$members2 === void 0 ? void 0 : _channelState$members2.user) || {}), event.user)
          });
          break;
      } // any event can send over the online count


      if (event.watcher_count !== undefined) {
        channel.state.watcher_count = event.watcher_count;
      }
    }
  }, {
    key: "_checkInitialized",
    value: function _checkInitialized() {
      if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {
        throw Error("Channel ".concat(this.cid, " hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve"));
      }
    } // eslint-disable-next-line sonarjs/cognitive-complexity

  }, {
    key: "_initializeState",
    value: function _initializeState(state) {
      var messageSetToAddToIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';

      var _this$getClient2 = this.getClient(),
          clientState = _this$getClient2.state,
          user = _this$getClient2.user,
          userID = _this$getClient2.userID; // add the Users


      if (state.members) {
        var _iterator = _createForOfIteratorHelper$3(state.members),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var member = _step.value;

            if (member.user) {
              clientState.updateUserReference(member.user, this.cid);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      this.state.membership = state.membership || {};
      var messages = state.messages || [];

      if (!this.state.messages) {
        this.state.initMessages();
      }

      var _this$state$addMessag = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist),
          messageSet = _this$state$addMessag.messageSet;

      if (!this.state.pinnedMessages) {
        this.state.pinnedMessages = [];
      }

      this.state.addPinnedMessages(state.pinned_messages || []);

      if (state.pending_messages) {
        this.state.pending_messages = state.pending_messages;
      }

      if (state.watcher_count !== undefined) {
        this.state.watcher_count = state.watcher_count;
      } // convert the arrays into objects for easier syncing...


      if (state.watchers) {
        var _iterator2 = _createForOfIteratorHelper$3(state.watchers),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var watcher = _step2.value;

            if (watcher) {
              clientState.updateUserReference(watcher, this.cid);
              this.state.watchers[watcher.id] = watcher;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } // initialize read state to last message or current time if the channel is empty
      // if the user is a member, this value will be overwritten later on otherwise this ensures
      // that everything up to this point is not marked as unread


      if (userID != null) {
        var last_read = this.state.last_message_at || new Date();

        if (user) {
          this.state.read[user.id] = {
            user: user,
            last_read: last_read,
            unread_messages: 0
          };
        }
      } // apply read state if part of the state


      if (state.read) {
        var _iterator3 = _createForOfIteratorHelper$3(state.read),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _read$unread_messages;

            var read = _step3.value;
            this.state.read[read.user.id] = {
              last_read: new Date(read.last_read),
              last_read_message_id: read.last_read_message_id,
              unread_messages: (_read$unread_messages = read.unread_messages) !== null && _read$unread_messages !== void 0 ? _read$unread_messages : 0,
              user: read.user
            };

            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id)) {
              this.state.unreadCount = this.state.read[read.user.id].unread_messages;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      if (state.members) {
        this.state.members = state.members.reduce(function (acc, member) {
          if (member.user) {
            acc[member.user.id] = member;
          }

          return acc;
        }, {});
      }

      return {
        messageSet: messageSet
      };
    }
  }, {
    key: "_extendEventWithOwnReactions",
    value: function _extendEventWithOwnReactions(event) {
      if (!event.message) {
        return;
      }

      var message = this.state.findMessage(event.message.id, event.message.parent_id);

      if (message) {
        event.message.own_reactions = message.own_reactions;
      }
    }
  }, {
    key: "_disconnect",
    value: function _disconnect() {
      this._client.logger('info', "channel:disconnect() - Disconnecting the channel ".concat(this.cid), {
        tags: ['connection', 'channel'],
        channel: this
      });

      this.disconnected = true;
      this.state.setIsUpToDate(false);
    }
  }]);

  return Channel;
}();

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike  ) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * ClientState - A container class for the client state.
 */
var ClientState = /*#__PURE__*/function () {
  function ClientState() {
    _classCallCheck(this, ClientState);

    _defineProperty(this, "users", void 0);

    _defineProperty(this, "userChannelReferences", void 0);

    // show the status for a certain user...
    // ie online, offline etc
    this.users = {}; // store which channels contain references to the specified user...

    this.userChannelReferences = {};
  }

  _createClass(ClientState, [{
    key: "updateUsers",
    value: function updateUsers(users) {
      var _iterator = _createForOfIteratorHelper$2(users),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var user = _step.value;
          this.updateUser(user);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateUser",
    value: function updateUser(user) {
      if (user != null) {
        this.users[user.id] = user;
      }
    }
  }, {
    key: "updateUserReference",
    value: function updateUserReference(user, channelID) {
      if (user == null) {
        return;
      }

      this.updateUser(user);

      if (!this.userChannelReferences[user.id]) {
        this.userChannelReferences[user.id] = {};
      }

      this.userChannelReferences[user.id][channelID] = true;
    }
  }, {
    key: "deleteAllChannelReference",
    value: function deleteAllChannelReference(channelID) {
      for (var userID in this.userChannelReferences) {
        delete this.userChannelReferences[userID][channelID];
      }
    }
  }]);

  return ClientState;
}();

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var InsightMetrics = function InsightMetrics() {
  _classCallCheck(this, InsightMetrics);

  _defineProperty(this, "connectionStartTimestamp", void 0);

  _defineProperty(this, "wsConsecutiveFailures", void 0);

  _defineProperty(this, "wsTotalFailures", void 0);

  _defineProperty(this, "instanceClientId", void 0);

  this.connectionStartTimestamp = null;
  this.wsTotalFailures = 0;
  this.wsConsecutiveFailures = 0;
  this.instanceClientId = randomId();
};
/**
 * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated
 * from all the client/connection code/logic.
 *
 * @param insightType
 * @param insights
 */

function buildWsFatalInsight(connection, event) {
  return _objectSpread$5(_objectSpread$5({}, event), buildWsBaseInsight(connection));
}

function buildWsBaseInsight(connection) {
  var _connection$ws, _navigator, _navigator2;

  var client = connection.client;
  return {
    ready_state: (_connection$ws = connection.ws) === null || _connection$ws === void 0 ? void 0 : _connection$ws.readyState,
    url: connection._buildUrl(),
    api_key: client.key,
    start_ts: client.insightMetrics.connectionStartTimestamp,
    end_ts: new Date().getTime(),
    auth_type: client.getAuthType(),
    token: client.tokenManager.token,
    user_id: client.userID,
    user_details: client._user,
    device: client.options.device,
    client_id: connection.connectionID,
    ws_details: connection.ws,
    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,
    ws_total_failures: client.insightMetrics.wsTotalFailures,
    request_id: connection.requestID,
    online: typeof navigator !== 'undefined' ? (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine : null,
    user_agent: typeof navigator !== 'undefined' ? (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent : null,
    instance_client_id: client.insightMetrics.instanceClientId
  };
}

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Type guards to check WebSocket error type
var isCloseEvent = function isCloseEvent(res) {
  return res.code !== undefined;
};

var isErrorEvent = function isErrorEvent(res) {
  return res.error !== undefined;
};
/**
 * StableWSConnection - A WS connection that reconnects upon failure.
 * - the browser will sometimes report that you're online or offline
 * - the WS connection can break and fail (there is a 30s health check)
 * - sometimes your WS connection will seem to work while the user is in fact offline
 * - to speed up online/offline detection you can use the window.addEventListener('offline');
 *
 * There are 4 ways in which a connection can become unhealthy:
 * - websocket.onerror is called
 * - websocket.onclose is called
 * - the health check fails and no event is received for ~40 seconds
 * - the browser indicates the connection is now offline
 *
 * There are 2 assumptions we make about the server:
 * - state can be recovered by querying the channel again
 * - if the servers fails to publish a message to the client, the WS connection is destroyed
 */


var StableWSConnection = /*#__PURE__*/function () {
  // global from constructor
  // local vars
  function StableWSConnection(_ref) {
    var _this = this;

    var client = _ref.client;

    _classCallCheck(this, StableWSConnection);

    _defineProperty(this, "client", void 0);

    _defineProperty(this, "connectionID", void 0);

    _defineProperty(this, "connectionOpen", void 0);

    _defineProperty(this, "consecutiveFailures", void 0);

    _defineProperty(this, "pingInterval", void 0);

    _defineProperty(this, "healthCheckTimeoutRef", void 0);

    _defineProperty(this, "isConnecting", void 0);

    _defineProperty(this, "isDisconnected", void 0);

    _defineProperty(this, "isHealthy", void 0);

    _defineProperty(this, "isResolved", void 0);

    _defineProperty(this, "lastEvent", void 0);

    _defineProperty(this, "connectionCheckTimeout", void 0);

    _defineProperty(this, "connectionCheckTimeoutRef", void 0);

    _defineProperty(this, "rejectPromise", void 0);

    _defineProperty(this, "requestID", void 0);

    _defineProperty(this, "resolvePromise", void 0);

    _defineProperty(this, "totalFailures", void 0);

    _defineProperty(this, "ws", void 0);

    _defineProperty(this, "wsID", void 0);

    _defineProperty(this, "_buildUrl", function () {
      var qs = encodeURIComponent(_this.client._buildWSPayload(_this.requestID));

      var token = _this.client.tokenManager.getToken();

      return "".concat(_this.client.wsBaseURL, "/connect?json=").concat(qs, "&authorization=").concat(token); // return `${this.client.wsBaseURL}/connect?json=${qs}&api_key=${
      //   this.client.key
      // }&authorization=${token}&stream-auth-type=${this.client.getAuthType()}&X-Stream-Client=${this.client.getUserAgent()}`;
    });

    _defineProperty(this, "onlineStatusChanged", function (event) {
      if (event.type === 'offline') {
        // mark the connection as down
        _this._log('onlineStatusChanged() - Status changing to offline');

        _this._setHealth(false);
      } else if (event.type === 'online') {
        // retry right now...
        // We check this.isHealthy, not sure if it's always
        // smart to create a new WS connection if the old one is still up and running.
        // it's possible we didn't miss any messages, so this process is just expensive and not needed.
        _this._log("onlineStatusChanged() - Status changing to online. isHealthy: ".concat(_this.isHealthy));

        if (!_this.isHealthy) {
          _this._reconnect({
            interval: 10
          });
        }
      }
    });

    _defineProperty(this, "onopen", function (wsID) {
      if (_this.wsID !== wsID) return;

      _this._log('onopen() - onopen callback', {
        wsID: wsID
      });
    });

    _defineProperty(this, "onmessage", function (wsID, event) {
      if (_this.wsID !== wsID) return;

      _this._log('onmessage() - onmessage callback', {
        event: event,
        wsID: wsID
      });

      var data = typeof event.data === 'string' ? JSON.parse(event.data) : null; // we wait till the first message before we consider the connection open..
      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately
      // after that a ws.onclose..

      if (!_this.isResolved && data) {
        var _this$resolvePromise;

        _this.isResolved = true;

        if (data.error) {
          var _this$rejectPromise;

          (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));
          return;
        }

        (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, data);

        _this._setHealth(true);
      } // trigger the event..


      _this.lastEvent = new Date();

      if (data && data.type === 'health.check') {
        _this.scheduleNextPing();
      }

      _this.client.handleEvent(event);

      _this.scheduleConnectionCheck();
    });

    _defineProperty(this, "onclose", function (wsID, event) {
      if (_this.wsID !== wsID) return;

      _this._log('onclose() - onclose callback - ' + event.code, {
        event: event,
        wsID: wsID
      });

      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {
        var _this$rejectPromise2;

        // this is a permanent error raised by stream..
        // usually caused by invalid auth details
        var error = new Error("WS connection reject with error ".concat(event.reason));
        error.reason = event.reason;
        error.code = event.code;
        error.wasClean = event.wasClean;
        error.target = event.target;
        (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);

        _this._log("onclose() - WS connection reject with error ".concat(event.reason), {
          event: event
        });
      } else {
        var _this$rejectPromise3;

        _this.consecutiveFailures += 1;
        _this.totalFailures += 1;

        _this._setHealth(false);

        _this.isConnecting = false;
        (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));

        _this._log("onclose() - WS connection closed. Calling reconnect ...", {
          event: event
        }); // reconnect if its an abnormal failure


        _this._reconnect();
      }
    });

    _defineProperty(this, "onerror", function (wsID, event) {
      var _this$rejectPromise4;

      if (_this.wsID !== wsID) return;
      _this.consecutiveFailures += 1;
      _this.totalFailures += 1;

      _this._setHealth(false);

      _this.isConnecting = false;
      (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));

      _this._log("onerror() - WS connection resulted into error", {
        event: event
      });

      _this._reconnect();
    });

    _defineProperty(this, "_setHealth", function (healthy) {
      if (healthy === _this.isHealthy) return;
      _this.isHealthy = healthy;

      if (_this.isHealthy) {
        _this.client.dispatchEvent({
          type: 'connection.changed',
          online: _this.isHealthy
        });

        return;
      } // we're offline, wait few seconds and fire and event if still offline


      setTimeout(function () {
        if (_this.isHealthy) return;

        _this.client.dispatchEvent({
          type: 'connection.changed',
          online: _this.isHealthy
        });
      }, 5000);
    });

    _defineProperty(this, "_errorFromWSEvent", function (event) {
      var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var code;
      var statusCode;
      var message;

      if (isCloseEvent(event)) {
        code = event.code;
        statusCode = 'unknown';
        message = event.reason;
      }

      if (isErrorEvent(event)) {
        code = event.error.code;
        statusCode = event.error.StatusCode;
        message = event.error.message;
      } // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.


      _this._log("_errorFromWSEvent() - WS failed with code ".concat(code), {
        event: event
      }, 'warn');

      var error = new Error("WS failed with code ".concat(code, " and reason - ").concat(message));
      error.code = code;
      /**
       * StatusCode does not exist on any event types but has been left
       * as is to preserve JS functionality during the TS implementation
       */

      error.StatusCode = statusCode;
      error.isWSFailure = isWSFailure;
      return error;
    });

    _defineProperty(this, "_setupConnectionPromise", function () {
      _this.isResolved = false;
      /** a promise that is resolved once ws.open is called */

      _this.connectionOpen = new Promise(function (resolve, reject) {
        _this.resolvePromise = resolve;
        _this.rejectPromise = reject;
      });
    });

    _defineProperty(this, "scheduleNextPing", function () {
      if (_this.healthCheckTimeoutRef) {
        clearTimeout(_this.healthCheckTimeoutRef);
      } // 30 seconds is the recommended interval (messenger uses this)


      _this.healthCheckTimeoutRef = setTimeout(function () {
        // send the healthcheck.., server replies with a health check event
        var data = [{
          type: 'health.check',
          client_id: _this.client.clientID
        }]; // try to send on the connection

        try {
          var _this$ws;

          (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));
        } catch (e) {// error will already be detected elsewhere
        }
      }, _this.pingInterval);
    });

    _defineProperty(this, "scheduleConnectionCheck", function () {
      if (_this.connectionCheckTimeoutRef) {
        clearTimeout(_this.connectionCheckTimeoutRef);
      }

      _this.connectionCheckTimeoutRef = setTimeout(function () {
        var now = new Date();

        if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {
          _this._log('scheduleConnectionCheck - going to reconnect');

          _this._setHealth(false);

          _this._reconnect();
        }
      }, _this.connectionCheckTimeout);
    });

    /** ErmisChat client */
    this.client = client;
    /** consecutive failures influence the duration of the timeout */

    this.consecutiveFailures = 0;
    /** keep track of the total number of failures */

    this.totalFailures = 0;
    /** We only make 1 attempt to reconnect at the same time.. */

    this.isConnecting = false;
    /** To avoid reconnect if client is disconnected */

    this.isDisconnected = false;
    /** Boolean that indicates if the connection promise is resolved */

    this.isResolved = false;
    /** Boolean that indicates if we have a working connection to the server */

    this.isHealthy = false;
    /** Incremented when a new WS connection is made */

    this.wsID = 1;
    /** Store the last event time for health checks */

    this.lastEvent = null;
    /** Send a health check message every 25 seconds */

    this.pingInterval = 25 * 1000;
    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;
    addConnectionEventListeners(this.onlineStatusChanged);
  }

  _createClass(StableWSConnection, [{
    key: "_log",
    value: function _log(msg) {
      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';
      this.client.logger(level, 'connection:' + msg, _objectSpread$4({
        tags: ['connection']
      }, extra));
    }
  }, {
    key: "setClient",
    value: function setClient(client) {
      this.client = client;
    }
    /**
     * connect - Connect to the WS URL
     * the default 15s timeout allows between 2~3 tries
     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received
     */

  }, {
    key: "connect",
    value: function () {
      var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var timeout,
            healthCheck,
            _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                timeout = _args.length > 0 && _args[0] !== undefined ? _args[0] : 15000;

                if (!this.isConnecting) {
                  _context.next = 3;
                  break;
                }

                throw Error("You've called connect twice, can only attempt 1 connection at the time");

              case 3:
                this.isDisconnected = false;
                _context.prev = 4;
                _context.next = 7;
                return this._connect();

              case 7:
                healthCheck = _context.sent;
                this.consecutiveFailures = 0;

                this._log("connect() - Established ws connection with healthcheck: ".concat(healthCheck));

                _context.next = 23;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](4);
                this.isHealthy = false;
                this.consecutiveFailures += 1;

                if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {
                  _context.next = 21;
                  break;
                }

                this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');

                this._reconnect({
                  refreshToken: true
                });

                _context.next = 23;
                break;

              case 21:
                if (_context.t0.isWSFailure) {
                  _context.next = 23;
                  break;
                }

                throw new Error(JSON.stringify({
                  code: _context.t0.code,
                  StatusCode: _context.t0.StatusCode,
                  message: _context.t0.message,
                  isWSFailure: _context.t0.isWSFailure
                }));

              case 23:
                _context.next = 25;
                return this._waitForHealthy(timeout);

              case 25:
                return _context.abrupt("return", _context.sent);

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 12]]);
      }));

      function connect() {
        return _connect2.apply(this, arguments);
      }

      return connect;
    }()
    /**
     * _waitForHealthy polls the promise connection to see if its resolved until it times out
     * the default 15s timeout allows between 2~3 tries
     * @param timeout duration(ms)
     */

  }, {
    key: "_waitForHealthy",
    value: function () {
      var _waitForHealthy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var _this2 = this;

        var timeout,
            _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 15000;
                return _context4.abrupt("return", Promise.race([_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
                  var interval, i;
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          interval = 50; // ms

                          i = 0;

                        case 2:
                          if (!(i <= timeout)) {
                            _context2.next = 18;
                            break;
                          }

                          _context2.prev = 3;
                          _context2.next = 6;
                          return _this2.connectionOpen;

                        case 6:
                          return _context2.abrupt("return", _context2.sent);

                        case 9:
                          _context2.prev = 9;
                          _context2.t0 = _context2["catch"](3);

                          if (!(i === timeout)) {
                            _context2.next = 13;
                            break;
                          }

                          throw new Error(JSON.stringify({
                            code: _context2.t0.code,
                            StatusCode: _context2.t0.StatusCode,
                            message: _context2.t0.message,
                            isWSFailure: _context2.t0.isWSFailure
                          }));

                        case 13:
                          _context2.next = 15;
                          return sleep(interval);

                        case 15:
                          i += interval;
                          _context2.next = 2;
                          break;

                        case 18:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[3, 9]]);
                }))(), _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return sleep(timeout);

                        case 2:
                          _this2.isConnecting = false;
                          throw new Error(JSON.stringify({
                            code: '',
                            StatusCode: '',
                            message: 'initial WS connection could not be established',
                            isWSFailure: true
                          }));

                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))()]));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function _waitForHealthy() {
        return _waitForHealthy2.apply(this, arguments);
      }

      return _waitForHealthy;
    }()
    /**
     * Builds and returns the url for websocket.
     * @private
     * @returns url string
     */

  }, {
    key: "disconnect",
    value:
    /**
     * disconnect - Disconnect the connection and doesn't recover...
     *
     */
    function disconnect(timeout) {
      var _this3 = this;

      this._log("disconnect() - Closing the websocket connection for wsID ".concat(this.wsID));

      this.wsID += 1;
      this.isConnecting = false;
      this.isDisconnected = true; // start by removing all the listeners

      if (this.healthCheckTimeoutRef) {
        clearInterval(this.healthCheckTimeoutRef);
      }

      if (this.connectionCheckTimeoutRef) {
        clearInterval(this.connectionCheckTimeoutRef);
      }

      removeConnectionEventListeners(this.onlineStatusChanged);
      this.isHealthy = false; // remove ws handlers...

      if (this.ws && this.ws.removeAllListeners) {
        this.ws.removeAllListeners();
      }

      var isClosedPromise; // and finally close...
      // Assigning to local here because we will remove it from this before the
      // promise resolves.

      var ws = this.ws;

      if (ws && ws.close && ws.readyState === ws.OPEN) {
        isClosedPromise = new Promise(function (resolve) {
          var onclose = function onclose(event) {
            _this3._log("disconnect() - resolving isClosedPromise ".concat(event ? 'with' : 'without', " close frame"), {
              event: event
            });

            resolve();
          };

          ws.onclose = onclose; // In case we don't receive close frame websocket server in time,
          // lets not wait for more than 1 seconds.

          setTimeout(onclose, timeout != null ? timeout : 1000);
        });

        this._log("disconnect() - Manually closed connection by calling client.disconnect()");

        ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');
      } else {
        this._log("disconnect() - ws connection doesn't exist or it is already closed.");

        isClosedPromise = Promise.resolve();
      }

      delete this.ws;
      return isClosedPromise;
    }
    /**
     * _connect - Connect to the WS endpoint
     *
     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received
     */

  }, {
    key: "_connect",
    value: function () {
      var _connect3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var isTokenReady, wsURL, response;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback)) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt("return");

              case 2:
                // simply ignore _connect if it's currently trying to connect
                this.isConnecting = true;
                this.requestID = randomId();
                this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();
                isTokenReady = false;
                _context5.prev = 6;

                this._log("_connect() - waiting for token");

                _context5.next = 10;
                return this.client.tokenManager.tokenReady();

              case 10:
                isTokenReady = true;
                _context5.next = 15;
                break;

              case 13:
                _context5.prev = 13;
                _context5.t0 = _context5["catch"](6);

              case 15:
                _context5.prev = 15;

                if (isTokenReady) {
                  _context5.next = 20;
                  break;
                }

                this._log("_connect() - tokenProvider failed before, so going to retry");

                _context5.next = 20;
                return this.client.tokenManager.loadToken();

              case 20:
                this._setupConnectionPromise();

                wsURL = this._buildUrl();

                this._log("_connect() - Connecting to ".concat(wsURL), {
                  wsURL: wsURL,
                  requestID: this.requestID
                });

                this.ws = new WebSocket$1(wsURL);
                this.ws.onopen = this.onopen.bind(this, this.wsID);
                this.ws.onclose = this.onclose.bind(this, this.wsID);
                this.ws.onerror = this.onerror.bind(this, this.wsID);
                this.ws.onmessage = this.onmessage.bind(this, this.wsID);
                _context5.next = 30;
                return this.connectionOpen;

              case 30:
                response = _context5.sent;
                this.isConnecting = false;

                if (!response) {
                  _context5.next = 36;
                  break;
                }

                this.connectionID = response.connection_id;

                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {
                  this.client.insightMetrics.wsConsecutiveFailures = 0;
                }

                return _context5.abrupt("return", response);

              case 36:
                _context5.next = 44;
                break;

              case 38:
                _context5.prev = 38;
                _context5.t1 = _context5["catch"](15);
                this.isConnecting = false;

                this._log("_connect() - Error - ", _context5.t1);

                if (this.client.options.enableInsights) {
                  this.client.insightMetrics.wsConsecutiveFailures++;
                  this.client.insightMetrics.wsTotalFailures++;
                  buildWsFatalInsight(this, convertErrorToJson(_context5.t1));
                }

                throw _context5.t1;

              case 44:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[6, 13], [15, 38]]);
      }));

      function _connect() {
        return _connect3.apply(this, arguments);
      }

      return _connect;
    }()
    /**
     * _reconnect - Retry the connection to WS endpoint
     *
     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available
     *
     * - `interval`	{int}			number of ms that function should wait before reconnecting
     * - `refreshToken` {boolean}	reload/refresh user token be refreshed before attempting reconnection.
     */

  }, {
    key: "_reconnect",
    value: function () {
      var _reconnect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var options,
            interval,
            _args6 = arguments;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};

                this._log('_reconnect() - Initiating the reconnect'); // only allow 1 connection at the time


                if (!(this.isConnecting || this.isHealthy)) {
                  _context6.next = 5;
                  break;
                }

                this._log('_reconnect() - Abort (1) since already connecting or healthy');

                return _context6.abrupt("return");

              case 5:
                // reconnect in case of on error or on close
                // also reconnect if the health check cycle fails
                interval = options.interval;

                if (!interval) {
                  interval = retryInterval(this.consecutiveFailures);
                } // reconnect, or try again after a little while...


                _context6.next = 9;
                return sleep(interval);

              case 9:
                if (!(this.isConnecting || this.isHealthy)) {
                  _context6.next = 12;
                  break;
                }

                this._log('_reconnect() - Abort (2) since already connecting or healthy');

                return _context6.abrupt("return");

              case 12:
                if (!(this.isDisconnected && this.client.options.enableWSFallback)) {
                  _context6.next = 15;
                  break;
                }

                this._log('_reconnect() - Abort (3) since disconnect() is called');

                return _context6.abrupt("return");

              case 15:
                this._log('_reconnect() - Destroying current WS connection'); // cleanup the old connection


                this._destroyCurrentWSConnection();

                if (!options.refreshToken) {
                  _context6.next = 20;
                  break;
                }

                _context6.next = 20;
                return this.client.tokenManager.loadToken();

              case 20:
                _context6.prev = 20;
                _context6.next = 23;
                return this._connect();

              case 23:
                this._log('_reconnect() - Waiting for recoverCallBack');

                _context6.next = 26;
                return this.client.recoverState();

              case 26:
                this._log('_reconnect() - Finished recoverCallBack');

                this.consecutiveFailures = 0;
                _context6.next = 38;
                break;

              case 30:
                _context6.prev = 30;
                _context6.t0 = _context6["catch"](20);
                this.isHealthy = false;
                this.consecutiveFailures += 1;

                if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {
                  _context6.next = 37;
                  break;
                }

                this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');

                return _context6.abrupt("return", this._reconnect({
                  refreshToken: true
                }));

              case 37:
                // reconnect on WS failures, don't reconnect if there is a code bug
                if (_context6.t0.isWSFailure) {
                  this._log('_reconnect() - WS failure, so going to try to reconnect');

                  this._reconnect();
                }

              case 38:
                this._log('_reconnect() - == END ==');

              case 39:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[20, 30]]);
      }));

      function _reconnect() {
        return _reconnect2.apply(this, arguments);
      }

      return _reconnect;
    }()
    /**
     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.
     *
     * @param {Event} event Event with type online or offline
     *
     */

  }, {
    key: "_destroyCurrentWSConnection",
    value:
    /**
     * _destroyCurrentWSConnection - Removes the current WS connection
     *
     */
    function _destroyCurrentWSConnection() {
      // increment the ID, meaning we will ignore all messages from the old
      // ws connection from now on.
      this.wsID += 1;

      try {
        var _this$ws2, _this$ws3;

        this === null || this === void 0 ? void 0 : (_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.removeAllListeners();
        this === null || this === void 0 ? void 0 : (_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.close();
      } catch (e) {// we don't care
      }
    }
    /**
     * _setupPromise - sets up the this.connectOpen promise
     */

  }]);

  return StableWSConnection;
}();

var jwt = null;

var crypto$1 = null;

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates the JWT token that can be used for a UserSession
 * @method JWTUserToken
 * @memberof signing
 * @private
 * @param {Secret} apiSecret - API Secret key
 * @param {string} userId - The user_id key in the JWT payload
 * @param {UR} [extraData] - Extra that should be part of the JWT token
 * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign
 * @return {string} JWT Token
 */
function JWTUserToken(apiSecret, userId) {
  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (typeof userId !== 'string') {
    throw new TypeError('userId should be a string');
  }

  _objectSpread$3({
    user_id: userId
  }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)


  {
    throw Error("Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.");
  }
}
function JWTServerToken(apiSecret) {
  var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var payload = {
    server: true
  };

  var opts = _extends({
    algorithm: 'HS256',
    noTimestamp: true
  }, jwtOptions);

  return jwt.sign(payload, apiSecret, opts);
}
function UserFromToken(token) {
  var fragments = token.split('.');

  if (fragments.length !== 3) {
    return '';
  }

  var b64Payload = fragments[1];
  var payload = decodeBase64(b64Payload);
  var data = JSON.parse(payload);
  return data.user_id;
}
/**
 *
 * @param {string} userId the id of the user
 * @return {string}
 */

function DevToken(userId) {
  return ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{"alg": "HS256", "typ": "JWT"}
  encodeBase64(JSON.stringify({
    user_id: userId
  })), 'devtoken' // hardcoded signature
  ].join('.');
}
/**
 *
 * @param {string | Buffer} body the signed message
 * @param {string} secret the shared secret used to generate the signature (Stream API secret)
 * @param {string} signature the signature to validate
 * @return {boolean}
 */

function CheckSignature(body, secret, signature) {
  var key = Buffer.from(secret, 'utf8');
  var hash = crypto$1.createHmac('sha256', key).update(body).digest('hex');

  try {
    return crypto$1.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));
  } catch (_unused) {
    return false;
  }
}

/**
 * TokenManager
 *
 * Handles all the operations around user token.
 */
var TokenManager =
/**
 * Constructor
 *
 * @param {Secret} secret
 */
function TokenManager(secret) {
  var _this = this;

  _classCallCheck(this, TokenManager);

  _defineProperty(this, "loadTokenPromise", void 0);

  _defineProperty(this, "type", void 0);

  _defineProperty(this, "secret", void 0);

  _defineProperty(this, "token", void 0);

  _defineProperty(this, "tokenProvider", void 0);

  _defineProperty(this, "user", void 0);

  _defineProperty(this, "setTokenOrProvider", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenOrProvider, user) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.validateToken(tokenOrProvider, user);

              _this.user = user;

              if (isFunction(tokenOrProvider)) {
                _this.tokenProvider = tokenOrProvider;
                _this.type = 'provider';
              }

              if (typeof tokenOrProvider === 'string') {
                _this.token = tokenOrProvider;
                _this.type = 'static';
              }

              if (!tokenOrProvider && _this.user && _this.secret) {
                _this.token = JWTUserToken(_this.secret, user.id, {}, {});
                _this.type = 'static';
              }

              _context.next = 7;
              return _this.loadToken();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());

  _defineProperty(this, "reset", function () {
    _this.token = undefined;
    _this.user = undefined;
    _this.loadTokenPromise = null;
  });

  _defineProperty(this, "validateToken", function (tokenOrProvider, user) {
    // allow empty token for anon user
    if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.

    if (!_this.secret && !tokenOrProvider) {
      throw new Error('User token can not be empty');
    }

    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {
      throw new Error('user token should either be a string or a function');
    }

    if (typeof tokenOrProvider === 'string') {
      // Allow empty token for anonymous users
      if (user.anon && tokenOrProvider === '') return;
      var tokenUserId = UserFromToken(tokenOrProvider);

      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {
        throw new Error('userToken does not have a user_id or is not matching with user.id');
      }
    }
  });

  _defineProperty(this, "tokenReady", function () {
    return _this.loadTokenPromise;
  });

  _defineProperty(this, "loadToken", function () {
    // eslint-disable-next-line no-async-promise-executor
    _this.loadTokenPromise = new Promise( /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(_this.type === 'static')) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", resolve(_this.token));

              case 2:
                if (!(_this.tokenProvider && typeof _this.tokenProvider !== 'string')) {
                  _context2.next = 13;
                  break;
                }

                _context2.prev = 3;
                _context2.next = 6;
                return _this.tokenProvider();

              case 6:
                _this.token = _context2.sent;
                _context2.next = 12;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](3);
                return _context2.abrupt("return", reject(new Error("Call to tokenProvider failed with message: ".concat(_context2.t0))));

              case 12:
                resolve(_this.token);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[3, 9]]);
      }));

      return function (_x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }());
    return _this.loadTokenPromise;
  });

  _defineProperty(this, "getToken", function () {
    if (_this.token) {
      return _this.token;
    }

    if (_this.user && _this.user.anon && !_this.token) {
      return _this.token;
    }

    if (_this.secret) {
      return JWTServerToken(_this.secret);
    }

    throw new Error("Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called");
  });

  _defineProperty(this, "isStatic", function () {
    return _this.type === 'static';
  });

  this.loadTokenPromise = null;

  if (secret) {
    this.secret = secret;
  }

  this.type = 'static';

  if (this.secret) {
    this.token = JWTServerToken(this.secret);
  }
}
/**
 * Set the static string token or token provider.
 * Token provider should return a token string or a promise which resolves to string token.
 *
 * @param {TokenOrProvider} tokenOrProvider
 * @param {UserResponse<ErmisChatGenerics>} user
 */
;

var APIErrorCodes = {
  '-1': {
    name: 'InternalSystemError',
    retryable: true
  },
  '2': {
    name: 'AccessKeyError',
    retryable: false
  },
  '3': {
    name: 'AuthenticationFailedError',
    retryable: true
  },
  '4': {
    name: 'InputError',
    retryable: false
  },
  '6': {
    name: 'DuplicateUsernameError',
    retryable: false
  },
  '9': {
    name: 'RateLimitError',
    retryable: true
  },
  '16': {
    name: 'DoesNotExistError',
    retryable: false
  },
  '17': {
    name: 'NotAllowedError',
    retryable: false
  },
  '18': {
    name: 'EventNotSupportedError',
    retryable: false
  },
  '19': {
    name: 'ChannelFeatureNotSupportedError',
    retryable: false
  },
  '20': {
    name: 'MessageTooLongError',
    retryable: false
  },
  '21': {
    name: 'MultipleNestingLevelError',
    retryable: false
  },
  '22': {
    name: 'PayloadTooBigError',
    retryable: false
  },
  '23': {
    name: 'RequestTimeoutError',
    retryable: true
  },
  '24': {
    name: 'MaxHeaderSizeExceededError',
    retryable: false
  },
  '40': {
    name: 'AuthErrorTokenExpired',
    retryable: false
  },
  '41': {
    name: 'AuthErrorTokenNotValidYet',
    retryable: false
  },
  '42': {
    name: 'AuthErrorTokenUsedBeforeIssuedAt',
    retryable: false
  },
  '43': {
    name: 'AuthErrorTokenSignatureInvalid',
    retryable: false
  },
  '44': {
    name: 'CustomCommandEndpointMissingError',
    retryable: false
  },
  '45': {
    name: 'CustomCommandEndpointCallError',
    retryable: true
  },
  '46': {
    name: 'ConnectionIDNotFoundError',
    retryable: false
  },
  '60': {
    name: 'CoolDownError',
    retryable: true
  },
  '69': {
    name: 'ErrWrongRegion',
    retryable: false
  },
  '70': {
    name: 'ErrQueryChannelPermissions',
    retryable: false
  },
  '71': {
    name: 'ErrTooManyConnections',
    retryable: true
  },
  '99': {
    name: 'AppSuspendedError',
    retryable: false
  }
};
function isAPIError(error) {
  return error.code !== undefined;
}
function isErrorRetryable(error) {
  if (!error.code) return false;
  var err = APIErrorCodes["".concat(error.code)];
  if (!err) return false;
  return err.retryable;
}
function isConnectionIDError(error) {
  return error.code === 46; // ConnectionIDNotFoundError
}
function isWSFailure(err) {
  if (typeof err.isWSFailure === 'boolean') {
    return err.isWSFailure;
  }

  try {
    return JSON.parse(err.message).isWSFailure;
  } catch (_) {
    return false;
  }
}
function isErrorResponse(res) {
  return !res.status || res.status < 200 || 300 <= res.status;
}

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var ConnectionState;

(function (ConnectionState) {
  ConnectionState["Closed"] = "CLOSED";
  ConnectionState["Connected"] = "CONNECTED";
  ConnectionState["Connecting"] = "CONNECTING";
  ConnectionState["Disconnected"] = "DISCONNECTED";
  ConnectionState["Init"] = "INIT";
})(ConnectionState || (ConnectionState = {}));

var WSConnectionFallback = /*#__PURE__*/function () {
  function WSConnectionFallback(_ref) {
    var _this = this;

    var client = _ref.client;

    _classCallCheck(this, WSConnectionFallback);

    _defineProperty(this, "client", void 0);

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "consecutiveFailures", void 0);

    _defineProperty(this, "connectionID", void 0);

    _defineProperty(this, "cancelToken", void 0);

    _defineProperty(this, "_onlineStatusChanged", function (event) {
      _this._log("_onlineStatusChanged() - ".concat(event.type));

      if (event.type === 'offline') {
        var _this$cancelToken;

        _this._setState(ConnectionState.Closed);

        (_this$cancelToken = _this.cancelToken) === null || _this$cancelToken === void 0 ? void 0 : _this$cancelToken.cancel('disconnect() is called');
        _this.cancelToken = undefined;
        return;
      }

      if (event.type === 'online' && _this.state === ConnectionState.Closed) {
        _this.connect(true);
      }
    });

    _defineProperty(this, "_req", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params, config, retry) {
        var _this$cancelToken2, res;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this.cancelToken && !params.close) {
                  _this.cancelToken = axios.CancelToken.source();
                }

                _context.prev = 1;
                _context.next = 4;
                return _this.client.doAxiosRequest('get', _this.client.baseURL.replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API
                undefined, {
                  config: _objectSpread$2(_objectSpread$2({}, config), {}, {
                    cancelToken: (_this$cancelToken2 = _this.cancelToken) === null || _this$cancelToken2 === void 0 ? void 0 : _this$cancelToken2.token
                  }),
                  params: params
                });

              case 4:
                res = _context.sent;
                _this.consecutiveFailures = 0; // always reset in case of no error

                return _context.abrupt("return", res);

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](1);
                _this.consecutiveFailures += 1;

                if (!(retry && isErrorRetryable(_context.t0))) {
                  _context.next = 17;
                  break;
                }

                _this._log("_req() - Retryable error, retrying request");

                _context.next = 16;
                return sleep(retryInterval(_this.consecutiveFailures));

              case 16:
                return _context.abrupt("return", _this._req(params, config, retry));

              case 17:
                throw _context.t0;

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 9]]);
      }));

      return function (_x, _x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty(this, "_poll", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _data$events, data, i;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_this.state === ConnectionState.Connected)) {
                _context2.next = 25;
                break;
              }

              _context2.prev = 1;
              _context2.next = 4;
              return _this._req({}, {
                timeout: 30000
              }, true);

            case 4:
              data = _context2.sent;

              // 30s => API responds in 20s if there is no event
              if ((_data$events = data.events) !== null && _data$events !== void 0 && _data$events.length) {
                for (i = 0; i < data.events.length; i++) {
                  _this.client.dispatchEvent(data.events[i]);
                }
              }

              _context2.next = 23;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);

              if (!axios.isCancel(_context2.t0)) {
                _context2.next = 13;
                break;
              }

              _this._log("_poll() - axios canceled request");

              return _context2.abrupt("return");

            case 13:
              if (!isConnectionIDError(_context2.t0)) {
                _context2.next = 18;
                break;
              }

              _this._log("_poll() - ConnectionID error, connecting without ID...");

              _this._setState(ConnectionState.Disconnected);

              _this.connect(true);

              return _context2.abrupt("return");

            case 18:
              if (!(isAPIError(_context2.t0) && !isErrorRetryable(_context2.t0))) {
                _context2.next = 21;
                break;
              }

              _this._setState(ConnectionState.Closed);

              return _context2.abrupt("return");

            case 21:
              _context2.next = 23;
              return sleep(retryInterval(_this.consecutiveFailures));

            case 23:
              _context2.next = 0;
              break;

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 8]]);
    })));

    _defineProperty(this, "connect", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var reconnect,
          _yield$_this$_req,
          event,
          _args3 = arguments;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              reconnect = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;

              if (!(_this.state === ConnectionState.Connecting)) {
                _context3.next = 4;
                break;
              }

              _this._log('connect() - connecting already in progress', {
                reconnect: reconnect
              }, 'warn');

              return _context3.abrupt("return");

            case 4:
              if (!(_this.state === ConnectionState.Connected)) {
                _context3.next = 7;
                break;
              }

              _this._log('connect() - already connected and polling', {
                reconnect: reconnect
              }, 'warn');

              return _context3.abrupt("return");

            case 7:
              _this._setState(ConnectionState.Connecting);

              _this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one

              _context3.prev = 9;
              _context3.next = 12;
              return _this._req({
                json: _this.client._buildWSPayload()
              }, {
                timeout: 8000
              }, // 8s
              reconnect);

            case 12:
              _yield$_this$_req = _context3.sent;
              event = _yield$_this$_req.event;

              _this._setState(ConnectionState.Connected);

              _this.connectionID = event.connection_id; // @ts-expect-error

              _this.client.dispatchEvent(event);

              _this._poll();

              if (reconnect) {
                _this.client.recoverState();
              }

              return _context3.abrupt("return", event);

            case 22:
              _context3.prev = 22;
              _context3.t0 = _context3["catch"](9);

              _this._setState(ConnectionState.Closed);

              throw _context3.t0;

            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[9, 22]]);
    })));

    _defineProperty(this, "isHealthy", function () {
      return !!_this.connectionID && _this.state === ConnectionState.Connected;
    });

    _defineProperty(this, "disconnect", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      var _this$cancelToken3;

      var timeout,
          connection_id,
          _args4 = arguments;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 2000;
              removeConnectionEventListeners(_this._onlineStatusChanged);

              _this._setState(ConnectionState.Disconnected);

              (_this$cancelToken3 = _this.cancelToken) === null || _this$cancelToken3 === void 0 ? void 0 : _this$cancelToken3.cancel('disconnect() is called');
              _this.cancelToken = undefined;
              connection_id = _this.connectionID;
              _this.connectionID = undefined;
              _context4.prev = 7;
              _context4.next = 10;
              return _this._req({
                close: true,
                connection_id: connection_id
              }, {
                timeout: timeout
              }, false);

            case 10:
              _this._log("disconnect() - Closed connectionID");

              _context4.next = 16;
              break;

            case 13:
              _context4.prev = 13;
              _context4.t0 = _context4["catch"](7);

              _this._log("disconnect() - Failed", {
                err: _context4.t0
              }, 'error');

            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[7, 13]]);
    })));

    this.client = client;
    this.state = ConnectionState.Init;
    this.consecutiveFailures = 0;
    addConnectionEventListeners(this._onlineStatusChanged);
  }

  _createClass(WSConnectionFallback, [{
    key: "_log",
    value: function _log(msg) {
      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';
      this.client.logger(level, 'WSConnectionFallback:' + msg, _objectSpread$2({
        tags: ['connection_fallback', 'connection']
      }, extra));
    }
  }, {
    key: "_setState",
    value: function _setState(state) {
      this._log("_setState() - ".concat(state)); // transition from connecting => connected


      if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {
        this.client.dispatchEvent({
          type: 'connection.changed',
          online: true
        });
      }

      if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {
        this.client.dispatchEvent({
          type: 'connection.changed',
          online: false
        });
      }

      this.state = state;
    }
    /** @private */

  }]);

  return WSConnectionFallback;
}();

var Campaign = /*#__PURE__*/function () {
  function Campaign(client, id, data) {
    _classCallCheck(this, Campaign);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "client", void 0);

    this.client = client;
    this.id = id;
    this.data = data;
  }

  _createClass(Campaign, [{
    key: "create",
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$data, _this$data2, _this$data3, _this$data4, _this$data5, _this$data6, _this$data7, _this$data8;

        var body, result;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                body = {
                  id: this.id,
                  message_template: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.message_template,
                  segment_ids: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.segment_ids,
                  sender_id: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.sender_id,
                  channel_template: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.channel_template,
                  create_channels: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.create_channels,
                  description: (_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.description,
                  name: (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.name,
                  user_ids: (_this$data8 = this.data) === null || _this$data8 === void 0 ? void 0 : _this$data8.user_ids
                };
                _context.next = 3;
                return this.client.createCampaign(body);

              case 3:
                result = _context.sent;
                this.id = result.campaign.id;
                this.data = result.campaign;
                return _context.abrupt("return", result);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function create() {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "verifyCampaignId",
    value: function verifyCampaignId() {
      if (!this.id) {
        throw new Error('Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)');
      }
    }
  }, {
    key: "start",
    value: function () {
      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.verifyCampaignId();
                _context2.next = 3;
                return this.client.startCampaign(this.id, options);

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function start(_x) {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.verifyCampaignId();
                return _context3.abrupt("return", this.client.updateCampaign(this.id, data));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x2) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.verifyCampaignId();
                _context4.next = 3;
                return this.client.delete(this.client.baseURL + "/campaigns/".concat(this.id));

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "stop",
    value: function () {
      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.verifyCampaignId();
                return _context5.abrupt("return", this.client.patch(this.client.baseURL + "/campaigns/".concat(this.id, "/stop")));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function stop() {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.verifyCampaignId();
                return _context6.abrupt("return", this.client.getCampaign(this.id));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return Campaign;
}();

var Segment = /*#__PURE__*/function () {
  function Segment(client, type, id, data) {
    _classCallCheck(this, Segment);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "client", void 0);

    _defineProperty(this, "data", void 0);

    this.client = client;
    this.type = type;
    this.id = id;
    this.data = data;
  }

  _createClass(Segment, [{
    key: "create",
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$data, _this$data2, _this$data3, _this$data4;

        var body;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                body = {
                  id: this.id,
                  type: this.type,
                  name: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.name,
                  filter: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.filter,
                  description: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.description,
                  all_users: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.all_users
                };
                return _context.abrupt("return", this.client.post(this.client.baseURL + "/segments", body));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function create() {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "verifySegmentId",
    value: function verifySegmentId() {
      if (!this.id) {
        throw new Error('Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)');
      }
    }
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.verifySegmentId();
                return _context2.abrupt("return", this.client.getSegment(this.id));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.verifySegmentId();
                return _context3.abrupt("return", this.client.updateSegment(this.id, data));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: "addTargets",
    value: function () {
      var _addTargets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(targets) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.verifySegmentId();
                return _context4.abrupt("return", this.client.addSegmentTargets(this.id, targets));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function addTargets(_x2) {
        return _addTargets.apply(this, arguments);
      }

      return addTargets;
    }()
  }, {
    key: "removeTargets",
    value: function () {
      var _removeTargets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(targets) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.verifySegmentId();
                return _context5.abrupt("return", this.client.removeSegmentTargets(this.id, targets));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function removeTargets(_x3) {
        return _removeTargets.apply(this, arguments);
      }

      return removeTargets;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.verifySegmentId();
                return _context6.abrupt("return", this.client.deleteSegment(this.id));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "targetExists",
    value: function () {
      var _targetExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(targetId) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.verifySegmentId();
                return _context7.abrupt("return", this.client.segmentTargetExists(this.id, targetId));

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function targetExists(_x4) {
        return _targetExists.apply(this, arguments);
      }

      return targetExists;
    }()
  }, {
    key: "queryTargets",
    value: function () {
      var _queryTargets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var filter,
            sort,
            options,
            _args8 = arguments;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                filter = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                sort = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : [];
                options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};
                this.verifySegmentId();
                return _context8.abrupt("return", this.client.querySegmentTargets(this.id, filter, sort, options));

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function queryTargets() {
        return _queryTargets.apply(this, arguments);
      }

      return queryTargets;
    }()
  }]);

  return Segment;
}();

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Utility Types
 */

/* Unknown Record */
//alias to avoid breaking change

/**
 * Response Types
 */
// TODO: Figure out a way to strongly type set and unset.
// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.

/**
 * Option Types
 */
// TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update

/** @deprecated use MarkChannelsReadOptions instead */
// TODO: rename to UpdateChannelTypeOptions in the next major update

/**
 * Event Types
 */

/**
 * Filter Types
 */

/**
 * Sort Types
 */

/**
 * Base Types
 */

/*
  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.

  `user`:
    - soft: marks user as deleted and retains all user data 
    - pruning: marks user as deleted and nullifies user information 
    - hard: deletes user completely - this requires hard option for messages and conversation as well
  `conversations`:
    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)
    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)
  `messages`:
    - soft: marks all user messages as deleted without removing any related message data
    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags
    - hard: deletes messages completely with all related information
  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID
 */
// TODO: add better typing
var ErrorFromResponse = /*#__PURE__*/function (_Error) {
  _inherits(ErrorFromResponse, _Error);

  var _super = _createSuper(ErrorFromResponse);

  function ErrorFromResponse() {
    var _this;

    _classCallCheck(this, ErrorFromResponse);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "code", void 0);

    _defineProperty(_assertThisInitialized(_this), "response", void 0);

    _defineProperty(_assertThisInitialized(_this), "status", void 0);

    return _this;
  }

  return ErrorFromResponse;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike  ) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var Thread = /*#__PURE__*/function () {
  function Thread(client, t) {
    _classCallCheck(this, Thread);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "latestReplies", []);

    _defineProperty(this, "participants", []);

    _defineProperty(this, "message", void 0);

    _defineProperty(this, "channel", void 0);

    _defineProperty(this, "_channel", void 0);

    _defineProperty(this, "replyCount", 0);

    _defineProperty(this, "_client", void 0);

    _defineProperty(this, "read", {});

    this.id = t.parent_message.id;
    this.message = formatMessage(t.parent_message);
    this.latestReplies = t.latest_replies.map(formatMessage);
    this.participants = t.thread_participants;
    this.replyCount = t.reply_count;
    this.channel = t.channel;
    this._channel = client.channel(t.channel.type, t.channel.id);
    this._client = client;

    if (t.read) {
      var _iterator = _createForOfIteratorHelper$1(t.read),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var r = _step.value;
          this.read[r.user.id] = _objectSpread$1(_objectSpread$1({}, r), {}, {
            last_read: new Date(r.last_read)
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }

  _createClass(Thread, [{
    key: "getClient",
    value: function getClient() {
      return this._client;
    }
    /**
     * addReply - Adds or updates a latestReplies to the thread
     *
     * @param {MessageResponse<ErmisChatGenerics>} message reply message to be added.
     */

  }, {
    key: "addReply",
    value: function addReply(message) {
      if (message.parent_id !== this.message.id) {
        throw new Error('Message does not belong to this thread');
      }

      this.latestReplies = addToMessageList(this.latestReplies, formatMessage(message), true);
    }
  }, {
    key: "updateReply",
    value: function updateReply(message) {
      this.latestReplies = this.latestReplies.map(function (m) {
        if (m.id === message.id) {
          return formatMessage(message);
        }

        return m;
      });
    }
  }, {
    key: "updateMessageOrReplyIfExists",
    value: function updateMessageOrReplyIfExists(message) {
      if (!message.parent_id && message.id !== this.message.id) {
        return;
      }

      if (message.parent_id && message.parent_id !== this.message.id) {
        return;
      }

      if (message.parent_id && message.parent_id === this.message.id) {
        this.updateReply(message);
        return;
      }

      if (!message.parent_id && message.id === this.message.id) {
        this.message = formatMessage(message);
      }
    }
  }, {
    key: "addReaction",
    value: function addReaction(reaction, message, enforce_unique) {
      var _this = this;

      if (!message) return;
      this.latestReplies = this.latestReplies.map(function (m) {
        if (m.id === message.id) {
          return formatMessage(_this._channel.state.addReaction(reaction, message, enforce_unique));
        }

        return m;
      });
    }
  }, {
    key: "removeReaction",
    value: function removeReaction(reaction, message) {
      var _this2 = this;

      if (!message) return;
      this.latestReplies = this.latestReplies.map(function (m) {
        if (m.id === message.id) {
          return formatMessage(_this2._channel.state.removeReaction(reaction, message));
        }

        return m;
      });
    }
  }]);

  return Thread;
}();

var _excluded = ["created_at", "updated_at", "last_active", "online"],
    _excluded2 = ["params", "headers"];

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike  ) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isString(x) {
  return typeof x === 'string' || x instanceof String;
}

var ErmisChat = /*#__PURE__*/function () {
  function ErmisChat(_key, secretOrOptions, _options) {
    var _this = this,
        _this$options;

    _classCallCheck(this, ErmisChat);

    _defineProperty(this, "_user", void 0);

    _defineProperty(this, "activeChannels", void 0);

    _defineProperty(this, "anonymous", void 0);

    _defineProperty(this, "persistUserOnConnectionFailure", void 0);

    _defineProperty(this, "axiosInstance", void 0);

    _defineProperty(this, "baseURL", void 0);

    _defineProperty(this, "browser", void 0);

    _defineProperty(this, "cleaningIntervalRef", void 0);

    _defineProperty(this, "clientID", void 0);

    _defineProperty(this, "configs", void 0);

    _defineProperty(this, "key", void 0);

    _defineProperty(this, "listeners", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "recoverStateOnReconnect", void 0);

    _defineProperty(this, "mutedChannels", void 0);

    _defineProperty(this, "mutedUsers", void 0);

    _defineProperty(this, "node", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "secret", void 0);

    _defineProperty(this, "setUserPromise", void 0);

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "tokenManager", void 0);

    _defineProperty(this, "user", void 0);

    _defineProperty(this, "userAgent", void 0);

    _defineProperty(this, "userID", void 0);

    _defineProperty(this, "wsBaseURL", void 0);

    _defineProperty(this, "wsConnection", void 0);

    _defineProperty(this, "wsFallback", void 0);

    _defineProperty(this, "wsPromise", void 0);

    _defineProperty(this, "consecutiveFailures", void 0);

    _defineProperty(this, "insightMetrics", void 0);

    _defineProperty(this, "defaultWSTimeoutWithFallback", void 0);

    _defineProperty(this, "defaultWSTimeout", void 0);

    _defineProperty(this, "nextRequestAbortController", null);

    _defineProperty(this, "_getConnectionID", function () {
      var _this$wsConnection, _this$wsFallback;

      return ((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID) || ((_this$wsFallback = _this.wsFallback) === null || _this$wsFallback === void 0 ? void 0 : _this$wsFallback.connectionID);
    });

    _defineProperty(this, "_hasConnectionID", function () {
      return Boolean(_this._getConnectionID());
    });

    _defineProperty(this, "connectUser", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, userTokenOrProvider) {
        var setTokenPromise, wsPromise;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (user.id) {
                  _context.next = 2;
                  break;
                }

                throw new Error('The "id" field on the user is missing');

              case 2:
                if (!(_this.userID === user.id && _this.setUserPromise)) {
                  _context.next = 5;
                  break;
                }

                console.warn('Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');
                return _context.abrupt("return", _this.setUserPromise);

              case 5:
                if (!_this.userID) {
                  _context.next = 7;
                  break;
                }

                throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');

              case 7:
                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {
                  console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add "allowServerSideConnect: true" to the client options to disable this warning.');
                }

                _this.userID = user.id;
                _this.anonymous = false;
                setTokenPromise = _this._setToken(user, userTokenOrProvider);

                _this._setUser(user);

                wsPromise = _this.openConnection();
                _this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(function (result) {
                  result[1];
                });
                _context.prev = 14;
                _context.next = 17;
                return _this.setUserPromise;

              case 17:
                return _context.abrupt("return", _context.sent);

              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](14);

                if (_this.persistUserOnConnectionFailure) {
                  _this.closeConnection();
                } else {
                  _this.disconnectUser();
                }

                throw _context.t0;

              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[14, 20]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(this, "setUser", this.connectUser);

    _defineProperty(this, "_setToken", function (user, userTokenOrProvider) {
      return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);
    });

    _defineProperty(this, "closeConnection", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(timeout) {
        var _this$wsConnection2, _this$wsFallback2;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (_this.cleaningIntervalRef != null) {
                  clearInterval(_this.cleaningIntervalRef);
                  _this.cleaningIntervalRef = undefined;
                }

                _context2.next = 3;
                return Promise.all([(_this$wsConnection2 = _this.wsConnection) === null || _this$wsConnection2 === void 0 ? void 0 : _this$wsConnection2.disconnect(timeout), (_this$wsFallback2 = _this.wsFallback) === null || _this$wsFallback2 === void 0 ? void 0 : _this$wsFallback2.disconnect(timeout)]);

              case 3:
                return _context2.abrupt("return", Promise.resolve());

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty(this, "openConnection", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var _this$wsConnection3, _this$wsConnection4, _this$wsFallback3;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_this.userID) {
                _context3.next = 2;
                break;
              }

              throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');

            case 2:
              if (!((_this$wsConnection3 = _this.wsConnection) !== null && _this$wsConnection3 !== void 0 && _this$wsConnection3.isConnecting && _this.wsPromise)) {
                _context3.next = 5;
                break;
              }

              _this.logger('info', 'client:openConnection() - connection already in progress', {
                tags: ['connection', 'client']
              });

              return _context3.abrupt("return", _this.wsPromise);

            case 5:
              if (!(((_this$wsConnection4 = _this.wsConnection) !== null && _this$wsConnection4 !== void 0 && _this$wsConnection4.isHealthy || (_this$wsFallback3 = _this.wsFallback) !== null && _this$wsFallback3 !== void 0 && _this$wsFallback3.isHealthy()) && _this._hasConnectionID())) {
                _context3.next = 8;
                break;
              }

              _this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {
                tags: ['connection', 'client']
              });

              return _context3.abrupt("return", Promise.resolve());

            case 8:
              _this.clientID = "".concat(_this.userID, "--").concat(randomId());
              _this.wsPromise = _this.connect();

              _this._startCleaning();

              return _context3.abrupt("return", _this.wsPromise);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));

    _defineProperty(this, "_setupConnection", this.openConnection);

    _defineProperty(this, "_normalizeDate", function (before) {
      if (before instanceof Date) {
        before = before.toISOString();
      }

      if (before === '') {
        throw new Error("Don't pass blank string for since, use null instead if resetting the token revoke");
      }

      return before;
    });

    _defineProperty(this, "disconnectUser", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(timeout) {
        var closePromise, _i, _Object$values, _channel;

        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _this.logger('info', 'client:disconnect() - Disconnecting the client', {
                  tags: ['connection', 'client']
                });

                delete _this.user;
                delete _this._user;
                delete _this.userID;
                _this.anonymous = false;
                closePromise = _this.closeConnection(timeout);

                for (_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++) {
                  _channel = _Object$values[_i];

                  _channel._disconnect();
                }

                _this.activeChannels = {};
                _this.state = new ClientState();
                setTimeout(_this.tokenManager.reset);
                return _context4.abrupt("return", closePromise);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());

    _defineProperty(this, "disconnect", this.disconnectUser);

    _defineProperty(this, "connectAnonymousUser", function () {
      if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {
        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add "allowServerSideConnect: true" to the client options to disable this warning.');
      }

      _this.anonymous = true;
      _this.userID = randomId();
      var anonymousUser = {
        id: _this.userID,
        anon: true
      };

      _this._setToken(anonymousUser, '');

      _this._setUser(anonymousUser);

      return _this._setupConnection();
    });

    _defineProperty(this, "setAnonymousUser", this.connectAnonymousUser);

    _defineProperty(this, "doAxiosRequest", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(type, url, data) {
        var options,
            requestConfig,
            response,
            _requestConfig$header,
            _args5 = arguments;

        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};
                requestConfig = _this._enrichAxiosOptions(options);
                _context5.prev = 2;

                _this._logApiRequest(type, url, data, requestConfig);

                _context5.t0 = type;
                _context5.next = _context5.t0 === 'get' ? 7 : _context5.t0 === 'delete' ? 11 : _context5.t0 === 'post' ? 15 : _context5.t0 === 'postForm' ? 19 : _context5.t0 === 'put' ? 23 : _context5.t0 === 'patch' ? 27 : _context5.t0 === 'options' ? 31 : 35;
                break;

              case 7:
                _context5.next = 9;
                return _this.axiosInstance.get(url, requestConfig);

              case 9:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 11:
                _context5.next = 13;
                return _this.axiosInstance.delete(url, requestConfig);

              case 13:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 15:
                _context5.next = 17;
                return _this.axiosInstance.post(url, data, requestConfig);

              case 17:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 19:
                _context5.next = 21;
                return _this.axiosInstance.postForm(url, data, requestConfig);

              case 21:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 23:
                _context5.next = 25;
                return _this.axiosInstance.put(url, data, requestConfig);

              case 25:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 27:
                _context5.next = 29;
                return _this.axiosInstance.patch(url, data, requestConfig);

              case 29:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 31:
                _context5.next = 33;
                return _this.axiosInstance.options(url, requestConfig);

              case 33:
                response = _context5.sent;
                return _context5.abrupt("break", 36);

              case 35:
                throw new Error('Invalid request type');

              case 36:
                _this._logApiResponse(type, url, response);

                _this.consecutiveFailures = 0;
                return _context5.abrupt("return", _this.handleResponse(response));

              case 41:
                _context5.prev = 41;
                _context5.t1 = _context5["catch"](2);
                _context5.t1.client_request_id = (_requestConfig$header = requestConfig.headers) === null || _requestConfig$header === void 0 ? void 0 : _requestConfig$header['x-client-request-id'];

                _this._logApiError(type, url, _context5.t1);

                _this.consecutiveFailures += 1;

                if (!_context5.t1.response) {
                  _context5.next = 58;
                  break;
                }

                if (!(_context5.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {
                  _context5.next = 55;
                  break;
                }

                if (!(_this.consecutiveFailures > 1)) {
                  _context5.next = 51;
                  break;
                }

                _context5.next = 51;
                return sleep(retryInterval(_this.consecutiveFailures));

              case 51:
                _this.tokenManager.loadToken();

                _context5.next = 54;
                return _this.doAxiosRequest(type, url, data, options);

              case 54:
                return _context5.abrupt("return", _context5.sent);

              case 55:
                return _context5.abrupt("return", _this.handleResponse(_context5.t1.response));

              case 58:
                throw _context5.t1;

              case 59:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[2, 41]]);
      }));

      return function (_x5, _x6, _x7) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty(this, "dispatchEvent", function (event) {
      if (!event.received_at) event.received_at = new Date();

      var postListenerCallbacks = _this._handleClientEvent(event);

      var cid = event.cid;
      var channel = cid ? _this.activeChannels[cid] : undefined;

      if (channel) {
        channel._handleChannelEvent(event);
      }

      _this._callClientListeners(event);

      if (channel) {
        channel._callChannelListeners(event);
      }

      postListenerCallbacks.forEach(function (c) {
        return c();
      });
    });

    _defineProperty(this, "handleEvent", function (messageEvent) {
      var jsonString = messageEvent.data;
      var event = JSON.parse(jsonString);

      _this.dispatchEvent(event);
    });

    _defineProperty(this, "_updateMemberWatcherReferences", function (user) {
      var refMap = _this.state.userChannelReferences[user.id] || {};

      for (var _channelID in refMap) {
        var _channel2 = _this.activeChannels[_channelID];

        if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {
          if (_channel2.state.members[user.id]) {
            _channel2.state.members[user.id].user = user;
          }

          if (_channel2.state.watchers[user.id]) {
            _channel2.state.watchers[user.id] = user;
          }

          if (_channel2.state.read[user.id]) {
            _channel2.state.read[user.id].user = user;
          }
        }
      }
    });

    _defineProperty(this, "_updateUserReferences", this._updateMemberWatcherReferences);

    _defineProperty(this, "_updateUserMessageReferences", function (user) {
      var refMap = _this.state.userChannelReferences[user.id] || {};

      for (var _channelID2 in refMap) {
        var _channel3 = _this.activeChannels[_channelID2];
        if (!_channel3) continue;
        var state = _channel3.state;
        state === null || state === void 0 ? void 0 : state.updateUserMessages(user);
      }
    });

    _defineProperty(this, "_deleteUserMessageReference", function (user) {
      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var refMap = _this.state.userChannelReferences[user.id] || {};

      for (var _channelID3 in refMap) {
        var _channel4 = _this.activeChannels[_channelID3];
        var state = _channel4.state;
        state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);
      }
    });

    _defineProperty(this, "_handleUserEvent", function (event) {
      if (!event.user) {
        return;
      }

      if (event.type === 'user.presence.changed' || event.type === 'user.updated') {
        if (event.user.id === _this.userID) {
          var user = _objectSpread({}, _this.user || {});

          var _user = _objectSpread({}, _this._user || {}); // Remove deleted properties from user objects.


          for (var _key2 in _this.user) {
            if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {
              continue;
            }

            delete user[_key2];
            delete _user[_key2];
          }
          /** Updating only available properties in _user object. */


          for (var _key3 in event.user) {
            if (_user && _key3 in _user) {
              _user[_key3] = event.user[_key3];
            }
          } // @ts-expect-error


          _this._user = _objectSpread({}, _user);
          _this.user = _objectSpread(_objectSpread({}, user), event.user);
        }

        _this.state.updateUser(event.user);

        _this._updateMemberWatcherReferences(event.user);
      }

      if (event.type === 'user.updated') {
        _this._updateUserMessageReferences(event.user);
      }

      if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {
        _this._deleteUserMessageReference(event.user, event.hard_delete);
      }
    });

    _defineProperty(this, "_callClientListeners", function (event) {
      var client = _this; // gather and call the listeners

      var listeners = [];

      if (client.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray(client.listeners.all));
      }

      if (client.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray(client.listeners[event.type]));
      } // call the event and send it to the listeners


      for (var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++) {
        var listener = _listeners[_i2];
        listener(event);
      }
    });

    _defineProperty(this, "recoverState", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var cids;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _this.logger('info', "client:recoverState() - Start of recoverState with connectionID ".concat(_this._getConnectionID()), {
                tags: ['connection']
              });

              cids = Object.keys(_this.activeChannels);

              if (!(cids.length && _this.recoverStateOnReconnect)) {
                _context6.next = 10;
                break;
              }

              _this.logger('info', "client:recoverState() - Start the querying of ".concat(cids.length, " channels"), {
                tags: ['connection', 'client']
              });

              _context6.next = 6;
              return _this.queryChannels({
                cid: {
                  $in: cids
                }
              }, {
                last_message_at: -1
              }, {
                limit: 30
              });

            case 6:
              _this.logger('info', 'client:recoverState() - Querying channels finished', {
                tags: ['connection', 'client']
              });

              _this.dispatchEvent({
                type: 'connection.recovered'
              });

              _context6.next = 11;
              break;

            case 10:
              _this.dispatchEvent({
                type: 'connection.recovered'
              });

            case 11:
              _this.wsPromise = Promise.resolve();
              _this.setUserPromise = Promise.resolve();

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));

    _defineProperty(this, "getChannelByMembers", function (channelType, custom) {
      // Check if the channel already exists.
      // Only allow 1 channel object per cid
      var membersStr = _toConsumableArray(custom.members || []).sort().join(',');

      var tempCid = "".concat(channelType, ":!members-").concat(membersStr);

      if (!membersStr) {
        throw Error('Please specify atleast one member when creating unique conversation');
      } // channel could exist in `activeChannels` list with either one of the following two keys:
      // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create
      // 2. Sorted membersStr - E.g., "messaging:amin,vishal" OR "messaging:amin,jaap,tom"
      //                        This is set when you create a channel, but haven't queried yet. After query,
      //                        we will replace it with `cid`


      for (var _key4 in _this.activeChannels) {
        var _channel5 = _this.activeChannels[_key4];

        if (_channel5.disconnected) {
          continue;
        }

        if (_key4 === tempCid) {
          return _channel5;
        }

        if (_key4.indexOf("".concat(channelType, ":!members-")) === 0) {
          var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(',');

          if (membersStrInExistingChannel === membersStr) {
            return _channel5;
          }
        }
      }

      var channel = new Channel(_this, channelType, undefined, custom); // For the time being set the key as membersStr, since we don't know the cid yet.
      // In channel.query, we will replace it with 'cid'.

      _this.activeChannels[tempCid] = channel;
      return channel;
    });

    _defineProperty(this, "getChannelById", function (channelType, channelID, custom) {
      if (typeof channelID === 'string' && ~channelID.indexOf(':')) {
        throw Error("Invalid channel id ".concat(channelID, ", can't contain the : character"));
      } // only allow 1 channel object per cid


      var cid = "".concat(channelType, ":").concat(channelID);

      if (cid in _this.activeChannels && !_this.activeChannels[cid].disconnected) {
        var _channel6 = _this.activeChannels[cid];

        if (Object.keys(custom).length > 0) {
          _channel6.data = custom;
          _channel6._data = custom;
        }

        return _channel6;
      }

      var channel = new Channel(_this, channelType, channelID, custom);
      _this.activeChannels[channel.cid] = channel;
      return channel;
    });

    _defineProperty(this, "updateUsers", this.upsertUsers);

    _defineProperty(this, "updateUser", this.upsertUser);

    _defineProperty(this, "_unblockMessage", this.unblockMessage);

    _defineProperty(this, "markAllRead", this.markChannelsRead);

    _defineProperty(this, "_isUsingServerAuth", function () {
      return !!_this.secret;
    });

    _defineProperty(this, "_buildWSPayload", function (client_request_id) {
      return JSON.stringify({
        user_id: _this.userID,
        user_details: _this._user,
        device: _this.options.device,
        client_request_id: client_request_id
      });
    });

    this.key = _key;
    this.listeners = {};
    this.state = new ClientState();
    this.mutedChannels = [];
    this.mutedUsers = [];

    if (secretOrOptions && isString(secretOrOptions)) {
      this.secret = secretOrOptions;
    }

    var inputOptions = _options ? _options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};
    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';
    this.node = !this.browser;
    this.options = _objectSpread({
      timeout: 3000,
      withCredentials: false,
      warmUp: false,
      recoverStateOnReconnect: true
    }, inputOptions);

    if (this.node && !this.options.httpsAgent) {
      this.options.httpsAgent = new https.Agent({
        keepAlive: true,
        keepAliveMsecs: 3000
      });
    }

    this.axiosInstance = axios.create(this.options);
    this.setBaseURL(this.options.baseURL || 'https://api.ermis.network');
    console.log('------------------baseURL---------------------', this.baseURL);

    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {
      this.setBaseURL('http://localhost:3030');
    }

    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_HOST) {
      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);
    }

    this.wsConnection = null;
    this.wsPromise = null;
    this.setUserPromise = null;
    this.activeChannels = {};
    this.configs = {};
    this.anonymous = false;
    this.persistUserOnConnectionFailure = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.persistUserOnConnectionFailure;
    this.tokenManager = new TokenManager(this.secret);
    this.consecutiveFailures = 0;
    this.insightMetrics = new InsightMetrics();
    this.defaultWSTimeoutWithFallback = 6000;
    this.defaultWSTimeout = 15000;
    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;
    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : function () {
      return null;
    };
    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;
  }

  _createClass(ErmisChat, [{
    key: "devToken",
    value: function devToken(userID) {
      return DevToken(userID);
    }
  }, {
    key: "getAuthType",
    value: function getAuthType() {
      return this.anonymous ? 'anonymous' : 'jwt';
    }
  }, {
    key: "setBaseURL",
    value: function setBaseURL(baseURL) {
      this.baseURL = baseURL;
      this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');
    }
  }, {
    key: "_setUser",
    value: function _setUser(user) {
      this.user = user;
      this.userID = user.id;
      this._user = _objectSpread({}, user);
    }
  }, {
    key: "updateAppSettings",
    value: function () {
      var _updateAppSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {
        var apn_config;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                apn_config = options.apn_config;

                if (apn_config !== null && apn_config !== void 0 && apn_config.p12_cert) {
                  options = _objectSpread(_objectSpread({}, options), {}, {
                    apn_config: _objectSpread(_objectSpread({}, apn_config), {}, {
                      p12_cert: Buffer.from(apn_config.p12_cert).toString('base64'),
                      team_id: apn_config.team_id || 'HELLO'
                    })
                  });
                }

                _context7.next = 4;
                return this.patch(this.baseURL + '/app', options);

              case 4:
                return _context7.abrupt("return", _context7.sent);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function updateAppSettings(_x8) {
        return _updateAppSettings.apply(this, arguments);
      }

      return updateAppSettings;
    }()
  }, {
    key: "revokeTokens",
    value: function () {
      var _revokeTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(before) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.updateAppSettings({
                  revoke_tokens_issued_before: this._normalizeDate(before)
                });

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function revokeTokens(_x9) {
        return _revokeTokens.apply(this, arguments);
      }

      return revokeTokens;
    }()
  }, {
    key: "revokeUserToken",
    value: function () {
      var _revokeUserToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(userID, before) {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.revokeUsersToken([userID], before);

              case 2:
                return _context9.abrupt("return", _context9.sent);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function revokeUserToken(_x10, _x11) {
        return _revokeUserToken.apply(this, arguments);
      }

      return revokeUserToken;
    }()
  }, {
    key: "revokeUsersToken",
    value: function () {
      var _revokeUsersToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(userIDs, before) {
        var users, _iterator, _step, userID;

        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (before === undefined) {
                  before = new Date().toISOString();
                } else {
                  before = this._normalizeDate(before);
                }

                users = [];
                _iterator = _createForOfIteratorHelper(userIDs);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    userID = _step.value;
                    users.push({
                      id: userID,
                      set: {
                        revoke_tokens_issued_before: before
                      }
                    });
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                _context10.next = 6;
                return this.partialUpdateUsers(users);

              case 6:
                return _context10.abrupt("return", _context10.sent);

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function revokeUsersToken(_x12, _x13) {
        return _revokeUsersToken.apply(this, arguments);
      }

      return revokeUsersToken;
    }()
  }, {
    key: "getAppSettings",
    value: function () {
      var _getAppSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.get(this.baseURL + '/app');

              case 2:
                return _context11.abrupt("return", _context11.sent);

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getAppSettings() {
        return _getAppSettings.apply(this, arguments);
      }

      return getAppSettings;
    }()
  }, {
    key: "testPushSettings",
    value: function () {
      var _testPushSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(userID) {
        var data,
            _args12 = arguments;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
                _context12.next = 3;
                return this.post(this.baseURL + '/check_push', _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
                  user_id: userID
                }, data.messageID ? {
                  message_id: data.messageID
                } : {}), data.apnTemplate ? {
                  apn_template: data.apnTemplate
                } : {}), data.firebaseTemplate ? {
                  firebase_template: data.firebaseTemplate
                } : {}), data.firebaseDataTemplate ? {
                  firebase_data_template: data.firebaseDataTemplate
                } : {}), data.skipDevices ? {
                  skip_devices: true
                } : {}), data.pushProviderName ? {
                  push_provider_name: data.pushProviderName
                } : {}), data.pushProviderType ? {
                  push_provider_type: data.pushProviderType
                } : {}));

              case 3:
                return _context12.abrupt("return", _context12.sent);

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function testPushSettings(_x14) {
        return _testPushSettings.apply(this, arguments);
      }

      return testPushSettings;
    }()
  }, {
    key: "testSQSSettings",
    value: function () {
      var _testSQSSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var data,
            _args13 = arguments;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                data = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                _context13.next = 3;
                return this.post(this.baseURL + '/check_sqs', data);

              case 3:
                return _context13.abrupt("return", _context13.sent);

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function testSQSSettings() {
        return _testSQSSettings.apply(this, arguments);
      }

      return testSQSSettings;
    }()
  }, {
    key: "testSNSSettings",
    value: function () {
      var _testSNSSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
        var data,
            _args14 = arguments;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                data = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
                _context14.next = 3;
                return this.post(this.baseURL + '/check_sns', data);

              case 3:
                return _context14.abrupt("return", _context14.sent);

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function testSNSSettings() {
        return _testSNSSettings.apply(this, arguments);
      }

      return testSNSSettings;
    }()
  }, {
    key: "setGuestUser",
    value: function () {
      var _setGuestUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(user) {
        var response, _response$user, guestUser;

        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                this.anonymous = true;
                _context15.prev = 1;
                _context15.next = 4;
                return this.post(this.baseURL + '/guest', {
                  user: user
                });

              case 4:
                response = _context15.sent;
                _context15.next = 11;
                break;

              case 7:
                _context15.prev = 7;
                _context15.t0 = _context15["catch"](1);
                this.anonymous = false;
                throw _context15.t0;

              case 11:
                this.anonymous = false; // eslint-disable-next-line @typescript-eslint/no-unused-vars

                _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _objectWithoutProperties(_response$user, _excluded);
                _context15.next = 15;
                return this.connectUser(guestUser, response.access_token);

              case 15:
                return _context15.abrupt("return", _context15.sent);

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this, [[1, 7]]);
      }));

      function setGuestUser(_x15) {
        return _setGuestUser.apply(this, arguments);
      }

      return setGuestUser;
    }()
  }, {
    key: "createToken",
    value: function createToken(userID, exp, iat) {
      if (this.secret == null) {
        throw Error("tokens can only be created server-side using the API Secret");
      }

      var extra = {};

      if (exp) {
        extra.exp = exp;
      }

      if (iat) {
        extra.iat = iat;
      }

      return JWTUserToken(this.secret, userID, extra, {});
    }
  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;

      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this.logger('info', "Attaching listener for ".concat(key, " event"), {
        tags: ['event', 'client']
      });
      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2.logger('info', "Removing listener for ".concat(key, " event"), {
            tags: ['event', 'client']
          });

          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {
            return el !== callback;
          });
        }
      };
    }
  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this.logger('info', "Removing listener for ".concat(key, " event"), {
        tags: ['event', 'client']
      });
      this.listeners[key] = this.listeners[key].filter(function (value) {
        return value !== callback;
      });
    }
  }, {
    key: "_logApiRequest",
    value: function _logApiRequest(type, url, data, config) {
      this.logger('info', "client: ".concat(type, " - Request - ").concat(url), {
        tags: ['api', 'api_request', 'client'],
        url: url,
        payload: data,
        config: config
      });
    }
  }, {
    key: "_logApiResponse",
    value: function _logApiResponse(type, url, response) {
      this.logger('info', "client:".concat(type, " - Response - url: ").concat(url, " > status ").concat(response.status), {
        tags: ['api', 'api_response', 'client'],
        url: url,
        response: response
      });
    }
  }, {
    key: "_logApiError",
    value: function _logApiError(type, url, error) {
      this.logger('error', "client:".concat(type, " - Error - url: ").concat(url), {
        tags: ['api', 'api_response', 'client'],
        url: url,
        error: error
      });
    }
  }, {
    key: "get",
    value: function get(url, params) {
      return this.doAxiosRequest('get', url, null, {
        params: params
      });
    }
  }, {
    key: "put",
    value: function put(url, data) {
      return this.doAxiosRequest('put', url, data);
    }
  }, {
    key: "post",
    value: function post(url, data) {
      return this.doAxiosRequest('post', url, data);
    }
  }, {
    key: "patch",
    value: function patch(url, data) {
      return this.doAxiosRequest('patch', url, data);
    }
  }, {
    key: "delete",
    value: function _delete(url, params) {
      return this.doAxiosRequest('delete', url, null, {
        params: params
      });
    }
  }, {
    key: "sendFile",
    value: function sendFile(url, uri, name, contentType, user) {
      var data = addFileToFormData(uri, name, contentType || 'multipart/form-data');
      if (user != null) data.append('user', JSON.stringify(user));
      return this.doAxiosRequest('postForm', url, data, {
        headers: data.getHeaders ? data.getHeaders() : {},
        config: {
          timeout: 0,
          maxContentLength: Infinity,
          maxBodyLength: Infinity
        }
      });
    }
  }, {
    key: "errorFromResponse",
    value: function errorFromResponse(response) {
      var err;
      err = new ErrorFromResponse("ErmisChat error HTTP code: ".concat(response.status));

      if (response.data && response.data.code) {
        err = new Error("ErmisChat error code ".concat(response.data.code, ": ").concat(response.data.message));
        err.code = response.data.code;
      }

      err.response = response;
      err.status = response.status;
      return err;
    }
  }, {
    key: "handleResponse",
    value: function handleResponse(response) {
      var data = response.data;

      if (isErrorResponse(response)) {
        throw this.errorFromResponse(response);
      }

      return data;
    }
  }, {
    key: "_handleClientEvent",
    value: function _handleClientEvent(event) {
      var _event$me,
          _this3 = this,
          _event$me2;

      var client = this;
      var postListenerCallbacks = [];
      this.logger('info', "client:_handleClientEvent - Received event of type { ".concat(event.type, " }"), {
        tags: ['event', 'client'],
        event: event
      });

      if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {
        this._handleUserEvent(event);
      }

      if (event.type === 'health.check' && event.me) {
        client.user = event.me;
        client.state.updateUser(event.me);
        client.mutedChannels = event.me.channel_mutes;
        client.mutedUsers = event.me.mutes;
      }

      if (event.channel && event.type === 'notification.message_new') {
        this._addChannelConfig(event.channel);
      }

      if (event.type === 'notification.channel_mutes_updated' && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {
        var currentMutedChannelIds = [];
        var nextMutedChannelIds = [];
        this.mutedChannels.forEach(function (mute) {
          return mute.channel && currentMutedChannelIds.push(mute.channel.cid);
        });
        event.me.channel_mutes.forEach(function (mute) {
          return mute.channel && nextMutedChannelIds.push(mute.channel.cid);
        });
        /** Set the unread count of un-muted channels to 0, which is the behaviour of backend */

        currentMutedChannelIds.forEach(function (cid) {
          if (!nextMutedChannelIds.includes(cid) && _this3.activeChannels[cid]) {
            _this3.activeChannels[cid].state.unreadCount = 0;
          }
        });
        this.mutedChannels = event.me.channel_mutes;
      }

      if (event.type === 'notification.mutes_updated' && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {
        this.mutedUsers = event.me.mutes;
      }

      if (event.type === 'notification.mark_read' && event.unread_channels === 0) {
        var activeChannelKeys = Object.keys(this.activeChannels);
        activeChannelKeys.forEach(function (activeChannelKey) {
          return _this3.activeChannels[activeChannelKey].state.unreadCount = 0;
        });
      }

      if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {
        var _this$activeChannels$;

        client.state.deleteAllChannelReference(event.cid);
        (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();
        postListenerCallbacks.push(function () {
          if (!event.cid) return;
          delete _this3.activeChannels[event.cid];
        });
      }

      return postListenerCallbacks;
    }
  }, {
    key: "_muteStatus",
    value: function _muteStatus(cid) {
      var muteStatus;

      for (var i = 0; i < this.mutedChannels.length; i++) {
        var _mute$channel;

        var mute = this.mutedChannels[i];

        if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {
          muteStatus = {
            muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,
            createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),
            expiresAt: mute.expires ? new Date(mute.expires) : null
          };
          break;
        }
      }

      if (muteStatus) {
        return muteStatus;
      }

      return {
        muted: false,
        createdAt: null,
        expiresAt: null
      };
    }
  }, {
    key: "connect",
    value:
    /**
     * @private
     */
    function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                if (!(!this.userID || !this._user)) {
                  _context16.next = 2;
                  break;
                }

                throw Error('Call connectUser or connectAnonymousUser before starting the connection');

              case 2:
                if (this.wsBaseURL) {
                  _context16.next = 4;
                  break;
                }

                throw Error('Websocket base url not set');

              case 4:
                if (this.clientID) {
                  _context16.next = 6;
                  break;
                }

                throw Error('clientID is not set');

              case 6:
                if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) ; // The StableWSConnection handles all the reconnection logic.


                if (this.options.wsConnection && this.node) {
                  // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.
                  this.options.wsConnection.setClient(this);
                  this.wsConnection = this.options.wsConnection;
                } else {
                  // await this.queryChannels(
                  //   { cid: { $in: ['team:HELLO', 'Team:HELLO'] } } as ChannelFilters<ErmisChatGenerics>,
                  //   { last_message_at: -1 },
                  //   { limit: 30 },
                  // );
                  this.wsConnection = new StableWSConnection({
                    client: this
                  });
                }

                _context16.prev = 8;

                if (!this.wsFallback) {
                  _context16.next = 13;
                  break;
                }

                _context16.next = 12;
                return this.wsFallback.connect();

              case 12:
                return _context16.abrupt("return", _context16.sent);

              case 13:
                _context16.next = 15;
                return this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);

              case 15:
                return _context16.abrupt("return", _context16.sent);

              case 18:
                _context16.prev = 18;
                _context16.t0 = _context16["catch"](8);

                if (!(this.options.enableWSFallback && isWSFailure(_context16.t0) && isOnline())) {
                  _context16.next = 29;
                  break;
                }

                this.logger('info', 'client:connect() - WS failed, fallback to longpoll', {
                  tags: ['connection', 'client']
                });
                this.dispatchEvent({
                  type: 'transport.changed',
                  mode: 'longpoll'
                });

                this.wsConnection._destroyCurrentWSConnection();

                this.wsConnection.disconnect().then(); // close WS so no retry

                this.wsFallback = new WSConnectionFallback({
                  client: this
                });
                _context16.next = 28;
                return this.wsFallback.connect();

              case 28:
                return _context16.abrupt("return", _context16.sent);

              case 29:
                throw _context16.t0;

              case 30:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[8, 18]]);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
    /**
     * Check the connectivity with server for warmup purpose.
     *
     * @private
     */

  }, {
    key: "_sayHi",
    value: function _sayHi() {
      var client_request_id = randomId();
      var opts = {
        headers: {
          'x-client-request-id': client_request_id
        }
      };
      this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch(function (e) {});
    }
    /**
     * queryUsers - Query users and watch user presence
     *
     * @param {UserFilters<ErmisChatGenerics>} filterConditions MongoDB style filter conditions
     * @param {UserSort<ErmisChatGenerics>} sort Sort options, for instance [{last_active: -1}].
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]
     * @param {UserOptions} options Option object, {presence: true}
     *
     * @return {Promise<{ users: Array<UserResponse<ErmisChatGenerics>> }>} User Query Response
     */

  }, {
    key: "queryUsers",
    value: function () {
      var _queryUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(filterConditions) {
        var sort,
            options,
            defaultOptions,
            data,
            _args17 = arguments;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                sort = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : [];
                options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};
                defaultOptions = {
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context17.next = 5;
                return this.wsPromise;

              case 5:
                if (!this._hasConnectionID()) {
                  defaultOptions.presence = false;
                } // Return a list of users


                _context17.next = 8;
                return this.get(this.baseURL + '/users', {
                  payload: _objectSpread(_objectSpread({
                    filter_conditions: filterConditions,
                    sort: normalizeQuerySort(sort)
                  }, defaultOptions), options)
                });

              case 8:
                data = _context17.sent;
                this.state.updateUsers(data.users);
                return _context17.abrupt("return", data);

              case 11:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function queryUsers(_x16) {
        return _queryUsers.apply(this, arguments);
      }

      return queryUsers;
    }()
    /**
     * queryBannedUsers - Query user bans
     *
     * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions
     * @param {BannedUsersSort} sort Sort options [{created_at: 1}].
     * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}
     *
     * @return {Promise<BannedUsersResponse<ErmisChatGenerics>>} Ban Query Response
     */

  }, {
    key: "queryBannedUsers",
    value: function () {
      var _queryBannedUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        var filterConditions,
            sort,
            options,
            _args18 = arguments;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                filterConditions = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
                sort = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];
                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};
                _context18.next = 5;
                return this.get(this.baseURL + '/query_banned_users', {
                  payload: _objectSpread({
                    filter_conditions: filterConditions,
                    sort: normalizeQuerySort(sort)
                  }, options)
                });

              case 5:
                return _context18.abrupt("return", _context18.sent);

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function queryBannedUsers() {
        return _queryBannedUsers.apply(this, arguments);
      }

      return queryBannedUsers;
    }()
    /**
     * queryMessageFlags - Query message flags
     *
     * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions
     * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<MessageFlagsResponse<ErmisChatGenerics>>} Message Flags Response
     */

  }, {
    key: "queryMessageFlags",
    value: function () {
      var _queryMessageFlags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        var filterConditions,
            options,
            _args19 = arguments;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                filterConditions = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};
                options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
                _context19.next = 4;
                return this.get(this.baseURL + '/moderation/flags/message', {
                  payload: _objectSpread({
                    filter_conditions: filterConditions
                  }, options)
                });

              case 4:
                return _context19.abrupt("return", _context19.sent);

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function queryMessageFlags() {
        return _queryMessageFlags.apply(this, arguments);
      }

      return queryMessageFlags;
    }()
    /**
     * queryChannels - Query channels
     *
     * @param {ChannelFilters<ErmisChatGenerics>} filterConditions object MongoDB style filters
     * @param {ChannelSort<ErmisChatGenerics>} [sort] Sort options, for instance {created_at: -1}.
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]
     * @param {ChannelOptions} [options] Options object
     * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.
     * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.
     *
     * @return {Promise<{ channels: Array<ChannelAPIResponse<AErmisChatGenerics>>}> } search channels response
     */

  }, {
    key: "queryChannels",
    value: function () {
      var _queryChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(filterConditions) {
        var sort,
            options,
            stateOptions,
            defaultOptions,
            payload,
            data,
            _args20 = arguments;
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                sort = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : [];
                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};
                stateOptions = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context20.next = 6;
                return this.wsPromise;

              case 6:
                if (!this._hasConnectionID()) {
                  defaultOptions.watch = false;
                } // Return a list of channels


                payload = _objectSpread(_objectSpread({
                  filter_conditions: filterConditions,
                  sort: normalizeQuerySort(sort)
                }, defaultOptions), options);
                _context20.next = 10;
                return this.post(this.baseURL + '/channels', payload);

              case 10:
                data = _context20.sent;
                this.dispatchEvent({
                  type: 'channels.queried',
                  queriedChannels: {
                    channels: data.channels,
                    isLatestMessageSet: true
                  }
                });
                return _context20.abrupt("return", this.hydrateActiveChannels(data.channels, stateOptions));

              case 13:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function queryChannels(_x17) {
        return _queryChannels.apply(this, arguments);
      }

      return queryChannels;
    }()
  }, {
    key: "hydrateActiveChannels",
    value: function hydrateActiveChannels() {
      var channelsFromApi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var stateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var skipInitialization = stateOptions.skipInitialization,
          _stateOptions$offline = stateOptions.offlineMode,
          offlineMode = _stateOptions$offline === void 0 ? false : _stateOptions$offline;

      var _iterator2 = _createForOfIteratorHelper(channelsFromApi),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var channelState = _step2.value;

          this._addChannelConfig(channelState.channel);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var channels = [];

      var _iterator3 = _createForOfIteratorHelper(channelsFromApi),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _channelState = _step3.value;
          var c = this.channel(_channelState.channel.type, _channelState.channel.id);
          c.data = _channelState.channel;
          c.offlineMode = offlineMode;
          c.initialized = !offlineMode;

          if (skipInitialization === undefined) {
            c._initializeState(_channelState, 'latest');
          } else if (!skipInitialization.includes(_channelState.channel.id)) {
            c.state.clearMessages();

            c._initializeState(_channelState, 'latest');
          }

          channels.push(c);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return channels;
    }
    /**
     * search - Query messages
     *
     * @param {ChannelFilters<ErmisChatGenerics>} filterConditions MongoDB style filter conditions
     * @param {MessageFilters<ErmisChatGenerics> | string} query search query or object MongoDB style filters
     * @param {SearchOptions<ErmisChatGenerics>} [options] Option object, {user_id: 'tommaso'}
     *
     * @return {Promise<SearchAPIResponse<ErmisChatGenerics>>} search messages response
     */

  }, {
    key: "search",
    value: function () {
      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(filterConditions, query) {
        var options,
            payload,
            _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                options = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};

                if (!(options.offset && options.next)) {
                  _context21.next = 3;
                  break;
                }

                throw Error("Cannot specify offset with next");

              case 3:
                payload = _objectSpread(_objectSpread({
                  filter_conditions: filterConditions
                }, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined
                });

                if (!(typeof query === 'string')) {
                  _context21.next = 8;
                  break;
                }

                payload.query = query;
                _context21.next = 13;
                break;

              case 8:
                if (!(_typeof$1(query) === 'object')) {
                  _context21.next = 12;
                  break;
                }

                payload.message_filter_conditions = query;
                _context21.next = 13;
                break;

              case 12:
                throw Error("Invalid type ".concat(_typeof$1(query), " for query parameter"));

              case 13:
                _context21.next = 15;
                return this.wsPromise;

              case 15:
                _context21.next = 17;
                return this.get(this.baseURL + '/search', {
                  payload: payload
                });

              case 17:
                return _context21.abrupt("return", _context21.sent);

              case 18:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function search(_x18, _x19) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
    /**
     * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically
     *
     * @param {BaseDeviceFields} device the device object
     * @param {string} device.id device id
     * @param {string} device.push_provider the push provider
     *
     */

  }, {
    key: "setLocalDevice",
    value: function setLocalDevice(device) {
      var _this$wsConnection5, _this$wsConnection6, _this$wsFallback4;

      if ((_this$wsConnection5 = this.wsConnection) !== null && _this$wsConnection5 !== void 0 && _this$wsConnection5.isConnecting && this.wsPromise || ((_this$wsConnection6 = this.wsConnection) !== null && _this$wsConnection6 !== void 0 && _this$wsConnection6.isHealthy || (_this$wsFallback4 = this.wsFallback) !== null && _this$wsFallback4 !== void 0 && _this$wsFallback4.isHealthy()) && this._hasConnectionID()) {
        throw new Error('you can only set device before opening a websocket connection');
      }

      this.options.device = device;
    }
    /**
     * addDevice - Adds a push device for a user.
     *
     * @param {string} id the device id
     * @param {PushProvider} push_provider the push provider
     * @param {string} [userID] the user id (defaults to current user)
     * @param {string} [push_provider_name] user provided push provider name for multi bundle support
     *
     */

  }, {
    key: "addDevice",
    value: function () {
      var _addDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(id, push_provider, userID, push_provider_name) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.post(this.baseURL + '/devices', _objectSpread(_objectSpread({
                  id: id,
                  push_provider: push_provider
                }, userID != null ? {
                  user_id: userID
                } : {}), push_provider_name != null ? {
                  push_provider_name: push_provider_name
                } : {}));

              case 2:
                return _context22.abrupt("return", _context22.sent);

              case 3:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function addDevice(_x20, _x21, _x22, _x23) {
        return _addDevice.apply(this, arguments);
      }

      return addDevice;
    }()
    /**
     * getDevices - Returns the devices associated with a current user
     *
     * @param {string} [userID] User ID. Only works on serverside
     *
     * @return {Device<ErmisChatGenerics>[]} Array of devices
     */

  }, {
    key: "getDevices",
    value: function () {
      var _getDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(userID) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.get(this.baseURL + '/devices', userID ? {
                  user_id: userID
                } : {});

              case 2:
                return _context23.abrupt("return", _context23.sent);

              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function getDevices(_x24) {
        return _getDevices.apply(this, arguments);
      }

      return getDevices;
    }()
    /**
     * getUnreadCount - Returns unread counts for a single user
     *
     * @param {string} [userID] User ID.
     *
     * @return {<GetUnreadCountAPIResponse>}
     */

  }, {
    key: "getUnreadCount",
    value: function () {
      var _getUnreadCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(userID) {
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.get(this.baseURL + '/unread', userID ? {
                  user_id: userID
                } : {});

              case 2:
                return _context24.abrupt("return", _context24.sent);

              case 3:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function getUnreadCount(_x25) {
        return _getUnreadCount.apply(this, arguments);
      }

      return getUnreadCount;
    }()
    /**
     * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.
     *
     * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.
     *
     * @return {<GetUnreadCountBatchAPIResponse>}
     */

  }, {
    key: "getUnreadCountBatch",
    value: function () {
      var _getUnreadCountBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(userIDs) {
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this.post(this.baseURL + '/unread_batch', {
                  user_ids: userIDs
                });

              case 2:
                return _context25.abrupt("return", _context25.sent);

              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function getUnreadCountBatch(_x26) {
        return _getUnreadCountBatch.apply(this, arguments);
      }

      return getUnreadCountBatch;
    }()
    /**
     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices
     *
     * @param {string} id The device id
     * @param {string} [userID] The user id. Only specify this for serverside requests
     *
     */

  }, {
    key: "removeDevice",
    value: function () {
      var _removeDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(id, userID) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return this.delete(this.baseURL + '/devices', _objectSpread({
                  id: id
                }, userID ? {
                  user_id: userID
                } : {}));

              case 2:
                return _context26.abrupt("return", _context26.sent);

              case 3:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function removeDevice(_x27, _x28) {
        return _removeDevice.apply(this, arguments);
      }

      return removeDevice;
    }()
    /**
     * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.
     * Only available server-side.
     *
     * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.
     * @returns {Promise<GetRateLimitsResponse>}
     */

  }, {
    key: "getRateLimits",
    value: function () {
      var _getRateLimits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(params) {
        var _ref7, serverSide, web, android, ios, endpoints;

        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                _ref7 = params || {}, serverSide = _ref7.serverSide, web = _ref7.web, android = _ref7.android, ios = _ref7.ios, endpoints = _ref7.endpoints;
                return _context27.abrupt("return", this.get(this.baseURL + '/rate_limits', {
                  server_side: serverSide,
                  web: web,
                  android: android,
                  ios: ios,
                  endpoints: endpoints ? endpoints.join(',') : undefined
                }));

              case 2:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function getRateLimits(_x29) {
        return _getRateLimits.apply(this, arguments);
      }

      return getRateLimits;
    }()
  }, {
    key: "_addChannelConfig",
    value: function _addChannelConfig(_ref8) {
      var cid = _ref8.cid,
          config = _ref8.config;
      this.configs[cid] = config;
    }
    /**
     * channel - Returns a new channel with the given type, id and custom data
     *
     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.
     * Make sure to await channel.create() or channel.watch() before accessing channel functions:
     * ie. channel = client.channel("messaging", {members: ["tommaso", "thierry"]})
     * await channel.create() to assign an ID to channel
     *
     * @param {string} channelType The channel type
     * @param {string | ChannelData<ErmisChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */

  }, {
    key: "channel",
    value: function channel(channelType, channelIDOrCustom) {
      var _custom$members;

      var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!this.userID && !this._isUsingServerAuth()) {
        throw Error('Call connectUser or connectAnonymousUser before creating a channel');
      }

      if (~channelType.indexOf(':')) {
        throw Error("Invalid channel group ".concat(channelType, ", can't contain the : character"));
      } // support channel("messaging", {options})


      if (channelIDOrCustom && _typeof$1(channelIDOrCustom) === 'object') {
        return this.getChannelByMembers(channelType, channelIDOrCustom);
      } // // support channel("messaging", undefined, {options})


      if (!channelIDOrCustom && _typeof$1(custom) === 'object' && (_custom$members = custom.members) !== null && _custom$members !== void 0 && _custom$members.length) {
        return this.getChannelByMembers(channelType, custom);
      } // support channel("messaging", null, {options})
      // support channel("messaging", undefined, {options})
      // support channel("messaging", "", {options})


      if (!channelIDOrCustom) {
        return new Channel(this, channelType, undefined, custom);
      }

      return this.getChannelById(channelType, channelIDOrCustom, custom);
    }
    /**
     * It's a helper method for `client.channel()` method, used to create unique conversation or
     * channel based on member list instead of id.
     *
     * If the channel already exists in `activeChannels` list, then we simply return it, since that
     * means the same channel was already requested or created.
     *
     * Otherwise we create a new instance of Channel class and return it.
     *
     * @private
     *
     * @param {string} channelType The channel type
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */

  }, {
    key: "partialUpdateUser",
    value:
    /**
     * partialUpdateUser - Update the given user object
     *
     * @param {PartialUserUpdate<ErmisChatGenerics>} partialUserObject which should contain id and any of "set" or "unset" params;
     * example: {id: "user1", set:{field: value}, unset:["field2"]}
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<ErmisChatGenerics> } }>} list of updated users
     */
    function () {
      var _partialUpdateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(partialUserObject) {
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this.partialUpdateUsers([partialUserObject]);

              case 2:
                return _context28.abrupt("return", _context28.sent);

              case 3:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function partialUpdateUser(_x30) {
        return _partialUpdateUser.apply(this, arguments);
      }

      return partialUpdateUser;
    }()
    /**
     * upsertUsers - Batch upsert the list of users
     *
     * @param {UserResponse<ErmisChatGenerics>[]} users list of users
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<ErmisChatGenerics> } }>}
     */

  }, {
    key: "upsertUsers",
    value: function () {
      var _upsertUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(users) {
        var userMap, _iterator4, _step4, userObject;

        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                userMap = {};
                _iterator4 = _createForOfIteratorHelper(users);
                _context29.prev = 2;

                _iterator4.s();

              case 4:
                if ((_step4 = _iterator4.n()).done) {
                  _context29.next = 11;
                  break;
                }

                userObject = _step4.value;

                if (userObject.id) {
                  _context29.next = 8;
                  break;
                }

                throw Error('User ID is required when updating a user');

              case 8:
                userMap[userObject.id] = userObject;

              case 9:
                _context29.next = 4;
                break;

              case 11:
                _context29.next = 16;
                break;

              case 13:
                _context29.prev = 13;
                _context29.t0 = _context29["catch"](2);

                _iterator4.e(_context29.t0);

              case 16:
                _context29.prev = 16;

                _iterator4.f();

                return _context29.finish(16);

              case 19:
                _context29.next = 21;
                return this.post(this.baseURL + '/users', {
                  users: userMap
                });

              case 21:
                return _context29.abrupt("return", _context29.sent);

              case 22:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this, [[2, 13, 16, 19]]);
      }));

      function upsertUsers(_x31) {
        return _upsertUsers.apply(this, arguments);
      }

      return upsertUsers;
    }()
    /**
     * @deprecated Please use upsertUsers() function instead.
     *
     * updateUsers - Batch update the list of users
     *
     * @param {UserResponse<ErmisChatGenerics>[]} users list of users
     * @return {Promise<{ users: { [key: string]: UserResponse<ErmisChatGenerics> } }>}
     */

  }, {
    key: "upsertUser",
    value:
    /**
     * upsertUser - Update or Create the given user object
     *
     * @param {UserResponse<ErmisChatGenerics>} userObject user object, the only required field is the user id. IE {id: "myuser"} is valid
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<ErmisChatGenerics> } }>}
     */
    function upsertUser(userObject) {
      return this.upsertUsers([userObject]);
    }
    /**
     * @deprecated Please use upsertUser() function instead.
     *
     * updateUser - Update or Create the given user object
     *
     * @param {UserResponse<ErmisChatGenerics>} userObject user object, the only required field is the user id. IE {id: "myuser"} is valid
     * @return {Promise<{ users: { [key: string]: UserResponse<ErmisChatGenerics> } }>}
     */

  }, {
    key: "partialUpdateUsers",
    value:
    /**
     * partialUpdateUsers - Batch partial update of users
     *
     * @param {PartialUserUpdate<ErmisChatGenerics>[]} users list of partial update requests
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<ErmisChatGenerics> } }>}
     */
    function () {
      var _partialUpdateUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(users) {
        var _iterator5, _step5, userObject;

        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _iterator5 = _createForOfIteratorHelper(users);
                _context30.prev = 1;

                _iterator5.s();

              case 3:
                if ((_step5 = _iterator5.n()).done) {
                  _context30.next = 9;
                  break;
                }

                userObject = _step5.value;

                if (userObject.id) {
                  _context30.next = 7;
                  break;
                }

                throw Error('User ID is required when updating a user');

              case 7:
                _context30.next = 3;
                break;

              case 9:
                _context30.next = 14;
                break;

              case 11:
                _context30.prev = 11;
                _context30.t0 = _context30["catch"](1);

                _iterator5.e(_context30.t0);

              case 14:
                _context30.prev = 14;

                _iterator5.f();

                return _context30.finish(14);

              case 17:
                _context30.next = 19;
                return this.patch(this.baseURL + '/users', {
                  users: users
                });

              case 19:
                return _context30.abrupt("return", _context30.sent);

              case 20:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this, [[1, 11, 14, 17]]);
      }));

      function partialUpdateUsers(_x32) {
        return _partialUpdateUsers.apply(this, arguments);
      }

      return partialUpdateUsers;
    }()
  }, {
    key: "deleteUser",
    value: function () {
      var _deleteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(userID, params) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return this.delete(this.baseURL + "/users/".concat(userID), params);

              case 2:
                return _context31.abrupt("return", _context31.sent);

              case 3:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function deleteUser(_x33, _x34) {
        return _deleteUser.apply(this, arguments);
      }

      return deleteUser;
    }()
    /**
     * restoreUsers - Restore soft deleted users
     *
     * @param {string[]} user_ids which users to restore
     *
     * @return {APIResponse} An API response
     */

  }, {
    key: "restoreUsers",
    value: function () {
      var _restoreUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(user_ids) {
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return this.post(this.baseURL + "/users/restore", {
                  user_ids: user_ids
                });

              case 2:
                return _context32.abrupt("return", _context32.sent);

              case 3:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function restoreUsers(_x35) {
        return _restoreUsers.apply(this, arguments);
      }

      return restoreUsers;
    }()
    /**
     * reactivateUser - Reactivate one user
     *
     * @param {string} userID which user to reactivate
     * @param {ReactivateUserOptions} [options]
     *
     * @return {UserResponse} Reactivated user
     */

  }, {
    key: "reactivateUser",
    value: function () {
      var _reactivateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(userID, options) {
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.next = 2;
                return this.post(this.baseURL + "/users/".concat(userID, "/reactivate"), _objectSpread({}, options));

              case 2:
                return _context33.abrupt("return", _context33.sent);

              case 3:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function reactivateUser(_x36, _x37) {
        return _reactivateUser.apply(this, arguments);
      }

      return reactivateUser;
    }()
    /**
     * reactivateUsers - Reactivate many users asynchronously
     *
     * @param {string[]} user_ids which users to reactivate
     * @param {ReactivateUsersOptions} [options]
     *
     * @return {TaskResponse} A task ID
     */

  }, {
    key: "reactivateUsers",
    value: function () {
      var _reactivateUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(user_ids, options) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.post(this.baseURL + "/users/reactivate", _objectSpread({
                  user_ids: user_ids
                }, options));

              case 2:
                return _context34.abrupt("return", _context34.sent);

              case 3:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function reactivateUsers(_x38, _x39) {
        return _reactivateUsers.apply(this, arguments);
      }

      return reactivateUsers;
    }()
    /**
     * deactivateUser - Deactivate one user
     *
     * @param {string} userID which user to deactivate
     * @param {DeactivateUsersOptions} [options]
     *
     * @return {UserResponse} Deactivated user
     */

  }, {
    key: "deactivateUser",
    value: function () {
      var _deactivateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(userID, options) {
        return _regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return this.post(this.baseURL + "/users/".concat(userID, "/deactivate"), _objectSpread({}, options));

              case 2:
                return _context35.abrupt("return", _context35.sent);

              case 3:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function deactivateUser(_x40, _x41) {
        return _deactivateUser.apply(this, arguments);
      }

      return deactivateUser;
    }()
    /**
     * deactivateUsers - Deactivate many users asynchronously
     *
     * @param {string[]} user_ids which users to deactivate
     * @param {DeactivateUsersOptions} [options]
     *
     * @return {TaskResponse} A task ID
     */

  }, {
    key: "deactivateUsers",
    value: function () {
      var _deactivateUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(user_ids, options) {
        return _regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.next = 2;
                return this.post(this.baseURL + "/users/deactivate", _objectSpread({
                  user_ids: user_ids
                }, options));

              case 2:
                return _context36.abrupt("return", _context36.sent);

              case 3:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function deactivateUsers(_x42, _x43) {
        return _deactivateUsers.apply(this, arguments);
      }

      return deactivateUsers;
    }()
  }, {
    key: "exportUser",
    value: function () {
      var _exportUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(userID, options) {
        return _regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.next = 2;
                return this.get(this.baseURL + "/users/".concat(userID, "/export"), _objectSpread({}, options));

              case 2:
                return _context37.abrupt("return", _context37.sent);

              case 3:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function exportUser(_x44, _x45) {
        return _exportUser.apply(this, arguments);
      }

      return exportUser;
    }()
    /** banUser - bans a user from all channels
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<ErmisChatGenerics>} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "banUser",
    value: function () {
      var _banUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.post(this.baseURL + '/moderation/ban', _objectSpread({
                  target_user_id: targetUserID
                }, options));

              case 2:
                return _context38.abrupt("return", _context38.sent);

              case 3:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function banUser(_x46, _x47) {
        return _banUser.apply(this, arguments);
      }

      return banUser;
    }()
    /** unbanUser - revoke global ban for a user
     *
     * @param {string} targetUserID
     * @param {UnBanUserOptions} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unbanUser",
    value: function () {
      var _unbanUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return this.delete(this.baseURL + '/moderation/ban', _objectSpread({
                  target_user_id: targetUserID
                }, options));

              case 2:
                return _context39.abrupt("return", _context39.sent);

              case 3:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function unbanUser(_x48, _x49) {
        return _unbanUser.apply(this, arguments);
      }

      return unbanUser;
    }()
    /** shadowBan - shadow bans a user from all channels
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<ErmisChatGenerics>} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "shadowBan",
    value: function () {
      var _shadowBan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                _context40.next = 2;
                return this.banUser(targetUserID, _objectSpread({
                  shadow: true
                }, options));

              case 2:
                return _context40.abrupt("return", _context40.sent);

              case 3:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));

      function shadowBan(_x50, _x51) {
        return _shadowBan.apply(this, arguments);
      }

      return shadowBan;
    }()
    /** removeShadowBan - revoke global shadow ban for a user
     *
     * @param {string} targetUserID
     * @param {UnBanUserOptions} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "removeShadowBan",
    value: function () {
      var _removeShadowBan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                _context41.next = 2;
                return this.unbanUser(targetUserID, _objectSpread({
                  shadow: true
                }, options));

              case 2:
                return _context41.abrupt("return", _context41.sent);

              case 3:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      function removeShadowBan(_x52, _x53) {
        return _removeShadowBan.apply(this, arguments);
      }

      return removeShadowBan;
    }()
    /** muteUser - mutes a user
     *
     * @param {string} targetID
     * @param {string} [userID] Only used with serverside auth
     * @param {MuteUserOptions<ErmisChatGenerics>} [options]
     * @returns {Promise<MuteUserResponse<ErmisChatGenerics>>}
     */

  }, {
    key: "muteUser",
    value: function () {
      var _muteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(targetID, userID) {
        var options,
            _args42 = arguments;
        return _regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                options = _args42.length > 2 && _args42[2] !== undefined ? _args42[2] : {};
                _context42.next = 3;
                return this.post(this.baseURL + '/moderation/mute', _objectSpread(_objectSpread({
                  target_id: targetID
                }, userID ? {
                  user_id: userID
                } : {}), options));

              case 3:
                return _context42.abrupt("return", _context42.sent);

              case 4:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function muteUser(_x54, _x55) {
        return _muteUser.apply(this, arguments);
      }

      return muteUser;
    }()
    /** unmuteUser - unmutes a user
     *
     * @param {string} targetID
     * @param {string} [currentUserID] Only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unmuteUser",
    value: function () {
      var _unmuteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(targetID, currentUserID) {
        return _regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                _context43.next = 2;
                return this.post(this.baseURL + '/moderation/unmute', _objectSpread({
                  target_id: targetID
                }, currentUserID ? {
                  user_id: currentUserID
                } : {}));

              case 2:
                return _context43.abrupt("return", _context43.sent);

              case 3:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      function unmuteUser(_x56, _x57) {
        return _unmuteUser.apply(this, arguments);
      }

      return unmuteUser;
    }()
    /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called
     *
     * @param {string} targetID
     * @returns {boolean}
     */

  }, {
    key: "userMuteStatus",
    value: function userMuteStatus(targetID) {
      if (!this.user || !this.wsPromise) {
        throw new Error('Make sure to await connectUser() first.');
      }

      for (var i = 0; i < this.mutedUsers.length; i += 1) {
        if (this.mutedUsers[i].target.id === targetID) return true;
      }

      return false;
    }
    /**
     * flagMessage - flag a message
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "flagMessage",
    value: function () {
      var _flagMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(targetMessageID) {
        var options,
            _args44 = arguments;
        return _regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                options = _args44.length > 1 && _args44[1] !== undefined ? _args44[1] : {};
                _context44.next = 3;
                return this.post(this.baseURL + '/moderation/flag', _objectSpread({
                  target_message_id: targetMessageID
                }, options));

              case 3:
                return _context44.abrupt("return", _context44.sent);

              case 4:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      function flagMessage(_x58) {
        return _flagMessage.apply(this, arguments);
      }

      return flagMessage;
    }()
    /**
     * flagUser - flag a user
     * @param {string} targetID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "flagUser",
    value: function () {
      var _flagUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(targetID) {
        var options,
            _args45 = arguments;
        return _regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                options = _args45.length > 1 && _args45[1] !== undefined ? _args45[1] : {};
                _context45.next = 3;
                return this.post(this.baseURL + '/moderation/flag', _objectSpread({
                  target_user_id: targetID
                }, options));

              case 3:
                return _context45.abrupt("return", _context45.sent);

              case 4:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function flagUser(_x59) {
        return _flagUser.apply(this, arguments);
      }

      return flagUser;
    }()
    /**
     * unflagMessage - unflag a message
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unflagMessage",
    value: function () {
      var _unflagMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(targetMessageID) {
        var options,
            _args46 = arguments;
        return _regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                options = _args46.length > 1 && _args46[1] !== undefined ? _args46[1] : {};
                _context46.next = 3;
                return this.post(this.baseURL + '/moderation/unflag', _objectSpread({
                  target_message_id: targetMessageID
                }, options));

              case 3:
                return _context46.abrupt("return", _context46.sent);

              case 4:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));

      function unflagMessage(_x60) {
        return _unflagMessage.apply(this, arguments);
      }

      return unflagMessage;
    }()
    /**
     * unflagUser - unflag a user
     * @param {string} targetID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unflagUser",
    value: function () {
      var _unflagUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(targetID) {
        var options,
            _args47 = arguments;
        return _regeneratorRuntime.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                options = _args47.length > 1 && _args47[1] !== undefined ? _args47[1] : {};
                _context47.next = 3;
                return this.post(this.baseURL + '/moderation/unflag', _objectSpread({
                  target_user_id: targetID
                }, options));

              case 3:
                return _context47.abrupt("return", _context47.sent);

              case 4:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));

      function unflagUser(_x61) {
        return _unflagUser.apply(this, arguments);
      }

      return unflagUser;
    }()
    /**
     * getCallToken - retrieves the auth token needed to join a call
     *
     * @param {string} callID
     * @param {object} options
     * @returns {Promise<GetCallTokenResponse>}
     */

  }, {
    key: "getCallToken",
    value: function () {
      var _getCallToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(callID) {
        var options,
            _args48 = arguments;
        return _regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                options = _args48.length > 1 && _args48[1] !== undefined ? _args48[1] : {};
                _context48.next = 3;
                return this.post(this.baseURL + "/calls/".concat(callID), _objectSpread({}, options));

              case 3:
                return _context48.abrupt("return", _context48.sent);

              case 4:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      function getCallToken(_x62) {
        return _getCallToken.apply(this, arguments);
      }

      return getCallToken;
    }()
    /**
     * _queryFlags - Query flags.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {FlagsFilters} filterConditions MongoDB style filter conditions
     * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<FlagsResponse<ErmisChatGenerics>>} Flags Response
     */

  }, {
    key: "_queryFlags",
    value: function () {
      var _queryFlags2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49() {
        var filterConditions,
            options,
            _args49 = arguments;
        return _regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                filterConditions = _args49.length > 0 && _args49[0] !== undefined ? _args49[0] : {};
                options = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};
                _context49.next = 4;
                return this.post(this.baseURL + '/moderation/flags', _objectSpread({
                  filter_conditions: filterConditions
                }, options));

              case 4:
                return _context49.abrupt("return", _context49.sent);

              case 5:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));

      function _queryFlags() {
        return _queryFlags2.apply(this, arguments);
      }

      return _queryFlags;
    }()
    /**
     * _queryFlagReports - Query flag reports.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions
     * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<FlagReportsResponse<ErmisChatGenerics>>} Flag Reports Response
     */

  }, {
    key: "_queryFlagReports",
    value: function () {
      var _queryFlagReports2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50() {
        var filterConditions,
            options,
            _args50 = arguments;
        return _regeneratorRuntime.wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                filterConditions = _args50.length > 0 && _args50[0] !== undefined ? _args50[0] : {};
                options = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};
                _context50.next = 4;
                return this.post(this.baseURL + '/moderation/reports', _objectSpread({
                  filter_conditions: filterConditions
                }, options));

              case 4:
                return _context50.abrupt("return", _context50.sent);

              case 5:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, this);
      }));

      function _queryFlagReports() {
        return _queryFlagReports2.apply(this, arguments);
      }

      return _queryFlagReports;
    }()
    /**
     * _reviewFlagReport - review flag report
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} [id] flag report to review
     * @param {string} [reviewResult] flag report review result
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @param {string} [options.review_details] custom information about review result
     * @returns {Promise<ReviewFlagReportResponse>>}
     */

  }, {
    key: "_reviewFlagReport",
    value: function () {
      var _reviewFlagReport2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(id, reviewResult) {
        var options,
            _args51 = arguments;
        return _regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                options = _args51.length > 2 && _args51[2] !== undefined ? _args51[2] : {};
                _context51.next = 3;
                return this.patch(this.baseURL + "/moderation/reports/".concat(id), _objectSpread({
                  review_result: reviewResult
                }, options));

              case 3:
                return _context51.abrupt("return", _context51.sent);

              case 4:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      function _reviewFlagReport(_x63, _x64) {
        return _reviewFlagReport2.apply(this, arguments);
      }

      return _reviewFlagReport;
    }()
    /**
     * unblockMessage - unblocks message blocked by automod
     *
     *
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unblockMessage",
    value: function () {
      var _unblockMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(targetMessageID) {
        var options,
            _args52 = arguments;
        return _regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                options = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};
                _context52.next = 3;
                return this.post(this.baseURL + '/moderation/unblock_message', _objectSpread({
                  target_message_id: targetMessageID
                }, options));

              case 3:
                return _context52.abrupt("return", _context52.sent);

              case 4:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52, this);
      }));

      function unblockMessage(_x65) {
        return _unblockMessage.apply(this, arguments);
      }

      return unblockMessage;
    }() // alias for backwards compatibility

  }, {
    key: "markChannelsRead",
    value:
    /**
     * markChannelsRead - marks channels read -
     * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read
     *
     * @param {MarkChannelsReadOptions <ErmisChatGenerics>} [data]
     *
     * @return {Promise<APIResponse>}
     */
    function () {
      var _markChannelsRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53() {
        var data,
            _args53 = arguments;
        return _regeneratorRuntime.wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                data = _args53.length > 0 && _args53[0] !== undefined ? _args53[0] : {};
                _context53.next = 3;
                return this.post(this.baseURL + '/channels/read', _objectSpread({}, data));

              case 3:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53, this);
      }));

      function markChannelsRead() {
        return _markChannelsRead.apply(this, arguments);
      }

      return markChannelsRead;
    }()
  }, {
    key: "createCommand",
    value: function createCommand(data) {
      return this.post(this.baseURL + '/commands', data);
    }
  }, {
    key: "getCommand",
    value: function getCommand(name) {
      return this.get(this.baseURL + "/commands/".concat(name));
    }
  }, {
    key: "updateCommand",
    value: function updateCommand(name, data) {
      return this.put(this.baseURL + "/commands/".concat(name), data);
    }
  }, {
    key: "deleteCommand",
    value: function deleteCommand(name) {
      return this.delete(this.baseURL + "/commands/".concat(name));
    }
  }, {
    key: "listCommands",
    value: function listCommands() {
      return this.get(this.baseURL + "/commands");
    }
  }, {
    key: "createChannelType",
    value: function createChannelType(data) {
      var channelData = _extends({}, {
        commands: ['all']
      }, data);

      return this.post(this.baseURL + '/channeltypes', channelData);
    }
  }, {
    key: "getChannelType",
    value: function getChannelType(channelType) {
      return this.get(this.baseURL + "/channeltypes/".concat(channelType));
    }
  }, {
    key: "updateChannelType",
    value: function updateChannelType(channelType, data) {
      return this.put(this.baseURL + "/channeltypes/".concat(channelType), data);
    }
  }, {
    key: "deleteChannelType",
    value: function deleteChannelType(channelType) {
      return this.delete(this.baseURL + "/channeltypes/".concat(channelType));
    }
  }, {
    key: "listChannelTypes",
    value: function listChannelTypes() {
      return this.get(this.baseURL + "/channeltypes");
    }
    /**
     * translateMessage - adds the translation to the message
     *
     * @param {string} messageId
     * @param {string} language
     *
     * @return {MessageResponse<ErmisChatGenerics>} Response that includes the message
     */

  }, {
    key: "translateMessage",
    value: function () {
      var _translateMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(messageId, language) {
        return _regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                _context54.next = 2;
                return this.post(this.baseURL + "/messages/".concat(messageId, "/translate"), {
                  language: language
                });

              case 2:
                return _context54.abrupt("return", _context54.sent);

              case 3:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54, this);
      }));

      function translateMessage(_x66, _x67) {
        return _translateMessage.apply(this, arguments);
      }

      return translateMessage;
    }()
    /**
     * _normalizeExpiration - transforms expiration value into ISO string
     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date
     */

  }, {
    key: "_normalizeExpiration",
    value: function _normalizeExpiration(timeoutOrExpirationDate) {
      var pinExpires = null;

      if (typeof timeoutOrExpirationDate === 'number') {
        var now = new Date();
        now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);
        pinExpires = now.toISOString();
      } else if (isString(timeoutOrExpirationDate)) {
        pinExpires = timeoutOrExpirationDate;
      } else if (timeoutOrExpirationDate instanceof Date) {
        pinExpires = timeoutOrExpirationDate.toISOString();
      }

      return pinExpires;
    }
    /**
     * _messageId - extracts string message id from either message object or message id
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {string} errorText error message to report in case of message id absence
     */

  }, {
    key: "_validateAndGetMessageId",
    value: function _validateAndGetMessageId(messageOrMessageId, errorText) {
      var messageId;

      if (typeof messageOrMessageId === 'string') {
        messageId = messageOrMessageId;
      } else {
        if (!messageOrMessageId.id) {
          throw Error(errorText);
        }

        messageId = messageOrMessageId.id;
      }

      return messageId;
    }
    /**
     * pinMessage - pins the message
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date
     * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side
     * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin
     */

  }, {
    key: "pinMessage",
    value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {
      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');

      return this.partialUpdateMessage(messageId, {
        set: {
          pinned: true,
          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),
          pinned_at: this._normalizeExpiration(pinnedAt)
        }
      }, pinnedBy);
    }
    /**
     * unpinMessage - unpins the message that was previously pinned
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {string | { id: string }} [userId]
     */

  }, {
    key: "unpinMessage",
    value: function unpinMessage(messageOrMessageId, userId) {
      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');

      return this.partialUpdateMessage(messageId, {
        set: {
          pinned: false
        }
      }, userId);
    }
    /**
     * updateMessage - Update the given message
     *
     * @param {Omit<MessageResponse<ErmisChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified
     * @param {string | { id: string }} [userId]
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     *
     * @return {{ message: MessageResponse<ErmisChatGenerics> }} Response that includes the message
     */

  }, {
    key: "updateMessage",
    value: function () {
      var _updateMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(message, userId, options) {
        var clonedMessage, reservedMessageFields;
        return _regeneratorRuntime.wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                if (message.id) {
                  _context55.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling updateMessage');

              case 2:
                clonedMessage = _extends({}, message);
                delete clonedMessage.id;
                reservedMessageFields = ['command', 'created_at', 'html', 'latest_reactions', 'own_reactions', 'quoted_message', 'reaction_counts', 'reply_count', 'type', 'updated_at', 'user', '__html'];
                reservedMessageFields.forEach(function (item) {
                  if (clonedMessage[item] != null) {
                    delete clonedMessage[item];
                  }
                });

                if (userId != null) {
                  if (isString(userId)) {
                    clonedMessage.user_id = userId;
                  } else {
                    clonedMessage.user = {
                      id: userId.id
                    };
                  }
                }
                /**
                 * Server always expects mentioned_users to be array of string. We are adding extra check, just in case
                 * SDK missed this conversion.
                 */


                if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {
                  clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function (mu) {
                    return mu.id;
                  });
                }

                _context55.next = 10;
                return this.post(this.baseURL + "/messages/".concat(message.id), _objectSpread({
                  message: clonedMessage
                }, options));

              case 10:
                return _context55.abrupt("return", _context55.sent);

              case 11:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55, this);
      }));

      function updateMessage(_x68, _x69, _x70) {
        return _updateMessage.apply(this, arguments);
      }

      return updateMessage;
    }()
    /**
     * partialUpdateMessage - Update the given message id while retaining additional properties
     *
     * @param {string} id the message id
     *
     * @param {PartialUpdateMessage<ErmisChatGenerics>}  partialMessageObject which should contain id and any of "set" or "unset" params;
     *         example: {id: "user1", set:{text: "hi"}, unset:["color"]}
     * @param {string | { id: string }} [userId]
     *
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     *
     * @return {{ message: MessageResponse<ErmisChatGenerics> }} Response that includes the updated message
     */

  }, {
    key: "partialUpdateMessage",
    value: function () {
      var _partialUpdateMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(id, partialMessageObject, userId, options) {
        var user;
        return _regeneratorRuntime.wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                if (id) {
                  _context56.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling partialUpdateMessage');

              case 2:
                user = userId;

                if (userId != null && isString(userId)) {
                  user = {
                    id: userId
                  };
                }

                _context56.next = 6;
                return this.put(this.baseURL + "/messages/".concat(id), _objectSpread(_objectSpread(_objectSpread({}, partialMessageObject), options), {}, {
                  user: user
                }));

              case 6:
                return _context56.abrupt("return", _context56.sent);

              case 7:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56, this);
      }));

      function partialUpdateMessage(_x71, _x72, _x73, _x74) {
        return _partialUpdateMessage.apply(this, arguments);
      }

      return partialUpdateMessage;
    }()
  }, {
    key: "deleteMessage",
    value: function () {
      var _deleteMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(messageID, hardDelete) {
        var params;
        return _regeneratorRuntime.wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                params = {};

                if (hardDelete) {
                  params = {
                    hard: true
                  };
                }

                _context57.next = 4;
                return this.delete(this.baseURL + "/messages/".concat(messageID), params);

              case 4:
                return _context57.abrupt("return", _context57.sent);

              case 5:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));

      function deleteMessage(_x75, _x76) {
        return _deleteMessage.apply(this, arguments);
      }

      return deleteMessage;
    }()
    /**
     * undeleteMessage - Undelete a message
     *
     * undeletes a message that was previous soft deleted. Hard deleted messages
     * cannot be undeleted. This is only allowed to be called from server-side
     * clients.
     *
     * @param {string} messageID The id of the message to undelete
     * @param {string} userID The id of the user who undeleted the message
     *
     * @return {{ message: MessageResponse<ErmisChatGenerics> }} Response that includes the message
     */

  }, {
    key: "undeleteMessage",
    value: function () {
      var _undeleteMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(messageID, userID) {
        return _regeneratorRuntime.wrap(function _callee58$(_context58) {
          while (1) {
            switch (_context58.prev = _context58.next) {
              case 0:
                _context58.next = 2;
                return this.post(this.baseURL + "/messages/".concat(messageID, "/undelete"), {
                  undeleted_by: userID
                });

              case 2:
                return _context58.abrupt("return", _context58.sent);

              case 3:
              case "end":
                return _context58.stop();
            }
          }
        }, _callee58, this);
      }));

      function undeleteMessage(_x77, _x78) {
        return _undeleteMessage.apply(this, arguments);
      }

      return undeleteMessage;
    }()
  }, {
    key: "getMessage",
    value: function () {
      var _getMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(messageID, options) {
        return _regeneratorRuntime.wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                _context59.next = 2;
                return this.get(this.baseURL + "/messages/".concat(encodeURIComponent(messageID)), _objectSpread({}, options));

              case 2:
                return _context59.abrupt("return", _context59.sent);

              case 3:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));

      function getMessage(_x79, _x80) {
        return _getMessage.apply(this, arguments);
      }

      return getMessage;
    }()
    /**
     * queryThreads - returns the list of threads of current user.
     *
     * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.
     * @param {number}  options.limit Limits the number of threads to be returned.
     * @param {boolean} options.watch Subscribes the user to the channels of the threads.
     * @param {number}  options.participant_limit Limits the number of participants returned per threads.
     * @param {number}  options.reply_limit Limits the number of replies returned per threads.
     *
     * @returns {{ threads: Thread<ErmisChatGenerics>[], next: string }} Returns the list of threads and the next cursor.
     */

  }, {
    key: "queryThreads",
    value: function () {
      var _queryThreads = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(options) {
        var _this4 = this;

        var opts, res;
        return _regeneratorRuntime.wrap(function _callee60$(_context60) {
          while (1) {
            switch (_context60.prev = _context60.next) {
              case 0:
                opts = _objectSpread({
                  limit: 10,
                  participant_limit: 10,
                  reply_limit: 3,
                  watch: true
                }, options);
                _context60.next = 3;
                return this.post(this.baseURL + "/threads", opts);

              case 3:
                res = _context60.sent;
                return _context60.abrupt("return", {
                  threads: res.threads.map(function (thread) {
                    return new Thread(_this4, thread);
                  }),
                  next: res.next
                });

              case 5:
              case "end":
                return _context60.stop();
            }
          }
        }, _callee60, this);
      }));

      function queryThreads(_x81) {
        return _queryThreads.apply(this, arguments);
      }

      return queryThreads;
    }()
    /**
     * getThread - returns the thread of a message by its id.
     *
     * @param {string}            messageId The message id
     * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.
     * @param {boolean}           options.watch Subscribes the user to the channel of the thread.
     * @param {number}            options.participant_limit Limits the number of participants returned per threads.
     * @param {number}            options.reply_limit Limits the number of replies returned per threads.
     *
     * @returns {Thread<ErmisChatGenerics>} Returns the thread.
     */

  }, {
    key: "getThread",
    value: function () {
      var _getThread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61(messageId) {
        var options,
            opts,
            res,
            _args61 = arguments;
        return _regeneratorRuntime.wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                options = _args61.length > 1 && _args61[1] !== undefined ? _args61[1] : {};

                if (messageId) {
                  _context61.next = 3;
                  break;
                }

                throw Error('Please specify the message id when calling partialUpdateThread');

              case 3:
                opts = _objectSpread({
                  participant_limit: 100,
                  reply_limit: 3,
                  watch: true
                }, options);
                _context61.next = 6;
                return this.get(this.baseURL + "/threads/".concat(messageId), opts);

              case 6:
                res = _context61.sent;
                return _context61.abrupt("return", new Thread(this, res.thread));

              case 8:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this);
      }));

      function getThread(_x82) {
        return _getThread.apply(this, arguments);
      }

      return getThread;
    }()
    /**
     * partialUpdateThread - updates the given thread
     *
     * @param {string}              messageId The id of the thread message which needs to be updated.
     * @param {PartialThreadUpdate} partialThreadObject should contain "set" or "unset" params for any of the thread's non-reserved fields.
     *
     * @returns {GetThreadAPIResponse<ErmisChatGenerics>} Returns the updated thread.
     */

  }, {
    key: "partialUpdateThread",
    value: function () {
      var _partialUpdateThread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(messageId, partialThreadObject) {
        var reservedThreadFields, _key5;

        return _regeneratorRuntime.wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                if (messageId) {
                  _context62.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling partialUpdateThread');

              case 2:
                // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.
                // Throw error if any of the reserved field is found.
                reservedThreadFields = ['created_at', 'id', 'last_message_at', 'type', 'updated_at', 'user', 'reply_count', 'participants', 'channel'];
                _context62.t0 = _regeneratorRuntime.keys(_objectSpread(_objectSpread({}, partialThreadObject.set), partialThreadObject.unset));

              case 4:
                if ((_context62.t1 = _context62.t0()).done) {
                  _context62.next = 10;
                  break;
                }

                _key5 = _context62.t1.value;

                if (!reservedThreadFields.includes(_key5)) {
                  _context62.next = 8;
                  break;
                }

                throw Error("You cannot set ".concat(_key5, " field on Thread object. ").concat(_key5, " is reserved for server-side use. Please omit ").concat(_key5, " from your set object."));

              case 8:
                _context62.next = 4;
                break;

              case 10:
                _context62.next = 12;
                return this.patch(this.baseURL + "/threads/".concat(messageId), partialThreadObject);

              case 12:
                return _context62.abrupt("return", _context62.sent);

              case 13:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62, this);
      }));

      function partialUpdateThread(_x83, _x84) {
        return _partialUpdateThread.apply(this, arguments);
      }

      return partialUpdateThread;
    }()
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return this.userAgent || "ermis-js-sdk-javascript-client-".concat(this.node ? 'node' : 'browser', "-", "1.0.0");
    }
  }, {
    key: "setUserAgent",
    value: function setUserAgent(userAgent) {
      this.userAgent = userAgent;
    }
    /**
     * _isUsingServerAuth - Returns true if we're using server side auth
     */

  }, {
    key: "_enrichAxiosOptions",
    value: function _enrichAxiosOptions() {
      var _options$headers;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        params: {},
        headers: {},
        config: {}
      };

      var token = this._getToken();

      var authorization = token ? {
        Authorization: token
      } : undefined;
      var signal = null;

      if (this.nextRequestAbortController !== null) {
        signal = this.nextRequestAbortController.signal;
        this.nextRequestAbortController = null;
      }

      if (!((_options$headers = options.headers) !== null && _options$headers !== void 0 && _options$headers['x-client-request-id'])) {
        options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {
          'x-client-request-id': randomId()
        });
      }

      var _ref9 = this.options.axiosRequestConfig || {},
          axiosRequestConfigParams = _ref9.params,
          axiosRequestConfigHeaders = _ref9.headers,
          axiosRequestConfigRest = _objectWithoutProperties(_ref9, _excluded2);

      return _objectSpread(_objectSpread(_objectSpread({
        params: _objectSpread(_objectSpread({
          user_id: this.userID,
          connection_id: this._getConnectionID(),
          api_key: this.key
        }, options.params), axiosRequestConfigParams || {}),
        headers: _objectSpread(_objectSpread(_objectSpread({}, authorization), {}, {
          'stream-auth-type': this.getAuthType(),
          'X-Stream-Client': this.getUserAgent()
        }, options.headers), axiosRequestConfigHeaders || {})
      }, signal ? {
        signal: signal
      } : {}), options.config), axiosRequestConfigRest || {});
    }
  }, {
    key: "_getToken",
    value: function _getToken() {
      if (!this.tokenManager || this.anonymous) return null;
      return this.tokenManager.getToken();
    }
  }, {
    key: "_startCleaning",
    value: function _startCleaning() {
      var that = this;

      if (this.cleaningIntervalRef != null) {
        return;
      }

      this.cleaningIntervalRef = setInterval(function () {
        // call clean on the channel, used for calling the stop.typing event etc.
        for (var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++) {
          var _channel7 = _Object$values2[_i3];

          _channel7.clean();
        }
      }, 500);
    }
    /**
     * encode ws url payload
     * @private
     * @returns json string
     */

  }, {
    key: "verifyWebhook",
    value:
    /**
     * checks signature of a request
     * @param {string | Buffer} rawBody
     * @param {string} signature from HTTP header
     * @returns {boolean}
     */
    function verifyWebhook(requestBody, xSignature) {
      return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);
    }
    /** getPermission - gets the definition for a permission
     *
     * @param {string} name
     * @returns {Promise<PermissionAPIResponse>}
     */

  }, {
    key: "getPermission",
    value: function getPermission(name) {
      return this.get("".concat(this.baseURL, "/permissions/").concat(name));
    }
    /** createPermission - creates a custom permission
     *
     * @param {CustomPermissionOptions} permissionData the permission data
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "createPermission",
    value: function createPermission(permissionData) {
      return this.post("".concat(this.baseURL, "/permissions"), _objectSpread({}, permissionData));
    }
    /** updatePermission - updates an existing custom permission
     *
     * @param {string} id
     * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "updatePermission",
    value: function updatePermission(id, permissionData) {
      return this.put("".concat(this.baseURL, "/permissions/").concat(id), _objectSpread({}, permissionData));
    }
    /** deletePermission - deletes a custom permission
     *
     * @param {string} name
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "deletePermission",
    value: function deletePermission(name) {
      return this.delete("".concat(this.baseURL, "/permissions/").concat(name));
    }
    /** listPermissions - returns the list of all permissions for this application
     *
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "listPermissions",
    value: function listPermissions() {
      return this.get("".concat(this.baseURL, "/permissions"));
    }
    /** createRole - creates a custom role
     *
     * @param {string} name the new role name
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "createRole",
    value: function createRole(name) {
      return this.post("".concat(this.baseURL, "/roles"), {
        name: name
      });
    }
    /** listRoles - returns the list of all roles for this application
     *
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "listRoles",
    value: function listRoles() {
      return this.get("".concat(this.baseURL, "/roles"));
    }
    /** deleteRole - deletes a custom role
     *
     * @param {string} name the role name
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "deleteRole",
    value: function deleteRole(name) {
      return this.delete("".concat(this.baseURL, "/roles/").concat(name));
    }
    /** sync - returns all events that happened for a list of channels since last sync
     * @param {string[]} channel_cids list of channel CIDs
     * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. "2020-05-06T15:05:01.207Z"
     * @param {SyncOptions} options See JSDoc in the type fields for more info
     *
     * @returns {Promise<SyncResponse>}
     */

  }, {
    key: "sync",
    value: function sync(channel_cids, last_sync_at) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.post("".concat(this.baseURL, "/sync"), _objectSpread({
        channel_cids: channel_cids,
        last_sync_at: last_sync_at
      }, options));
    }
    /**
     * sendUserCustomEvent - Send a custom event to a user
     *
     * @param {string} targetUserID target user id
     * @param {UserCustomEvent} event for example {type: 'friendship-request'}
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "sendUserCustomEvent",
    value: function () {
      var _sendUserCustomEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(targetUserID, event) {
        return _regeneratorRuntime.wrap(function _callee63$(_context63) {
          while (1) {
            switch (_context63.prev = _context63.next) {
              case 0:
                _context63.next = 2;
                return this.post("".concat(this.baseURL, "/users/").concat(targetUserID, "/event"), {
                  event: event
                });

              case 2:
                return _context63.abrupt("return", _context63.sent);

              case 3:
              case "end":
                return _context63.stop();
            }
          }
        }, _callee63, this);
      }));

      function sendUserCustomEvent(_x85, _x86) {
        return _sendUserCustomEvent.apply(this, arguments);
      }

      return sendUserCustomEvent;
    }()
  }, {
    key: "createBlockList",
    value: function createBlockList(blockList) {
      return this.post("".concat(this.baseURL, "/blocklists"), blockList);
    }
  }, {
    key: "listBlockLists",
    value: function listBlockLists() {
      return this.get("".concat(this.baseURL, "/blocklists"));
    }
  }, {
    key: "getBlockList",
    value: function getBlockList(name) {
      return this.get("".concat(this.baseURL, "/blocklists/").concat(name));
    }
  }, {
    key: "updateBlockList",
    value: function updateBlockList(name, data) {
      return this.put("".concat(this.baseURL, "/blocklists/").concat(name), data);
    }
  }, {
    key: "deleteBlockList",
    value: function deleteBlockList(name) {
      return this.delete("".concat(this.baseURL, "/blocklists/").concat(name));
    }
  }, {
    key: "exportChannels",
    value: function exportChannels(request) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var payload = _objectSpread({
        channels: request
      }, options);

      return this.post("".concat(this.baseURL, "/export_channels"), payload);
    }
  }, {
    key: "exportUsers",
    value: function exportUsers(request) {
      return this.post("".concat(this.baseURL, "/export/users"), request);
    }
  }, {
    key: "exportChannel",
    value: function exportChannel(request, options) {
      return this.exportChannels([request], options);
    }
  }, {
    key: "getExportChannelStatus",
    value: function getExportChannelStatus(id) {
      return this.get("".concat(this.baseURL, "/export_channels/").concat(id));
    }
  }, {
    key: "campaign",
    value: function campaign(idOrData, data) {
      if (typeof idOrData === 'string') {
        return new Campaign(this, idOrData, data);
      }

      return new Campaign(this, null, idOrData);
    }
  }, {
    key: "segment",
    value: function segment(type, idOrData, data) {
      if (typeof idOrData === 'string') {
        return new Segment(this, type, idOrData, data);
      }

      return new Segment(this, type, null, idOrData);
    }
  }, {
    key: "validateServerSideAuth",
    value: function validateServerSideAuth() {
      if (!this.secret) {
        throw new Error('Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.');
      }
    }
    /**
     * createSegment - Creates a segment
     *
     * @private
     * @param {SegmentType} type Segment type
     * @param {string} id Segment ID (valid UUID)
     * @param {string} name Segment name (valid UUID)
     * @param {SegmentData} params Segment data
     *
     * @return {{segment: SegmentResponse} & APIResponse} The created Segment
     */

  }, {
    key: "createSegment",
    value: function () {
      var _createSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(type, id, name, data) {
        var body;
        return _regeneratorRuntime.wrap(function _callee64$(_context64) {
          while (1) {
            switch (_context64.prev = _context64.next) {
              case 0:
                this.validateServerSideAuth();
                body = {
                  id: id,
                  type: type,
                  name: name,
                  data: data
                };
                return _context64.abrupt("return", this.post(this.baseURL + "/segments", body));

              case 3:
              case "end":
                return _context64.stop();
            }
          }
        }, _callee64, this);
      }));

      function createSegment(_x87, _x88, _x89, _x90) {
        return _createSegment.apply(this, arguments);
      }

      return createSegment;
    }()
    /**
     * createUserSegment - Creates a user segment
     *
     * @param {string} id Segment ID (valid UUID)
     * @param {string} name Segment name
     * @param {SegmentData} data Segment data
     *
     * @return {Segment} The created Segment
     */

  }, {
    key: "createUserSegment",
    value: function () {
      var _createUserSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(id, name, data) {
        return _regeneratorRuntime.wrap(function _callee65$(_context65) {
          while (1) {
            switch (_context65.prev = _context65.next) {
              case 0:
                this.validateServerSideAuth();
                return _context65.abrupt("return", this.createSegment('user', id, name, data));

              case 2:
              case "end":
                return _context65.stop();
            }
          }
        }, _callee65, this);
      }));

      function createUserSegment(_x91, _x92, _x93) {
        return _createUserSegment.apply(this, arguments);
      }

      return createUserSegment;
    }()
    /**
     * createChannelSegment - Creates a channel segment
     *
     * @param {string} id Segment ID (valid UUID)
     * @param {string} name Segment name
     * @param {SegmentData} data Segment data
     *
     * @return {Segment} The created Segment
     */

  }, {
    key: "createChannelSegment",
    value: function () {
      var _createChannelSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(id, name, data) {
        return _regeneratorRuntime.wrap(function _callee66$(_context66) {
          while (1) {
            switch (_context66.prev = _context66.next) {
              case 0:
                this.validateServerSideAuth();
                return _context66.abrupt("return", this.createSegment('channel', id, name, data));

              case 2:
              case "end":
                return _context66.stop();
            }
          }
        }, _callee66, this);
      }));

      function createChannelSegment(_x94, _x95, _x96) {
        return _createChannelSegment.apply(this, arguments);
      }

      return createChannelSegment;
    }()
  }, {
    key: "getSegment",
    value: function () {
      var _getSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(id) {
        return _regeneratorRuntime.wrap(function _callee67$(_context67) {
          while (1) {
            switch (_context67.prev = _context67.next) {
              case 0:
                this.validateServerSideAuth();
                return _context67.abrupt("return", this.get(this.baseURL + "/segments/".concat(id)));

              case 2:
              case "end":
                return _context67.stop();
            }
          }
        }, _callee67, this);
      }));

      function getSegment(_x97) {
        return _getSegment.apply(this, arguments);
      }

      return getSegment;
    }()
    /**
     * updateSegment - Update a segment
     *
     * @param {string} id Segment ID
     * @param {Partial<UpdateSegmentData>} data Data to update
     *
     * @return {Segment} Updated Segment
     */

  }, {
    key: "updateSegment",
    value: function () {
      var _updateSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68(id, data) {
        return _regeneratorRuntime.wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                this.validateServerSideAuth();
                return _context68.abrupt("return", this.put(this.baseURL + "/segments/".concat(id), data));

              case 2:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68, this);
      }));

      function updateSegment(_x98, _x99) {
        return _updateSegment.apply(this, arguments);
      }

      return updateSegment;
    }()
    /**
     * addSegmentTargets - Add targets to a segment
     *
     * @param {string} id Segment ID
     * @param {string[]} targets Targets to add to the segment
     *
     * @return {APIResponse} API response
     */

  }, {
    key: "addSegmentTargets",
    value: function () {
      var _addSegmentTargets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(id, targets) {
        var body;
        return _regeneratorRuntime.wrap(function _callee69$(_context69) {
          while (1) {
            switch (_context69.prev = _context69.next) {
              case 0:
                this.validateServerSideAuth();
                body = {
                  target_ids: targets
                };
                return _context69.abrupt("return", this.post(this.baseURL + "/segments/".concat(id, "/addtargets"), body));

              case 3:
              case "end":
                return _context69.stop();
            }
          }
        }, _callee69, this);
      }));

      function addSegmentTargets(_x100, _x101) {
        return _addSegmentTargets.apply(this, arguments);
      }

      return addSegmentTargets;
    }()
  }, {
    key: "querySegmentTargets",
    value: function () {
      var _querySegmentTargets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(id) {
        var filter,
            sort,
            options,
            _args70 = arguments;
        return _regeneratorRuntime.wrap(function _callee70$(_context70) {
          while (1) {
            switch (_context70.prev = _context70.next) {
              case 0:
                filter = _args70.length > 1 && _args70[1] !== undefined ? _args70[1] : {};
                sort = _args70.length > 2 && _args70[2] !== undefined ? _args70[2] : [];
                options = _args70.length > 3 && _args70[3] !== undefined ? _args70[3] : {};
                this.validateServerSideAuth();
                return _context70.abrupt("return", this.post(this.baseURL + "/segments/".concat(id, "/targets/query"), _objectSpread({
                  filter: filter || {},
                  sort: sort || []
                }, options)));

              case 5:
              case "end":
                return _context70.stop();
            }
          }
        }, _callee70, this);
      }));

      function querySegmentTargets(_x102) {
        return _querySegmentTargets.apply(this, arguments);
      }

      return querySegmentTargets;
    }()
    /**
     * removeSegmentTargets - Remove targets from a segment
     *
     * @param {string} id Segment ID
     * @param {string[]} targets Targets to add to the segment
     *
     * @return {APIResponse} API response
     */

  }, {
    key: "removeSegmentTargets",
    value: function () {
      var _removeSegmentTargets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(id, targets) {
        var body;
        return _regeneratorRuntime.wrap(function _callee71$(_context71) {
          while (1) {
            switch (_context71.prev = _context71.next) {
              case 0:
                this.validateServerSideAuth();
                body = {
                  target_ids: targets
                };
                return _context71.abrupt("return", this.post(this.baseURL + "/segments/".concat(id, "/deletetargets"), body));

              case 3:
              case "end":
                return _context71.stop();
            }
          }
        }, _callee71, this);
      }));

      function removeSegmentTargets(_x103, _x104) {
        return _removeSegmentTargets.apply(this, arguments);
      }

      return removeSegmentTargets;
    }()
    /**
     * querySegments - Query Segments
     *
     * @param {filter} filter MongoDB style filter conditions
     * @param {QuerySegmentsOptions} options Options for sorting/paginating the results
     *
     * @return {Segment[]} Segments
     */

  }, {
    key: "querySegments",
    value: function () {
      var _querySegments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(filter, sort) {
        var options,
            _args72 = arguments;
        return _regeneratorRuntime.wrap(function _callee72$(_context72) {
          while (1) {
            switch (_context72.prev = _context72.next) {
              case 0:
                options = _args72.length > 2 && _args72[2] !== undefined ? _args72[2] : {};
                this.validateServerSideAuth();
                return _context72.abrupt("return", this.post(this.baseURL + "/segments/query", _objectSpread({
                  filter: filter,
                  sort: sort
                }, options)));

              case 3:
              case "end":
                return _context72.stop();
            }
          }
        }, _callee72, this);
      }));

      function querySegments(_x105, _x106) {
        return _querySegments.apply(this, arguments);
      }

      return querySegments;
    }()
    /**
     * deleteSegment - Delete a Campaign Segment
     *
     * @param {string} id Segment ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "deleteSegment",
    value: function () {
      var _deleteSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(id) {
        return _regeneratorRuntime.wrap(function _callee73$(_context73) {
          while (1) {
            switch (_context73.prev = _context73.next) {
              case 0:
                this.validateServerSideAuth();
                return _context73.abrupt("return", this.delete(this.baseURL + "/segments/".concat(id)));

              case 2:
              case "end":
                return _context73.stop();
            }
          }
        }, _callee73, this);
      }));

      function deleteSegment(_x107) {
        return _deleteSegment.apply(this, arguments);
      }

      return deleteSegment;
    }()
    /**
     * segmentTargetExists - Check if a target exists in a segment
     *
     * @param {string} segmentId Segment ID
     * @param {string} targetId Target ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "segmentTargetExists",
    value: function () {
      var _segmentTargetExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(segmentId, targetId) {
        return _regeneratorRuntime.wrap(function _callee74$(_context74) {
          while (1) {
            switch (_context74.prev = _context74.next) {
              case 0:
                this.validateServerSideAuth();
                return _context74.abrupt("return", this.get(this.baseURL + "/segments/".concat(segmentId, "/target/").concat(targetId)));

              case 2:
              case "end":
                return _context74.stop();
            }
          }
        }, _callee74, this);
      }));

      function segmentTargetExists(_x108, _x109) {
        return _segmentTargetExists.apply(this, arguments);
      }

      return segmentTargetExists;
    }()
    /**
     * createCampaign - Creates a Campaign
     *
     * @param {CampaignData} params Campaign data
     *
     * @return {Campaign} The Created Campaign
     */

  }, {
    key: "createCampaign",
    value: function () {
      var _createCampaign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(params) {
        return _regeneratorRuntime.wrap(function _callee75$(_context75) {
          while (1) {
            switch (_context75.prev = _context75.next) {
              case 0:
                this.validateServerSideAuth();
                return _context75.abrupt("return", this.post(this.baseURL + "/campaigns", _objectSpread({}, params)));

              case 2:
              case "end":
                return _context75.stop();
            }
          }
        }, _callee75, this);
      }));

      function createCampaign(_x110) {
        return _createCampaign.apply(this, arguments);
      }

      return createCampaign;
    }()
  }, {
    key: "getCampaign",
    value: function () {
      var _getCampaign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(id) {
        return _regeneratorRuntime.wrap(function _callee76$(_context76) {
          while (1) {
            switch (_context76.prev = _context76.next) {
              case 0:
                this.validateServerSideAuth();
                return _context76.abrupt("return", this.get(this.baseURL + "/campaigns/".concat(id)));

              case 2:
              case "end":
                return _context76.stop();
            }
          }
        }, _callee76, this);
      }));

      function getCampaign(_x111) {
        return _getCampaign.apply(this, arguments);
      }

      return getCampaign;
    }()
  }, {
    key: "startCampaign",
    value: function () {
      var _startCampaign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77(id, options) {
        return _regeneratorRuntime.wrap(function _callee77$(_context77) {
          while (1) {
            switch (_context77.prev = _context77.next) {
              case 0:
                this.validateServerSideAuth();
                return _context77.abrupt("return", this.post(this.baseURL + "/campaigns/".concat(id, "/start"), {
                  scheduled_for: options === null || options === void 0 ? void 0 : options.scheduledFor,
                  stop_at: options === null || options === void 0 ? void 0 : options.stopAt
                }));

              case 2:
              case "end":
                return _context77.stop();
            }
          }
        }, _callee77, this);
      }));

      function startCampaign(_x112, _x113) {
        return _startCampaign.apply(this, arguments);
      }

      return startCampaign;
    }()
    /**
     * queryCampaigns - Query Campaigns
     *
     *
     * @return {Campaign[]} Campaigns
     */

  }, {
    key: "queryCampaigns",
    value: function () {
      var _queryCampaigns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee78(filter, sort, options) {
        return _regeneratorRuntime.wrap(function _callee78$(_context78) {
          while (1) {
            switch (_context78.prev = _context78.next) {
              case 0:
                this.validateServerSideAuth();
                _context78.next = 3;
                return this.post(this.baseURL + "/campaigns/query", _objectSpread({
                  filter: filter,
                  sort: sort
                }, options || {}));

              case 3:
                return _context78.abrupt("return", _context78.sent);

              case 4:
              case "end":
                return _context78.stop();
            }
          }
        }, _callee78, this);
      }));

      function queryCampaigns(_x114, _x115, _x116) {
        return _queryCampaigns.apply(this, arguments);
      }

      return queryCampaigns;
    }()
    /**
     * updateCampaign - Update a Campaign
     *
     * @param {string} id Campaign ID
     * @param {Partial<CampaignData>} params Campaign data
     *
     * @return {Campaign} Updated Campaign
     */

  }, {
    key: "updateCampaign",
    value: function () {
      var _updateCampaign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee79(id, params) {
        return _regeneratorRuntime.wrap(function _callee79$(_context79) {
          while (1) {
            switch (_context79.prev = _context79.next) {
              case 0:
                this.validateServerSideAuth();
                return _context79.abrupt("return", this.put(this.baseURL + "/campaigns/".concat(id), params));

              case 2:
              case "end":
                return _context79.stop();
            }
          }
        }, _callee79, this);
      }));

      function updateCampaign(_x117, _x118) {
        return _updateCampaign.apply(this, arguments);
      }

      return updateCampaign;
    }()
    /**
     * deleteCampaign - Delete a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "deleteCampaign",
    value: function () {
      var _deleteCampaign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee80(id) {
        return _regeneratorRuntime.wrap(function _callee80$(_context80) {
          while (1) {
            switch (_context80.prev = _context80.next) {
              case 0:
                this.validateServerSideAuth();
                return _context80.abrupt("return", this.delete(this.baseURL + "/campaigns/".concat(id)));

              case 2:
              case "end":
                return _context80.stop();
            }
          }
        }, _callee80, this);
      }));

      function deleteCampaign(_x119) {
        return _deleteCampaign.apply(this, arguments);
      }

      return deleteCampaign;
    }()
    /**
     * stopCampaign - Stop a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Campaign} Stopped Campaign
     */

  }, {
    key: "stopCampaign",
    value: function () {
      var _stopCampaign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee81(id) {
        var _yield$this$patch, campaign;

        return _regeneratorRuntime.wrap(function _callee81$(_context81) {
          while (1) {
            switch (_context81.prev = _context81.next) {
              case 0:
                this.validateServerSideAuth();
                _context81.next = 3;
                return this.patch(this.baseURL + "/campaigns/".concat(id, "/stop"));

              case 3:
                _yield$this$patch = _context81.sent;
                campaign = _yield$this$patch.campaign;
                return _context81.abrupt("return", campaign);

              case 6:
              case "end":
                return _context81.stop();
            }
          }
        }, _callee81, this);
      }));

      function stopCampaign(_x120) {
        return _stopCampaign.apply(this, arguments);
      }

      return stopCampaign;
    }()
    /**
     * enrichURL - Get OpenGraph data of the given link
     *
     * @param {string} url link
     * @return {OGAttachment} OG Attachment
     */

  }, {
    key: "enrichURL",
    value: function () {
      var _enrichURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee82(url) {
        return _regeneratorRuntime.wrap(function _callee82$(_context82) {
          while (1) {
            switch (_context82.prev = _context82.next) {
              case 0:
                return _context82.abrupt("return", this.get(this.baseURL + "/og", {
                  url: url
                }));

              case 1:
              case "end":
                return _context82.stop();
            }
          }
        }, _callee82, this);
      }));

      function enrichURL(_x121) {
        return _enrichURL.apply(this, arguments);
      }

      return enrichURL;
    }()
    /**
     * getTask - Gets status of a long running task
     *
     * @param {string} id Task ID
     *
     * @return {TaskStatus} The task status
     */

  }, {
    key: "getTask",
    value: function () {
      var _getTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee83(id) {
        return _regeneratorRuntime.wrap(function _callee83$(_context83) {
          while (1) {
            switch (_context83.prev = _context83.next) {
              case 0:
                return _context83.abrupt("return", this.get("".concat(this.baseURL, "/tasks/").concat(id)));

              case 1:
              case "end":
                return _context83.stop();
            }
          }
        }, _callee83, this);
      }));

      function getTask(_x122) {
        return _getTask.apply(this, arguments);
      }

      return getTask;
    }()
    /**
     * deleteChannels - Deletes a list of channel
     *
     * @param {string[]} cids Channel CIDs
     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not
     *
     * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well
     */

  }, {
    key: "deleteChannels",
    value: function () {
      var _deleteChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee84(cids) {
        var options,
            _args84 = arguments;
        return _regeneratorRuntime.wrap(function _callee84$(_context84) {
          while (1) {
            switch (_context84.prev = _context84.next) {
              case 0:
                options = _args84.length > 1 && _args84[1] !== undefined ? _args84[1] : {};
                _context84.next = 3;
                return this.post(this.baseURL + "/channels/delete", _objectSpread({
                  cids: cids
                }, options));

              case 3:
                return _context84.abrupt("return", _context84.sent);

              case 4:
              case "end":
                return _context84.stop();
            }
          }
        }, _callee84, this);
      }));

      function deleteChannels(_x123) {
        return _deleteChannels.apply(this, arguments);
      }

      return deleteChannels;
    }()
    /**
     * deleteUsers - Batch Delete Users
     *
     * @param {string[]} user_ids which users to delete
     * @param {DeleteUserOptions} options Configuration how to delete users
     *
     * @return {TaskResponse} A task ID
     */

  }, {
    key: "deleteUsers",
    value: function () {
      var _deleteUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee85(user_ids) {
        var options,
            _args85 = arguments;
        return _regeneratorRuntime.wrap(function _callee85$(_context85) {
          while (1) {
            switch (_context85.prev = _context85.next) {
              case 0:
                options = _args85.length > 1 && _args85[1] !== undefined ? _args85[1] : {};

                if (!(typeof options.user !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.user))) {
                  _context85.next = 3;
                  break;
                }

                throw new Error('Invalid delete user options. user must be one of [soft hard pruning]');

              case 3:
                if (!(typeof options.conversations !== 'undefined' && !['soft', 'hard'].includes(options.conversations))) {
                  _context85.next = 5;
                  break;
                }

                throw new Error('Invalid delete user options. conversations must be one of [soft hard]');

              case 5:
                if (!(typeof options.messages !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.messages))) {
                  _context85.next = 7;
                  break;
                }

                throw new Error('Invalid delete user options. messages must be one of [soft hard pruning]');

              case 7:
                _context85.next = 9;
                return this.post(this.baseURL + "/users/delete", _objectSpread({
                  user_ids: user_ids
                }, options));

              case 9:
                return _context85.abrupt("return", _context85.sent);

              case 10:
              case "end":
                return _context85.stop();
            }
          }
        }, _callee85, this);
      }));

      function deleteUsers(_x124) {
        return _deleteUsers.apply(this, arguments);
      }

      return deleteUsers;
    }()
    /**
     * _createImportURL - Create an Import upload url.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} filename filename of uploaded data
     * @return {APIResponse & CreateImportResponse} An ImportTask
     */

  }, {
    key: "_createImportURL",
    value: function () {
      var _createImportURL2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee86(filename) {
        return _regeneratorRuntime.wrap(function _callee86$(_context86) {
          while (1) {
            switch (_context86.prev = _context86.next) {
              case 0:
                _context86.next = 2;
                return this.post(this.baseURL + "/import_urls", {
                  filename: filename
                });

              case 2:
                return _context86.abrupt("return", _context86.sent);

              case 3:
              case "end":
                return _context86.stop();
            }
          }
        }, _callee86, this);
      }));

      function _createImportURL(_x125) {
        return _createImportURL2.apply(this, arguments);
      }

      return _createImportURL;
    }()
    /**
     * _createImport - Create an Import Task.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} path path of uploaded data
     * @param {CreateImportOptions} options import options
     * @return {APIResponse & CreateImportResponse} An ImportTask
     */

  }, {
    key: "_createImport",
    value: function () {
      var _createImport2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee87(path) {
        var options,
            _args87 = arguments;
        return _regeneratorRuntime.wrap(function _callee87$(_context87) {
          while (1) {
            switch (_context87.prev = _context87.next) {
              case 0:
                options = _args87.length > 1 && _args87[1] !== undefined ? _args87[1] : {
                  mode: 'upsert'
                };
                _context87.next = 3;
                return this.post(this.baseURL + "/imports", _objectSpread({
                  path: path
                }, options));

              case 3:
                return _context87.abrupt("return", _context87.sent);

              case 4:
              case "end":
                return _context87.stop();
            }
          }
        }, _callee87, this);
      }));

      function _createImport(_x126) {
        return _createImport2.apply(this, arguments);
      }

      return _createImport;
    }()
    /**
     * _getImport - Get an Import Task.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} id id of Import Task
     *
     * @return {APIResponse & GetImportResponse} An ImportTask
     */

  }, {
    key: "_getImport",
    value: function () {
      var _getImport2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee88(id) {
        return _regeneratorRuntime.wrap(function _callee88$(_context88) {
          while (1) {
            switch (_context88.prev = _context88.next) {
              case 0:
                _context88.next = 2;
                return this.get(this.baseURL + "/imports/".concat(id));

              case 2:
                return _context88.abrupt("return", _context88.sent);

              case 3:
              case "end":
                return _context88.stop();
            }
          }
        }, _callee88, this);
      }));

      function _getImport(_x127) {
        return _getImport2.apply(this, arguments);
      }

      return _getImport;
    }()
    /**
     * _listImports - Lists Import Tasks.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {ListImportsPaginationOptions} options pagination options
     *
     * @return {APIResponse & ListImportsResponse} An ImportTask
     */

  }, {
    key: "_listImports",
    value: function () {
      var _listImports2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee89(options) {
        return _regeneratorRuntime.wrap(function _callee89$(_context89) {
          while (1) {
            switch (_context89.prev = _context89.next) {
              case 0:
                _context89.next = 2;
                return this.get(this.baseURL + "/imports", options);

              case 2:
                return _context89.abrupt("return", _context89.sent);

              case 3:
              case "end":
                return _context89.stop();
            }
          }
        }, _callee89, this);
      }));

      function _listImports(_x128) {
        return _listImports2.apply(this, arguments);
      }

      return _listImports;
    }()
    /**
     * upsertPushProvider - Create or Update a push provider
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @param {PushProviderConfig} configuration of the provider you want to create or update
     *
     * @return {APIResponse & PushProviderUpsertResponse} A push provider
     */

  }, {
    key: "upsertPushProvider",
    value: function () {
      var _upsertPushProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee90(pushProvider) {
        return _regeneratorRuntime.wrap(function _callee90$(_context90) {
          while (1) {
            switch (_context90.prev = _context90.next) {
              case 0:
                _context90.next = 2;
                return this.post(this.baseURL + "/push_providers", {
                  push_provider: pushProvider
                });

              case 2:
                return _context90.abrupt("return", _context90.sent);

              case 3:
              case "end":
                return _context90.stop();
            }
          }
        }, _callee90, this);
      }));

      function upsertPushProvider(_x129) {
        return _upsertPushProvider.apply(this, arguments);
      }

      return upsertPushProvider;
    }()
    /**
     * deletePushProvider - Delete a push provider
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @param {PushProviderID} type and foreign id of the push provider to be deleted
     *
     * @return {APIResponse} An API response
     */

  }, {
    key: "deletePushProvider",
    value: function () {
      var _deletePushProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee91(_ref10) {
        var type, name;
        return _regeneratorRuntime.wrap(function _callee91$(_context91) {
          while (1) {
            switch (_context91.prev = _context91.next) {
              case 0:
                type = _ref10.type, name = _ref10.name;
                _context91.next = 3;
                return this.delete(this.baseURL + "/push_providers/".concat(type, "/").concat(name));

              case 3:
                return _context91.abrupt("return", _context91.sent);

              case 4:
              case "end":
                return _context91.stop();
            }
          }
        }, _callee91, this);
      }));

      function deletePushProvider(_x130) {
        return _deletePushProvider.apply(this, arguments);
      }

      return deletePushProvider;
    }()
    /**
     * listPushProviders - Get all push providers in the app
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @return {APIResponse & PushProviderListResponse} A push provider
     */

  }, {
    key: "listPushProviders",
    value: function () {
      var _listPushProviders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee92() {
        return _regeneratorRuntime.wrap(function _callee92$(_context92) {
          while (1) {
            switch (_context92.prev = _context92.next) {
              case 0:
                _context92.next = 2;
                return this.get(this.baseURL + "/push_providers");

              case 2:
                return _context92.abrupt("return", _context92.sent);

              case 3:
              case "end":
                return _context92.stop();
            }
          }
        }, _callee92, this);
      }));

      function listPushProviders() {
        return _listPushProviders.apply(this, arguments);
      }

      return listPushProviders;
    }()
    /**
     * creates an abort controller that will be used by the next HTTP Request.
     */

  }, {
    key: "createAbortControllerForNextRequest",
    value: function createAbortControllerForNextRequest() {
      return this.nextRequestAbortController = new AbortController();
    }
    /**
     * commits a pending message, making it visible in the channel and for other users
     * @param id the message id
     *
     * @return {APIResponse & MessageResponse} The message
     */

  }, {
    key: "commitMessage",
    value: function () {
      var _commitMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee93(id) {
        return _regeneratorRuntime.wrap(function _callee93$(_context93) {
          while (1) {
            switch (_context93.prev = _context93.next) {
              case 0:
                _context93.next = 2;
                return this.post(this.baseURL + "/messages/".concat(id, "/commit"));

              case 2:
                return _context93.abrupt("return", _context93.sent);

              case 3:
              case "end":
                return _context93.stop();
            }
          }
        }, _callee93, this);
      }));

      function commitMessage(_x131) {
        return _commitMessage.apply(this, arguments);
      }

      return commitMessage;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance(key, secretOrOptions, options) {
      if (!ErmisChat._instance) {
        if (typeof secretOrOptions === 'string') {
          ErmisChat._instance = new ErmisChat(key, secretOrOptions, options);
        } else {
          ErmisChat._instance = new ErmisChat(key, secretOrOptions);
        }
      }

      return ErmisChat._instance;
    }
  }]);

  return ErmisChat;
}();

_defineProperty(ErmisChat, "_instance", void 0);

var Allow = 'Allow';
var Deny = 'Deny';
var AnyResource = ['*'];
var AnyRole = ['*'];
var MaxPriority = 999;
var MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions
// defined in BuiltinPermissions to configure your channel types

var Permission = function Permission(name, priority) {
  var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;
  var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;
  var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;

  _classCallCheck(this, Permission);

  _defineProperty(this, "name", void 0);

  _defineProperty(this, "action", void 0);

  _defineProperty(this, "owner", void 0);

  _defineProperty(this, "priority", void 0);

  _defineProperty(this, "resources", void 0);

  _defineProperty(this, "roles", void 0);

  this.name = name;
  this.action = action;
  this.owner = owner;
  this.priority = priority;
  this.resources = resources;
  this.roles = roles;
}; // deprecated

new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated

new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);

const ChatIcon = () => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", xmlSpace: "preserve", width: 18, height: 18, fill: "#fff", stroke: "#fff", viewBox: "0 0 58 58" },
        React.createElement("path", { d: "M53 3.293H5c-2.722 0-5 2.278-5 5v33c0 2.722 2.278 5 5 5h27.681l-4.439-5.161a1 1 0 1 1 1.517-1.304l4.998 5.811L43 54.707v-8.414h10c2.722 0 5-2.278 5-5v-33c0-2.722-2.278-5-5-5z", style: {
                fill: "#fff",
            } }),
        React.createElement("circle", { cx: 15, cy: 24.799, r: 3, style: {
                fill: "#fff",
            } }),
        React.createElement("circle", { cx: 29, cy: 24.799, r: 3, style: {
                fill: "#fff",
            } }),
        React.createElement("circle", { cx: 43, cy: 24.799, r: 3, style: {
                fill: "#fff",
            } })));
};
const NoChat = () => {
    return (React.createElement("svg", { width: "200", height: "200", viewBox: "0 0 750 750", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M356.607 560.305C264.098 540.058 140.839 499.879 161.094 362.018C181.349 224.156 268.175 171 375.595 171C483.01 171 605.051 252.041 581.094 419.925C557.136 587.809 449.117 580.551 356.607 560.305ZM660.68 394.122C664.5 355.761 660.441 317.805 649.538 282.225L680.646 265.561C685.889 262.754 687.861 256.229 685.058 250.987L642.588 171.698C639.776 166.456 633.251 164.484 628.007 167.291L596.9 183.954C573.318 155.169 543.97 130.76 509.927 112.683L520.131 78.919C521.855 73.2271 518.637 67.2188 512.942 65.4981L426.844 39.4636C421.15 37.7428 415.146 40.9614 413.422 46.6533L403.218 80.4177C364.851 76.5987 336.9 90.6574 301.318 101.554L284.654 70.4455C281.847 65.2038 275.322 63.2311 270.081 66.0385L190.792 108.511C185.55 111.318 183.577 117.843 186.385 123.084L203.048 154.193C174.263 177.775 139.853 197.122 121.777 231.172L88.0118 220.962C82.3209 219.242 76.3116 222.46 74.5909 228.151L48.5573 314.25C46.8366 319.942 50.0552 325.95 55.7461 327.672L89.5114 337.881C85.6924 376.241 89.7511 414.197 100.647 449.777L69.5393 466.442C64.2975 469.249 62.3248 475.774 65.1322 481.016L107.605 560.305C110.412 565.546 116.937 567.519 122.178 564.711L153.287 548.047C176.868 576.834 206.216 601.243 240.265 619.319L230.056 653.084C228.335 658.775 231.554 664.784 237.245 666.505L323.345 692.535C329.031 694.259 335.043 691.04 336.768 685.346L346.972 651.585C385.33 655.404 423.29 651.345 458.871 640.448L475.53 671.557C478.342 676.798 484.868 678.767 490.111 675.963L569.4 633.491C574.635 630.684 576.616 624.159 573.804 618.918L557.136 587.809C585.927 564.227 610.332 534.879 628.414 500.83L662.174 511.04C667.869 512.76 673.881 509.543 675.597 503.851L701.629 417.752C703.353 412.061 700.134 406.052 694.44 404.331L660.68 394.122Z", fill: "rgb(1, 98, 196)" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M494.093 200.551L491.095 200.449L491.01 203.113C490.868 207.906 490.933 213.034 491.005 218.624C491.055 222.52 491.107 226.641 491.095 231.031L490.597 239.698C490.61 247.773 490.667 259.013 490.767 273.417L491.093 314.421C488.889 315.152 487.233 317.054 486.901 319.369C485.083 319.646 483.687 321.19 483.687 323.047C483.687 324.362 484.387 325.518 485.441 326.181L484.158 329.281C483.589 330.659 482.649 331.836 481.44 332.687C476.141 336.414 473.021 342.451 473.095 348.836C473.097 349.006 473.101 349.175 473.108 349.344C473.131 349.956 473.655 350.427 474.281 350.411C474.906 350.388 475.394 349.873 475.371 349.261C475.365 349.112 475.361 348.962 475.359 348.811C475.294 343.149 479.061 337.795 483.76 334.489C485.317 333.393 486.527 331.881 487.257 330.114L487.641 326.77H489.251C489.251 326.77 489.81 329.78 489.81 332.133C489.81 334.487 489.251 339.148 489.251 339.148H487.395C485.27 339.148 483.541 340.842 483.541 342.924C483.541 345.005 485.27 346.699 487.395 346.699H487.661C489.786 346.699 490.515 345.612 490.515 342.924C490.515 341.517 490.671 340.51 492.967 340.51C495.264 340.51 494.672 342.924 494.672 342.924C494.672 345.005 496.401 346.699 498.527 346.699H498.792C500.918 346.699 502.647 345.005 502.647 342.924C502.647 340.842 499.062 339.081 496.937 339.081C496.937 339.081 496.371 334.845 496.371 332.687C496.371 330.868 496.937 327.148 496.937 327.148H494.672C494.672 327.148 495.145 330.62 495.145 332.738C495.145 334.857 494.672 339.081 494.672 339.081C494.672 339.081 493.424 339.306 492.828 339.319C492.233 339.332 491.515 339.148 491.515 339.148C491.515 339.148 491.019 334.817 491.019 332.738C491.019 330.66 491.515 326.77 491.515 326.77H494.672H496.937H498.547L499.93 330.114C500.625 331.793 502.705 333.268 504.291 334.392L504.492 334.534C509.086 337.797 510.829 343.059 510.829 348.609C510.829 353.298 508.952 357.692 505.542 360.983C502.134 364.274 497.62 367.049 492.828 366.98C489.029 366.926 485.145 364.832 482.108 362.563C479.168 360.366 475.359 354.357 474.725 352.969C474.091 351.582 473.793 353.771 473.978 354.357C475.198 358.225 477.694 361.718 481.006 364.193C484.431 366.752 488.508 368.137 492.795 368.198C498.199 368.274 503.288 366.274 507.132 362.563C510.976 358.852 513.094 353.896 513.094 348.609C513.094 342.35 510.001 336.417 504.821 332.738C503.559 331.842 502.594 330.647 502.029 329.281L500.747 326.181C501.8 325.519 502.5 324.362 502.5 323.047C502.5 321.19 501.104 319.646 499.286 319.369C498.912 316.759 496.854 314.673 494.226 314.2L494.081 314.2L492.344 276.07C492.24 261.556 493.598 232.546 493.598 232.546C493.622 221.39 493.759 211.61 494.009 203.205L494.093 200.551ZM498.527 344.481C497.65 344.481 496.937 343.782 496.937 342.924V340.51C496.937 340.51 500.382 341.2 500.382 342.924C500.382 344.505 499.782 344.496 499.006 344.483H499.004C498.935 344.482 498.864 344.481 498.792 344.481H498.527ZM484.939 342.924C485.085 345.092 489.584 346.038 489.251 342.924V340.51C489.251 340.51 484.792 340.755 484.939 342.924ZM489.21 319.324C489.626 317.602 491.21 316.316 493.094 316.316C494.978 316.316 496.561 317.602 496.977 319.324H489.21ZM498.7 321.543H498.216H487.972H487.488C486.641 321.543 485.952 322.218 485.952 323.047C485.952 323.877 486.641 324.551 487.488 324.551H498.7C499.547 324.551 500.236 323.877 500.236 323.047C500.236 322.218 499.547 321.543 498.7 321.543ZM518.104 331.2H520.083C520.641 331.2 521.094 330.752 521.094 330.2C521.094 329.648 520.641 329.2 520.083 329.2H518.104C517.546 329.2 517.094 329.648 517.094 330.2C517.094 330.752 517.546 331.2 518.104 331.2ZM516.532 338.279L518.436 339.081C518.973 339.307 519.234 339.947 519.018 340.51C518.803 341.073 518.193 341.347 517.656 341.121L515.751 340.319C515.215 340.093 514.954 339.453 515.169 338.89C515.333 338.461 515.726 338.2 516.142 338.2C516.272 338.2 516.404 338.225 516.532 338.279ZM514.832 321.972L516.616 320.54C517.119 320.137 517.245 319.337 516.897 318.753C516.682 318.393 516.336 318.2 515.985 318.2C515.767 318.2 515.548 318.274 515.355 318.428L513.571 319.86C513.068 320.264 512.943 321.064 513.291 321.647C513.639 322.23 514.329 322.375 514.832 321.972ZM467.083 331.2H465.104C464.546 331.2 464.094 330.752 464.094 330.2C464.094 329.648 464.546 329.2 465.104 329.2H467.083C467.641 329.2 468.094 329.648 468.094 330.2C468.094 330.752 467.641 331.2 467.083 331.2ZM468.656 338.279L466.752 339.081C466.215 339.307 465.954 339.947 466.169 340.51C466.385 341.073 466.995 341.347 467.532 341.121L469.436 340.319C469.973 340.093 470.234 339.453 470.018 338.89C469.854 338.461 469.461 338.2 469.046 338.2C468.916 338.2 468.784 338.225 468.656 338.279ZM470.356 321.972L468.571 320.54C468.068 320.137 467.943 319.337 468.291 318.754C468.506 318.393 468.851 318.2 469.203 318.2C469.42 318.2 469.64 318.274 469.832 318.428L471.616 319.86C472.119 320.263 472.245 321.063 471.897 321.647C471.549 322.23 470.859 322.375 470.356 321.972Z", fill: "#FFB61D" }),
        React.createElement("path", { d: "M346.364 479.782C357.394 482.685 363.054 489.594 367.834 496.029C372.624 502.463 362.094 499.402 356.284 497.079C350.474 494.757 336.484 486.168 336.484 486.168L290.104 472.14V450.688L303.974 449.878C303.974 449.878 335.324 476.878 346.364 479.782Z", fill: "white" }),
        React.createElement("path", { d: "M298.305 322.67C308.225 360.214 313.345 396.137 314.155 430.598C314.155 430.598 323.445 431.759 322.285 439.888C321.125 448.017 296.735 470.08 296.735 470.08L288.285 442.071L285.125 338.859L298.305 322.67Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M301.69 341.885L295.994 338.106C295.63 337.865 295.15 338.053 295.019 338.487L293.033 345.084C292.867 345.634 293.361 346.148 293.874 345.961L301.556 343.142C302.08 342.95 302.16 342.196 301.69 341.885ZM301 342.975L294 345L296.084 339L301 342.975Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M299.19 389.385L293.494 385.606C293.13 385.365 292.65 385.553 292.519 385.987L290.533 392.584C290.367 393.134 290.861 393.648 291.374 393.461L299.056 390.642C299.58 390.45 299.66 389.696 299.19 389.385ZM298.5 390.475L291.5 392.5L293.584 386.5L298.5 390.475Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M296.195 416.071L296.619 409.249C296.646 408.813 296.244 408.491 295.802 408.595L289.095 410.173C288.537 410.305 288.338 410.99 288.757 411.34L295.04 416.584C295.468 416.941 296.16 416.634 296.195 416.071ZM294.906 416.019L289.652 410.969L295.89 409.773L294.906 416.019Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M306.991 411.038L300.169 410.614C299.733 410.587 299.411 410.989 299.515 411.431L301.094 418.137C301.225 418.696 301.91 418.894 302.26 418.476L307.504 412.193C307.862 411.765 307.554 411.073 306.991 411.038ZM306.939 412.327L301.889 417.58L300.694 411.342L306.939 412.327Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M301.724 445.815L295.604 448.859C295.213 449.053 295.136 449.563 295.447 449.893L300.167 454.912C300.56 455.33 301.253 455.16 301.346 454.622L302.746 446.559C302.842 446.01 302.23 445.564 301.724 445.815ZM302.324 446.958L300.578 454.032L296.423 449.228L302.324 446.958Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M304.724 426.815L298.604 429.859C298.213 430.053 298.136 430.563 298.447 430.893L303.167 435.912C303.56 436.33 304.253 436.16 304.346 435.622L305.746 427.559C305.842 427.01 305.23 426.564 304.724 426.815ZM305.324 427.958L303.578 435.032L299.423 430.228L305.324 427.958Z", fill: "#FFB61D" }),
        React.createElement("path", { d: "M265.047 345.246L258.318 365.563C242.935 412.092 235.36 435.709 235.133 437.923C234.991 439.298 235.825 440.327 237.112 440.676C237.885 440.886 238.83 440.875 240.004 440.701C241.831 440.43 244.273 439.745 247.222 438.726C249.501 437.939 251.965 436.994 254.46 435.972L255.51 435.539C255.851 435.397 256.182 435.258 256.503 435.121L258.171 434.403L258.646 434.193L258.923 433.752C259.415 432.97 260.115 431.586 260.806 429.688C261.413 428.021 261.897 426.236 262.215 424.349L262.326 423.637C262.425 422.944 263.376 421.341 265.337 418.604L266.704 416.733C267.825 415.222 269.982 412.335 270.199 412.043L271.467 410.325C272.679 408.673 273.737 407.197 274.771 405.709C279.956 398.244 283.62 391.709 285.782 385.421C287.616 380.087 288.259 375.145 287.533 370.601C286.421 363.666 286.847 357.039 288.47 350.819C289.818 345.652 285.553 340.884 279.404 339.132C273.05 337.321 266.997 339.372 265.047 345.246Z", fill: "white" }),
        React.createElement("path", { d: "M276.311 315.203C280.059 319.181 283.204 322.214 285.745 324.303C290.026 327.822 296.164 331.594 304.157 335.618C279.707 341.28 264.777 342.399 259.368 338.976C259.368 338.976 261.621 328.374 264.858 323.832C267.269 320.45 276.311 315.203 276.311 315.203Z", fill: "white" }),
        React.createElement("path", { d: "M315.204 264.092C310.124 283.386 296.244 303.529 281.464 299.639C266.684 295.748 258.504 269.377 263.584 250.083C268.664 230.789 284.764 218.302 299.544 222.192C314.324 226.082 320.284 244.799 315.204 264.092Z", fill: "white" }),
        React.createElement("path", { d: "M318.585 270.245C312.836 292.325 297.128 315.377 280.402 310.925C263.675 306.472 254.418 276.293 260.167 254.213C265.916 232.133 284.136 217.843 300.863 222.294C317.589 226.746 324.334 248.166 318.585 270.245Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M291.892 224.834C303.29 225.481 311.608 229.226 316.271 235.824L316.797 236.587C319.103 239.915 321.042 242.01 321.89 248.309L321.972 248.979C322.456 253.123 322.598 257.495 322.349 258.946C322.215 259.559 321.952 259.773 321.62 259.708C320.867 259.56 318.916 256.094 315.768 249.308L313.126 252.4C311.688 254.061 308.639 255.627 306.832 256.803C305.025 257.98 291.892 224.834 291.892 224.834Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M303.399 287.511C309.746 290.158 314.567 293.596 315.846 292.166C317.124 290.736 312.764 286.382 309.377 280.468C305.831 274.588 302.463 267.18 301.833 264.166L300.221 256.549C295.505 262.5 291.089 282.468 303.399 287.511Z", fill: "white" }),
        React.createElement("path", { d: "M377.188 651.122L376.844 672.303H364.796L361.188 648L377.188 651.122Z", fill: "white" }),
        React.createElement("path", { d: "M245.24 538.488C245.24 538.488 323.413 536.762 347.987 533.217C375.267 529.282 390.185 519.983 396.118 521.082C398.898 521.597 415.307 524.505 449.546 528.147C464.027 529.687 501.616 529.923 501.616 529.923L516.205 498.872C516.205 498.872 413.541 478.26 381.082 487.181C370.872 489.987 348.763 494.037 322.476 492.558C299.745 491.279 237.923 479.272 237.923 479.272C237.923 479.272 212.962 488.232 217.48 510.267C221.998 532.301 245.24 538.488 245.24 538.488Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M507.84 512.157L512.646 498.242C512.646 498.242 410.155 479.125 377.696 488.046C367.487 490.852 358.26 495.479 331.973 494C321.91 493.434 304.704 491.079 280.356 486.934C268.039 484.838 266.061 485.614 275.741 491.944C298.189 506.624 348.123 503.164 393.428 496.549C477.63 484.255 507.84 512.157 507.84 512.157Z", fill: "#E7EAEE" }),
        React.createElement("path", { d: "M363.587 655.932C358.487 661.567 351.727 670.847 355.207 680.137L415.597 698.717C415.597 698.717 417.917 691.747 414.437 685.947C410.947 680.137 377.999 657.215 377.999 657.215L363.587 655.932Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M391.462 668.517C391.862 668.408 392.273 668.645 392.382 669.044C392.49 669.444 392.254 669.856 391.854 669.964C389.887 670.497 388.591 671.74 388.136 673.314C387.546 675.348 387.482 677.429 388.15 680.76C388.232 681.166 387.969 681.561 387.563 681.643C387.157 681.724 386.761 681.461 386.68 681.055C385.965 677.493 386.037 675.168 386.695 672.896C387.298 670.813 388.996 669.185 391.462 668.517Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M358.207 681.137L417.619 698.618C417.619 698.618 425.164 697.032 417.362 695.923C409.346 694.784 362.413 673.293 357.251 677.207C356.517 677.764 357.753 679.923 358.207 681.137Z", fill: "#E7EAEE" }),
        React.createElement("path", { d: "M210.171 534.056C210.171 534.056 236.979 542.518 258.567 545.69C280.155 548.862 323.216 550.667 323.216 550.667C323.216 550.667 336.66 557.975 337.527 561.359C337.865 562.677 339.902 580.097 345.535 602.349C348.184 612.816 362.342 660.152 362.342 660.152L381.082 651.856C381.082 651.856 380.33 564.854 368.367 535.998C356.405 507.142 233.442 479.115 233.442 479.115C233.442 479.115 207.345 474.394 200.241 495.736C193.136 517.078 210.171 534.056 210.171 534.056Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M365.342 657.152L384.082 648.856C383.58 590.855 379.342 552.235 371.367 532.998C371.367 532.998 379.517 635.409 365.342 657.152Z", fill: "#E7EAEE" }),
        React.createElement("path", { d: "M528.755 513.299C533.418 519.3 541.383 527.569 551.137 525.755L579.921 469.509C579.921 469.509 572.514 466.233 566.198 468.653C559.871 471.081 532.047 500.116 532.047 500.116L528.755 513.299Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M403.73 678.504C404.029 678.218 404.504 678.228 404.791 678.527C405.077 678.826 405.067 679.301 404.768 679.587C403.025 681.257 402.702 684.055 403.702 685.744C403.913 686.1 403.795 686.56 403.438 686.771C403.082 686.982 402.622 686.864 402.411 686.508C401.063 684.23 401.475 680.665 403.73 678.504Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M397.604 673.559C397.906 673.275 398.38 673.29 398.664 673.592C398.947 673.893 398.933 674.368 398.631 674.652L398.225 675.042C395.071 678.145 394.167 680.859 396.944 683.77C397.23 684.07 397.219 684.545 396.919 684.83C396.619 685.116 396.144 685.105 395.859 684.805C393.806 682.654 393.385 680.33 394.294 678.004C394.921 676.4 396.012 675.054 397.604 673.559Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M368.737 672.576C370.459 675.867 379.599 674.516 378.008 665.414C377.256 661.108 363.969 663.461 368.737 672.576Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M545.43 526.801C557.509 512.998 564.451 481.956 574.398 471.274C577.909 467.504 582.463 466.658 577.561 475.584C568.592 491.915 551.354 526.801 551.354 526.801C550.442 527.258 549.314 526.801 548.294 526.801H545.43Z", fill: "#E7EAEE" }),
        React.createElement("path", { d: "M346.364 479.782C357.394 482.685 363.054 489.594 367.834 496.029C372.624 502.463 362.094 499.402 356.284 497.079C350.474 494.757 339.36 485.943 339.36 485.943L346.364 479.782Z", fill: "white" }),
        React.createElement("path", { d: "M245.894 453.654C245.894 453.654 307.984 480.327 316.734 480.362C325.474 480.398 346.924 490.813 348.084 498.942C349.494 508.831 312.084 494.297 312.084 494.297C312.084 494.297 228.474 494.297 214.544 480.362C200.605 466.427 209.894 437.396 209.894 437.396L245.894 453.654Z", fill: "white" }),
        React.createElement("path", { d: "M230.794 329.401C230.794 329.401 245.894 338.69 248.214 368.883C250.534 399.075 241.244 435.074 241.244 435.074C241.244 435.074 247.054 439.719 248.214 444.364C249.374 449.009 245.844 455.14 245.844 455.14C245.844 455.14 211.056 472.234 208.733 473.395C206.411 474.556 197.121 471.072 197.121 461.782C197.121 452.493 200.605 444.364 200.605 444.364C202.272 383.079 192.476 323.594 230.794 329.401Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M292.304 265.155C295.875 260.372 303.425 258.815 305.439 266.365C305.439 266.365 306.987 270.921 303.867 273.736C294.31 282.36 288.732 269.938 292.304 265.155Z", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M312.249 270.343C315.642 265.799 322.814 264.32 324.728 271.493C324.728 271.493 326.199 275.821 323.235 278.496C314.155 286.688 308.856 274.887 312.249 270.343Z", fill: "white" }),
        React.createElement("path", { d: "M284.464 328.504C284.464 328.504 284.464 384.324 285.284 415.517C286.104 446.71 278.954 477.444 265.294 501.479C251.634 525.515 253.493 559.898 243.424 562.454C163.779 582.669 185.222 335.282 214.691 319.474C244.16 303.665 253.894 300.317 253.894 300.317", fill: "white" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M243.617 344.165L236.754 354.413C236.184 355.263 236.614 356.421 237.6 356.694L246.759 359.226C247.824 359.52 248.83 358.602 248.635 357.515L246.34 344.735C246.102 343.407 244.368 343.044 243.617 344.165ZM245.109 345.742L247.159 357.78L239.194 354.413L245.109 345.742Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M221.534 334.156L213.445 347.139C212.929 347.969 213.33 349.063 214.261 349.361L228.384 353.889C229.56 354.266 230.662 353.139 230.26 351.971L224.225 334.46C223.814 333.266 222.202 333.084 221.534 334.156ZM223.452 335.738L227.584 351.971L215.339 347.139L223.452 335.738Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M216.551 432.386L222.053 453.063C222.391 454.333 224.084 454.585 224.777 453.468L232.957 440.278C233.411 439.546 233.158 438.584 232.403 438.171L218.72 430.684C217.563 430.051 216.212 431.111 216.551 432.386ZM218 433L230.683 439.487L223.502 452.677L218 433Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M205.532 508.311L208.532 522.484C208.808 523.785 210.513 524.111 211.249 523.004L219.354 510.81C219.952 509.91 219.431 508.692 218.368 508.503L207.263 506.523C206.216 506.337 205.312 507.27 205.532 508.311ZM208.15 508.087L217.774 511.498L209.47 520.98L208.15 508.087Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M231.532 505.311L234.532 519.484C234.808 520.785 236.513 521.111 237.249 520.004L245.354 507.81C245.952 506.91 245.431 505.692 244.368 505.503L233.263 503.523C232.216 503.337 231.312 504.27 231.532 505.311ZM232.921 506.543L244.125 506.234L234.905 518.081L232.921 506.543Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M217.532 476.311L220.532 490.484C220.808 491.785 222.513 492.111 223.249 491.004L231.354 478.81C231.952 477.91 231.431 476.692 230.368 476.503L219.263 474.523C218.216 474.337 217.312 475.27 217.532 476.311ZM219 476L229.105 478.979L221 489.174L219 476Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M549.59 522.175C548.836 523.647 547.6 524.262 545.951 524.354C540.079 524.68 535.424 522.09 531.271 518.315C529.696 516.884 528.3 515.257 526.723 513.83C525.613 512.827 524.423 512.173 522.691 512.794C521.365 513.27 519.808 513.09 518.358 513.238C515.087 513.572 511.825 514.008 508.548 514.246C506.459 514.398 506.407 516.18 505.917 517.41C504.808 520.191 503.979 523.087 503.097 525.955C502.755 527.069 502.21 527.509 500.959 527.493C494.713 527.417 488.465 527.423 482.218 527.474C479.373 527.497 476.526 527.838 473.686 527.773C468.342 527.653 462.991 527.481 457.664 527.072C452.51 526.676 447.383 525.933 442.24 525.384C438.628 524.999 434.993 524.795 431.396 524.307C427.213 523.739 423.065 522.911 418.891 522.27C416.802 521.949 414.679 521.854 412.588 521.547C409.003 521.019 405.418 520.47 401.855 519.807C398.55 519.191 395.44 519.83 392.329 520.857C386.271 522.857 380.198 524.81 374.122 526.754C373.042 527.099 372.722 527.383 373.21 528.695C375 533.511 376.676 538.38 378.133 543.306C379.161 546.782 379.873 550.363 380.532 553.933C381.341 558.308 382.017 562.71 382.62 567.118C383.08 570.486 383.372 573.879 383.675 577.266C384.059 581.571 384.422 585.879 384.712 590.191C385.001 594.485 385.243 598.784 385.406 603.085C385.683 610.389 385.89 617.694 386.11 625C386.243 629.423 386.326 633.848 386.471 638.271C386.514 639.555 386.926 640.872 386.73 642.105C386.583 643.034 385.922 644.335 385.164 644.627C383.212 645.38 382.648 646.832 382.665 648.832C382.687 651.387 383.007 653.944 382.941 656.493C382.898 658.117 383.52 659.251 384.701 660.112C390.068 664.027 395.488 667.869 400.852 671.788C403.398 673.648 405.909 675.562 408.35 677.558C410.963 679.695 413.524 681.902 416.016 684.18C418.499 686.451 419.819 689.227 420.238 692.689C420.563 695.373 420.218 697.867 419.771 700.421C419.538 701.751 418.778 702.295 417.395 701.844C411.585 699.948 405.786 698.016 399.948 696.21C390.305 693.225 380.635 690.327 370.975 687.394C367.532 686.349 364.089 685.306 360.642 684.274C358.53 683.642 358.084 681.748 357.692 680.033C356.578 675.159 358.017 670.722 360.588 666.635C362.162 664.133 363.996 661.795 365.716 659.386C367.121 657.418 366.758 655.403 366.063 653.274C363.798 646.344 361.572 639.399 359.431 632.43C357.318 625.55 355.224 618.661 353.31 611.724C351.286 604.392 349.45 597.008 347.6 589.629C346.599 585.637 345.655 581.626 344.844 577.591C344.238 574.574 343.895 571.505 343.419 568.461C342.85 564.826 342.508 561.128 341.572 557.588C341.169 556.065 339.69 554.671 338.401 553.567C335.594 551.163 332.369 549.372 328.866 548.148C328 547.845 327.062 547.637 326.149 547.602C321.803 547.438 317.452 547.395 313.106 547.22C308.861 547.049 304.617 546.813 300.379 546.528C296.007 546.234 291.638 545.881 287.274 545.489C282.603 545.069 277.915 544.736 273.278 544.067C268.362 543.357 263.491 542.325 258.612 541.37C257.026 541.06 255.867 542.023 255.621 544.26C255.083 549.151 253.421 553.696 251.447 558.147C250.023 561.356 247.337 562.961 244.024 563.508C241.659 563.899 239.236 564.272 236.857 564.182C230.085 563.926 224.046 561.692 218.675 557.398C211.862 551.95 207.876 544.672 204.482 536.913C202.961 533.436 201.003 530.118 199.809 526.539C198.513 522.651 197.857 518.549 196.954 514.533C196.251 511.407 195.535 508.282 194.944 505.135C194.476 502.646 194.182 500.124 193.827 497.614C193.355 494.28 192.89 490.945 192.441 487.608C192.293 486.504 192.146 485.394 192.1 484.283C191.955 480.805 191.883 477.324 191.736 473.847C191.529 468.969 191.143 464.095 191.078 459.216C190.968 450.872 190.979 442.525 191.079 434.18C191.123 430.516 191.433 426.848 191.763 423.195C192.137 419.042 192.704 414.907 193.118 410.757C193.413 407.795 193.506 404.812 193.845 401.855C194.344 397.518 194.89 393.182 195.584 388.872C196.409 383.747 197.352 378.638 198.35 373.543C200.237 363.9 202.433 354.316 206.027 345.155C208.318 339.318 210.708 333.363 215.383 328.957C217.406 327.05 220.218 325.951 222.732 324.597C229.633 320.882 236.571 317.233 243.474 313.522C243.797 313.349 244.074 312.845 244.127 312.461C244.31 311.13 244.229 309.745 244.555 308.459C244.768 307.621 245.356 306.702 246.051 306.196C248.38 304.497 250.819 302.948 253.248 301.391C253.683 301.112 254.298 300.868 254.776 300.945C257.336 301.358 258.621 299.783 259.499 297.844C260.687 295.219 261.772 292.533 262.694 289.804C264.221 285.283 265.761 280.751 266.916 276.129C267.315 274.534 266.702 272.632 266.342 270.915C265.609 267.419 265.001 263.859 263.822 260.509C263.067 258.367 261.541 256.424 260.083 254.617C256.312 249.943 254.332 244.709 254.966 238.712C255.241 236.108 256.358 233.681 258.306 231.789C260.598 229.562 262.948 227.395 265.248 225.176C266.924 223.558 266.804 222.321 264.621 220.739C261.566 218.526 258.637 216.134 255.715 213.745C253.219 211.704 252.145 208.788 251.484 205.799C250.585 201.733 250.477 197.63 252.135 193.661C254.788 187.313 258.61 182.075 265.607 180.1C271.774 178.359 277.927 178.477 283.461 181.973C288.49 185.149 291.684 189.88 293.089 195.72C294.738 202.573 292.861 208.74 289.398 214.606C289.108 215.097 289.078 215.742 288.928 216.316C289.443 216.413 289.955 216.574 290.473 216.598C297.134 216.901 303.755 217.641 309.721 220.816C317.551 224.983 322.477 231.588 324.649 240.185C324.974 241.472 324.971 242.855 325.014 244.197C325.159 248.774 325.171 253.357 325.441 257.925C325.498 258.879 326.228 260.05 327.008 260.66C330.752 263.593 332.025 270.773 328.544 275.023C328.195 275.449 327.899 275.916 327.557 276.347C326.219 278.031 324.279 278.848 322.348 278.504C320.702 278.211 320.563 278.765 320.02 279.98C318.861 282.571 317.471 285.078 315.974 287.494C313.966 290.733 311.917 293.967 309.596 296.981C308.194 298.801 306.301 300.266 304.525 301.769C302.372 303.592 300.095 305.269 297.903 307.047C296.809 307.934 295.61 308.392 294.213 308.19C292.764 307.981 291.948 308.796 291.524 309.97C290.705 312.236 289.964 314.536 289.317 316.857C289.181 317.346 289.47 318.059 289.766 318.546C292.351 322.801 294.919 327.069 297.62 331.251C299.812 334.644 302.305 337.848 304.426 341.282C305.738 343.407 306.607 345.805 307.67 348.082C309.523 352.056 311.417 356.012 313.188 360.022C313.552 360.847 313.652 361.904 313.525 362.805C313.339 364.116 312.046 364.534 310.645 363.688C309.016 362.705 307.483 361.555 305.958 360.411C305.014 359.703 304.165 358.868 303.267 358.097C303.163 358.007 303.024 357.959 302.902 357.892C302.882 358.048 302.827 358.21 302.849 358.361C303.1 360.125 303.301 361.898 303.638 363.646C303.987 365.451 304.517 367.22 304.884 369.022C305.612 372.602 306.316 376.187 306.967 379.781C307.7 383.823 308.405 387.871 309.042 391.929C309.369 394.015 309.481 396.134 309.763 398.229C310.189 401.395 310.724 404.548 311.123 407.718C311.341 409.449 311.389 411.203 311.485 412.949C311.616 415.329 311.703 417.711 311.839 420.09C312.176 425.96 312.516 431.83 312.887 437.698C312.979 439.152 313.833 440.271 315.143 440.687C318.87 441.871 321.474 446.221 320.847 449.853C320.702 450.697 320.514 451.57 320.143 452.331C319.251 454.158 320.414 455.195 321.57 456.145C323.447 457.687 325.403 459.136 327.364 460.573C332.018 463.985 336.705 467.352 341.359 470.763C345.576 473.853 350.228 476.001 355.22 477.524C359.228 478.747 362.637 481.065 365.842 483.736C367.416 485.048 368.778 486.99 371.271 486.511C374.799 485.833 378.317 485.098 381.836 484.372C382.897 484.153 383.939 483.833 385.005 483.65C388.717 483.011 390.91 480.384 393.095 477.666C394.721 475.644 396.534 473.773 398.226 471.803C401.555 467.926 404.847 464.019 408.174 460.141C409.827 458.213 411.53 456.327 413.2 454.414C417.906 449.021 422.585 443.604 427.321 438.237C429.804 435.424 432.39 432.702 434.916 429.927C435.596 429.18 436.323 428.451 436.861 427.607C437.679 426.323 438.513 425.929 440.111 426.447C443.604 427.577 443.541 427.362 441.099 430.041C436.725 434.84 432.496 439.771 428.189 444.631C426.083 447.007 423.907 449.321 421.819 451.712C418.154 455.907 414.544 460.15 410.887 464.352C408.291 467.335 405.663 470.289 403.035 473.244C401.002 475.53 398.941 477.791 396.914 480.083C396.737 480.283 396.598 480.838 396.661 480.877C397.156 481.188 397.714 481.647 398.235 481.626C402.48 481.461 406.72 481.136 410.965 480.991C414.143 480.883 417.33 480.882 420.508 480.992C424.58 481.132 428.658 481.308 432.712 481.697C437.23 482.13 441.722 482.826 446.227 483.396C450.845 483.982 455.479 484.464 460.08 485.158C464.679 485.852 469.241 486.787 473.83 487.55C477.631 488.182 481.459 488.652 485.254 489.312C490.094 490.155 494.911 491.135 499.743 492.022C503.137 492.646 506.544 493.189 509.937 493.813C513.209 494.414 516.463 495.112 519.739 495.693C521.803 496.059 523.885 496.429 525.971 496.515C526.845 496.551 527.959 496.076 528.608 495.459C533.569 490.739 538.378 485.858 543.362 481.162C548.939 475.906 554.772 470.945 561.06 466.534C563.938 464.516 567.16 464.868 570.295 465.14C572.122 465.298 573.889 466.179 575.679 466.748C577.147 467.214 577.278 468.121 576.625 469.403C573.658 475.226 570.744 481.076 567.775 486.899C565.21 491.931 562.597 496.94 559.919 502.046C556.419 508.814 553.01 515.497 549.59 522.175ZM275.005 479.232C276.565 474.722 277.934 470.136 279.164 465.523C279.963 462.527 280.417 459.433 280.93 456.367C281.458 453.217 281.899 450.051 282.325 446.885C282.821 443.208 283.591 439.529 283.651 435.841C283.771 428.436 283.465 421.024 283.383 413.615C283.333 409.087 283.307 404.556 283.396 400.03C283.465 396.469 281.393 393.814 279.883 390.894C278.878 388.95 277.817 386.988 277.175 384.912C275.997 381.105 275.039 377.223 274.127 373.341C273.502 370.686 273.043 367.987 272.632 365.289C272.157 362.167 271.131 359.235 269.798 356.402C269.686 356.164 268.75 355.991 268.649 356.125C268.112 356.844 267.712 357.667 267.278 358.461C266.506 359.875 265.333 361.221 265.065 362.727C264.529 365.735 263.143 368.317 261.726 370.898C260.844 372.505 259.358 372.547 258.326 371.072C257.217 369.487 256.019 367.888 255.311 366.114C253.647 361.945 252.157 357.699 250.771 353.428C248.95 347.815 247.233 342.166 245.598 336.495C244.744 333.535 243.894 330.528 243.535 327.484C243.184 324.5 243.462 321.441 243.453 318.416C243.452 318.145 243.369 317.875 243.325 317.604C243.202 317.701 243.09 317.816 242.955 317.89C239.784 319.635 236.632 321.417 233.431 323.104C230.256 324.777 227.065 326.429 223.816 327.952C220.256 329.621 216.683 331.343 214.621 334.84C212.39 338.623 209.783 342.228 208.439 346.493C207.053 350.889 205.486 355.235 204.28 359.679C203.046 364.224 202.207 368.876 201.095 373.456C200.385 376.382 199.215 379.221 198.749 382.177C198.038 386.686 197.599 391.254 197.344 395.815C197.126 399.729 197.142 403.652 196.614 407.551C196.204 410.578 195.925 413.623 195.556 416.656C194.993 421.274 193.983 425.882 193.91 430.506C193.75 440.743 194.172 450.988 194.124 461.229C194.099 466.596 194.9 471.843 195.532 477.133C196.234 483.006 196.649 488.913 197.319 494.79C197.774 498.785 198.23 502.802 199.082 506.723C200.469 513.106 201.959 519.484 203.811 525.745C206.122 533.556 209.514 540.915 214.291 547.589C217.276 551.76 220.921 555.176 225.419 557.631C231.518 560.96 238.059 560.672 244.612 559.656C245.686 559.489 247.077 558.663 247.537 557.747C248.827 555.181 249.954 552.475 250.688 549.704C251.732 545.765 252.193 541.674 253.217 537.729C254.905 531.225 257.028 524.831 258.619 518.305C259.929 512.929 262.426 508.079 264.595 503.081C266.192 499.404 268.08 495.852 270.011 492.071C271.689 487.796 273.506 483.569 275.005 479.232ZM332.573 545.629C335.729 547.558 338.823 549.604 341.825 551.763C343.7 553.112 345.047 555.071 345.458 557.337C346.41 562.583 347.041 567.887 347.961 573.139C348.607 576.826 349.535 580.462 350.302 584.128C350.927 587.112 351.505 590.107 352.097 593.097C352.68 596.037 353.247 598.979 353.836 601.916C354.286 604.155 354.75 606.391 355.224 608.625C355.99 612.238 356.599 615.894 357.589 619.445C358.564 622.942 360.03 626.3 361.1 629.775C362.88 635.557 365.09 641.155 367.649 646.635C368.256 647.934 369.277 647.673 369.882 647.436C373.711 645.937 377.488 644.3 381.241 642.615C382.425 642.084 383.055 641.054 383 639.646C382.852 635.822 382.749 631.996 382.644 628.171C382.519 623.595 382.412 619.018 382.295 614.441C382.18 609.96 382.155 605.475 381.922 601C381.694 596.628 381.265 592.267 380.904 587.903C380.453 582.467 380.034 577.027 379.5 571.598C379.132 567.85 378.794 564.079 378.085 560.387C376.858 553.995 375.35 547.656 373.966 541.293C372.352 533.878 369.236 527.417 363.073 522.564C358.38 518.868 353.457 515.568 348.134 512.931C342.245 510.014 336.29 507.174 330.178 504.776C323.19 502.036 316.403 498.573 308.709 497.942C305.013 497.639 301.347 496.991 297.656 496.598C294.696 496.284 291.711 496.194 288.752 495.87C284.068 495.357 279.403 494.676 274.715 494.216C274.058 494.152 273.068 494.769 272.665 495.364C271.738 496.73 271.041 498.26 270.317 499.755C268.058 504.426 265.412 508.964 263.693 513.828C261.422 520.255 259.881 526.939 258.039 533.517C256.996 537.244 256.973 537.41 260.223 538.091C263.982 538.88 267.801 539.403 271.61 539.927C274.101 540.27 276.626 540.365 279.126 540.652C283.864 541.196 288.59 541.847 293.331 542.359C296.348 542.684 299.381 542.881 302.411 543.06C306.94 543.329 311.47 543.581 316.004 543.746C318.718 543.845 321.439 543.764 324.504 543.764C327.351 543.712 330.132 544.137 332.573 545.629ZM468.603 523.985C471.524 524.122 474.445 524.265 477.367 524.327C484.142 524.471 490.918 524.585 497.695 524.668C499.047 524.684 500.266 524.124 500.63 522.731C502.594 515.236 506.454 508.286 506.95 500.357C507.076 498.346 506.204 496.925 504.151 496.566C502.01 496.191 499.895 495.666 497.759 495.258C495.073 494.746 492.375 494.297 489.685 493.803C487.27 493.359 484.858 492.898 482.447 492.432C480.682 492.091 478.925 491.715 477.159 491.381C473.778 490.742 470.394 490.116 467.01 489.496C464.696 489.072 462.384 488.638 460.062 488.265C458.261 487.976 456.443 487.794 454.638 487.531C450.824 486.974 447.013 486.397 443.201 485.826C441.023 485.5 438.851 485.142 436.669 484.848C433.759 484.455 430.841 483.791 427.929 483.808C420.622 483.849 413.315 484.17 406.011 484.455C402.518 484.592 399.018 484.786 395.547 485.178C393.604 485.397 391.735 486.012 390.326 487.649C388.03 490.316 385.565 492.837 383.245 495.484C381.781 497.156 380.41 498.914 379.071 500.689C377.3 503.038 375.14 504.465 372.052 504.226C366.995 503.835 361.93 503.547 356.872 503.159C354.995 503.015 353.127 502.735 351.261 502.474C348.095 502.031 344.94 501.517 341.771 501.102C338.741 500.706 335.701 500.377 332.661 500.064C331.802 499.976 330.926 500.025 330.061 500.073C329.889 500.083 329.732 500.377 329.569 500.54C329.745 500.622 329.925 500.696 330.098 500.786C331.619 501.58 333.101 502.465 334.667 503.157C339.261 505.186 343.999 506.92 348.477 509.172C354.98 512.443 361.048 516.436 366.565 521.237C368.276 522.726 369.918 523.831 372.724 523.458C377.171 522.866 381.327 521.769 385.318 519.828C390.689 517.214 396.153 515.071 402.329 516.351C405.903 517.092 409.495 517.741 413.064 518.506C415.324 518.991 417.529 519.79 419.807 520.128C422.633 520.547 425.508 520.621 428.36 520.87C433.548 521.322 438.733 521.801 443.92 522.251C447.442 522.557 450.967 522.833 454.664 523.295C459.31 523.526 463.956 523.768 468.603 523.985ZM287.871 423.757C287.922 425.143 287.867 426.532 287.89 427.919C287.998 434.404 288.1 440.889 288.245 447.373C288.287 449.255 288.204 451.195 288.635 453C289.508 456.653 290.653 460.244 291.768 463.835C292.245 465.373 292.91 466.838 294.648 467.447C296.16 467.976 297.625 468.642 299.141 469.163C301.389 469.935 302.079 469.643 303.545 467.585C304.03 466.905 304.59 466.276 305.135 465.64C308.648 461.543 312.268 457.532 315.651 453.331C318.149 450.23 317.716 445.24 313.534 443.639C313.084 443.467 312.638 443.26 312.171 443.163C309.7 442.651 309.814 442.658 309.732 440.323C309.439 431.98 310.418 423.614 309.107 415.281C308.584 411.954 308.799 408.513 308.318 405.176C307.569 399.984 306.533 394.832 305.582 389.67C304.683 384.788 303.782 379.905 302.797 375.039C302.061 371.408 301.178 367.808 300.386 364.188C299.782 361.427 299.308 358.634 298.579 355.908C298.382 355.171 297.467 354.626 296.882 353.993C296.197 354.654 294.998 355.257 294.915 355.986C294.495 359.685 293.925 363.455 294.25 367.125C294.623 371.341 295.256 375.521 294.451 379.706C293.534 384.476 292.008 389.056 289.424 393.229C287.991 395.542 286.921 397.942 287.165 400.804C287.406 403.636 287.484 406.487 287.525 409.33C287.582 413.376 287.539 417.424 287.539 421.818C287.655 422.464 287.847 423.107 287.871 423.757ZM269.672 280.451C269.38 280.903 268.975 281.318 268.814 281.813C267.166 286.857 265.66 291.951 263.898 296.954C262.837 299.969 261.171 302.659 258.417 304.553C256.416 305.929 254.549 307.5 252.591 308.941C251.626 309.651 251.83 310.267 252.432 311.13C254.234 313.711 256.138 316.251 257.642 319.004C259.718 322.803 261.496 326.767 263.343 330.688C265.143 334.508 267.023 338.302 268.581 342.221C269.906 345.55 270.618 349.126 271.981 352.436C273.212 355.429 274.534 358.379 274.98 361.584C275.132 362.674 275.485 362.683 276.311 362.68C281.274 362.663 286.067 362.007 290.252 359.052C290.61 358.799 290.912 358.28 290.98 357.844C291.145 356.79 291.116 355.707 291.24 354.645C291.327 353.895 291.816 353.085 291.641 352.431C290.989 350.002 290.121 347.631 289.363 345.23C287.914 340.642 286.014 336.103 285.884 331.263C285.752 326.338 286.195 321.391 286.533 316.464C286.67 314.454 287.064 312.437 287.573 310.483C288.169 308.192 288.027 307.565 285.959 306.447C282.555 304.607 279.621 302.134 277.524 298.944C274.1 293.737 271.47 288.134 270.532 281.657C270.245 281.255 269.959 280.853 269.672 280.451ZM319.045 278.915C319.139 278.727 319.981 278.143 318.729 277.932C317.464 277.719 316.035 277.105 315.166 276.199C313.462 274.422 312.052 272.352 310.62 270.333C310.215 269.761 310.071 269.414 309.501 270.1C309.14 270.535 308.67 270.88 308.309 271.315C305.178 275.097 300.675 276.703 296.459 275.652C291.404 274.392 288.323 269.003 288.254 264.328C288.226 262.464 287.637 260.902 286.148 259.83C283.671 258.046 281.122 256.358 278.576 254.672C277.15 253.728 275.792 254.036 275.424 255.525C274.513 259.21 273.379 262.904 273.061 266.656C272.668 271.297 272.855 275.984 273.963 280.616C275.83 288.419 278.254 295.834 284.622 301.333C288.728 304.879 293.799 305.676 298.688 303.531C303.533 301.404 306.509 297.471 309.405 293.377C311.839 289.936 314.265 286.489 316.868 282.872C317.604 281.558 318.367 280.258 319.045 278.915ZM528.856 510.675C532.222 514.959 536.137 518.535 541.495 520.264C544.804 521.333 546.016 521.144 547.847 517.653C551.584 510.532 555.276 503.387 558.958 496.238C560.428 493.382 561.788 490.469 563.261 487.615C566.138 482.04 569.053 476.484 571.97 470.928C572.502 469.915 571.996 468.997 571.212 468.892C568.491 468.529 565.618 467.752 563.091 469.433C559.758 471.649 556.404 473.879 553.338 476.438C548.688 480.32 544.209 484.415 539.798 488.569C537.798 490.454 536.108 492.675 534.33 494.787C532.925 496.456 531.122 497.861 530.587 500.141C530.093 502.25 529.605 504.36 529.115 506.816C528.538 508.074 527.893 509.449 528.856 510.675ZM414.223 696.875C415.016 696.938 416.544 696.578 416.552 696.364C416.654 693.378 417.219 690.213 414.539 687.882C411.056 684.851 407.681 681.681 404.048 678.841C398.187 674.259 392.155 669.895 386.191 665.444C384.06 663.853 381.941 662.165 379.229 661.75C376.801 661.379 374.326 661.33 371.89 661.005C369.835 660.73 368.437 661.621 367.189 663.1C364.163 666.687 361.962 670.675 361.13 675.333C360.477 678.984 361.652 680.995 364.599 681.862C370.21 683.514 375.781 685.302 381.381 686.991C385.394 688.201 389.444 689.292 393.449 690.528C399.289 692.331 405.104 694.217 411.277 696.067C412.258 696.353 413.226 696.797 414.223 696.875ZM296.39 471.941C292.515 470.407 288.663 468.815 284.779 467.305C283.632 466.859 282.655 466.727 282.276 468.494C281.866 470.413 280.99 472.23 280.357 474.104C278.952 478.264 277.541 482.422 276.211 486.606C275.965 487.379 275.591 488.464 277.119 488.612C279.108 488.804 281.086 489.136 283.079 489.281C286.97 489.564 290.864 489.842 294.762 489.97C300.553 490.161 306.347 490.23 312.141 490.332C313.991 490.364 315.842 490.331 317.693 490.341C318.143 490.343 318.62 490.311 319.038 490.442C324.054 492.009 329.052 493.634 334.073 495.186C339.123 496.747 344.181 498.281 349.576 497.98C351.449 497.875 351.793 497.524 351.104 495.8C350.728 494.86 350.206 493.902 349.514 493.177C346.135 489.635 342.009 487.163 337.595 485.13C334.079 483.511 330.641 481.704 326.686 481.297C324.834 481.107 322.969 480.84 321.171 480.375C318.314 479.635 315.481 478.779 312.687 477.827C309.196 476.638 305.754 475.303 301.944 474.031C300.091 473.336 298.229 472.669 296.39 471.941ZM252.814 318.788C251.19 316.271 249.481 313.81 247.802 311.328C247.569 310.982 247.314 310.651 247.069 310.314C246.907 310.882 246.679 311.441 246.595 312.021C246.317 313.936 246.161 315.872 245.832 317.777C245.181 321.55 244.826 325.257 247.272 328.61C247.426 328.822 247.548 329.077 247.618 329.331C248.517 332.599 249.4 335.872 250.297 339.141C250.524 339.969 250.761 340.795 251.033 341.609C252.202 345.11 253.62 348.549 254.501 352.12C255.406 355.789 256.1 359.476 257.98 362.827C258.52 363.789 258.695 364.952 259.094 366.001C259.213 366.315 259.605 366.819 259.729 366.78C260.127 366.656 260.65 366.393 260.784 366.051C262.336 362.064 263.084 357.71 266.029 354.362C268.531 351.519 268.012 348.613 266.477 345.577C265.878 344.391 265.507 343.091 264.971 341.87C263.814 339.229 262.706 336.561 261.411 333.987C260.279 331.739 258.909 329.612 257.663 327.421C256.787 325.88 255.944 324.32 254.913 322.595C254.218 321.323 253.598 320.003 252.814 318.788ZM346.566 478.01C341.497 474.736 336.358 471.555 331.446 468.056C327.333 465.127 323.522 461.777 319.525 458.681C318.446 457.846 317.208 457.568 316.106 458.828C314.32 460.868 312.5 462.879 310.717 464.922C309.389 466.444 308.113 468.011 306.783 469.531C305.743 470.719 305.852 471.356 307.374 471.811C312.265 473.273 317.191 474.619 322.067 476.128C328.723 478.189 335.372 480.282 341.968 482.525C344.078 483.243 345.938 484.693 348.046 485.42C350.187 486.16 352.475 486.545 354.731 486.859C357.336 487.223 359.975 487.368 362.603 487.531C363.023 487.557 363.467 487.182 363.899 486.993C363.643 486.637 363.448 486.205 363.12 485.936C358.953 482.526 353.976 480.765 348.801 478.888C348.052 478.602 347.225 478.436 346.566 478.01ZM280.566 386.63C281.21 389.074 282.741 390.263 285.099 390.485C287.135 390.676 287.733 389.559 288.229 388.072C288.94 385.941 289.644 383.808 290.311 381.663C291.793 376.9 291.581 372.1 290.694 367.258C290.405 365.679 290.473 364.033 290.4 362.417C290.39 362.183 290.509 361.942 290.569 361.704C290.331 361.774 290.084 361.822 289.856 361.916C288.427 362.507 287.051 363.326 285.565 363.66C282.782 364.285 279.944 364.699 277.112 365.061C276.018 365.2 275.37 365.315 275.717 366.653C276.045 367.917 276.176 369.231 276.437 370.514C276.999 373.278 277.589 376.037 278.168 379.145C278.978 381.637 279.899 384.1 280.566 386.63ZM310.227 360.532C310.497 360.761 310.797 360.954 311.083 361.163C311.081 360.776 311.188 360.347 311.06 360.007C310.308 358.009 309.607 355.981 308.69 354.058C306.732 349.953 304.933 345.732 302.544 341.885C300.195 338.103 297.032 334.834 294.536 331.131C292.749 328.479 291.484 325.475 289.957 322.644C289.723 322.208 289.335 321.855 289.018 321.464C288.872 321.924 288.591 322.387 288.602 322.842C288.675 325.8 288.714 328.764 288.962 331.709C289.131 333.718 289.47 335.742 290.01 337.682C290.609 339.836 291.696 341.858 292.256 344.019C292.912 346.548 294.113 348.148 296.562 349.499C300.623 351.739 304.814 354.067 307.671 358.329C308.522 359.065 309.369 359.805 310.227 360.532ZM292.148 262.501C290.816 264.441 293.287 271.24 294.631 271.746C304.037 275.286 306.718 269.228 306.842 267.565C307.087 264.263 307.494 260.916 304.373 258.24C296.141 256.602 294.302 259.364 292.148 262.501ZM328.165 265.249C326.901 262.1 324.988 260.046 321.656 260.764C319.956 261.131 318.459 262.479 316.895 263.425C313.536 265.456 313.097 266.568 314.271 270.17C315.446 273.775 318.187 275.84 321.675 276.541C324.561 277.121 326.624 275.331 328.149 272.637C328.533 270.177 329.166 267.742 328.165 265.249ZM315.709 261.177C317.065 260.213 318.535 258.785 319.998 258.732C322.529 258.641 322.118 257.095 321.845 255.878C321.082 252.477 320.085 249.125 319.112 245.775C318.446 243.481 317.883 243.349 316.267 244.965C313.499 247.732 310.695 250.446 307.218 252.357C306.131 252.955 305.981 254.331 306.759 255.416C307.048 255.819 307.441 256.166 307.658 256.602C308.727 258.752 309.697 260.953 310.838 263.063C311.091 263.529 310.899 265.179 312.53 263.964C313.583 263.026 314.566 261.99 315.709 261.177ZM519.962 510.053C522.323 509.613 524.853 509.008 525.218 505.867C525.279 505.339 525.52 504.835 525.64 504.312C526.385 501.064 525.541 500.024 522.29 499.675C519.229 499.347 516.19 498.799 513.148 498.308C511.521 498.045 511.221 498.35 511.041 500.006C510.792 502.3 510.435 504.588 510.006 506.857C509.63 508.844 510.186 510.417 511.934 510.806C514.613 510.574 517.33 510.542 519.962 510.053ZM378.225 657.853C378.555 657.838 379.117 657.183 379.129 656.809C379.211 654.327 379.151 651.842 379.179 649.358C379.195 647.962 378.125 647.916 377.358 648.161C375.687 648.693 374.097 649.487 372.484 650.196C371.319 650.709 370.009 651.124 370.15 652.805C370.25 653.991 370.25 655.205 370.523 656.353C370.977 658.258 372.622 657.352 373.965 657.731C375.386 657.789 376.81 657.916 378.225 657.853ZM285.778 456.038C285.678 455.756 285.268 455.583 285 455.36C284.805 455.639 284.466 455.904 284.439 456.198C284.276 457.982 284.137 459.771 284.082 461.561C284.028 463.31 285.267 464.444 287.045 464.282C287.347 464.255 287.881 463.724 287.842 463.511C287.58 462.09 287.192 460.692 286.672 459.113C286.382 458.085 286.133 457.043 285.778 456.038ZM383.569 488.813C383.761 488.432 384.166 487.369 382.989 487.59C381.193 487.927 379.428 488.436 377.662 488.918C377.339 489.006 377.075 489.308 376.784 489.512C377.122 489.671 377.455 489.956 377.798 489.968C379.237 490.02 380.68 489.99 382.295 489.816C382.737 489.491 383.348 489.25 383.569 488.813ZM249.533 306.81C249.256 306.971 248.979 307.132 248.703 307.293C248.92 307.535 249.099 307.872 249.37 307.985C249.533 308.053 249.889 307.82 250.076 307.639C251.144 306.604 252.193 305.549 253.236 304.488C253.444 304.275 253.596 304.007 253.774 303.764C253.423 303.833 252.982 303.79 252.737 303.989C251.695 304.833 250.711 305.748 249.533 306.81Z", fill: "#00160A" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M286.726 286.601C285.1 285.721 283.491 285 283.153 283.041C282.497 279.235 283.868 274.75 288.829 275.011C293.302 275.246 296.14 278.961 294.558 283.156C293.391 286.25 290.559 287.784 286.726 286.601Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M308.784 272.401C308.873 271.817 308.962 271.409 309.051 271C309.192 271.356 309.373 271.702 309.467 272.07C310.165 274.801 312.376 281.599 309.742 284.727C309.523 284.988 308.412 285.029 307.72 284.985C306.36 284.899 304.774 282.893 305.027 281.599C305.065 281.405 308.347 284.591 309.051 282.866C310.226 279.991 308.784 273.389 308.784 272.401Z", fill: "#00160A" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M290.268 292.322C290.131 292.253 289.942 292.271 289.778 292.278C289.374 292.295 288.821 291.571 289.056 291.264C289.411 290.803 289.813 290.338 290.294 290.034C290.58 289.853 291.053 290.439 291.017 290.699C290.991 290.892 291.175 291.196 291.353 291.327C294.071 293.323 297.088 294.617 300.389 295.239C300.607 295.28 300.797 295.475 301 295.598C300.798 295.739 300.596 296.012 300.393 296C296.791 295.789 292.627 293.519 290.268 292.322Z", fill: "#00160A" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M202.521 448.658L199.1 463.268C198.836 464.398 199.899 465.387 201.007 465.042L212.883 461.345C213.882 461.034 214.263 459.821 213.622 458.994L205.168 448.081C204.394 447.083 202.809 447.429 202.521 448.658ZM203.982 451L211.437 459.913L200.561 463.61L203.982 451Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M213.134 364.365C211.884 364.252 211.057 365.634 211.747 366.683L220.447 379.909C221.033 380.801 222.337 380.812 222.939 379.931L230.946 368.204C231.592 367.258 230.982 365.966 229.842 365.864L213.134 364.365ZM214.311 365.864L229.269 368.771L220.447 378.005L214.311 365.864Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M268.271 465.5H256C254.983 465.5 254.261 466.491 254.572 467.459L258.694 480.271C259.083 481.481 260.706 481.689 261.388 480.617L269.537 467.805C270.172 466.806 269.455 465.5 268.271 465.5ZM267.271 468L261.122 479.812L257 467L267.271 468Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M228.063 534.924L227.502 546.032C227.443 547.196 228.677 547.979 229.705 547.431L243.973 539.831C245.181 539.187 244.966 537.393 243.639 537.054L229.933 533.547C229.014 533.312 228.111 533.977 228.063 534.924ZM229.147 535.985L242.259 537.805L229.705 545.226L229.147 535.985Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M209.146 398.507L198.146 406.131C197.215 406.777 197.307 408.181 198.315 408.699L211.188 415.307C212.264 415.86 213.518 414.976 213.36 413.777L211.487 399.544C211.341 398.431 210.068 397.867 209.146 398.507ZM209.587 401.156L211.873 413.973L199 407.364L209.587 401.156Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M259.618 431.165L252.754 441.413C252.163 442.296 252.651 443.496 253.69 443.716L261.715 445.413C262.707 445.623 263.617 444.809 263.519 443.8L262.357 431.855C262.221 430.453 260.401 429.995 259.618 431.165ZM261.487 433.219V444.193L254.586 441.413L261.487 433.219Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M260.918 382.886C262.915 381.583 264.667 381.892 263.241 384.76C263.241 384.76 252.83 411.156 249.72 411.469C246.77 411.765 245.346 407.95 241.227 397.043L241.052 396.579C241.036 396.538 241.023 396.496 241.011 396.456L240.989 396.368L240.962 396.32L240.905 396.187L240.413 394.855C239.831 393.267 238.366 390.646 237.592 389.735C236.767 388.765 238.608 388.164 239.968 388.164C242.506 388.164 245.612 388.873 250.496 387.463C256.217 385.812 258.18 384.673 260.918 382.886ZM256.49 396.447L256.353 396.536C254.9 397.43 253.295 398.118 251.541 398.597C249.443 399.171 246.399 399.242 244.429 398.812L244.1 398.735L244.222 399.038C245.333 401.808 246.321 405.011 247.182 406.64L247.483 407.195C248.023 408.165 248.497 408.869 248.88 409.293L249 409.418L249.149 409.238C249.791 408.417 252.077 405.329 253.664 402.244L253.83 401.92C254.51 400.587 255.251 399.072 256.054 397.376L256.49 396.447ZM260.775 385.936L260.534 386.073C258.275 387.331 254.539 389.419 251.328 390.345C247.485 391.455 244.226 391.851 241.545 391.496L241.381 391.471L241.475 391.737C241.731 392.453 242.817 395.846 243.201 396.368C244.757 397.805 246.664 397.942 249 397.376L249.335 397.29C257.698 395.674 260.775 385.936 260.775 385.936Z", fill: "#FFB61D" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M554.479 478.216C554.812 477.97 555.282 478.041 555.528 478.374C557.259 480.722 560.19 480.838 564.087 478.674C564.449 478.473 564.906 478.604 565.107 478.966C565.308 479.328 565.178 479.784 564.815 479.985C560.332 482.475 556.578 482.327 554.32 479.264C554.074 478.931 554.145 478.461 554.479 478.216Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M548.809 484.224C549.116 483.945 549.59 483.968 549.869 484.274C552.495 487.163 555.985 487.328 558.823 485.812C559.189 485.617 559.643 485.755 559.838 486.12C560.033 486.486 559.895 486.94 559.53 487.135C556.14 488.946 551.907 488.746 548.759 485.283C548.48 484.977 548.503 484.503 548.809 484.224Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M542.668 490.175C542.969 489.891 543.444 489.905 543.728 490.207C546.259 492.896 551.405 494.21 554.925 492.345C555.291 492.151 555.745 492.29 555.939 492.656C556.133 493.022 555.993 493.476 555.627 493.67C551.459 495.879 545.598 494.382 542.636 491.235C542.352 490.933 542.366 490.459 542.668 490.175Z", fill: "#E7EAEE" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M547.435 513.696C552.7 511.149 547.257 501.709 542.162 505.53C538.894 507.98 542.477 516.095 547.435 513.696Z", fill: "#E7EAEE" })));
};
const IconEmoji = () => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "22", height: "22", fill: "#000000", viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216ZM80,108a12,12,0,1,1,12,12A12,12,0,0,1,80,108Zm96,0a12,12,0,1,1-12-12A12,12,0,0,1,176,108Zm-1.07,48c-10.29,17.79-27.4,28-46.93,28s-36.63-10.2-46.92-28a8,8,0,1,1,13.84-8c7.47,12.91,19.21,20,33.08,20s25.61-7.1,33.07-20a8,8,0,0,1,13.86,8Z" })));
};
const IconLink = () => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "22", height: "22", fill: "#000000", viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M165.66,90.34a8,8,0,0,1,0,11.32l-64,64a8,8,0,0,1-11.32-11.32l64-64A8,8,0,0,1,165.66,90.34ZM215.6,40.4a56,56,0,0,0-79.2,0L106.34,70.45a8,8,0,0,0,11.32,11.32l30.06-30a40,40,0,0,1,56.57,56.56l-30.07,30.06a8,8,0,0,0,11.31,11.32L215.6,119.6a56,56,0,0,0,0-79.2ZM138.34,174.22l-30.06,30.06a40,40,0,1,1-56.56-56.57l30.05-30.05a8,8,0,0,0-11.32-11.32L40.4,136.4a56,56,0,0,0,79.2,79.2l30.06-30.07a8,8,0,0,0-11.32-11.31Z" })));
};
const IconFileVideo = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M213.66,82.34l-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40v72a8,8,0,0,0,16,0V40h88V88a8,8,0,0,0,8,8h48V216h-8a8,8,0,0,0,0,16h8a16,16,0,0,0,16-16V88A8,8,0,0,0,213.66,82.34ZM160,51.31,188.69,80H160ZM155.88,145a8,8,0,0,0-8.12.22l-19.95,12.46A16,16,0,0,0,112,144H48a16,16,0,0,0-16,16v48a16,16,0,0,0,16,16h64a16,16,0,0,0,15.81-13.68l19.95,12.46A8,8,0,0,0,160,216V152A8,8,0,0,0,155.88,145ZM112,208H48V160h64v48Zm32-6.43-16-10V176.43l16-10Z" })));
};
const IconFileAudio = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M99.06,128.61a8,8,0,0,0-8.72,1.73L68.69,152H48a8,8,0,0,0-8,8v40a8,8,0,0,0,8,8H68.69l21.65,21.66A8,8,0,0,0,104,224V136A8,8,0,0,0,99.06,128.61ZM88,204.69,77.66,194.34A8,8,0,0,0,72,192H56V168H72a8,8,0,0,0,5.66-2.34L88,155.31ZM152,180a40.55,40.55,0,0,1-20,34.91A8,8,0,0,1,124,201.09a24.49,24.49,0,0,0,0-42.18A8,8,0,0,1,132,145.09,40.55,40.55,0,0,1,152,180Zm61.66-97.66-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40v80a8,8,0,0,0,16,0V40h88V88a8,8,0,0,0,8,8h48V216H168a8,8,0,0,0,0,16h32a16,16,0,0,0,16-16V88A8,8,0,0,0,213.66,82.34ZM160,51.31,188.69,80H160Z" })));
};
const IconFilePdf = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M224,152a8,8,0,0,1-8,8H192v16h16a8,8,0,0,1,0,16H192v16a8,8,0,0,1-16,0V152a8,8,0,0,1,8-8h32A8,8,0,0,1,224,152ZM92,172a28,28,0,0,1-28,28H56v8a8,8,0,0,1-16,0V152a8,8,0,0,1,8-8H64A28,28,0,0,1,92,172Zm-16,0a12,12,0,0,0-12-12H56v24h8A12,12,0,0,0,76,172Zm88,8a36,36,0,0,1-36,36H112a8,8,0,0,1-8-8V152a8,8,0,0,1,8-8h16A36,36,0,0,1,164,180Zm-16,0a20,20,0,0,0-20-20h-8v40h8A20,20,0,0,0,148,180ZM40,112V40A16,16,0,0,1,56,24h96a8,8,0,0,1,5.66,2.34l56,56A8,8,0,0,1,216,88v24a8,8,0,0,1-16,0V96H152a8,8,0,0,1-8-8V40H56v72a8,8,0,0,1-16,0ZM160,80h28.69L160,51.31Z" })));
};
const IconFileZip = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M184,144H168a8,8,0,0,0-8,8v56a8,8,0,0,0,16,0v-8h8a28,28,0,0,0,0-56Zm0,40h-8V160h8a12,12,0,0,1,0,24Zm-48-32v56a8,8,0,0,1-16,0V152a8,8,0,0,1,16,0ZM96,208a8,8,0,0,1-8,8H56a8,8,0,0,1-7-12l25.16-44H56a8,8,0,0,1,0-16H88a8,8,0,0,1,7,12L69.79,200H88A8,8,0,0,1,96,208ZM213.66,82.34l-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40v72a8,8,0,0,0,16,0V40h88V88a8,8,0,0,0,8,8h48v16a8,8,0,0,0,16,0V88A8,8,0,0,0,213.66,82.34ZM160,80V51.31L188.69,80Z" })));
};
const IconFileDoc = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M52,144H36a8,8,0,0,0-8,8v56a8,8,0,0,0,8,8H52a36,36,0,0,0,0-72Zm0,56H44V160h8a20,20,0,0,1,0,40Zm169.53-4.91a8,8,0,0,1,.25,11.31A30.06,30.06,0,0,1,200,216c-17.65,0-32-16.15-32-36s14.35-36,32-36a30.06,30.06,0,0,1,21.78,9.6,8,8,0,0,1-11.56,11.06A14.24,14.24,0,0,0,200,160c-8.82,0-16,9-16,20s7.18,20,16,20a14.24,14.24,0,0,0,10.22-4.66A8,8,0,0,1,221.53,195.09ZM128,144c-17.65,0-32,16.15-32,36s14.35,36,32,36,32-16.15,32-36S145.65,144,128,144Zm0,56c-8.82,0-16-9-16-20s7.18-20,16-20,16,9,16,20S136.82,200,128,200ZM48,120a8,8,0,0,0,8-8V40h88V88a8,8,0,0,0,8,8h48v16a8,8,0,0,0,16,0V88a8,8,0,0,0-2.34-5.66l-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40v72A8,8,0,0,0,48,120ZM160,51.31,188.69,80H160Z" })));
};
const IconFile = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M213.66,82.34l-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40V216a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V88A8,8,0,0,0,213.66,82.34ZM160,51.31,188.69,80H160ZM200,216H56V40h88V88a8,8,0,0,0,8,8h48V216Z" })));
};
const IconClose = ({ width, height, color }) => {
    return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: width, height: height, fill: color, viewBox: "0 0 256 256" },
        React.createElement("path", { d: "M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z" })));
};
var ChatType;
(function (ChatType) {
    ChatType["Messaging"] = "messaging";
    ChatType["Team"] = "team";
})(ChatType || (ChatType = {}));
const ERROR_MESSAGE = "Something went wrong";

const getChannelName = (channel, userId) => {
    if (!channel)
        return "";
    const myUserId = userId;
    if (channel.data.type === "messaging") {
        const otherMember = Object.values(channel.state.members).find((member) => member.user.id !== myUserId);
        return formatString(otherMember.user.id);
    }
    return channel.data.name;
};
const capitalizeFirstLetter = (string) => {
    if (!string)
        return "";
    return string.charAt(0).toUpperCase();
};
const getColorName = (name) => {
    let firstLetter = "";
    if (name) {
        if (name.length >= 25) {
            firstLetter = name.charAt(name.length - 1).toUpperCase();
        }
        else {
            firstLetter = name.charAt(0).toUpperCase();
        }
    }
    else {
        firstLetter = "";
    }
    let color;
    switch (firstLetter) {
        case "A":
            color = "linear-gradient(#FF5733, #C70039)";
            break;
        case "B":
            color = "linear-gradient(#85C1E9, #21618C)";
            break;
        case "C":
            color = "linear-gradient(#DAF7A6, #FFC300)";
            break;
        case "D":
            color = "linear-gradient(#FFC0CB, #FF1493)";
            break;
        case "E":
            color = "linear-gradient(#8E44AD, #2980B9)";
            break;
        case "F":
            color = "linear-gradient(#F39C12, #D35400)";
            break;
        case "G":
            color = "linear-gradient(#AED6F1, #2E86C1)";
            break;
        case "H":
            color = "linear-gradient(#58D68D, #28B463)";
            break;
        case "I":
            color = "linear-gradient(#F4D03F, #F39C12)";
            break;
        case "J":
            color = "linear-gradient(#EB984E, #CB4335)";
            break;
        case "K":
            color = "linear-gradient(#A569BD, #8E44AD)";
            break;
        case "L":
            color = "linear-gradient(#F5B041, #DC7633)";
            break;
        case "M":
            color = "linear-gradient(#76D7C4, #48C9B0)";
            break;
        case "N":
            color = "linear-gradient(#85929E, #34495E)";
            break;
        case "O":
            color = "linear-gradient(#FF5733, #900C3F)";
            break;
        case "P":
            color = "linear-gradient(#5DADE2, #2E86C1)";
            break;
        case "Q":
            color = "linear-gradient(#ABEBC6, #239B56)";
            break;
        case "R":
            color = "linear-gradient(#FAD7A0, #E59866)";
            break;
        case "S":
            color = "linear-gradient(#D7DBDD, #566573)";
            break;
        case "T":
            color = "linear-gradient(#B2BABB, #626567)";
            break;
        case "U":
            color = "linear-gradient(#D2B4DE, #8E44AD)";
            break;
        case "V":
            color = "linear-gradient(#C39BD3, #7D3C98)";
            break;
        case "W":
            color = "linear-gradient(#BB8FCE, #8E44AD)";
            break;
        case "X":
            color = "linear-gradient(#F7DC6F, #F1C40F)";
            break;
        case "Y":
            color = "linear-gradient(#52BE80, #27AE60)";
            break;
        case "Z":
            color = "linear-gradient(#1ABC9C, #16A085)";
            break;
        case "0":
            color = "linear-gradient(#00FF00, #006600)";
            break;
        case "1":
            color = "linear-gradient(#FFFF00, #FFD700)";
            break;
        case "2":
            color = "linear-gradient(#FF0000, #8B0000)";
            break;
        case "3":
            color = "linear-gradient(#E6E6FA, #D8BFD8)";
            break;
        case "4":
            color = "linear-gradient(#0000FF, #00008B)";
            break;
        case "5":
            color = "linear-gradient(#800080, #4B0082)";
            break;
        case "6":
            color = "linear-gradient(#BADA55, #8CBF3F)";
            break;
        case "7":
            color = "linear-gradient(#8B4513, #A0522D)";
            break;
        case "8":
            color = "linear-gradient(#1E90FF, #4169E1)";
            break;
        case "9":
            color = "linear-gradient(#996633, #663300)";
            break;
        default:
            color = "linear-gradient(#B694F9, #6C61DF)";
    }
    return color;
};
const getFontSizeAvatar = (size) => {
    return `${size / 2}px`;
};
const formatString = (str) => {
    if (str.length <= 25) {
        return str;
    }
    const start = str.substring(0, 4);
    const end = str.substring(str.length - 6);
    return start + "..." + end;
};
const getTimeFromDate = (date) => {
    if (!date)
        return "";
    const inputDate = new Date(date);
    const hours = inputDate.getHours().toString().padStart(2, "0");
    const minutes = inputDate.getMinutes().toString().padStart(2, "0");
    return `${hours}:${minutes}`;
};
const uuidv4 = () => {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        const r = (Math.random() * 16) | 0, v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};
const getSizeInMb = (size) => {
    if (!size)
        return "0 MB";
    const sizeInMB = (size / (1024 * 1024)).toFixed(2) + " MB";
    return sizeInMB;
};
const getIconFile = (type, width, height, color) => {
    const fileType = type.split("/")[0];
    if (fileType === "audio") {
        return React.createElement(IconFileAudio, { width: width, height: height, color: color });
    }
    else {
        if (type === "application/pdf") {
            return React.createElement(IconFilePdf, { width: width, height: height, color: color });
        }
        else if (type === "application/zip") {
            return React.createElement(IconFileZip, { width: width, height: height, color: color });
        }
        else if (type === "application/msword") {
            return React.createElement(IconFileDoc, { width: width, height: height, color: color });
        }
        else {
            return React.createElement(IconFile, { width: width, height: height, color: color });
        }
    }
};

const ChannelAvatar = ({ senderId, channel, width, height }) => {
    const [memberName, setMemberName] = React.useState("");
    const [memberAvatar, setMemberAvatar] = React.useState("");
    React.useEffect(() => {
        if (channel) {
            const members = Object.values(channel.state.members);
            const otherMember = members.find((member) => member.user_id !== senderId);
            if (otherMember) {
                setMemberName(otherMember.user.id);
                setMemberAvatar(otherMember.user.img ? otherMember.user.img : "");
            }
        }
    }, [senderId, channel]);
    return (React.createElement("div", { className: "avatar", style: {
            borderRadius: "50%",
            overflow: "hidden",
            width: width,
            height: height,
        } }, memberAvatar ? (React.createElement("img", { src: memberAvatar, alt: "avatar", style: { width: "100%", height: "100%", objectFit: "cover" } })) : (React.createElement("div", { style: {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            width: "100%",
            height: "100%",
            background: getColorName(memberName),
            color: "#fff",
            fontWeight: 600,
            fontSize: getFontSizeAvatar(width),
        } }, capitalizeFirstLetter(memberName)))));
};

const ChannelList = ({ chatClient, channels, senderId, channelCurrent, setChannelCurrent, setError, }) => {
    const onSelectChannel = (channel) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const chanelId = channel.data.id;
            const channelType = channel.data.type;
            const channelSelected = chatClient.channel(channelType, chanelId);
            const response = yield channel.query({
                messages: { limit: 50 },
            });
            if (response) {
                setChannelCurrent(channelSelected);
            }
        }
        catch (err) {
            setError(err.message || ERROR_MESSAGE);
        }
    });
    return (React.createElement("div", { className: "chatbox-list" }, channels.map((channel) => {
        return (React.createElement("div", { className: "chatbox-list-col", key: channel.id },
            React.createElement("div", { className: `chatbox-item ${channel.id === (channelCurrent === null || channelCurrent === void 0 ? void 0 : channelCurrent.id) ? "active" : ""}`, onClick: () => onSelectChannel(channel) },
                React.createElement("div", { className: "chatbox-item-avatar" },
                    React.createElement(ChannelAvatar, { senderId: senderId, channel: channel, width: 30, height: 30 })),
                React.createElement("div", { className: "chatbox-item-cont" },
                    React.createElement("span", null, getChannelName(channel, senderId))))));
    })));
};

const MemberAvatar = ({ member, width, height }) => {
    const [memberName, setMemberName] = React.useState("");
    const [memberAvatar, setMemberAvatar] = React.useState("");
    React.useEffect(() => {
        if (member) {
            setMemberName(member.id);
            setMemberAvatar(member.img ? member.img : "");
        }
    }, [member]);
    return (React.createElement("div", { className: "avatar", style: {
            borderRadius: "50%",
            overflow: "hidden",
            width: width,
            height: height,
        } }, memberAvatar ? (React.createElement("img", { src: memberAvatar, alt: "avatar", style: { width: "100%", height: "100%", objectFit: "cover" } })) : (React.createElement("div", { style: {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            width: "100%",
            height: "100%",
            background: getColorName(memberName),
            color: "#fff",
            fontWeight: 600,
            fontSize: getFontSizeAvatar(width),
        } }, capitalizeFirstLetter(memberName)))));
};

const TextMsg = ({ message }) => {
    return React.createElement("div", null, message.text);
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/* eslint-disable no-undefined,no-param-reassign,no-shadow */

/**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
 *                                    the internal counter is reset)
 * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                    to `callback` when the throttled-function is executed.
 * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
 *                                    schedule `callback` to execute after `delay` ms.
 *
 * @return {Function}  A new, throttled, function.
 */
function throttle (delay, noTrailing, callback, debounceMode) {
  /*
   * After wrapper has stopped being called, this timeout ensures that
   * `callback` is executed at the proper times in `throttle` and `end`
   * debounce modes.
   */
  var timeoutID;
  var cancelled = false; // Keep track of the last time `callback` was executed.

  var lastExec = 0; // Function to clear existing timeout

  function clearExistingTimeout() {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
  } // Function to cancel next exec


  function cancel() {
    clearExistingTimeout();
    cancelled = true;
  } // `noTrailing` defaults to falsy.


  if (typeof noTrailing !== 'boolean') {
    debounceMode = callback;
    callback = noTrailing;
    noTrailing = undefined;
  }
  /*
   * The `wrapper` function encapsulates all of the throttling / debouncing
   * functionality and when executed will limit the rate at which `callback`
   * is executed.
   */


  function wrapper() {
    var self = this;
    var elapsed = Date.now() - lastExec;
    var args = arguments;

    if (cancelled) {
      return;
    } // Execute `callback` and update the `lastExec` timestamp.


    function exec() {
      lastExec = Date.now();
      callback.apply(self, args);
    }
    /*
     * If `debounceMode` is true (at begin) this is used to clear the flag
     * to allow future `callback` executions.
     */


    function clear() {
      timeoutID = undefined;
    }

    if (debounceMode && !timeoutID) {
      /*
       * Since `wrapper` is being called for the first time and
       * `debounceMode` is true (at begin), execute `callback`.
       */
      exec();
    }

    clearExistingTimeout();

    if (debounceMode === undefined && elapsed > delay) {
      /*
       * In throttle mode, if `delay` time has been exceeded, execute
       * `callback`.
       */
      exec();
    } else if (noTrailing !== true) {
      /*
       * In trailing throttle mode, since `delay` time has not been
       * exceeded, schedule `callback` to execute `delay` ms after most
       * recent execution.
       *
       * If `debounceMode` is true (at begin), schedule `clear` to execute
       * after `delay` ms.
       *
       * If `debounceMode` is false (at end), schedule `callback` to
       * execute after `delay` ms.
       */
      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
    }
  }

  wrapper.cancel = cancel; // Return the wrapper function.

  return wrapper;
}

var ThresholdUnits = {
    Pixel: 'Pixel',
    Percent: 'Percent',
};
var defaultThreshold = {
    unit: ThresholdUnits.Percent,
    value: 0.8,
};
function parseThreshold(scrollThreshold) {
    if (typeof scrollThreshold === 'number') {
        return {
            unit: ThresholdUnits.Percent,
            value: scrollThreshold * 100,
        };
    }
    if (typeof scrollThreshold === 'string') {
        if (scrollThreshold.match(/^(\d*(\.\d+)?)px$/)) {
            return {
                unit: ThresholdUnits.Pixel,
                value: parseFloat(scrollThreshold),
            };
        }
        if (scrollThreshold.match(/^(\d*(\.\d+)?)%$/)) {
            return {
                unit: ThresholdUnits.Percent,
                value: parseFloat(scrollThreshold),
            };
        }
        console.warn('scrollThreshold format is invalid. Valid formats: "120px", "50%"...');
        return defaultThreshold;
    }
    console.warn('scrollThreshold should be string or number');
    return defaultThreshold;
}

var InfiniteScroll = /** @class */ (function (_super) {
    __extends(InfiniteScroll, _super);
    function InfiniteScroll(props) {
        var _this = _super.call(this, props) || this;
        _this.lastScrollTop = 0;
        _this.actionTriggered = false;
        // variables to keep track of pull down behaviour
        _this.startY = 0;
        _this.currentY = 0;
        _this.dragging = false;
        // will be populated in componentDidMount
        // based on the height of the pull down element
        _this.maxPullDownDistance = 0;
        _this.getScrollableTarget = function () {
            if (_this.props.scrollableTarget instanceof HTMLElement)
                return _this.props.scrollableTarget;
            if (typeof _this.props.scrollableTarget === 'string') {
                return document.getElementById(_this.props.scrollableTarget);
            }
            if (_this.props.scrollableTarget === null) {
                console.warn("You are trying to pass scrollableTarget but it is null. This might\n        happen because the element may not have been added to DOM yet.\n        See https://github.com/ankeetmaini/react-infinite-scroll-component/issues/59 for more info.\n      ");
            }
            return null;
        };
        _this.onStart = function (evt) {
            if (_this.lastScrollTop)
                return;
            _this.dragging = true;
            if (evt instanceof MouseEvent) {
                _this.startY = evt.pageY;
            }
            else if (evt instanceof TouchEvent) {
                _this.startY = evt.touches[0].pageY;
            }
            _this.currentY = _this.startY;
            if (_this._infScroll) {
                _this._infScroll.style.willChange = 'transform';
                _this._infScroll.style.transition = "transform 0.2s cubic-bezier(0,0,0.31,1)";
            }
        };
        _this.onMove = function (evt) {
            if (!_this.dragging)
                return;
            if (evt instanceof MouseEvent) {
                _this.currentY = evt.pageY;
            }
            else if (evt instanceof TouchEvent) {
                _this.currentY = evt.touches[0].pageY;
            }
            // user is scrolling down to up
            if (_this.currentY < _this.startY)
                return;
            if (_this.currentY - _this.startY >=
                Number(_this.props.pullDownToRefreshThreshold)) {
                _this.setState({
                    pullToRefreshThresholdBreached: true,
                });
            }
            // so you can drag upto 1.5 times of the maxPullDownDistance
            if (_this.currentY - _this.startY > _this.maxPullDownDistance * 1.5)
                return;
            if (_this._infScroll) {
                _this._infScroll.style.overflow = 'visible';
                _this._infScroll.style.transform = "translate3d(0px, " + (_this.currentY -
                    _this.startY) + "px, 0px)";
            }
        };
        _this.onEnd = function () {
            _this.startY = 0;
            _this.currentY = 0;
            _this.dragging = false;
            if (_this.state.pullToRefreshThresholdBreached) {
                _this.props.refreshFunction && _this.props.refreshFunction();
                _this.setState({
                    pullToRefreshThresholdBreached: false,
                });
            }
            requestAnimationFrame(function () {
                // this._infScroll
                if (_this._infScroll) {
                    _this._infScroll.style.overflow = 'auto';
                    _this._infScroll.style.transform = 'none';
                    _this._infScroll.style.willChange = 'unset';
                }
            });
        };
        _this.onScrollListener = function (event) {
            if (typeof _this.props.onScroll === 'function') {
                // Execute this callback in next tick so that it does not affect the
                // functionality of the library.
                setTimeout(function () { return _this.props.onScroll && _this.props.onScroll(event); }, 0);
            }
            var target = _this.props.height || _this._scrollableNode
                ? event.target
                : document.documentElement.scrollTop
                    ? document.documentElement
                    : document.body;
            // return immediately if the action has already been triggered,
            // prevents multiple triggers.
            if (_this.actionTriggered)
                return;
            var atBottom = _this.props.inverse
                ? _this.isElementAtTop(target, _this.props.scrollThreshold)
                : _this.isElementAtBottom(target, _this.props.scrollThreshold);
            // call the `next` function in the props to trigger the next data fetch
            if (atBottom && _this.props.hasMore) {
                _this.actionTriggered = true;
                _this.setState({ showLoader: true });
                _this.props.next && _this.props.next();
            }
            _this.lastScrollTop = target.scrollTop;
        };
        _this.state = {
            showLoader: false,
            pullToRefreshThresholdBreached: false,
            prevDataLength: props.dataLength,
        };
        _this.throttledOnScrollListener = throttle(150, _this.onScrollListener).bind(_this);
        _this.onStart = _this.onStart.bind(_this);
        _this.onMove = _this.onMove.bind(_this);
        _this.onEnd = _this.onEnd.bind(_this);
        return _this;
    }
    InfiniteScroll.prototype.componentDidMount = function () {
        if (typeof this.props.dataLength === 'undefined') {
            throw new Error("mandatory prop \"dataLength\" is missing. The prop is needed" +
                " when loading more content. Check README.md for usage");
        }
        this._scrollableNode = this.getScrollableTarget();
        this.el = this.props.height
            ? this._infScroll
            : this._scrollableNode || window;
        if (this.el) {
            this.el.addEventListener('scroll', this
                .throttledOnScrollListener);
        }
        if (typeof this.props.initialScrollY === 'number' &&
            this.el &&
            this.el instanceof HTMLElement &&
            this.el.scrollHeight > this.props.initialScrollY) {
            this.el.scrollTo(0, this.props.initialScrollY);
        }
        if (this.props.pullDownToRefresh && this.el) {
            this.el.addEventListener('touchstart', this.onStart);
            this.el.addEventListener('touchmove', this.onMove);
            this.el.addEventListener('touchend', this.onEnd);
            this.el.addEventListener('mousedown', this.onStart);
            this.el.addEventListener('mousemove', this.onMove);
            this.el.addEventListener('mouseup', this.onEnd);
            // get BCR of pullDown element to position it above
            this.maxPullDownDistance =
                (this._pullDown &&
                    this._pullDown.firstChild &&
                    this._pullDown.firstChild.getBoundingClientRect()
                        .height) ||
                    0;
            this.forceUpdate();
            if (typeof this.props.refreshFunction !== 'function') {
                throw new Error("Mandatory prop \"refreshFunction\" missing.\n          Pull Down To Refresh functionality will not work\n          as expected. Check README.md for usage'");
            }
        }
    };
    InfiniteScroll.prototype.componentWillUnmount = function () {
        if (this.el) {
            this.el.removeEventListener('scroll', this
                .throttledOnScrollListener);
            if (this.props.pullDownToRefresh) {
                this.el.removeEventListener('touchstart', this.onStart);
                this.el.removeEventListener('touchmove', this.onMove);
                this.el.removeEventListener('touchend', this.onEnd);
                this.el.removeEventListener('mousedown', this.onStart);
                this.el.removeEventListener('mousemove', this.onMove);
                this.el.removeEventListener('mouseup', this.onEnd);
            }
        }
    };
    InfiniteScroll.prototype.componentDidUpdate = function (prevProps) {
        // do nothing when dataLength is unchanged
        if (this.props.dataLength === prevProps.dataLength)
            return;
        this.actionTriggered = false;
        // update state when new data was sent in
        this.setState({
            showLoader: false,
        });
    };
    InfiniteScroll.getDerivedStateFromProps = function (nextProps, prevState) {
        var dataLengthChanged = nextProps.dataLength !== prevState.prevDataLength;
        // reset when data changes
        if (dataLengthChanged) {
            return __assign(__assign({}, prevState), { prevDataLength: nextProps.dataLength });
        }
        return null;
    };
    InfiniteScroll.prototype.isElementAtTop = function (target, scrollThreshold) {
        if (scrollThreshold === void 0) { scrollThreshold = 0.8; }
        var clientHeight = target === document.body || target === document.documentElement
            ? window.screen.availHeight
            : target.clientHeight;
        var threshold = parseThreshold(scrollThreshold);
        if (threshold.unit === ThresholdUnits.Pixel) {
            return (target.scrollTop <=
                threshold.value + clientHeight - target.scrollHeight + 1);
        }
        return (target.scrollTop <=
            threshold.value / 100 + clientHeight - target.scrollHeight + 1);
    };
    InfiniteScroll.prototype.isElementAtBottom = function (target, scrollThreshold) {
        if (scrollThreshold === void 0) { scrollThreshold = 0.8; }
        var clientHeight = target === document.body || target === document.documentElement
            ? window.screen.availHeight
            : target.clientHeight;
        var threshold = parseThreshold(scrollThreshold);
        if (threshold.unit === ThresholdUnits.Pixel) {
            return (target.scrollTop + clientHeight >= target.scrollHeight - threshold.value);
        }
        return (target.scrollTop + clientHeight >=
            (threshold.value / 100) * target.scrollHeight);
    };
    InfiniteScroll.prototype.render = function () {
        var _this = this;
        var style = __assign({ height: this.props.height || 'auto', overflow: 'auto', WebkitOverflowScrolling: 'touch' }, this.props.style);
        var hasChildren = this.props.hasChildren ||
            !!(this.props.children &&
                this.props.children instanceof Array &&
                this.props.children.length);
        // because heighted infiniteScroll visualy breaks
        // on drag down as overflow becomes visible
        var outerDivStyle = this.props.pullDownToRefresh && this.props.height
            ? { overflow: 'auto' }
            : {};
        return (React.createElement("div", { style: outerDivStyle, className: "infinite-scroll-component__outerdiv" },
            React.createElement("div", { className: "infinite-scroll-component " + (this.props.className || ''), ref: function (infScroll) { return (_this._infScroll = infScroll); }, style: style },
                this.props.pullDownToRefresh && (React.createElement("div", { style: { position: 'relative' }, ref: function (pullDown) { return (_this._pullDown = pullDown); } },
                    React.createElement("div", { style: {
                            position: 'absolute',
                            left: 0,
                            right: 0,
                            top: -1 * this.maxPullDownDistance,
                        } }, this.state.pullToRefreshThresholdBreached
                        ? this.props.releaseToRefreshContent
                        : this.props.pullDownToRefreshContent))),
                this.props.children,
                !this.state.showLoader &&
                    !hasChildren &&
                    this.props.hasMore &&
                    this.props.loader,
                this.state.showLoader && this.props.hasMore && this.props.loader,
                !this.props.hasMore && this.props.endMessage)));
    };
    return InfiniteScroll;
}(React.Component));

const LoadingSpinner = ({ primaryColor }) => {
    return (React.createElement("div", { className: "chatbox-spinner" },
        React.createElement("div", { className: "lds-ring", style: { color: primaryColor } },
            React.createElement("div", null),
            React.createElement("div", null),
            React.createElement("div", null),
            React.createElement("div", null))));
};

const AttachmentMsg = ({ message, primaryColor }) => {
    const attachments = message.attachments;
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "msgAttachments" },
            attachments.map((item, index) => {
                const type = item.type;
                return (React.createElement("div", { className: "msgAttachments-item", key: index }, type === "image" ? (React.createElement("img", { src: item.image_url, alt: item.fallback, loading: "lazy", style: {
                        width: "100%",
                        height: "100%",
                        borderRadius: "12px",
                        objectFit: "cover",
                        display: "block",
                    } })) : type === "video" ? (React.createElement("video", { controls: true, src: item.asset_url, style: {
                        width: "100%",
                        height: "100%",
                        borderRadius: "12px",
                        objectFit: "cover",
                        display: "block",
                    } })) : (React.createElement("div", { className: "msgAttachments-file" },
                    React.createElement("div", { className: "msgAttachments-file-icon" }, getIconFile(item.mime_type, 30, 30, primaryColor)),
                    React.createElement("div", { className: "msgAttachments-file-data" },
                        React.createElement("p", { className: "p1" }, item.title),
                        React.createElement("p", { className: "p2", style: { fontSize: "12px", color: "#777" } }, getSizeInMb(item.file_size)))))));
            }),
            message.text && React.createElement("div", { style: { marginTop: "5px" } }, message.text))));
};

const ChatTimeline = ({ senderId, channelCurrent, primaryColor, setError, }) => {
    const chatboxRef = React.useRef(null);
    const [messages, setMessages] = React.useState([]);
    const [loadingMore, setLoadingMore] = React.useState(false);
    React.useEffect(() => {
        if (chatboxRef.current) {
            // chatboxRef.current.scrollIntoView({ behavior: "smooth" });
            chatboxRef.current.scrollTop = 0;
        }
    }, [channelCurrent]);
    React.useEffect(() => {
        if (channelCurrent) {
            const messages = channelCurrent.state.messages;
            setMessages(messages);
            channelCurrent === null || channelCurrent === void 0 ? void 0 : channelCurrent.on("message.new", (event) => {
                setMessages(channelCurrent.state.messages);
                chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;
            });
        }
    }, [channelCurrent]);
    const fetchMoreMessages = () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            setLoadingMore(true);
            const response = yield channelCurrent.query({
                messages: { limit: 50, id_lt: (_a = messages[0]) === null || _a === void 0 ? void 0 : _a.id },
            });
            if (response) {
                const allMessages = channelCurrent.state.messages;
                setMessages(allMessages);
                setLoadingMore(false);
            }
        }
        catch (err) {
            setError(err.message || ERROR_MESSAGE);
            setLoadingMore(false);
        }
    });
    return (React.createElement("div", { className: "chatbox-timeline", ref: chatboxRef, id: "scrollableDiv" },
        React.createElement(InfiniteScroll, { dataLength: messages.length, next: fetchMoreMessages, style: {
                display: "flex",
                flexDirection: "column-reverse",
                position: "relative",
            }, inverse: true, hasMore: true, loader: loadingMore && React.createElement(LoadingSpinner, { primaryColor: primaryColor }), scrollableTarget: "scrollableDiv" },
            React.createElement("div", { className: "listMessages" }, messages.map((item) => {
                const isMyMessage = item.user.id === senderId;
                const name = formatString(item.user.id);
                return (React.createElement("div", { className: `listMessages-item ${isMyMessage ? "myMessage" : "otherMessage"}`, key: item.id },
                    React.createElement("div", { className: "messageItem" },
                        React.createElement("div", { className: "messageItem-avatar" },
                            React.createElement(MemberAvatar, { member: item.user, width: 26, height: 26 })),
                        React.createElement("div", { className: "messageItem-info" },
                            React.createElement("div", { className: "messageItem-name" },
                                React.createElement("span", { className: "span1" }, name),
                                React.createElement("span", { className: "span2" }, getTimeFromDate(item.created_at))),
                            React.createElement("div", { className: "messageItem-line" }, item.attachments && item.attachments.length > 0 ? (React.createElement(AttachmentMsg, { message: item, primaryColor: primaryColor })) : (React.createElement(TextMsg, { message: item })))))));
            })))));
};

var categories = [
	{
		id: "people",
		emojis: [
			"grinning",
			"smiley",
			"smile",
			"grin",
			"laughing",
			"sweat_smile",
			"rolling_on_the_floor_laughing",
			"joy",
			"slightly_smiling_face",
			"upside_down_face",
			"melting_face",
			"wink",
			"blush",
			"innocent",
			"smiling_face_with_3_hearts",
			"heart_eyes",
			"star-struck",
			"kissing_heart",
			"kissing",
			"relaxed",
			"kissing_closed_eyes",
			"kissing_smiling_eyes",
			"smiling_face_with_tear",
			"yum",
			"stuck_out_tongue",
			"stuck_out_tongue_winking_eye",
			"zany_face",
			"stuck_out_tongue_closed_eyes",
			"money_mouth_face",
			"hugging_face",
			"face_with_hand_over_mouth",
			"face_with_open_eyes_and_hand_over_mouth",
			"face_with_peeking_eye",
			"shushing_face",
			"thinking_face",
			"saluting_face",
			"zipper_mouth_face",
			"face_with_raised_eyebrow",
			"neutral_face",
			"expressionless",
			"no_mouth",
			"dotted_line_face",
			"face_in_clouds",
			"smirk",
			"unamused",
			"face_with_rolling_eyes",
			"grimacing",
			"face_exhaling",
			"lying_face",
			"shaking_face",
			"relieved",
			"pensive",
			"sleepy",
			"drooling_face",
			"sleeping",
			"mask",
			"face_with_thermometer",
			"face_with_head_bandage",
			"nauseated_face",
			"face_vomiting",
			"sneezing_face",
			"hot_face",
			"cold_face",
			"woozy_face",
			"dizzy_face",
			"face_with_spiral_eyes",
			"exploding_head",
			"face_with_cowboy_hat",
			"partying_face",
			"disguised_face",
			"sunglasses",
			"nerd_face",
			"face_with_monocle",
			"confused",
			"face_with_diagonal_mouth",
			"worried",
			"slightly_frowning_face",
			"white_frowning_face",
			"open_mouth",
			"hushed",
			"astonished",
			"flushed",
			"pleading_face",
			"face_holding_back_tears",
			"frowning",
			"anguished",
			"fearful",
			"cold_sweat",
			"disappointed_relieved",
			"cry",
			"sob",
			"scream",
			"confounded",
			"persevere",
			"disappointed",
			"sweat",
			"weary",
			"tired_face",
			"yawning_face",
			"triumph",
			"rage",
			"angry",
			"face_with_symbols_on_mouth",
			"smiling_imp",
			"imp",
			"skull",
			"skull_and_crossbones",
			"hankey",
			"clown_face",
			"japanese_ogre",
			"japanese_goblin",
			"ghost",
			"alien",
			"space_invader",
			"wave",
			"raised_back_of_hand",
			"raised_hand_with_fingers_splayed",
			"hand",
			"spock-hand",
			"rightwards_hand",
			"leftwards_hand",
			"palm_down_hand",
			"palm_up_hand",
			"leftwards_pushing_hand",
			"rightwards_pushing_hand",
			"ok_hand",
			"pinched_fingers",
			"pinching_hand",
			"v",
			"crossed_fingers",
			"hand_with_index_finger_and_thumb_crossed",
			"i_love_you_hand_sign",
			"the_horns",
			"call_me_hand",
			"point_left",
			"point_right",
			"point_up_2",
			"middle_finger",
			"point_down",
			"point_up",
			"index_pointing_at_the_viewer",
			"+1",
			"-1",
			"fist",
			"facepunch",
			"left-facing_fist",
			"right-facing_fist",
			"clap",
			"raised_hands",
			"heart_hands",
			"open_hands",
			"palms_up_together",
			"handshake",
			"pray",
			"writing_hand",
			"nail_care",
			"selfie",
			"muscle",
			"mechanical_arm",
			"mechanical_leg",
			"leg",
			"foot",
			"ear",
			"ear_with_hearing_aid",
			"nose",
			"brain",
			"anatomical_heart",
			"lungs",
			"tooth",
			"bone",
			"eyes",
			"eye",
			"tongue",
			"lips",
			"biting_lip",
			"baby",
			"child",
			"boy",
			"girl",
			"adult",
			"person_with_blond_hair",
			"man",
			"bearded_person",
			"man_with_beard",
			"woman_with_beard",
			"red_haired_man",
			"curly_haired_man",
			"white_haired_man",
			"bald_man",
			"woman",
			"red_haired_woman",
			"red_haired_person",
			"curly_haired_woman",
			"curly_haired_person",
			"white_haired_woman",
			"white_haired_person",
			"bald_woman",
			"bald_person",
			"blond-haired-woman",
			"blond-haired-man",
			"older_adult",
			"older_man",
			"older_woman",
			"person_frowning",
			"man-frowning",
			"woman-frowning",
			"person_with_pouting_face",
			"man-pouting",
			"woman-pouting",
			"no_good",
			"man-gesturing-no",
			"woman-gesturing-no",
			"ok_woman",
			"man-gesturing-ok",
			"woman-gesturing-ok",
			"information_desk_person",
			"man-tipping-hand",
			"woman-tipping-hand",
			"raising_hand",
			"man-raising-hand",
			"woman-raising-hand",
			"deaf_person",
			"deaf_man",
			"deaf_woman",
			"bow",
			"man-bowing",
			"woman-bowing",
			"face_palm",
			"man-facepalming",
			"woman-facepalming",
			"shrug",
			"man-shrugging",
			"woman-shrugging",
			"health_worker",
			"male-doctor",
			"female-doctor",
			"student",
			"male-student",
			"female-student",
			"teacher",
			"male-teacher",
			"female-teacher",
			"judge",
			"male-judge",
			"female-judge",
			"farmer",
			"male-farmer",
			"female-farmer",
			"cook",
			"male-cook",
			"female-cook",
			"mechanic",
			"male-mechanic",
			"female-mechanic",
			"factory_worker",
			"male-factory-worker",
			"female-factory-worker",
			"office_worker",
			"male-office-worker",
			"female-office-worker",
			"scientist",
			"male-scientist",
			"female-scientist",
			"technologist",
			"male-technologist",
			"female-technologist",
			"singer",
			"male-singer",
			"female-singer",
			"artist",
			"male-artist",
			"female-artist",
			"pilot",
			"male-pilot",
			"female-pilot",
			"astronaut",
			"male-astronaut",
			"female-astronaut",
			"firefighter",
			"male-firefighter",
			"female-firefighter",
			"cop",
			"male-police-officer",
			"female-police-officer",
			"sleuth_or_spy",
			"male-detective",
			"female-detective",
			"guardsman",
			"male-guard",
			"female-guard",
			"ninja",
			"construction_worker",
			"male-construction-worker",
			"female-construction-worker",
			"person_with_crown",
			"prince",
			"princess",
			"man_with_turban",
			"man-wearing-turban",
			"woman-wearing-turban",
			"man_with_gua_pi_mao",
			"person_with_headscarf",
			"person_in_tuxedo",
			"man_in_tuxedo",
			"woman_in_tuxedo",
			"bride_with_veil",
			"man_with_veil",
			"woman_with_veil",
			"pregnant_woman",
			"pregnant_man",
			"pregnant_person",
			"breast-feeding",
			"woman_feeding_baby",
			"man_feeding_baby",
			"person_feeding_baby",
			"angel",
			"santa",
			"mrs_claus",
			"mx_claus",
			"superhero",
			"male_superhero",
			"female_superhero",
			"supervillain",
			"male_supervillain",
			"female_supervillain",
			"mage",
			"male_mage",
			"female_mage",
			"fairy",
			"male_fairy",
			"female_fairy",
			"vampire",
			"male_vampire",
			"female_vampire",
			"merperson",
			"merman",
			"mermaid",
			"elf",
			"male_elf",
			"female_elf",
			"genie",
			"male_genie",
			"female_genie",
			"zombie",
			"male_zombie",
			"female_zombie",
			"troll",
			"massage",
			"man-getting-massage",
			"woman-getting-massage",
			"haircut",
			"man-getting-haircut",
			"woman-getting-haircut",
			"walking",
			"man-walking",
			"woman-walking",
			"standing_person",
			"man_standing",
			"woman_standing",
			"kneeling_person",
			"man_kneeling",
			"woman_kneeling",
			"person_with_probing_cane",
			"man_with_probing_cane",
			"woman_with_probing_cane",
			"person_in_motorized_wheelchair",
			"man_in_motorized_wheelchair",
			"woman_in_motorized_wheelchair",
			"person_in_manual_wheelchair",
			"man_in_manual_wheelchair",
			"woman_in_manual_wheelchair",
			"runner",
			"man-running",
			"woman-running",
			"dancer",
			"man_dancing",
			"man_in_business_suit_levitating",
			"dancers",
			"men-with-bunny-ears-partying",
			"women-with-bunny-ears-partying",
			"person_in_steamy_room",
			"man_in_steamy_room",
			"woman_in_steamy_room",
			"person_climbing",
			"man_climbing",
			"woman_climbing",
			"fencer",
			"horse_racing",
			"skier",
			"snowboarder",
			"golfer",
			"man-golfing",
			"woman-golfing",
			"surfer",
			"man-surfing",
			"woman-surfing",
			"rowboat",
			"man-rowing-boat",
			"woman-rowing-boat",
			"swimmer",
			"man-swimming",
			"woman-swimming",
			"person_with_ball",
			"man-bouncing-ball",
			"woman-bouncing-ball",
			"weight_lifter",
			"man-lifting-weights",
			"woman-lifting-weights",
			"bicyclist",
			"man-biking",
			"woman-biking",
			"mountain_bicyclist",
			"man-mountain-biking",
			"woman-mountain-biking",
			"person_doing_cartwheel",
			"man-cartwheeling",
			"woman-cartwheeling",
			"wrestlers",
			"man-wrestling",
			"woman-wrestling",
			"water_polo",
			"man-playing-water-polo",
			"woman-playing-water-polo",
			"handball",
			"man-playing-handball",
			"woman-playing-handball",
			"juggling",
			"man-juggling",
			"woman-juggling",
			"person_in_lotus_position",
			"man_in_lotus_position",
			"woman_in_lotus_position",
			"bath",
			"sleeping_accommodation",
			"people_holding_hands",
			"two_women_holding_hands",
			"man_and_woman_holding_hands",
			"two_men_holding_hands",
			"couplekiss",
			"woman-kiss-man",
			"man-kiss-man",
			"woman-kiss-woman",
			"couple_with_heart",
			"woman-heart-man",
			"man-heart-man",
			"woman-heart-woman",
			"family",
			"man-woman-boy",
			"man-woman-girl",
			"man-woman-girl-boy",
			"man-woman-boy-boy",
			"man-woman-girl-girl",
			"man-man-boy",
			"man-man-girl",
			"man-man-girl-boy",
			"man-man-boy-boy",
			"man-man-girl-girl",
			"woman-woman-boy",
			"woman-woman-girl",
			"woman-woman-girl-boy",
			"woman-woman-boy-boy",
			"woman-woman-girl-girl",
			"man-boy",
			"man-boy-boy",
			"man-girl",
			"man-girl-boy",
			"man-girl-girl",
			"woman-boy",
			"woman-boy-boy",
			"woman-girl",
			"woman-girl-boy",
			"woman-girl-girl",
			"speaking_head_in_silhouette",
			"bust_in_silhouette",
			"busts_in_silhouette",
			"people_hugging",
			"footprints",
			"robot_face",
			"smiley_cat",
			"smile_cat",
			"joy_cat",
			"heart_eyes_cat",
			"smirk_cat",
			"kissing_cat",
			"scream_cat",
			"crying_cat_face",
			"pouting_cat",
			"see_no_evil",
			"hear_no_evil",
			"speak_no_evil",
			"love_letter",
			"cupid",
			"gift_heart",
			"sparkling_heart",
			"heartpulse",
			"heartbeat",
			"revolving_hearts",
			"two_hearts",
			"heart_decoration",
			"heavy_heart_exclamation_mark_ornament",
			"broken_heart",
			"heart_on_fire",
			"mending_heart",
			"heart",
			"pink_heart",
			"orange_heart",
			"yellow_heart",
			"green_heart",
			"blue_heart",
			"light_blue_heart",
			"purple_heart",
			"brown_heart",
			"black_heart",
			"grey_heart",
			"white_heart",
			"kiss",
			"100",
			"anger",
			"boom",
			"dizzy",
			"sweat_drops",
			"dash",
			"hole",
			"speech_balloon",
			"eye-in-speech-bubble",
			"left_speech_bubble",
			"right_anger_bubble",
			"thought_balloon",
			"zzz"
		]
	},
	{
		id: "nature",
		emojis: [
			"monkey_face",
			"monkey",
			"gorilla",
			"orangutan",
			"dog",
			"dog2",
			"guide_dog",
			"service_dog",
			"poodle",
			"wolf",
			"fox_face",
			"raccoon",
			"cat",
			"cat2",
			"black_cat",
			"lion_face",
			"tiger",
			"tiger2",
			"leopard",
			"horse",
			"moose",
			"donkey",
			"racehorse",
			"unicorn_face",
			"zebra_face",
			"deer",
			"bison",
			"cow",
			"ox",
			"water_buffalo",
			"cow2",
			"pig",
			"pig2",
			"boar",
			"pig_nose",
			"ram",
			"sheep",
			"goat",
			"dromedary_camel",
			"camel",
			"llama",
			"giraffe_face",
			"elephant",
			"mammoth",
			"rhinoceros",
			"hippopotamus",
			"mouse",
			"mouse2",
			"rat",
			"hamster",
			"rabbit",
			"rabbit2",
			"chipmunk",
			"beaver",
			"hedgehog",
			"bat",
			"bear",
			"polar_bear",
			"koala",
			"panda_face",
			"sloth",
			"otter",
			"skunk",
			"kangaroo",
			"badger",
			"feet",
			"turkey",
			"chicken",
			"rooster",
			"hatching_chick",
			"baby_chick",
			"hatched_chick",
			"bird",
			"penguin",
			"dove_of_peace",
			"eagle",
			"duck",
			"swan",
			"owl",
			"dodo",
			"feather",
			"flamingo",
			"peacock",
			"parrot",
			"wing",
			"black_bird",
			"goose",
			"frog",
			"crocodile",
			"turtle",
			"lizard",
			"snake",
			"dragon_face",
			"dragon",
			"sauropod",
			"t-rex",
			"whale",
			"whale2",
			"dolphin",
			"seal",
			"fish",
			"tropical_fish",
			"blowfish",
			"shark",
			"octopus",
			"shell",
			"coral",
			"jellyfish",
			"snail",
			"butterfly",
			"bug",
			"ant",
			"bee",
			"beetle",
			"ladybug",
			"cricket",
			"cockroach",
			"spider",
			"spider_web",
			"scorpion",
			"mosquito",
			"fly",
			"worm",
			"microbe",
			"bouquet",
			"cherry_blossom",
			"white_flower",
			"lotus",
			"rosette",
			"rose",
			"wilted_flower",
			"hibiscus",
			"sunflower",
			"blossom",
			"tulip",
			"hyacinth",
			"seedling",
			"potted_plant",
			"evergreen_tree",
			"deciduous_tree",
			"palm_tree",
			"cactus",
			"ear_of_rice",
			"herb",
			"shamrock",
			"four_leaf_clover",
			"maple_leaf",
			"fallen_leaf",
			"leaves",
			"empty_nest",
			"nest_with_eggs",
			"mushroom"
		]
	},
	{
		id: "foods",
		emojis: [
			"grapes",
			"melon",
			"watermelon",
			"tangerine",
			"lemon",
			"banana",
			"pineapple",
			"mango",
			"apple",
			"green_apple",
			"pear",
			"peach",
			"cherries",
			"strawberry",
			"blueberries",
			"kiwifruit",
			"tomato",
			"olive",
			"coconut",
			"avocado",
			"eggplant",
			"potato",
			"carrot",
			"corn",
			"hot_pepper",
			"bell_pepper",
			"cucumber",
			"leafy_green",
			"broccoli",
			"garlic",
			"onion",
			"peanuts",
			"beans",
			"chestnut",
			"ginger_root",
			"pea_pod",
			"bread",
			"croissant",
			"baguette_bread",
			"flatbread",
			"pretzel",
			"bagel",
			"pancakes",
			"waffle",
			"cheese_wedge",
			"meat_on_bone",
			"poultry_leg",
			"cut_of_meat",
			"bacon",
			"hamburger",
			"fries",
			"pizza",
			"hotdog",
			"sandwich",
			"taco",
			"burrito",
			"tamale",
			"stuffed_flatbread",
			"falafel",
			"egg",
			"fried_egg",
			"shallow_pan_of_food",
			"stew",
			"fondue",
			"bowl_with_spoon",
			"green_salad",
			"popcorn",
			"butter",
			"salt",
			"canned_food",
			"bento",
			"rice_cracker",
			"rice_ball",
			"rice",
			"curry",
			"ramen",
			"spaghetti",
			"sweet_potato",
			"oden",
			"sushi",
			"fried_shrimp",
			"fish_cake",
			"moon_cake",
			"dango",
			"dumpling",
			"fortune_cookie",
			"takeout_box",
			"crab",
			"lobster",
			"shrimp",
			"squid",
			"oyster",
			"icecream",
			"shaved_ice",
			"ice_cream",
			"doughnut",
			"cookie",
			"birthday",
			"cake",
			"cupcake",
			"pie",
			"chocolate_bar",
			"candy",
			"lollipop",
			"custard",
			"honey_pot",
			"baby_bottle",
			"glass_of_milk",
			"coffee",
			"teapot",
			"tea",
			"sake",
			"champagne",
			"wine_glass",
			"cocktail",
			"tropical_drink",
			"beer",
			"beers",
			"clinking_glasses",
			"tumbler_glass",
			"pouring_liquid",
			"cup_with_straw",
			"bubble_tea",
			"beverage_box",
			"mate_drink",
			"ice_cube",
			"chopsticks",
			"knife_fork_plate",
			"fork_and_knife",
			"spoon",
			"hocho",
			"jar",
			"amphora"
		]
	},
	{
		id: "activity",
		emojis: [
			"jack_o_lantern",
			"christmas_tree",
			"fireworks",
			"sparkler",
			"firecracker",
			"sparkles",
			"balloon",
			"tada",
			"confetti_ball",
			"tanabata_tree",
			"bamboo",
			"dolls",
			"flags",
			"wind_chime",
			"rice_scene",
			"red_envelope",
			"ribbon",
			"gift",
			"reminder_ribbon",
			"admission_tickets",
			"ticket",
			"medal",
			"trophy",
			"sports_medal",
			"first_place_medal",
			"second_place_medal",
			"third_place_medal",
			"soccer",
			"baseball",
			"softball",
			"basketball",
			"volleyball",
			"football",
			"rugby_football",
			"tennis",
			"flying_disc",
			"bowling",
			"cricket_bat_and_ball",
			"field_hockey_stick_and_ball",
			"ice_hockey_stick_and_puck",
			"lacrosse",
			"table_tennis_paddle_and_ball",
			"badminton_racquet_and_shuttlecock",
			"boxing_glove",
			"martial_arts_uniform",
			"goal_net",
			"golf",
			"ice_skate",
			"fishing_pole_and_fish",
			"diving_mask",
			"running_shirt_with_sash",
			"ski",
			"sled",
			"curling_stone",
			"dart",
			"yo-yo",
			"kite",
			"gun",
			"8ball",
			"crystal_ball",
			"magic_wand",
			"video_game",
			"joystick",
			"slot_machine",
			"game_die",
			"jigsaw",
			"teddy_bear",
			"pinata",
			"mirror_ball",
			"nesting_dolls",
			"spades",
			"hearts",
			"diamonds",
			"clubs",
			"chess_pawn",
			"black_joker",
			"mahjong",
			"flower_playing_cards",
			"performing_arts",
			"frame_with_picture",
			"art",
			"thread",
			"sewing_needle",
			"yarn",
			"knot"
		]
	},
	{
		id: "places",
		emojis: [
			"earth_africa",
			"earth_americas",
			"earth_asia",
			"globe_with_meridians",
			"world_map",
			"japan",
			"compass",
			"snow_capped_mountain",
			"mountain",
			"volcano",
			"mount_fuji",
			"camping",
			"beach_with_umbrella",
			"desert",
			"desert_island",
			"national_park",
			"stadium",
			"classical_building",
			"building_construction",
			"bricks",
			"rock",
			"wood",
			"hut",
			"house_buildings",
			"derelict_house_building",
			"house",
			"house_with_garden",
			"office",
			"post_office",
			"european_post_office",
			"hospital",
			"bank",
			"hotel",
			"love_hotel",
			"convenience_store",
			"school",
			"department_store",
			"factory",
			"japanese_castle",
			"european_castle",
			"wedding",
			"tokyo_tower",
			"statue_of_liberty",
			"church",
			"mosque",
			"hindu_temple",
			"synagogue",
			"shinto_shrine",
			"kaaba",
			"fountain",
			"tent",
			"foggy",
			"night_with_stars",
			"cityscape",
			"sunrise_over_mountains",
			"sunrise",
			"city_sunset",
			"city_sunrise",
			"bridge_at_night",
			"hotsprings",
			"carousel_horse",
			"playground_slide",
			"ferris_wheel",
			"roller_coaster",
			"barber",
			"circus_tent",
			"steam_locomotive",
			"railway_car",
			"bullettrain_side",
			"bullettrain_front",
			"train2",
			"metro",
			"light_rail",
			"station",
			"tram",
			"monorail",
			"mountain_railway",
			"train",
			"bus",
			"oncoming_bus",
			"trolleybus",
			"minibus",
			"ambulance",
			"fire_engine",
			"police_car",
			"oncoming_police_car",
			"taxi",
			"oncoming_taxi",
			"car",
			"oncoming_automobile",
			"blue_car",
			"pickup_truck",
			"truck",
			"articulated_lorry",
			"tractor",
			"racing_car",
			"racing_motorcycle",
			"motor_scooter",
			"manual_wheelchair",
			"motorized_wheelchair",
			"auto_rickshaw",
			"bike",
			"scooter",
			"skateboard",
			"roller_skate",
			"busstop",
			"motorway",
			"railway_track",
			"oil_drum",
			"fuelpump",
			"wheel",
			"rotating_light",
			"traffic_light",
			"vertical_traffic_light",
			"octagonal_sign",
			"construction",
			"anchor",
			"ring_buoy",
			"boat",
			"canoe",
			"speedboat",
			"passenger_ship",
			"ferry",
			"motor_boat",
			"ship",
			"airplane",
			"small_airplane",
			"airplane_departure",
			"airplane_arriving",
			"parachute",
			"seat",
			"helicopter",
			"suspension_railway",
			"mountain_cableway",
			"aerial_tramway",
			"satellite",
			"rocket",
			"flying_saucer",
			"bellhop_bell",
			"luggage",
			"hourglass",
			"hourglass_flowing_sand",
			"watch",
			"alarm_clock",
			"stopwatch",
			"timer_clock",
			"mantelpiece_clock",
			"clock12",
			"clock1230",
			"clock1",
			"clock130",
			"clock2",
			"clock230",
			"clock3",
			"clock330",
			"clock4",
			"clock430",
			"clock5",
			"clock530",
			"clock6",
			"clock630",
			"clock7",
			"clock730",
			"clock8",
			"clock830",
			"clock9",
			"clock930",
			"clock10",
			"clock1030",
			"clock11",
			"clock1130",
			"new_moon",
			"waxing_crescent_moon",
			"first_quarter_moon",
			"moon",
			"full_moon",
			"waning_gibbous_moon",
			"last_quarter_moon",
			"waning_crescent_moon",
			"crescent_moon",
			"new_moon_with_face",
			"first_quarter_moon_with_face",
			"last_quarter_moon_with_face",
			"thermometer",
			"sunny",
			"full_moon_with_face",
			"sun_with_face",
			"ringed_planet",
			"star",
			"star2",
			"stars",
			"milky_way",
			"cloud",
			"partly_sunny",
			"thunder_cloud_and_rain",
			"mostly_sunny",
			"barely_sunny",
			"partly_sunny_rain",
			"rain_cloud",
			"snow_cloud",
			"lightning",
			"tornado",
			"fog",
			"wind_blowing_face",
			"cyclone",
			"rainbow",
			"closed_umbrella",
			"umbrella",
			"umbrella_with_rain_drops",
			"umbrella_on_ground",
			"zap",
			"snowflake",
			"snowman",
			"snowman_without_snow",
			"comet",
			"fire",
			"droplet",
			"ocean"
		]
	},
	{
		id: "objects",
		emojis: [
			"eyeglasses",
			"dark_sunglasses",
			"goggles",
			"lab_coat",
			"safety_vest",
			"necktie",
			"shirt",
			"jeans",
			"scarf",
			"gloves",
			"coat",
			"socks",
			"dress",
			"kimono",
			"sari",
			"one-piece_swimsuit",
			"briefs",
			"shorts",
			"bikini",
			"womans_clothes",
			"folding_hand_fan",
			"purse",
			"handbag",
			"pouch",
			"shopping_bags",
			"school_satchel",
			"thong_sandal",
			"mans_shoe",
			"athletic_shoe",
			"hiking_boot",
			"womans_flat_shoe",
			"high_heel",
			"sandal",
			"ballet_shoes",
			"boot",
			"hair_pick",
			"crown",
			"womans_hat",
			"tophat",
			"mortar_board",
			"billed_cap",
			"military_helmet",
			"helmet_with_white_cross",
			"prayer_beads",
			"lipstick",
			"ring",
			"gem",
			"mute",
			"speaker",
			"sound",
			"loud_sound",
			"loudspeaker",
			"mega",
			"postal_horn",
			"bell",
			"no_bell",
			"musical_score",
			"musical_note",
			"notes",
			"studio_microphone",
			"level_slider",
			"control_knobs",
			"microphone",
			"headphones",
			"radio",
			"saxophone",
			"accordion",
			"guitar",
			"musical_keyboard",
			"trumpet",
			"violin",
			"banjo",
			"drum_with_drumsticks",
			"long_drum",
			"maracas",
			"flute",
			"iphone",
			"calling",
			"phone",
			"telephone_receiver",
			"pager",
			"fax",
			"battery",
			"low_battery",
			"electric_plug",
			"computer",
			"desktop_computer",
			"printer",
			"keyboard",
			"three_button_mouse",
			"trackball",
			"minidisc",
			"floppy_disk",
			"cd",
			"dvd",
			"abacus",
			"movie_camera",
			"film_frames",
			"film_projector",
			"clapper",
			"tv",
			"camera",
			"camera_with_flash",
			"video_camera",
			"vhs",
			"mag",
			"mag_right",
			"candle",
			"bulb",
			"flashlight",
			"izakaya_lantern",
			"diya_lamp",
			"notebook_with_decorative_cover",
			"closed_book",
			"book",
			"green_book",
			"blue_book",
			"orange_book",
			"books",
			"notebook",
			"ledger",
			"page_with_curl",
			"scroll",
			"page_facing_up",
			"newspaper",
			"rolled_up_newspaper",
			"bookmark_tabs",
			"bookmark",
			"label",
			"moneybag",
			"coin",
			"yen",
			"dollar",
			"euro",
			"pound",
			"money_with_wings",
			"credit_card",
			"receipt",
			"chart",
			"email",
			"e-mail",
			"incoming_envelope",
			"envelope_with_arrow",
			"outbox_tray",
			"inbox_tray",
			"package",
			"mailbox",
			"mailbox_closed",
			"mailbox_with_mail",
			"mailbox_with_no_mail",
			"postbox",
			"ballot_box_with_ballot",
			"pencil2",
			"black_nib",
			"lower_left_fountain_pen",
			"lower_left_ballpoint_pen",
			"lower_left_paintbrush",
			"lower_left_crayon",
			"memo",
			"briefcase",
			"file_folder",
			"open_file_folder",
			"card_index_dividers",
			"date",
			"calendar",
			"spiral_note_pad",
			"spiral_calendar_pad",
			"card_index",
			"chart_with_upwards_trend",
			"chart_with_downwards_trend",
			"bar_chart",
			"clipboard",
			"pushpin",
			"round_pushpin",
			"paperclip",
			"linked_paperclips",
			"straight_ruler",
			"triangular_ruler",
			"scissors",
			"card_file_box",
			"file_cabinet",
			"wastebasket",
			"lock",
			"unlock",
			"lock_with_ink_pen",
			"closed_lock_with_key",
			"key",
			"old_key",
			"hammer",
			"axe",
			"pick",
			"hammer_and_pick",
			"hammer_and_wrench",
			"dagger_knife",
			"crossed_swords",
			"bomb",
			"boomerang",
			"bow_and_arrow",
			"shield",
			"carpentry_saw",
			"wrench",
			"screwdriver",
			"nut_and_bolt",
			"gear",
			"compression",
			"scales",
			"probing_cane",
			"link",
			"chains",
			"hook",
			"toolbox",
			"magnet",
			"ladder",
			"alembic",
			"test_tube",
			"petri_dish",
			"dna",
			"microscope",
			"telescope",
			"satellite_antenna",
			"syringe",
			"drop_of_blood",
			"pill",
			"adhesive_bandage",
			"crutch",
			"stethoscope",
			"x-ray",
			"door",
			"elevator",
			"mirror",
			"window",
			"bed",
			"couch_and_lamp",
			"chair",
			"toilet",
			"plunger",
			"shower",
			"bathtub",
			"mouse_trap",
			"razor",
			"lotion_bottle",
			"safety_pin",
			"broom",
			"basket",
			"roll_of_paper",
			"bucket",
			"soap",
			"bubbles",
			"toothbrush",
			"sponge",
			"fire_extinguisher",
			"shopping_trolley",
			"smoking",
			"coffin",
			"headstone",
			"funeral_urn",
			"nazar_amulet",
			"hamsa",
			"moyai",
			"placard",
			"identification_card"
		]
	},
	{
		id: "symbols",
		emojis: [
			"atm",
			"put_litter_in_its_place",
			"potable_water",
			"wheelchair",
			"mens",
			"womens",
			"restroom",
			"baby_symbol",
			"wc",
			"passport_control",
			"customs",
			"baggage_claim",
			"left_luggage",
			"warning",
			"children_crossing",
			"no_entry",
			"no_entry_sign",
			"no_bicycles",
			"no_smoking",
			"do_not_litter",
			"non-potable_water",
			"no_pedestrians",
			"no_mobile_phones",
			"underage",
			"radioactive_sign",
			"biohazard_sign",
			"arrow_up",
			"arrow_upper_right",
			"arrow_right",
			"arrow_lower_right",
			"arrow_down",
			"arrow_lower_left",
			"arrow_left",
			"arrow_upper_left",
			"arrow_up_down",
			"left_right_arrow",
			"leftwards_arrow_with_hook",
			"arrow_right_hook",
			"arrow_heading_up",
			"arrow_heading_down",
			"arrows_clockwise",
			"arrows_counterclockwise",
			"back",
			"end",
			"on",
			"soon",
			"top",
			"place_of_worship",
			"atom_symbol",
			"om_symbol",
			"star_of_david",
			"wheel_of_dharma",
			"yin_yang",
			"latin_cross",
			"orthodox_cross",
			"star_and_crescent",
			"peace_symbol",
			"menorah_with_nine_branches",
			"six_pointed_star",
			"khanda",
			"aries",
			"taurus",
			"gemini",
			"cancer",
			"leo",
			"virgo",
			"libra",
			"scorpius",
			"sagittarius",
			"capricorn",
			"aquarius",
			"pisces",
			"ophiuchus",
			"twisted_rightwards_arrows",
			"repeat",
			"repeat_one",
			"arrow_forward",
			"fast_forward",
			"black_right_pointing_double_triangle_with_vertical_bar",
			"black_right_pointing_triangle_with_double_vertical_bar",
			"arrow_backward",
			"rewind",
			"black_left_pointing_double_triangle_with_vertical_bar",
			"arrow_up_small",
			"arrow_double_up",
			"arrow_down_small",
			"arrow_double_down",
			"double_vertical_bar",
			"black_square_for_stop",
			"black_circle_for_record",
			"eject",
			"cinema",
			"low_brightness",
			"high_brightness",
			"signal_strength",
			"wireless",
			"vibration_mode",
			"mobile_phone_off",
			"female_sign",
			"male_sign",
			"transgender_symbol",
			"heavy_multiplication_x",
			"heavy_plus_sign",
			"heavy_minus_sign",
			"heavy_division_sign",
			"heavy_equals_sign",
			"infinity",
			"bangbang",
			"interrobang",
			"question",
			"grey_question",
			"grey_exclamation",
			"exclamation",
			"wavy_dash",
			"currency_exchange",
			"heavy_dollar_sign",
			"medical_symbol",
			"recycle",
			"fleur_de_lis",
			"trident",
			"name_badge",
			"beginner",
			"o",
			"white_check_mark",
			"ballot_box_with_check",
			"heavy_check_mark",
			"x",
			"negative_squared_cross_mark",
			"curly_loop",
			"loop",
			"part_alternation_mark",
			"eight_spoked_asterisk",
			"eight_pointed_black_star",
			"sparkle",
			"copyright",
			"registered",
			"tm",
			"hash",
			"keycap_star",
			"zero",
			"one",
			"two",
			"three",
			"four",
			"five",
			"six",
			"seven",
			"eight",
			"nine",
			"keycap_ten",
			"capital_abcd",
			"abcd",
			"1234",
			"symbols",
			"abc",
			"a",
			"ab",
			"b",
			"cl",
			"cool",
			"free",
			"information_source",
			"id",
			"m",
			"new",
			"ng",
			"o2",
			"ok",
			"parking",
			"sos",
			"up",
			"vs",
			"koko",
			"sa",
			"u6708",
			"u6709",
			"u6307",
			"ideograph_advantage",
			"u5272",
			"u7121",
			"u7981",
			"accept",
			"u7533",
			"u5408",
			"u7a7a",
			"congratulations",
			"secret",
			"u55b6",
			"u6e80",
			"red_circle",
			"large_orange_circle",
			"large_yellow_circle",
			"large_green_circle",
			"large_blue_circle",
			"large_purple_circle",
			"large_brown_circle",
			"black_circle",
			"white_circle",
			"large_red_square",
			"large_orange_square",
			"large_yellow_square",
			"large_green_square",
			"large_blue_square",
			"large_purple_square",
			"large_brown_square",
			"black_large_square",
			"white_large_square",
			"black_medium_square",
			"white_medium_square",
			"black_medium_small_square",
			"white_medium_small_square",
			"black_small_square",
			"white_small_square",
			"large_orange_diamond",
			"large_blue_diamond",
			"small_orange_diamond",
			"small_blue_diamond",
			"small_red_triangle",
			"small_red_triangle_down",
			"diamond_shape_with_a_dot_inside",
			"radio_button",
			"white_square_button",
			"black_square_button"
		]
	},
	{
		id: "flags",
		emojis: [
			"checkered_flag",
			"cn",
			"crossed_flags",
			"de",
			"es",
			"flag-ac",
			"flag-ad",
			"flag-ae",
			"flag-af",
			"flag-ag",
			"flag-ai",
			"flag-al",
			"flag-am",
			"flag-ao",
			"flag-aq",
			"flag-ar",
			"flag-as",
			"flag-at",
			"flag-au",
			"flag-aw",
			"flag-ax",
			"flag-az",
			"flag-ba",
			"flag-bb",
			"flag-bd",
			"flag-be",
			"flag-bf",
			"flag-bg",
			"flag-bh",
			"flag-bi",
			"flag-bj",
			"flag-bl",
			"flag-bm",
			"flag-bn",
			"flag-bo",
			"flag-bq",
			"flag-br",
			"flag-bs",
			"flag-bt",
			"flag-bv",
			"flag-bw",
			"flag-by",
			"flag-bz",
			"flag-ca",
			"flag-cc",
			"flag-cd",
			"flag-cf",
			"flag-cg",
			"flag-ch",
			"flag-ci",
			"flag-ck",
			"flag-cl",
			"flag-cm",
			"flag-co",
			"flag-cp",
			"flag-cr",
			"flag-cu",
			"flag-cv",
			"flag-cw",
			"flag-cx",
			"flag-cy",
			"flag-cz",
			"flag-dg",
			"flag-dj",
			"flag-dk",
			"flag-dm",
			"flag-do",
			"flag-dz",
			"flag-ea",
			"flag-ec",
			"flag-ee",
			"flag-eg",
			"flag-eh",
			"flag-england",
			"flag-er",
			"flag-et",
			"flag-eu",
			"flag-fi",
			"flag-fj",
			"flag-fk",
			"flag-fm",
			"flag-fo",
			"flag-ga",
			"flag-gd",
			"flag-ge",
			"flag-gf",
			"flag-gg",
			"flag-gh",
			"flag-gi",
			"flag-gl",
			"flag-gm",
			"flag-gn",
			"flag-gp",
			"flag-gq",
			"flag-gr",
			"flag-gs",
			"flag-gt",
			"flag-gu",
			"flag-gw",
			"flag-gy",
			"flag-hk",
			"flag-hm",
			"flag-hn",
			"flag-hr",
			"flag-ht",
			"flag-hu",
			"flag-ic",
			"flag-id",
			"flag-ie",
			"flag-il",
			"flag-im",
			"flag-in",
			"flag-io",
			"flag-iq",
			"flag-ir",
			"flag-is",
			"flag-je",
			"flag-jm",
			"flag-jo",
			"flag-ke",
			"flag-kg",
			"flag-kh",
			"flag-ki",
			"flag-km",
			"flag-kn",
			"flag-kp",
			"flag-kw",
			"flag-ky",
			"flag-kz",
			"flag-la",
			"flag-lb",
			"flag-lc",
			"flag-li",
			"flag-lk",
			"flag-lr",
			"flag-ls",
			"flag-lt",
			"flag-lu",
			"flag-lv",
			"flag-ly",
			"flag-ma",
			"flag-mc",
			"flag-md",
			"flag-me",
			"flag-mf",
			"flag-mg",
			"flag-mh",
			"flag-mk",
			"flag-ml",
			"flag-mm",
			"flag-mn",
			"flag-mo",
			"flag-mp",
			"flag-mq",
			"flag-mr",
			"flag-ms",
			"flag-mt",
			"flag-mu",
			"flag-mv",
			"flag-mw",
			"flag-mx",
			"flag-my",
			"flag-mz",
			"flag-na",
			"flag-nc",
			"flag-ne",
			"flag-nf",
			"flag-ng",
			"flag-ni",
			"flag-nl",
			"flag-no",
			"flag-np",
			"flag-nr",
			"flag-nu",
			"flag-nz",
			"flag-om",
			"flag-pa",
			"flag-pe",
			"flag-pf",
			"flag-pg",
			"flag-ph",
			"flag-pk",
			"flag-pl",
			"flag-pm",
			"flag-pn",
			"flag-pr",
			"flag-ps",
			"flag-pt",
			"flag-pw",
			"flag-py",
			"flag-qa",
			"flag-re",
			"flag-ro",
			"flag-rs",
			"flag-rw",
			"flag-sa",
			"flag-sb",
			"flag-sc",
			"flag-scotland",
			"flag-sd",
			"flag-se",
			"flag-sg",
			"flag-sh",
			"flag-si",
			"flag-sj",
			"flag-sk",
			"flag-sl",
			"flag-sm",
			"flag-sn",
			"flag-so",
			"flag-sr",
			"flag-ss",
			"flag-st",
			"flag-sv",
			"flag-sx",
			"flag-sy",
			"flag-sz",
			"flag-ta",
			"flag-tc",
			"flag-td",
			"flag-tf",
			"flag-tg",
			"flag-th",
			"flag-tj",
			"flag-tk",
			"flag-tl",
			"flag-tm",
			"flag-tn",
			"flag-to",
			"flag-tr",
			"flag-tt",
			"flag-tv",
			"flag-tw",
			"flag-tz",
			"flag-ua",
			"flag-ug",
			"flag-um",
			"flag-un",
			"flag-uy",
			"flag-uz",
			"flag-va",
			"flag-vc",
			"flag-ve",
			"flag-vg",
			"flag-vi",
			"flag-vn",
			"flag-vu",
			"flag-wales",
			"flag-wf",
			"flag-ws",
			"flag-xk",
			"flag-ye",
			"flag-yt",
			"flag-za",
			"flag-zm",
			"flag-zw",
			"fr",
			"gb",
			"it",
			"jp",
			"kr",
			"pirate_flag",
			"rainbow-flag",
			"ru",
			"transgender_flag",
			"triangular_flag_on_post",
			"us",
			"waving_black_flag",
			"waving_white_flag"
		]
	}
];
var emojis = {
	"100": {
		id: "100",
		name: "Hundred Points",
		keywords: [
			"100",
			"score",
			"perfect",
			"numbers",
			"century",
			"exam",
			"quiz",
			"test",
			"pass"
		],
		skins: [
			{
				unified: "1f4af",
				native: "💯"
			}
		],
		version: 1
	},
	"1234": {
		id: "1234",
		name: "Input Numbers",
		keywords: [
			"1234",
			"blue",
			"square",
			"1",
			"2",
			"3",
			"4"
		],
		skins: [
			{
				unified: "1f522",
				native: "🔢"
			}
		],
		version: 1
	},
	grinning: {
		id: "grinning",
		name: "Grinning Face",
		emoticons: [
			":D"
		],
		keywords: [
			"smile",
			"happy",
			"joy",
			":D",
			"grin"
		],
		skins: [
			{
				unified: "1f600",
				native: "😀"
			}
		],
		version: 1
	},
	smiley: {
		id: "smiley",
		name: "Grinning Face with Big Eyes",
		emoticons: [
			":)",
			"=)",
			"=-)"
		],
		keywords: [
			"smiley",
			"happy",
			"joy",
			"haha",
			":D",
			":)",
			"smile",
			"funny"
		],
		skins: [
			{
				unified: "1f603",
				native: "😃"
			}
		],
		version: 1
	},
	smile: {
		id: "smile",
		name: "Grinning Face with Smiling Eyes",
		emoticons: [
			":)",
			"C:",
			"c:",
			":D",
			":-D"
		],
		keywords: [
			"smile",
			"happy",
			"joy",
			"funny",
			"haha",
			"laugh",
			"like",
			":D",
			":)"
		],
		skins: [
			{
				unified: "1f604",
				native: "😄"
			}
		],
		version: 1
	},
	grin: {
		id: "grin",
		name: "Beaming Face with Smiling Eyes",
		keywords: [
			"grin",
			"happy",
			"smile",
			"joy",
			"kawaii"
		],
		skins: [
			{
				unified: "1f601",
				native: "😁"
			}
		],
		version: 1
	},
	laughing: {
		id: "laughing",
		name: "Grinning Squinting Face",
		emoticons: [
			":>",
			":->"
		],
		keywords: [
			"laughing",
			"satisfied",
			"happy",
			"joy",
			"lol",
			"haha",
			"glad",
			"XD",
			"laugh"
		],
		skins: [
			{
				unified: "1f606",
				native: "😆"
			}
		],
		version: 1
	},
	sweat_smile: {
		id: "sweat_smile",
		name: "Grinning Face with Sweat",
		keywords: [
			"smile",
			"hot",
			"happy",
			"laugh",
			"relief"
		],
		skins: [
			{
				unified: "1f605",
				native: "😅"
			}
		],
		version: 1
	},
	rolling_on_the_floor_laughing: {
		id: "rolling_on_the_floor_laughing",
		name: "Rolling on the Floor Laughing",
		keywords: [
			"face",
			"lol",
			"haha",
			"rofl"
		],
		skins: [
			{
				unified: "1f923",
				native: "🤣"
			}
		],
		version: 3
	},
	joy: {
		id: "joy",
		name: "Face with Tears of Joy",
		keywords: [
			"cry",
			"weep",
			"happy",
			"happytears",
			"haha"
		],
		skins: [
			{
				unified: "1f602",
				native: "😂"
			}
		],
		version: 1
	},
	slightly_smiling_face: {
		id: "slightly_smiling_face",
		name: "Slightly Smiling Face",
		emoticons: [
			":)",
			"(:",
			":-)"
		],
		keywords: [
			"smile"
		],
		skins: [
			{
				unified: "1f642",
				native: "🙂"
			}
		],
		version: 1
	},
	upside_down_face: {
		id: "upside_down_face",
		name: "Upside-Down Face",
		keywords: [
			"upside",
			"down",
			"flipped",
			"silly",
			"smile"
		],
		skins: [
			{
				unified: "1f643",
				native: "🙃"
			}
		],
		version: 1
	},
	melting_face: {
		id: "melting_face",
		name: "Melting Face",
		keywords: [
			"hot",
			"heat"
		],
		skins: [
			{
				unified: "1fae0",
				native: "🫠"
			}
		],
		version: 14
	},
	wink: {
		id: "wink",
		name: "Winking Face",
		emoticons: [
			";)",
			";-)"
		],
		keywords: [
			"wink",
			"happy",
			"mischievous",
			"secret",
			";)",
			"smile",
			"eye"
		],
		skins: [
			{
				unified: "1f609",
				native: "😉"
			}
		],
		version: 1
	},
	blush: {
		id: "blush",
		name: "Smiling Face with Smiling Eyes",
		emoticons: [
			":)"
		],
		keywords: [
			"blush",
			"smile",
			"happy",
			"flushed",
			"crush",
			"embarrassed",
			"shy",
			"joy"
		],
		skins: [
			{
				unified: "1f60a",
				native: "😊"
			}
		],
		version: 1
	},
	innocent: {
		id: "innocent",
		name: "Smiling Face with Halo",
		keywords: [
			"innocent",
			"angel",
			"heaven"
		],
		skins: [
			{
				unified: "1f607",
				native: "😇"
			}
		],
		version: 1
	},
	smiling_face_with_3_hearts: {
		id: "smiling_face_with_3_hearts",
		name: "Smiling Face with Hearts",
		keywords: [
			"3",
			"love",
			"like",
			"affection",
			"valentines",
			"infatuation",
			"crush",
			"adore"
		],
		skins: [
			{
				unified: "1f970",
				native: "🥰"
			}
		],
		version: 11
	},
	heart_eyes: {
		id: "heart_eyes",
		name: "Smiling Face with Heart-Eyes",
		keywords: [
			"heart",
			"eyes",
			"love",
			"like",
			"affection",
			"valentines",
			"infatuation",
			"crush"
		],
		skins: [
			{
				unified: "1f60d",
				native: "😍"
			}
		],
		version: 1
	},
	"star-struck": {
		id: "star-struck",
		name: "Star-Struck",
		keywords: [
			"star",
			"struck",
			"grinning",
			"face",
			"with",
			"eyes",
			"smile",
			"starry"
		],
		skins: [
			{
				unified: "1f929",
				native: "🤩"
			}
		],
		version: 5
	},
	kissing_heart: {
		id: "kissing_heart",
		name: "Face Blowing a Kiss",
		emoticons: [
			":*",
			":-*"
		],
		keywords: [
			"kissing",
			"heart",
			"love",
			"like",
			"affection",
			"valentines",
			"infatuation"
		],
		skins: [
			{
				unified: "1f618",
				native: "😘"
			}
		],
		version: 1
	},
	kissing: {
		id: "kissing",
		name: "Kissing Face",
		keywords: [
			"love",
			"like",
			"3",
			"valentines",
			"infatuation",
			"kiss"
		],
		skins: [
			{
				unified: "1f617",
				native: "😗"
			}
		],
		version: 1
	},
	relaxed: {
		id: "relaxed",
		name: "Smiling Face",
		keywords: [
			"relaxed",
			"blush",
			"massage",
			"happiness"
		],
		skins: [
			{
				unified: "263a-fe0f",
				native: "☺️"
			}
		],
		version: 1
	},
	kissing_closed_eyes: {
		id: "kissing_closed_eyes",
		name: "Kissing Face with Closed Eyes",
		keywords: [
			"love",
			"like",
			"affection",
			"valentines",
			"infatuation",
			"kiss"
		],
		skins: [
			{
				unified: "1f61a",
				native: "😚"
			}
		],
		version: 1
	},
	kissing_smiling_eyes: {
		id: "kissing_smiling_eyes",
		name: "Kissing Face with Smiling Eyes",
		keywords: [
			"affection",
			"valentines",
			"infatuation",
			"kiss"
		],
		skins: [
			{
				unified: "1f619",
				native: "😙"
			}
		],
		version: 1
	},
	smiling_face_with_tear: {
		id: "smiling_face_with_tear",
		name: "Smiling Face with Tear",
		keywords: [
			"sad",
			"cry",
			"pretend"
		],
		skins: [
			{
				unified: "1f972",
				native: "🥲"
			}
		],
		version: 13
	},
	yum: {
		id: "yum",
		name: "Face Savoring Food",
		keywords: [
			"yum",
			"happy",
			"joy",
			"tongue",
			"smile",
			"silly",
			"yummy",
			"nom",
			"delicious",
			"savouring"
		],
		skins: [
			{
				unified: "1f60b",
				native: "😋"
			}
		],
		version: 1
	},
	stuck_out_tongue: {
		id: "stuck_out_tongue",
		name: "Face with Tongue",
		emoticons: [
			":p",
			":-p",
			":P",
			":-P",
			":b",
			":-b"
		],
		keywords: [
			"stuck",
			"out",
			"prank",
			"childish",
			"playful",
			"mischievous",
			"smile"
		],
		skins: [
			{
				unified: "1f61b",
				native: "😛"
			}
		],
		version: 1
	},
	stuck_out_tongue_winking_eye: {
		id: "stuck_out_tongue_winking_eye",
		name: "Winking Face with Tongue",
		emoticons: [
			";p",
			";-p",
			";b",
			";-b",
			";P",
			";-P"
		],
		keywords: [
			"stuck",
			"out",
			"eye",
			"prank",
			"childish",
			"playful",
			"mischievous",
			"smile",
			"wink"
		],
		skins: [
			{
				unified: "1f61c",
				native: "😜"
			}
		],
		version: 1
	},
	zany_face: {
		id: "zany_face",
		name: "Zany Face",
		keywords: [
			"grinning",
			"with",
			"one",
			"large",
			"and",
			"small",
			"eye",
			"goofy",
			"crazy"
		],
		skins: [
			{
				unified: "1f92a",
				native: "🤪"
			}
		],
		version: 5
	},
	stuck_out_tongue_closed_eyes: {
		id: "stuck_out_tongue_closed_eyes",
		name: "Squinting Face with Tongue",
		keywords: [
			"stuck",
			"out",
			"closed",
			"eyes",
			"prank",
			"playful",
			"mischievous",
			"smile"
		],
		skins: [
			{
				unified: "1f61d",
				native: "😝"
			}
		],
		version: 1
	},
	money_mouth_face: {
		id: "money_mouth_face",
		name: "Money-Mouth Face",
		keywords: [
			"money",
			"mouth",
			"rich",
			"dollar"
		],
		skins: [
			{
				unified: "1f911",
				native: "🤑"
			}
		],
		version: 1
	},
	hugging_face: {
		id: "hugging_face",
		name: "Hugging Face",
		keywords: [
			"smile",
			"hug"
		],
		skins: [
			{
				unified: "1f917",
				native: "🤗"
			}
		],
		version: 1
	},
	face_with_hand_over_mouth: {
		id: "face_with_hand_over_mouth",
		name: "Face with Hand over Mouth",
		keywords: [
			"smiling",
			"eyes",
			"and",
			"covering",
			"whoops",
			"shock",
			"surprise"
		],
		skins: [
			{
				unified: "1f92d",
				native: "🤭"
			}
		],
		version: 5
	},
	face_with_open_eyes_and_hand_over_mouth: {
		id: "face_with_open_eyes_and_hand_over_mouth",
		name: "Face with Open Eyes and Hand over Mouth",
		keywords: [
			"silence",
			"secret",
			"shock",
			"surprise"
		],
		skins: [
			{
				unified: "1fae2",
				native: "🫢"
			}
		],
		version: 14
	},
	face_with_peeking_eye: {
		id: "face_with_peeking_eye",
		name: "Face with Peeking Eye",
		keywords: [
			"scared",
			"frightening",
			"embarrassing",
			"shy"
		],
		skins: [
			{
				unified: "1fae3",
				native: "🫣"
			}
		],
		version: 14
	},
	shushing_face: {
		id: "shushing_face",
		name: "Shushing Face",
		keywords: [
			"with",
			"finger",
			"covering",
			"closed",
			"lips",
			"quiet",
			"shhh"
		],
		skins: [
			{
				unified: "1f92b",
				native: "🤫"
			}
		],
		version: 5
	},
	thinking_face: {
		id: "thinking_face",
		name: "Thinking Face",
		keywords: [
			"hmmm",
			"think",
			"consider"
		],
		skins: [
			{
				unified: "1f914",
				native: "🤔"
			}
		],
		version: 1
	},
	saluting_face: {
		id: "saluting_face",
		name: "Saluting Face",
		keywords: [
			"respect",
			"salute"
		],
		skins: [
			{
				unified: "1fae1",
				native: "🫡"
			}
		],
		version: 14
	},
	zipper_mouth_face: {
		id: "zipper_mouth_face",
		name: "Zipper-Mouth Face",
		keywords: [
			"zipper",
			"mouth",
			"sealed",
			"secret"
		],
		skins: [
			{
				unified: "1f910",
				native: "🤐"
			}
		],
		version: 1
	},
	face_with_raised_eyebrow: {
		id: "face_with_raised_eyebrow",
		name: "Face with Raised Eyebrow",
		keywords: [
			"one",
			"distrust",
			"scepticism",
			"disapproval",
			"disbelief",
			"surprise"
		],
		skins: [
			{
				unified: "1f928",
				native: "🤨"
			}
		],
		version: 5
	},
	neutral_face: {
		id: "neutral_face",
		name: "Neutral Face",
		emoticons: [
			":|",
			":-|"
		],
		keywords: [
			"indifference",
			"meh",
			":",
			""
		],
		skins: [
			{
				unified: "1f610",
				native: "😐"
			}
		],
		version: 1
	},
	expressionless: {
		id: "expressionless",
		name: "Expressionless Face",
		emoticons: [
			"-_-"
		],
		keywords: [
			"indifferent",
			"-",
			"",
			"meh",
			"deadpan"
		],
		skins: [
			{
				unified: "1f611",
				native: "😑"
			}
		],
		version: 1
	},
	no_mouth: {
		id: "no_mouth",
		name: "Face Without Mouth",
		keywords: [
			"no",
			"hellokitty"
		],
		skins: [
			{
				unified: "1f636",
				native: "😶"
			}
		],
		version: 1
	},
	dotted_line_face: {
		id: "dotted_line_face",
		name: "Dotted Line Face",
		keywords: [
			"invisible",
			"lonely",
			"isolation",
			"depression"
		],
		skins: [
			{
				unified: "1fae5",
				native: "🫥"
			}
		],
		version: 14
	},
	face_in_clouds: {
		id: "face_in_clouds",
		name: "Face in Clouds",
		keywords: [
			"shower",
			"steam",
			"dream"
		],
		skins: [
			{
				unified: "1f636-200d-1f32b-fe0f",
				native: "😶‍🌫️"
			}
		],
		version: 13.1
	},
	smirk: {
		id: "smirk",
		name: "Smirking Face",
		keywords: [
			"smirk",
			"smile",
			"mean",
			"prank",
			"smug",
			"sarcasm"
		],
		skins: [
			{
				unified: "1f60f",
				native: "😏"
			}
		],
		version: 1
	},
	unamused: {
		id: "unamused",
		name: "Unamused Face",
		emoticons: [
			":("
		],
		keywords: [
			"indifference",
			"bored",
			"straight",
			"serious",
			"sarcasm",
			"unimpressed",
			"skeptical",
			"dubious",
			"side",
			"eye"
		],
		skins: [
			{
				unified: "1f612",
				native: "😒"
			}
		],
		version: 1
	},
	face_with_rolling_eyes: {
		id: "face_with_rolling_eyes",
		name: "Face with Rolling Eyes",
		keywords: [
			"eyeroll",
			"frustrated"
		],
		skins: [
			{
				unified: "1f644",
				native: "🙄"
			}
		],
		version: 1
	},
	grimacing: {
		id: "grimacing",
		name: "Grimacing Face",
		keywords: [
			"grimace",
			"teeth"
		],
		skins: [
			{
				unified: "1f62c",
				native: "😬"
			}
		],
		version: 1
	},
	face_exhaling: {
		id: "face_exhaling",
		name: "Face Exhaling",
		keywords: [
			"relieve",
			"relief",
			"tired",
			"sigh"
		],
		skins: [
			{
				unified: "1f62e-200d-1f4a8",
				native: "😮‍💨"
			}
		],
		version: 13.1
	},
	lying_face: {
		id: "lying_face",
		name: "Lying Face",
		keywords: [
			"lie",
			"pinocchio"
		],
		skins: [
			{
				unified: "1f925",
				native: "🤥"
			}
		],
		version: 3
	},
	shaking_face: {
		id: "shaking_face",
		name: "Shaking Face",
		keywords: [
			"dizzy",
			"shock",
			"blurry",
			"earthquake"
		],
		skins: [
			{
				unified: "1fae8",
				native: "🫨"
			}
		],
		version: 15
	},
	relieved: {
		id: "relieved",
		name: "Relieved Face",
		keywords: [
			"relaxed",
			"phew",
			"massage",
			"happiness"
		],
		skins: [
			{
				unified: "1f60c",
				native: "😌"
			}
		],
		version: 1
	},
	pensive: {
		id: "pensive",
		name: "Pensive Face",
		keywords: [
			"sad",
			"depressed",
			"upset"
		],
		skins: [
			{
				unified: "1f614",
				native: "😔"
			}
		],
		version: 1
	},
	sleepy: {
		id: "sleepy",
		name: "Sleepy Face",
		keywords: [
			"tired",
			"rest",
			"nap"
		],
		skins: [
			{
				unified: "1f62a",
				native: "😪"
			}
		],
		version: 1
	},
	drooling_face: {
		id: "drooling_face",
		name: "Drooling Face",
		keywords: [
		],
		skins: [
			{
				unified: "1f924",
				native: "🤤"
			}
		],
		version: 3
	},
	sleeping: {
		id: "sleeping",
		name: "Sleeping Face",
		keywords: [
			"tired",
			"sleepy",
			"night",
			"zzz"
		],
		skins: [
			{
				unified: "1f634",
				native: "😴"
			}
		],
		version: 1
	},
	mask: {
		id: "mask",
		name: "Face with Medical Mask",
		keywords: [
			"sick",
			"ill",
			"disease",
			"covid"
		],
		skins: [
			{
				unified: "1f637",
				native: "😷"
			}
		],
		version: 1
	},
	face_with_thermometer: {
		id: "face_with_thermometer",
		name: "Face with Thermometer",
		keywords: [
			"sick",
			"temperature",
			"cold",
			"fever",
			"covid"
		],
		skins: [
			{
				unified: "1f912",
				native: "🤒"
			}
		],
		version: 1
	},
	face_with_head_bandage: {
		id: "face_with_head_bandage",
		name: "Face with Head-Bandage",
		keywords: [
			"head",
			"bandage",
			"injured",
			"clumsy",
			"hurt"
		],
		skins: [
			{
				unified: "1f915",
				native: "🤕"
			}
		],
		version: 1
	},
	nauseated_face: {
		id: "nauseated_face",
		name: "Nauseated Face",
		keywords: [
			"vomit",
			"gross",
			"green",
			"sick",
			"throw",
			"up",
			"ill"
		],
		skins: [
			{
				unified: "1f922",
				native: "🤢"
			}
		],
		version: 3
	},
	face_vomiting: {
		id: "face_vomiting",
		name: "Face Vomiting",
		keywords: [
			"with",
			"open",
			"mouth",
			"sick"
		],
		skins: [
			{
				unified: "1f92e",
				native: "🤮"
			}
		],
		version: 5
	},
	sneezing_face: {
		id: "sneezing_face",
		name: "Sneezing Face",
		keywords: [
			"gesundheit",
			"sneeze",
			"sick",
			"allergy"
		],
		skins: [
			{
				unified: "1f927",
				native: "🤧"
			}
		],
		version: 3
	},
	hot_face: {
		id: "hot_face",
		name: "Hot Face",
		keywords: [
			"feverish",
			"heat",
			"red",
			"sweating"
		],
		skins: [
			{
				unified: "1f975",
				native: "🥵"
			}
		],
		version: 11
	},
	cold_face: {
		id: "cold_face",
		name: "Cold Face",
		keywords: [
			"blue",
			"freezing",
			"frozen",
			"frostbite",
			"icicles"
		],
		skins: [
			{
				unified: "1f976",
				native: "🥶"
			}
		],
		version: 11
	},
	woozy_face: {
		id: "woozy_face",
		name: "Woozy Face",
		keywords: [
			"dizzy",
			"intoxicated",
			"tipsy",
			"wavy"
		],
		skins: [
			{
				unified: "1f974",
				native: "🥴"
			}
		],
		version: 11
	},
	dizzy_face: {
		id: "dizzy_face",
		name: "Dizzy Face",
		keywords: [
			"spent",
			"unconscious",
			"xox"
		],
		skins: [
			{
				unified: "1f635",
				native: "😵"
			}
		],
		version: 1
	},
	face_with_spiral_eyes: {
		id: "face_with_spiral_eyes",
		name: "Face with Spiral Eyes",
		keywords: [
			"sick",
			"ill",
			"confused",
			"nauseous",
			"nausea"
		],
		skins: [
			{
				unified: "1f635-200d-1f4ab",
				native: "😵‍💫"
			}
		],
		version: 13.1
	},
	exploding_head: {
		id: "exploding_head",
		name: "Exploding Head",
		keywords: [
			"shocked",
			"face",
			"with",
			"mind",
			"blown"
		],
		skins: [
			{
				unified: "1f92f",
				native: "🤯"
			}
		],
		version: 5
	},
	face_with_cowboy_hat: {
		id: "face_with_cowboy_hat",
		name: "Cowboy Hat Face",
		keywords: [
			"with",
			"cowgirl"
		],
		skins: [
			{
				unified: "1f920",
				native: "🤠"
			}
		],
		version: 3
	},
	partying_face: {
		id: "partying_face",
		name: "Partying Face",
		keywords: [
			"celebration",
			"woohoo"
		],
		skins: [
			{
				unified: "1f973",
				native: "🥳"
			}
		],
		version: 11
	},
	disguised_face: {
		id: "disguised_face",
		name: "Disguised Face",
		keywords: [
			"pretent",
			"brows",
			"glasses",
			"moustache"
		],
		skins: [
			{
				unified: "1f978",
				native: "🥸"
			}
		],
		version: 13
	},
	sunglasses: {
		id: "sunglasses",
		name: "Smiling Face with Sunglasses",
		emoticons: [
			"8)"
		],
		keywords: [
			"cool",
			"smile",
			"summer",
			"beach",
			"sunglass"
		],
		skins: [
			{
				unified: "1f60e",
				native: "😎"
			}
		],
		version: 1
	},
	nerd_face: {
		id: "nerd_face",
		name: "Nerd Face",
		keywords: [
			"nerdy",
			"geek",
			"dork"
		],
		skins: [
			{
				unified: "1f913",
				native: "🤓"
			}
		],
		version: 1
	},
	face_with_monocle: {
		id: "face_with_monocle",
		name: "Face with Monocle",
		keywords: [
			"stuffy",
			"wealthy"
		],
		skins: [
			{
				unified: "1f9d0",
				native: "🧐"
			}
		],
		version: 5
	},
	confused: {
		id: "confused",
		name: "Confused Face",
		emoticons: [
			":\\",
			":-\\",
			":/",
			":-/"
		],
		keywords: [
			"indifference",
			"huh",
			"weird",
			"hmmm",
			":/"
		],
		skins: [
			{
				unified: "1f615",
				native: "😕"
			}
		],
		version: 1
	},
	face_with_diagonal_mouth: {
		id: "face_with_diagonal_mouth",
		name: "Face with Diagonal Mouth",
		keywords: [
			"skeptic",
			"confuse",
			"frustrated",
			"indifferent"
		],
		skins: [
			{
				unified: "1fae4",
				native: "🫤"
			}
		],
		version: 14
	},
	worried: {
		id: "worried",
		name: "Worried Face",
		keywords: [
			"concern",
			"nervous",
			":("
		],
		skins: [
			{
				unified: "1f61f",
				native: "😟"
			}
		],
		version: 1
	},
	slightly_frowning_face: {
		id: "slightly_frowning_face",
		name: "Slightly Frowning Face",
		keywords: [
			"disappointed",
			"sad",
			"upset"
		],
		skins: [
			{
				unified: "1f641",
				native: "🙁"
			}
		],
		version: 1
	},
	white_frowning_face: {
		id: "white_frowning_face",
		name: "Frowning Face",
		keywords: [
			"white",
			"sad",
			"upset",
			"frown"
		],
		skins: [
			{
				unified: "2639-fe0f",
				native: "☹️"
			}
		],
		version: 1
	},
	open_mouth: {
		id: "open_mouth",
		name: "Face with Open Mouth",
		emoticons: [
			":o",
			":-o",
			":O",
			":-O"
		],
		keywords: [
			"surprise",
			"impressed",
			"wow",
			"whoa",
			":O"
		],
		skins: [
			{
				unified: "1f62e",
				native: "😮"
			}
		],
		version: 1
	},
	hushed: {
		id: "hushed",
		name: "Hushed Face",
		keywords: [
			"woo",
			"shh"
		],
		skins: [
			{
				unified: "1f62f",
				native: "😯"
			}
		],
		version: 1
	},
	astonished: {
		id: "astonished",
		name: "Astonished Face",
		keywords: [
			"xox",
			"surprised",
			"poisoned"
		],
		skins: [
			{
				unified: "1f632",
				native: "😲"
			}
		],
		version: 1
	},
	flushed: {
		id: "flushed",
		name: "Flushed Face",
		keywords: [
			"blush",
			"shy",
			"flattered"
		],
		skins: [
			{
				unified: "1f633",
				native: "😳"
			}
		],
		version: 1
	},
	pleading_face: {
		id: "pleading_face",
		name: "Pleading Face",
		keywords: [
			"begging",
			"mercy",
			"cry",
			"tears",
			"sad",
			"grievance"
		],
		skins: [
			{
				unified: "1f97a",
				native: "🥺"
			}
		],
		version: 11
	},
	face_holding_back_tears: {
		id: "face_holding_back_tears",
		name: "Face Holding Back Tears",
		keywords: [
			"touched",
			"gratitude",
			"cry"
		],
		skins: [
			{
				unified: "1f979",
				native: "🥹"
			}
		],
		version: 14
	},
	frowning: {
		id: "frowning",
		name: "Frowning Face with Open Mouth",
		keywords: [
			"aw",
			"what"
		],
		skins: [
			{
				unified: "1f626",
				native: "😦"
			}
		],
		version: 1
	},
	anguished: {
		id: "anguished",
		name: "Anguished Face",
		emoticons: [
			"D:"
		],
		keywords: [
			"stunned",
			"nervous"
		],
		skins: [
			{
				unified: "1f627",
				native: "😧"
			}
		],
		version: 1
	},
	fearful: {
		id: "fearful",
		name: "Fearful Face",
		keywords: [
			"scared",
			"terrified",
			"nervous"
		],
		skins: [
			{
				unified: "1f628",
				native: "😨"
			}
		],
		version: 1
	},
	cold_sweat: {
		id: "cold_sweat",
		name: "Anxious Face with Sweat",
		keywords: [
			"cold",
			"nervous"
		],
		skins: [
			{
				unified: "1f630",
				native: "😰"
			}
		],
		version: 1
	},
	disappointed_relieved: {
		id: "disappointed_relieved",
		name: "Sad but Relieved Face",
		keywords: [
			"disappointed",
			"phew",
			"sweat",
			"nervous"
		],
		skins: [
			{
				unified: "1f625",
				native: "😥"
			}
		],
		version: 1
	},
	cry: {
		id: "cry",
		name: "Crying Face",
		emoticons: [
			":'("
		],
		keywords: [
			"cry",
			"tears",
			"sad",
			"depressed",
			"upset",
			":'("
		],
		skins: [
			{
				unified: "1f622",
				native: "😢"
			}
		],
		version: 1
	},
	sob: {
		id: "sob",
		name: "Loudly Crying Face",
		emoticons: [
			":'("
		],
		keywords: [
			"sob",
			"cry",
			"tears",
			"sad",
			"upset",
			"depressed"
		],
		skins: [
			{
				unified: "1f62d",
				native: "😭"
			}
		],
		version: 1
	},
	scream: {
		id: "scream",
		name: "Face Screaming in Fear",
		keywords: [
			"scream",
			"munch",
			"scared",
			"omg"
		],
		skins: [
			{
				unified: "1f631",
				native: "😱"
			}
		],
		version: 1
	},
	confounded: {
		id: "confounded",
		name: "Confounded Face",
		keywords: [
			"confused",
			"sick",
			"unwell",
			"oops",
			":S"
		],
		skins: [
			{
				unified: "1f616",
				native: "😖"
			}
		],
		version: 1
	},
	persevere: {
		id: "persevere",
		name: "Persevering Face",
		keywords: [
			"persevere",
			"sick",
			"no",
			"upset",
			"oops"
		],
		skins: [
			{
				unified: "1f623",
				native: "😣"
			}
		],
		version: 1
	},
	disappointed: {
		id: "disappointed",
		name: "Disappointed Face",
		emoticons: [
			"):",
			":(",
			":-("
		],
		keywords: [
			"sad",
			"upset",
			"depressed",
			":("
		],
		skins: [
			{
				unified: "1f61e",
				native: "😞"
			}
		],
		version: 1
	},
	sweat: {
		id: "sweat",
		name: "Face with Cold Sweat",
		keywords: [
			"downcast",
			"hot",
			"sad",
			"tired",
			"exercise"
		],
		skins: [
			{
				unified: "1f613",
				native: "😓"
			}
		],
		version: 1
	},
	weary: {
		id: "weary",
		name: "Weary Face",
		keywords: [
			"tired",
			"sleepy",
			"sad",
			"frustrated",
			"upset"
		],
		skins: [
			{
				unified: "1f629",
				native: "😩"
			}
		],
		version: 1
	},
	tired_face: {
		id: "tired_face",
		name: "Tired Face",
		keywords: [
			"sick",
			"whine",
			"upset",
			"frustrated"
		],
		skins: [
			{
				unified: "1f62b",
				native: "😫"
			}
		],
		version: 1
	},
	yawning_face: {
		id: "yawning_face",
		name: "Yawning Face",
		keywords: [
			"tired",
			"sleepy"
		],
		skins: [
			{
				unified: "1f971",
				native: "🥱"
			}
		],
		version: 12
	},
	triumph: {
		id: "triumph",
		name: "Face with Look of Triumph",
		keywords: [
			"steam",
			"from",
			"nose",
			"gas",
			"phew",
			"proud",
			"pride"
		],
		skins: [
			{
				unified: "1f624",
				native: "😤"
			}
		],
		version: 1
	},
	rage: {
		id: "rage",
		name: "Pouting Face",
		keywords: [
			"rage",
			"angry",
			"mad",
			"hate",
			"despise"
		],
		skins: [
			{
				unified: "1f621",
				native: "😡"
			}
		],
		version: 1
	},
	angry: {
		id: "angry",
		name: "Angry Face",
		emoticons: [
			">:(",
			">:-("
		],
		keywords: [
			"mad",
			"annoyed",
			"frustrated"
		],
		skins: [
			{
				unified: "1f620",
				native: "😠"
			}
		],
		version: 1
	},
	face_with_symbols_on_mouth: {
		id: "face_with_symbols_on_mouth",
		name: "Face with Symbols on Mouth",
		keywords: [
			"serious",
			"covering",
			"swearing",
			"cursing",
			"cussing",
			"profanity",
			"expletive"
		],
		skins: [
			{
				unified: "1f92c",
				native: "🤬"
			}
		],
		version: 5
	},
	smiling_imp: {
		id: "smiling_imp",
		name: "Smiling Face with Horns",
		keywords: [
			"imp",
			"devil"
		],
		skins: [
			{
				unified: "1f608",
				native: "😈"
			}
		],
		version: 1
	},
	imp: {
		id: "imp",
		name: "Imp",
		keywords: [
			"angry",
			"face",
			"with",
			"horns",
			"devil"
		],
		skins: [
			{
				unified: "1f47f",
				native: "👿"
			}
		],
		version: 1
	},
	skull: {
		id: "skull",
		name: "Skull",
		keywords: [
			"dead",
			"skeleton",
			"creepy",
			"death"
		],
		skins: [
			{
				unified: "1f480",
				native: "💀"
			}
		],
		version: 1
	},
	skull_and_crossbones: {
		id: "skull_and_crossbones",
		name: "Skull and Crossbones",
		keywords: [
			"poison",
			"danger",
			"deadly",
			"scary",
			"death",
			"pirate",
			"evil"
		],
		skins: [
			{
				unified: "2620-fe0f",
				native: "☠️"
			}
		],
		version: 1
	},
	hankey: {
		id: "hankey",
		name: "Pile of Poo",
		keywords: [
			"hankey",
			"poop",
			"shit",
			"shitface",
			"fail",
			"turd"
		],
		skins: [
			{
				unified: "1f4a9",
				native: "💩"
			}
		],
		version: 1
	},
	clown_face: {
		id: "clown_face",
		name: "Clown Face",
		keywords: [
		],
		skins: [
			{
				unified: "1f921",
				native: "🤡"
			}
		],
		version: 3
	},
	japanese_ogre: {
		id: "japanese_ogre",
		name: "Ogre",
		keywords: [
			"japanese",
			"monster",
			"red",
			"mask",
			"halloween",
			"scary",
			"creepy",
			"devil",
			"demon"
		],
		skins: [
			{
				unified: "1f479",
				native: "👹"
			}
		],
		version: 1
	},
	japanese_goblin: {
		id: "japanese_goblin",
		name: "Goblin",
		keywords: [
			"japanese",
			"red",
			"evil",
			"mask",
			"monster",
			"scary",
			"creepy"
		],
		skins: [
			{
				unified: "1f47a",
				native: "👺"
			}
		],
		version: 1
	},
	ghost: {
		id: "ghost",
		name: "Ghost",
		keywords: [
			"halloween",
			"spooky",
			"scary"
		],
		skins: [
			{
				unified: "1f47b",
				native: "👻"
			}
		],
		version: 1
	},
	alien: {
		id: "alien",
		name: "Alien",
		keywords: [
			"UFO",
			"paul",
			"weird",
			"outer",
			"space"
		],
		skins: [
			{
				unified: "1f47d",
				native: "👽"
			}
		],
		version: 1
	},
	space_invader: {
		id: "space_invader",
		name: "Alien Monster",
		keywords: [
			"space",
			"invader",
			"game",
			"arcade",
			"play"
		],
		skins: [
			{
				unified: "1f47e",
				native: "👾"
			}
		],
		version: 1
	},
	robot_face: {
		id: "robot_face",
		name: "Robot",
		keywords: [
			"face",
			"computer",
			"machine",
			"bot"
		],
		skins: [
			{
				unified: "1f916",
				native: "🤖"
			}
		],
		version: 1
	},
	smiley_cat: {
		id: "smiley_cat",
		name: "Grinning Cat",
		keywords: [
			"smiley",
			"animal",
			"cats",
			"happy",
			"smile"
		],
		skins: [
			{
				unified: "1f63a",
				native: "😺"
			}
		],
		version: 1
	},
	smile_cat: {
		id: "smile_cat",
		name: "Grinning Cat with Smiling Eyes",
		keywords: [
			"smile",
			"animal",
			"cats"
		],
		skins: [
			{
				unified: "1f638",
				native: "😸"
			}
		],
		version: 1
	},
	joy_cat: {
		id: "joy_cat",
		name: "Cat with Tears of Joy",
		keywords: [
			"animal",
			"cats",
			"haha",
			"happy"
		],
		skins: [
			{
				unified: "1f639",
				native: "😹"
			}
		],
		version: 1
	},
	heart_eyes_cat: {
		id: "heart_eyes_cat",
		name: "Smiling Cat with Heart-Eyes",
		keywords: [
			"heart",
			"eyes",
			"animal",
			"love",
			"like",
			"affection",
			"cats",
			"valentines"
		],
		skins: [
			{
				unified: "1f63b",
				native: "😻"
			}
		],
		version: 1
	},
	smirk_cat: {
		id: "smirk_cat",
		name: "Cat with Wry Smile",
		keywords: [
			"smirk",
			"animal",
			"cats"
		],
		skins: [
			{
				unified: "1f63c",
				native: "😼"
			}
		],
		version: 1
	},
	kissing_cat: {
		id: "kissing_cat",
		name: "Kissing Cat",
		keywords: [
			"animal",
			"cats",
			"kiss"
		],
		skins: [
			{
				unified: "1f63d",
				native: "😽"
			}
		],
		version: 1
	},
	scream_cat: {
		id: "scream_cat",
		name: "Weary Cat",
		keywords: [
			"scream",
			"animal",
			"cats",
			"munch",
			"scared"
		],
		skins: [
			{
				unified: "1f640",
				native: "🙀"
			}
		],
		version: 1
	},
	crying_cat_face: {
		id: "crying_cat_face",
		name: "Crying Cat",
		keywords: [
			"face",
			"animal",
			"tears",
			"weep",
			"sad",
			"cats",
			"upset",
			"cry"
		],
		skins: [
			{
				unified: "1f63f",
				native: "😿"
			}
		],
		version: 1
	},
	pouting_cat: {
		id: "pouting_cat",
		name: "Pouting Cat",
		keywords: [
			"animal",
			"cats"
		],
		skins: [
			{
				unified: "1f63e",
				native: "😾"
			}
		],
		version: 1
	},
	see_no_evil: {
		id: "see_no_evil",
		name: "See-No-Evil Monkey",
		keywords: [
			"see",
			"no",
			"evil",
			"animal",
			"nature",
			"haha"
		],
		skins: [
			{
				unified: "1f648",
				native: "🙈"
			}
		],
		version: 1
	},
	hear_no_evil: {
		id: "hear_no_evil",
		name: "Hear-No-Evil Monkey",
		keywords: [
			"hear",
			"no",
			"evil",
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f649",
				native: "🙉"
			}
		],
		version: 1
	},
	speak_no_evil: {
		id: "speak_no_evil",
		name: "Speak-No-Evil Monkey",
		keywords: [
			"speak",
			"no",
			"evil",
			"animal",
			"nature",
			"omg"
		],
		skins: [
			{
				unified: "1f64a",
				native: "🙊"
			}
		],
		version: 1
	},
	love_letter: {
		id: "love_letter",
		name: "Love Letter",
		keywords: [
			"email",
			"like",
			"affection",
			"envelope",
			"valentines"
		],
		skins: [
			{
				unified: "1f48c",
				native: "💌"
			}
		],
		version: 1
	},
	cupid: {
		id: "cupid",
		name: "Heart with Arrow",
		keywords: [
			"cupid",
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f498",
				native: "💘"
			}
		],
		version: 1
	},
	gift_heart: {
		id: "gift_heart",
		name: "Heart with Ribbon",
		keywords: [
			"gift",
			"love",
			"valentines"
		],
		skins: [
			{
				unified: "1f49d",
				native: "💝"
			}
		],
		version: 1
	},
	sparkling_heart: {
		id: "sparkling_heart",
		name: "Sparkling Heart",
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f496",
				native: "💖"
			}
		],
		version: 1
	},
	heartpulse: {
		id: "heartpulse",
		name: "Growing Heart",
		keywords: [
			"heartpulse",
			"like",
			"love",
			"affection",
			"valentines",
			"pink"
		],
		skins: [
			{
				unified: "1f497",
				native: "💗"
			}
		],
		version: 1
	},
	heartbeat: {
		id: "heartbeat",
		name: "Beating Heart",
		keywords: [
			"heartbeat",
			"love",
			"like",
			"affection",
			"valentines",
			"pink"
		],
		skins: [
			{
				unified: "1f493",
				native: "💓"
			}
		],
		version: 1
	},
	revolving_hearts: {
		id: "revolving_hearts",
		name: "Revolving Hearts",
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f49e",
				native: "💞"
			}
		],
		version: 1
	},
	two_hearts: {
		id: "two_hearts",
		name: "Two Hearts",
		keywords: [
			"love",
			"like",
			"affection",
			"valentines",
			"heart"
		],
		skins: [
			{
				unified: "1f495",
				native: "💕"
			}
		],
		version: 1
	},
	heart_decoration: {
		id: "heart_decoration",
		name: "Heart Decoration",
		keywords: [
			"purple",
			"square",
			"love",
			"like"
		],
		skins: [
			{
				unified: "1f49f",
				native: "💟"
			}
		],
		version: 1
	},
	heavy_heart_exclamation_mark_ornament: {
		id: "heavy_heart_exclamation_mark_ornament",
		name: "Heart Exclamation",
		keywords: [
			"heavy",
			"mark",
			"ornament",
			"decoration",
			"love"
		],
		skins: [
			{
				unified: "2763-fe0f",
				native: "❣️"
			}
		],
		version: 1
	},
	broken_heart: {
		id: "broken_heart",
		name: "Broken Heart",
		emoticons: [
			"</3"
		],
		keywords: [
			"sad",
			"sorry",
			"break",
			"heartbreak"
		],
		skins: [
			{
				unified: "1f494",
				native: "💔"
			}
		],
		version: 1
	},
	heart_on_fire: {
		id: "heart_on_fire",
		name: "Heart on Fire",
		keywords: [
			"passionate",
			"enthusiastic"
		],
		skins: [
			{
				unified: "2764-fe0f-200d-1f525",
				native: "❤️‍🔥"
			}
		],
		version: 13.1
	},
	mending_heart: {
		id: "mending_heart",
		name: "Mending Heart",
		keywords: [
			"broken",
			"bandage",
			"wounded"
		],
		skins: [
			{
				unified: "2764-fe0f-200d-1fa79",
				native: "❤️‍🩹"
			}
		],
		version: 13.1
	},
	heart: {
		id: "heart",
		name: "Red Heart",
		emoticons: [
			"<3"
		],
		keywords: [
			"love",
			"like",
			"valentines"
		],
		skins: [
			{
				unified: "2764-fe0f",
				native: "❤️"
			}
		],
		version: 1
	},
	pink_heart: {
		id: "pink_heart",
		name: "Pink Heart",
		keywords: [
			"valentines"
		],
		skins: [
			{
				unified: "1fa77",
				native: "🩷"
			}
		],
		version: 15
	},
	orange_heart: {
		id: "orange_heart",
		name: "Orange Heart",
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f9e1",
				native: "🧡"
			}
		],
		version: 5
	},
	yellow_heart: {
		id: "yellow_heart",
		name: "Yellow Heart",
		emoticons: [
			"<3"
		],
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f49b",
				native: "💛"
			}
		],
		version: 1
	},
	green_heart: {
		id: "green_heart",
		name: "Green Heart",
		emoticons: [
			"<3"
		],
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f49a",
				native: "💚"
			}
		],
		version: 1
	},
	blue_heart: {
		id: "blue_heart",
		name: "Blue Heart",
		emoticons: [
			"<3"
		],
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f499",
				native: "💙"
			}
		],
		version: 1
	},
	light_blue_heart: {
		id: "light_blue_heart",
		name: "Light Blue Heart",
		keywords: [
			"ice",
			"baby"
		],
		skins: [
			{
				unified: "1fa75",
				native: "🩵"
			}
		],
		version: 15
	},
	purple_heart: {
		id: "purple_heart",
		name: "Purple Heart",
		emoticons: [
			"<3"
		],
		keywords: [
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f49c",
				native: "💜"
			}
		],
		version: 1
	},
	brown_heart: {
		id: "brown_heart",
		name: "Brown Heart",
		keywords: [
			"coffee"
		],
		skins: [
			{
				unified: "1f90e",
				native: "🤎"
			}
		],
		version: 12
	},
	black_heart: {
		id: "black_heart",
		name: "Black Heart",
		keywords: [
			"evil"
		],
		skins: [
			{
				unified: "1f5a4",
				native: "🖤"
			}
		],
		version: 3
	},
	grey_heart: {
		id: "grey_heart",
		name: "Grey Heart",
		keywords: [
			"silver",
			"monochrome"
		],
		skins: [
			{
				unified: "1fa76",
				native: "🩶"
			}
		],
		version: 15
	},
	white_heart: {
		id: "white_heart",
		name: "White Heart",
		keywords: [
			"pure"
		],
		skins: [
			{
				unified: "1f90d",
				native: "🤍"
			}
		],
		version: 12
	},
	kiss: {
		id: "kiss",
		name: "Kiss Mark",
		keywords: [
			"face",
			"lips",
			"love",
			"like",
			"affection",
			"valentines"
		],
		skins: [
			{
				unified: "1f48b",
				native: "💋"
			}
		],
		version: 1
	},
	anger: {
		id: "anger",
		name: "Anger Symbol",
		keywords: [
			"angry",
			"mad"
		],
		skins: [
			{
				unified: "1f4a2",
				native: "💢"
			}
		],
		version: 1
	},
	boom: {
		id: "boom",
		name: "Collision",
		keywords: [
			"boom",
			"bomb",
			"explode",
			"explosion",
			"blown"
		],
		skins: [
			{
				unified: "1f4a5",
				native: "💥"
			}
		],
		version: 1
	},
	dizzy: {
		id: "dizzy",
		name: "Dizzy",
		keywords: [
			"star",
			"sparkle",
			"shoot",
			"magic"
		],
		skins: [
			{
				unified: "1f4ab",
				native: "💫"
			}
		],
		version: 1
	},
	sweat_drops: {
		id: "sweat_drops",
		name: "Sweat Droplets",
		keywords: [
			"drops",
			"water",
			"drip",
			"oops"
		],
		skins: [
			{
				unified: "1f4a6",
				native: "💦"
			}
		],
		version: 1
	},
	dash: {
		id: "dash",
		name: "Dash Symbol",
		keywords: [
			"dashing",
			"away",
			"wind",
			"air",
			"fast",
			"shoo",
			"fart",
			"smoke",
			"puff"
		],
		skins: [
			{
				unified: "1f4a8",
				native: "💨"
			}
		],
		version: 1
	},
	hole: {
		id: "hole",
		name: "Hole",
		keywords: [
			"embarrassing"
		],
		skins: [
			{
				unified: "1f573-fe0f",
				native: "🕳️"
			}
		],
		version: 1
	},
	speech_balloon: {
		id: "speech_balloon",
		name: "Speech Balloon",
		keywords: [
			"bubble",
			"words",
			"message",
			"talk",
			"chatting"
		],
		skins: [
			{
				unified: "1f4ac",
				native: "💬"
			}
		],
		version: 1
	},
	"eye-in-speech-bubble": {
		id: "eye-in-speech-bubble",
		name: "Eye in Speech Bubble",
		keywords: [
			"in-speech-bubble",
			"info"
		],
		skins: [
			{
				unified: "1f441-fe0f-200d-1f5e8-fe0f",
				native: "👁️‍🗨️"
			}
		],
		version: 2
	},
	left_speech_bubble: {
		id: "left_speech_bubble",
		name: "Left Speech Bubble",
		keywords: [
			"words",
			"message",
			"talk",
			"chatting"
		],
		skins: [
			{
				unified: "1f5e8-fe0f",
				native: "🗨️"
			}
		],
		version: 2
	},
	right_anger_bubble: {
		id: "right_anger_bubble",
		name: "Right Anger Bubble",
		keywords: [
			"caption",
			"speech",
			"thinking",
			"mad"
		],
		skins: [
			{
				unified: "1f5ef-fe0f",
				native: "🗯️"
			}
		],
		version: 1
	},
	thought_balloon: {
		id: "thought_balloon",
		name: "Thought Balloon",
		keywords: [
			"bubble",
			"cloud",
			"speech",
			"thinking",
			"dream"
		],
		skins: [
			{
				unified: "1f4ad",
				native: "💭"
			}
		],
		version: 1
	},
	zzz: {
		id: "zzz",
		name: "Zzz",
		keywords: [
			"sleepy",
			"tired",
			"dream"
		],
		skins: [
			{
				unified: "1f4a4",
				native: "💤"
			}
		],
		version: 1
	},
	wave: {
		id: "wave",
		name: "Waving Hand",
		keywords: [
			"wave",
			"hands",
			"gesture",
			"goodbye",
			"solong",
			"farewell",
			"hello",
			"hi",
			"palm"
		],
		skins: [
			{
				unified: "1f44b",
				native: "👋"
			},
			{
				unified: "1f44b-1f3fb",
				native: "👋🏻"
			},
			{
				unified: "1f44b-1f3fc",
				native: "👋🏼"
			},
			{
				unified: "1f44b-1f3fd",
				native: "👋🏽"
			},
			{
				unified: "1f44b-1f3fe",
				native: "👋🏾"
			},
			{
				unified: "1f44b-1f3ff",
				native: "👋🏿"
			}
		],
		version: 1
	},
	raised_back_of_hand: {
		id: "raised_back_of_hand",
		name: "Raised Back of Hand",
		keywords: [
			"fingers",
			"backhand"
		],
		skins: [
			{
				unified: "1f91a",
				native: "🤚"
			},
			{
				unified: "1f91a-1f3fb",
				native: "🤚🏻"
			},
			{
				unified: "1f91a-1f3fc",
				native: "🤚🏼"
			},
			{
				unified: "1f91a-1f3fd",
				native: "🤚🏽"
			},
			{
				unified: "1f91a-1f3fe",
				native: "🤚🏾"
			},
			{
				unified: "1f91a-1f3ff",
				native: "🤚🏿"
			}
		],
		version: 3
	},
	raised_hand_with_fingers_splayed: {
		id: "raised_hand_with_fingers_splayed",
		name: "Hand with Fingers Splayed",
		keywords: [
			"raised",
			"palm"
		],
		skins: [
			{
				unified: "1f590-fe0f",
				native: "🖐️"
			},
			{
				unified: "1f590-1f3fb",
				native: "🖐🏻"
			},
			{
				unified: "1f590-1f3fc",
				native: "🖐🏼"
			},
			{
				unified: "1f590-1f3fd",
				native: "🖐🏽"
			},
			{
				unified: "1f590-1f3fe",
				native: "🖐🏾"
			},
			{
				unified: "1f590-1f3ff",
				native: "🖐🏿"
			}
		],
		version: 1
	},
	hand: {
		id: "hand",
		name: "Raised Hand",
		keywords: [
			"fingers",
			"stop",
			"highfive",
			"high",
			"five",
			"palm",
			"ban"
		],
		skins: [
			{
				unified: "270b",
				native: "✋"
			},
			{
				unified: "270b-1f3fb",
				native: "✋🏻"
			},
			{
				unified: "270b-1f3fc",
				native: "✋🏼"
			},
			{
				unified: "270b-1f3fd",
				native: "✋🏽"
			},
			{
				unified: "270b-1f3fe",
				native: "✋🏾"
			},
			{
				unified: "270b-1f3ff",
				native: "✋🏿"
			}
		],
		version: 1
	},
	"spock-hand": {
		id: "spock-hand",
		name: "Vulcan Salute",
		keywords: [
			"spock",
			"hand",
			"fingers",
			"star",
			"trek"
		],
		skins: [
			{
				unified: "1f596",
				native: "🖖"
			},
			{
				unified: "1f596-1f3fb",
				native: "🖖🏻"
			},
			{
				unified: "1f596-1f3fc",
				native: "🖖🏼"
			},
			{
				unified: "1f596-1f3fd",
				native: "🖖🏽"
			},
			{
				unified: "1f596-1f3fe",
				native: "🖖🏾"
			},
			{
				unified: "1f596-1f3ff",
				native: "🖖🏿"
			}
		],
		version: 1
	},
	rightwards_hand: {
		id: "rightwards_hand",
		name: "Rightwards Hand",
		keywords: [
			"palm",
			"offer"
		],
		skins: [
			{
				unified: "1faf1",
				native: "🫱"
			},
			{
				unified: "1faf1-1f3fb",
				native: "🫱🏻"
			},
			{
				unified: "1faf1-1f3fc",
				native: "🫱🏼"
			},
			{
				unified: "1faf1-1f3fd",
				native: "🫱🏽"
			},
			{
				unified: "1faf1-1f3fe",
				native: "🫱🏾"
			},
			{
				unified: "1faf1-1f3ff",
				native: "🫱🏿"
			}
		],
		version: 14
	},
	leftwards_hand: {
		id: "leftwards_hand",
		name: "Leftwards Hand",
		keywords: [
			"palm",
			"offer"
		],
		skins: [
			{
				unified: "1faf2",
				native: "🫲"
			},
			{
				unified: "1faf2-1f3fb",
				native: "🫲🏻"
			},
			{
				unified: "1faf2-1f3fc",
				native: "🫲🏼"
			},
			{
				unified: "1faf2-1f3fd",
				native: "🫲🏽"
			},
			{
				unified: "1faf2-1f3fe",
				native: "🫲🏾"
			},
			{
				unified: "1faf2-1f3ff",
				native: "🫲🏿"
			}
		],
		version: 14
	},
	palm_down_hand: {
		id: "palm_down_hand",
		name: "Palm Down Hand",
		keywords: [
			"drop"
		],
		skins: [
			{
				unified: "1faf3",
				native: "🫳"
			},
			{
				unified: "1faf3-1f3fb",
				native: "🫳🏻"
			},
			{
				unified: "1faf3-1f3fc",
				native: "🫳🏼"
			},
			{
				unified: "1faf3-1f3fd",
				native: "🫳🏽"
			},
			{
				unified: "1faf3-1f3fe",
				native: "🫳🏾"
			},
			{
				unified: "1faf3-1f3ff",
				native: "🫳🏿"
			}
		],
		version: 14
	},
	palm_up_hand: {
		id: "palm_up_hand",
		name: "Palm Up Hand",
		keywords: [
			"lift",
			"offer",
			"demand"
		],
		skins: [
			{
				unified: "1faf4",
				native: "🫴"
			},
			{
				unified: "1faf4-1f3fb",
				native: "🫴🏻"
			},
			{
				unified: "1faf4-1f3fc",
				native: "🫴🏼"
			},
			{
				unified: "1faf4-1f3fd",
				native: "🫴🏽"
			},
			{
				unified: "1faf4-1f3fe",
				native: "🫴🏾"
			},
			{
				unified: "1faf4-1f3ff",
				native: "🫴🏿"
			}
		],
		version: 14
	},
	leftwards_pushing_hand: {
		id: "leftwards_pushing_hand",
		name: "Leftwards Pushing Hand",
		keywords: [
			"highfive",
			"high",
			"five",
			"pressing",
			"stop"
		],
		skins: [
			{
				unified: "1faf7",
				native: "🫷"
			},
			{
				unified: "1faf7-1f3fb",
				native: "🫷🏻"
			},
			{
				unified: "1faf7-1f3fc",
				native: "🫷🏼"
			},
			{
				unified: "1faf7-1f3fd",
				native: "🫷🏽"
			},
			{
				unified: "1faf7-1f3fe",
				native: "🫷🏾"
			},
			{
				unified: "1faf7-1f3ff",
				native: "🫷🏿"
			}
		],
		version: 15
	},
	rightwards_pushing_hand: {
		id: "rightwards_pushing_hand",
		name: "Rightwards Pushing Hand",
		keywords: [
			"highfive",
			"high",
			"five",
			"pressing",
			"stop"
		],
		skins: [
			{
				unified: "1faf8",
				native: "🫸"
			},
			{
				unified: "1faf8-1f3fb",
				native: "🫸🏻"
			},
			{
				unified: "1faf8-1f3fc",
				native: "🫸🏼"
			},
			{
				unified: "1faf8-1f3fd",
				native: "🫸🏽"
			},
			{
				unified: "1faf8-1f3fe",
				native: "🫸🏾"
			},
			{
				unified: "1faf8-1f3ff",
				native: "🫸🏿"
			}
		],
		version: 15
	},
	ok_hand: {
		id: "ok_hand",
		name: "Ok Hand",
		keywords: [
			"fingers",
			"limbs",
			"perfect",
			"okay"
		],
		skins: [
			{
				unified: "1f44c",
				native: "👌"
			},
			{
				unified: "1f44c-1f3fb",
				native: "👌🏻"
			},
			{
				unified: "1f44c-1f3fc",
				native: "👌🏼"
			},
			{
				unified: "1f44c-1f3fd",
				native: "👌🏽"
			},
			{
				unified: "1f44c-1f3fe",
				native: "👌🏾"
			},
			{
				unified: "1f44c-1f3ff",
				native: "👌🏿"
			}
		],
		version: 1
	},
	pinched_fingers: {
		id: "pinched_fingers",
		name: "Pinched Fingers",
		keywords: [
			"size",
			"tiny",
			"small"
		],
		skins: [
			{
				unified: "1f90c",
				native: "🤌"
			},
			{
				unified: "1f90c-1f3fb",
				native: "🤌🏻"
			},
			{
				unified: "1f90c-1f3fc",
				native: "🤌🏼"
			},
			{
				unified: "1f90c-1f3fd",
				native: "🤌🏽"
			},
			{
				unified: "1f90c-1f3fe",
				native: "🤌🏾"
			},
			{
				unified: "1f90c-1f3ff",
				native: "🤌🏿"
			}
		],
		version: 13
	},
	pinching_hand: {
		id: "pinching_hand",
		name: "Pinching Hand",
		keywords: [
			"tiny",
			"small",
			"size"
		],
		skins: [
			{
				unified: "1f90f",
				native: "🤏"
			},
			{
				unified: "1f90f-1f3fb",
				native: "🤏🏻"
			},
			{
				unified: "1f90f-1f3fc",
				native: "🤏🏼"
			},
			{
				unified: "1f90f-1f3fd",
				native: "🤏🏽"
			},
			{
				unified: "1f90f-1f3fe",
				native: "🤏🏾"
			},
			{
				unified: "1f90f-1f3ff",
				native: "🤏🏿"
			}
		],
		version: 12
	},
	v: {
		id: "v",
		name: "Victory Hand",
		keywords: [
			"v",
			"fingers",
			"ohyeah",
			"peace",
			"two"
		],
		skins: [
			{
				unified: "270c-fe0f",
				native: "✌️"
			},
			{
				unified: "270c-1f3fb",
				native: "✌🏻"
			},
			{
				unified: "270c-1f3fc",
				native: "✌🏼"
			},
			{
				unified: "270c-1f3fd",
				native: "✌🏽"
			},
			{
				unified: "270c-1f3fe",
				native: "✌🏾"
			},
			{
				unified: "270c-1f3ff",
				native: "✌🏿"
			}
		],
		version: 1
	},
	crossed_fingers: {
		id: "crossed_fingers",
		name: "Crossed Fingers",
		keywords: [
			"hand",
			"with",
			"index",
			"and",
			"middle",
			"good",
			"lucky"
		],
		skins: [
			{
				unified: "1f91e",
				native: "🤞"
			},
			{
				unified: "1f91e-1f3fb",
				native: "🤞🏻"
			},
			{
				unified: "1f91e-1f3fc",
				native: "🤞🏼"
			},
			{
				unified: "1f91e-1f3fd",
				native: "🤞🏽"
			},
			{
				unified: "1f91e-1f3fe",
				native: "🤞🏾"
			},
			{
				unified: "1f91e-1f3ff",
				native: "🤞🏿"
			}
		],
		version: 3
	},
	hand_with_index_finger_and_thumb_crossed: {
		id: "hand_with_index_finger_and_thumb_crossed",
		name: "Hand with Index Finger and Thumb Crossed",
		keywords: [
			"heart",
			"love",
			"money",
			"expensive"
		],
		skins: [
			{
				unified: "1faf0",
				native: "🫰"
			},
			{
				unified: "1faf0-1f3fb",
				native: "🫰🏻"
			},
			{
				unified: "1faf0-1f3fc",
				native: "🫰🏼"
			},
			{
				unified: "1faf0-1f3fd",
				native: "🫰🏽"
			},
			{
				unified: "1faf0-1f3fe",
				native: "🫰🏾"
			},
			{
				unified: "1faf0-1f3ff",
				native: "🫰🏿"
			}
		],
		version: 14
	},
	i_love_you_hand_sign: {
		id: "i_love_you_hand_sign",
		name: "Love-You Gesture",
		keywords: [
			"i",
			"love",
			"you",
			"hand",
			"sign",
			"fingers"
		],
		skins: [
			{
				unified: "1f91f",
				native: "🤟"
			},
			{
				unified: "1f91f-1f3fb",
				native: "🤟🏻"
			},
			{
				unified: "1f91f-1f3fc",
				native: "🤟🏼"
			},
			{
				unified: "1f91f-1f3fd",
				native: "🤟🏽"
			},
			{
				unified: "1f91f-1f3fe",
				native: "🤟🏾"
			},
			{
				unified: "1f91f-1f3ff",
				native: "🤟🏿"
			}
		],
		version: 5
	},
	the_horns: {
		id: "the_horns",
		name: "Sign of the Horns",
		keywords: [
			"hand",
			"fingers",
			"evil",
			"eye",
			"rock",
			"on"
		],
		skins: [
			{
				unified: "1f918",
				native: "🤘"
			},
			{
				unified: "1f918-1f3fb",
				native: "🤘🏻"
			},
			{
				unified: "1f918-1f3fc",
				native: "🤘🏼"
			},
			{
				unified: "1f918-1f3fd",
				native: "🤘🏽"
			},
			{
				unified: "1f918-1f3fe",
				native: "🤘🏾"
			},
			{
				unified: "1f918-1f3ff",
				native: "🤘🏿"
			}
		],
		version: 1
	},
	call_me_hand: {
		id: "call_me_hand",
		name: "Call Me Hand",
		keywords: [
			"hands",
			"gesture",
			"shaka"
		],
		skins: [
			{
				unified: "1f919",
				native: "🤙"
			},
			{
				unified: "1f919-1f3fb",
				native: "🤙🏻"
			},
			{
				unified: "1f919-1f3fc",
				native: "🤙🏼"
			},
			{
				unified: "1f919-1f3fd",
				native: "🤙🏽"
			},
			{
				unified: "1f919-1f3fe",
				native: "🤙🏾"
			},
			{
				unified: "1f919-1f3ff",
				native: "🤙🏿"
			}
		],
		version: 3
	},
	point_left: {
		id: "point_left",
		name: "Backhand Index Pointing Left",
		keywords: [
			"point",
			"direction",
			"fingers",
			"hand"
		],
		skins: [
			{
				unified: "1f448",
				native: "👈"
			},
			{
				unified: "1f448-1f3fb",
				native: "👈🏻"
			},
			{
				unified: "1f448-1f3fc",
				native: "👈🏼"
			},
			{
				unified: "1f448-1f3fd",
				native: "👈🏽"
			},
			{
				unified: "1f448-1f3fe",
				native: "👈🏾"
			},
			{
				unified: "1f448-1f3ff",
				native: "👈🏿"
			}
		],
		version: 1
	},
	point_right: {
		id: "point_right",
		name: "Backhand Index Pointing Right",
		keywords: [
			"point",
			"fingers",
			"hand",
			"direction"
		],
		skins: [
			{
				unified: "1f449",
				native: "👉"
			},
			{
				unified: "1f449-1f3fb",
				native: "👉🏻"
			},
			{
				unified: "1f449-1f3fc",
				native: "👉🏼"
			},
			{
				unified: "1f449-1f3fd",
				native: "👉🏽"
			},
			{
				unified: "1f449-1f3fe",
				native: "👉🏾"
			},
			{
				unified: "1f449-1f3ff",
				native: "👉🏿"
			}
		],
		version: 1
	},
	point_up_2: {
		id: "point_up_2",
		name: "Backhand Index Pointing Up",
		keywords: [
			"point",
			"2",
			"fingers",
			"hand",
			"direction"
		],
		skins: [
			{
				unified: "1f446",
				native: "👆"
			},
			{
				unified: "1f446-1f3fb",
				native: "👆🏻"
			},
			{
				unified: "1f446-1f3fc",
				native: "👆🏼"
			},
			{
				unified: "1f446-1f3fd",
				native: "👆🏽"
			},
			{
				unified: "1f446-1f3fe",
				native: "👆🏾"
			},
			{
				unified: "1f446-1f3ff",
				native: "👆🏿"
			}
		],
		version: 1
	},
	middle_finger: {
		id: "middle_finger",
		name: "Middle Finger",
		keywords: [
			"reversed",
			"hand",
			"with",
			"extended",
			"fingers",
			"rude",
			"flipping"
		],
		skins: [
			{
				unified: "1f595",
				native: "🖕"
			},
			{
				unified: "1f595-1f3fb",
				native: "🖕🏻"
			},
			{
				unified: "1f595-1f3fc",
				native: "🖕🏼"
			},
			{
				unified: "1f595-1f3fd",
				native: "🖕🏽"
			},
			{
				unified: "1f595-1f3fe",
				native: "🖕🏾"
			},
			{
				unified: "1f595-1f3ff",
				native: "🖕🏿"
			}
		],
		version: 1
	},
	point_down: {
		id: "point_down",
		name: "Backhand Index Pointing Down",
		keywords: [
			"point",
			"fingers",
			"hand",
			"direction"
		],
		skins: [
			{
				unified: "1f447",
				native: "👇"
			},
			{
				unified: "1f447-1f3fb",
				native: "👇🏻"
			},
			{
				unified: "1f447-1f3fc",
				native: "👇🏼"
			},
			{
				unified: "1f447-1f3fd",
				native: "👇🏽"
			},
			{
				unified: "1f447-1f3fe",
				native: "👇🏾"
			},
			{
				unified: "1f447-1f3ff",
				native: "👇🏿"
			}
		],
		version: 1
	},
	point_up: {
		id: "point_up",
		name: "Index Pointing Up",
		keywords: [
			"point",
			"hand",
			"fingers",
			"direction"
		],
		skins: [
			{
				unified: "261d-fe0f",
				native: "☝️"
			},
			{
				unified: "261d-1f3fb",
				native: "☝🏻"
			},
			{
				unified: "261d-1f3fc",
				native: "☝🏼"
			},
			{
				unified: "261d-1f3fd",
				native: "☝🏽"
			},
			{
				unified: "261d-1f3fe",
				native: "☝🏾"
			},
			{
				unified: "261d-1f3ff",
				native: "☝🏿"
			}
		],
		version: 1
	},
	index_pointing_at_the_viewer: {
		id: "index_pointing_at_the_viewer",
		name: "Index Pointing at the Viewer",
		keywords: [
			"you",
			"recruit"
		],
		skins: [
			{
				unified: "1faf5",
				native: "🫵"
			},
			{
				unified: "1faf5-1f3fb",
				native: "🫵🏻"
			},
			{
				unified: "1faf5-1f3fc",
				native: "🫵🏼"
			},
			{
				unified: "1faf5-1f3fd",
				native: "🫵🏽"
			},
			{
				unified: "1faf5-1f3fe",
				native: "🫵🏾"
			},
			{
				unified: "1faf5-1f3ff",
				native: "🫵🏿"
			}
		],
		version: 14
	},
	"+1": {
		id: "+1",
		name: "Thumbs Up",
		keywords: [
			"+1",
			"thumbsup",
			"yes",
			"awesome",
			"good",
			"agree",
			"accept",
			"cool",
			"hand",
			"like"
		],
		skins: [
			{
				unified: "1f44d",
				native: "👍"
			},
			{
				unified: "1f44d-1f3fb",
				native: "👍🏻"
			},
			{
				unified: "1f44d-1f3fc",
				native: "👍🏼"
			},
			{
				unified: "1f44d-1f3fd",
				native: "👍🏽"
			},
			{
				unified: "1f44d-1f3fe",
				native: "👍🏾"
			},
			{
				unified: "1f44d-1f3ff",
				native: "👍🏿"
			}
		],
		version: 1
	},
	"-1": {
		id: "-1",
		name: "Thumbs Down",
		keywords: [
			"-1",
			"thumbsdown",
			"no",
			"dislike",
			"hand"
		],
		skins: [
			{
				unified: "1f44e",
				native: "👎"
			},
			{
				unified: "1f44e-1f3fb",
				native: "👎🏻"
			},
			{
				unified: "1f44e-1f3fc",
				native: "👎🏼"
			},
			{
				unified: "1f44e-1f3fd",
				native: "👎🏽"
			},
			{
				unified: "1f44e-1f3fe",
				native: "👎🏾"
			},
			{
				unified: "1f44e-1f3ff",
				native: "👎🏿"
			}
		],
		version: 1
	},
	fist: {
		id: "fist",
		name: "Raised Fist",
		keywords: [
			"fingers",
			"hand",
			"grasp"
		],
		skins: [
			{
				unified: "270a",
				native: "✊"
			},
			{
				unified: "270a-1f3fb",
				native: "✊🏻"
			},
			{
				unified: "270a-1f3fc",
				native: "✊🏼"
			},
			{
				unified: "270a-1f3fd",
				native: "✊🏽"
			},
			{
				unified: "270a-1f3fe",
				native: "✊🏾"
			},
			{
				unified: "270a-1f3ff",
				native: "✊🏿"
			}
		],
		version: 1
	},
	facepunch: {
		id: "facepunch",
		name: "Oncoming Fist",
		keywords: [
			"facepunch",
			"punch",
			"angry",
			"violence",
			"hit",
			"attack",
			"hand"
		],
		skins: [
			{
				unified: "1f44a",
				native: "👊"
			},
			{
				unified: "1f44a-1f3fb",
				native: "👊🏻"
			},
			{
				unified: "1f44a-1f3fc",
				native: "👊🏼"
			},
			{
				unified: "1f44a-1f3fd",
				native: "👊🏽"
			},
			{
				unified: "1f44a-1f3fe",
				native: "👊🏾"
			},
			{
				unified: "1f44a-1f3ff",
				native: "👊🏿"
			}
		],
		version: 1
	},
	"left-facing_fist": {
		id: "left-facing_fist",
		name: "Left-Facing Fist",
		keywords: [
			"left",
			"facing",
			"hand",
			"fistbump"
		],
		skins: [
			{
				unified: "1f91b",
				native: "🤛"
			},
			{
				unified: "1f91b-1f3fb",
				native: "🤛🏻"
			},
			{
				unified: "1f91b-1f3fc",
				native: "🤛🏼"
			},
			{
				unified: "1f91b-1f3fd",
				native: "🤛🏽"
			},
			{
				unified: "1f91b-1f3fe",
				native: "🤛🏾"
			},
			{
				unified: "1f91b-1f3ff",
				native: "🤛🏿"
			}
		],
		version: 3
	},
	"right-facing_fist": {
		id: "right-facing_fist",
		name: "Right-Facing Fist",
		keywords: [
			"right",
			"facing",
			"hand",
			"fistbump"
		],
		skins: [
			{
				unified: "1f91c",
				native: "🤜"
			},
			{
				unified: "1f91c-1f3fb",
				native: "🤜🏻"
			},
			{
				unified: "1f91c-1f3fc",
				native: "🤜🏼"
			},
			{
				unified: "1f91c-1f3fd",
				native: "🤜🏽"
			},
			{
				unified: "1f91c-1f3fe",
				native: "🤜🏾"
			},
			{
				unified: "1f91c-1f3ff",
				native: "🤜🏿"
			}
		],
		version: 3
	},
	clap: {
		id: "clap",
		name: "Clapping Hands",
		keywords: [
			"clap",
			"praise",
			"applause",
			"congrats",
			"yay"
		],
		skins: [
			{
				unified: "1f44f",
				native: "👏"
			},
			{
				unified: "1f44f-1f3fb",
				native: "👏🏻"
			},
			{
				unified: "1f44f-1f3fc",
				native: "👏🏼"
			},
			{
				unified: "1f44f-1f3fd",
				native: "👏🏽"
			},
			{
				unified: "1f44f-1f3fe",
				native: "👏🏾"
			},
			{
				unified: "1f44f-1f3ff",
				native: "👏🏿"
			}
		],
		version: 1
	},
	raised_hands: {
		id: "raised_hands",
		name: "Raising Hands",
		keywords: [
			"raised",
			"gesture",
			"hooray",
			"yea",
			"celebration"
		],
		skins: [
			{
				unified: "1f64c",
				native: "🙌"
			},
			{
				unified: "1f64c-1f3fb",
				native: "🙌🏻"
			},
			{
				unified: "1f64c-1f3fc",
				native: "🙌🏼"
			},
			{
				unified: "1f64c-1f3fd",
				native: "🙌🏽"
			},
			{
				unified: "1f64c-1f3fe",
				native: "🙌🏾"
			},
			{
				unified: "1f64c-1f3ff",
				native: "🙌🏿"
			}
		],
		version: 1
	},
	heart_hands: {
		id: "heart_hands",
		name: "Heart Hands",
		keywords: [
			"love",
			"appreciation",
			"support"
		],
		skins: [
			{
				unified: "1faf6",
				native: "🫶"
			},
			{
				unified: "1faf6-1f3fb",
				native: "🫶🏻"
			},
			{
				unified: "1faf6-1f3fc",
				native: "🫶🏼"
			},
			{
				unified: "1faf6-1f3fd",
				native: "🫶🏽"
			},
			{
				unified: "1faf6-1f3fe",
				native: "🫶🏾"
			},
			{
				unified: "1faf6-1f3ff",
				native: "🫶🏿"
			}
		],
		version: 14
	},
	open_hands: {
		id: "open_hands",
		name: "Open Hands",
		keywords: [
			"fingers",
			"butterfly"
		],
		skins: [
			{
				unified: "1f450",
				native: "👐"
			},
			{
				unified: "1f450-1f3fb",
				native: "👐🏻"
			},
			{
				unified: "1f450-1f3fc",
				native: "👐🏼"
			},
			{
				unified: "1f450-1f3fd",
				native: "👐🏽"
			},
			{
				unified: "1f450-1f3fe",
				native: "👐🏾"
			},
			{
				unified: "1f450-1f3ff",
				native: "👐🏿"
			}
		],
		version: 1
	},
	palms_up_together: {
		id: "palms_up_together",
		name: "Palms Up Together",
		keywords: [
			"hands",
			"gesture",
			"cupped",
			"prayer"
		],
		skins: [
			{
				unified: "1f932",
				native: "🤲"
			},
			{
				unified: "1f932-1f3fb",
				native: "🤲🏻"
			},
			{
				unified: "1f932-1f3fc",
				native: "🤲🏼"
			},
			{
				unified: "1f932-1f3fd",
				native: "🤲🏽"
			},
			{
				unified: "1f932-1f3fe",
				native: "🤲🏾"
			},
			{
				unified: "1f932-1f3ff",
				native: "🤲🏿"
			}
		],
		version: 5
	},
	handshake: {
		id: "handshake",
		name: "Handshake",
		keywords: [
			"agreement",
			"shake"
		],
		skins: [
			{
				unified: "1f91d",
				native: "🤝"
			},
			{
				unified: "1f91d-1f3fb",
				native: "🤝🏻"
			},
			{
				unified: "1f91d-1f3fc",
				native: "🤝🏼"
			},
			{
				unified: "1f91d-1f3fd",
				native: "🤝🏽"
			},
			{
				unified: "1f91d-1f3fe",
				native: "🤝🏾"
			},
			{
				unified: "1f91d-1f3ff",
				native: "🤝🏿"
			}
		],
		version: 3
	},
	pray: {
		id: "pray",
		name: "Folded Hands",
		keywords: [
			"pray",
			"please",
			"hope",
			"wish",
			"namaste",
			"highfive",
			"high",
			"five",
			"thank",
			"you",
			"thanks",
			"appreciate"
		],
		skins: [
			{
				unified: "1f64f",
				native: "🙏"
			},
			{
				unified: "1f64f-1f3fb",
				native: "🙏🏻"
			},
			{
				unified: "1f64f-1f3fc",
				native: "🙏🏼"
			},
			{
				unified: "1f64f-1f3fd",
				native: "🙏🏽"
			},
			{
				unified: "1f64f-1f3fe",
				native: "🙏🏾"
			},
			{
				unified: "1f64f-1f3ff",
				native: "🙏🏿"
			}
		],
		version: 1
	},
	writing_hand: {
		id: "writing_hand",
		name: "Writing Hand",
		keywords: [
			"lower",
			"left",
			"ballpoint",
			"pen",
			"stationery",
			"write",
			"compose"
		],
		skins: [
			{
				unified: "270d-fe0f",
				native: "✍️"
			},
			{
				unified: "270d-1f3fb",
				native: "✍🏻"
			},
			{
				unified: "270d-1f3fc",
				native: "✍🏼"
			},
			{
				unified: "270d-1f3fd",
				native: "✍🏽"
			},
			{
				unified: "270d-1f3fe",
				native: "✍🏾"
			},
			{
				unified: "270d-1f3ff",
				native: "✍🏿"
			}
		],
		version: 1
	},
	nail_care: {
		id: "nail_care",
		name: "Nail Polish",
		keywords: [
			"care",
			"beauty",
			"manicure",
			"finger",
			"fashion"
		],
		skins: [
			{
				unified: "1f485",
				native: "💅"
			},
			{
				unified: "1f485-1f3fb",
				native: "💅🏻"
			},
			{
				unified: "1f485-1f3fc",
				native: "💅🏼"
			},
			{
				unified: "1f485-1f3fd",
				native: "💅🏽"
			},
			{
				unified: "1f485-1f3fe",
				native: "💅🏾"
			},
			{
				unified: "1f485-1f3ff",
				native: "💅🏿"
			}
		],
		version: 1
	},
	selfie: {
		id: "selfie",
		name: "Selfie",
		keywords: [
			"camera",
			"phone"
		],
		skins: [
			{
				unified: "1f933",
				native: "🤳"
			},
			{
				unified: "1f933-1f3fb",
				native: "🤳🏻"
			},
			{
				unified: "1f933-1f3fc",
				native: "🤳🏼"
			},
			{
				unified: "1f933-1f3fd",
				native: "🤳🏽"
			},
			{
				unified: "1f933-1f3fe",
				native: "🤳🏾"
			},
			{
				unified: "1f933-1f3ff",
				native: "🤳🏿"
			}
		],
		version: 3
	},
	muscle: {
		id: "muscle",
		name: "Flexed Biceps",
		keywords: [
			"muscle",
			"arm",
			"flex",
			"hand",
			"summer",
			"strong"
		],
		skins: [
			{
				unified: "1f4aa",
				native: "💪"
			},
			{
				unified: "1f4aa-1f3fb",
				native: "💪🏻"
			},
			{
				unified: "1f4aa-1f3fc",
				native: "💪🏼"
			},
			{
				unified: "1f4aa-1f3fd",
				native: "💪🏽"
			},
			{
				unified: "1f4aa-1f3fe",
				native: "💪🏾"
			},
			{
				unified: "1f4aa-1f3ff",
				native: "💪🏿"
			}
		],
		version: 1
	},
	mechanical_arm: {
		id: "mechanical_arm",
		name: "Mechanical Arm",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9be",
				native: "🦾"
			}
		],
		version: 12
	},
	mechanical_leg: {
		id: "mechanical_leg",
		name: "Mechanical Leg",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9bf",
				native: "🦿"
			}
		],
		version: 12
	},
	leg: {
		id: "leg",
		name: "Leg",
		keywords: [
			"kick",
			"limb"
		],
		skins: [
			{
				unified: "1f9b5",
				native: "🦵"
			},
			{
				unified: "1f9b5-1f3fb",
				native: "🦵🏻"
			},
			{
				unified: "1f9b5-1f3fc",
				native: "🦵🏼"
			},
			{
				unified: "1f9b5-1f3fd",
				native: "🦵🏽"
			},
			{
				unified: "1f9b5-1f3fe",
				native: "🦵🏾"
			},
			{
				unified: "1f9b5-1f3ff",
				native: "🦵🏿"
			}
		],
		version: 11
	},
	foot: {
		id: "foot",
		name: "Foot",
		keywords: [
			"kick",
			"stomp"
		],
		skins: [
			{
				unified: "1f9b6",
				native: "🦶"
			},
			{
				unified: "1f9b6-1f3fb",
				native: "🦶🏻"
			},
			{
				unified: "1f9b6-1f3fc",
				native: "🦶🏼"
			},
			{
				unified: "1f9b6-1f3fd",
				native: "🦶🏽"
			},
			{
				unified: "1f9b6-1f3fe",
				native: "🦶🏾"
			},
			{
				unified: "1f9b6-1f3ff",
				native: "🦶🏿"
			}
		],
		version: 11
	},
	ear: {
		id: "ear",
		name: "Ear",
		keywords: [
			"face",
			"hear",
			"sound",
			"listen"
		],
		skins: [
			{
				unified: "1f442",
				native: "👂"
			},
			{
				unified: "1f442-1f3fb",
				native: "👂🏻"
			},
			{
				unified: "1f442-1f3fc",
				native: "👂🏼"
			},
			{
				unified: "1f442-1f3fd",
				native: "👂🏽"
			},
			{
				unified: "1f442-1f3fe",
				native: "👂🏾"
			},
			{
				unified: "1f442-1f3ff",
				native: "👂🏿"
			}
		],
		version: 1
	},
	ear_with_hearing_aid: {
		id: "ear_with_hearing_aid",
		name: "Ear with Hearing Aid",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9bb",
				native: "🦻"
			},
			{
				unified: "1f9bb-1f3fb",
				native: "🦻🏻"
			},
			{
				unified: "1f9bb-1f3fc",
				native: "🦻🏼"
			},
			{
				unified: "1f9bb-1f3fd",
				native: "🦻🏽"
			},
			{
				unified: "1f9bb-1f3fe",
				native: "🦻🏾"
			},
			{
				unified: "1f9bb-1f3ff",
				native: "🦻🏿"
			}
		],
		version: 12
	},
	nose: {
		id: "nose",
		name: "Nose",
		keywords: [
			"smell",
			"sniff"
		],
		skins: [
			{
				unified: "1f443",
				native: "👃"
			},
			{
				unified: "1f443-1f3fb",
				native: "👃🏻"
			},
			{
				unified: "1f443-1f3fc",
				native: "👃🏼"
			},
			{
				unified: "1f443-1f3fd",
				native: "👃🏽"
			},
			{
				unified: "1f443-1f3fe",
				native: "👃🏾"
			},
			{
				unified: "1f443-1f3ff",
				native: "👃🏿"
			}
		],
		version: 1
	},
	brain: {
		id: "brain",
		name: "Brain",
		keywords: [
			"smart",
			"intelligent"
		],
		skins: [
			{
				unified: "1f9e0",
				native: "🧠"
			}
		],
		version: 5
	},
	anatomical_heart: {
		id: "anatomical_heart",
		name: "Anatomical Heart",
		keywords: [
			"health",
			"heartbeat"
		],
		skins: [
			{
				unified: "1fac0",
				native: "🫀"
			}
		],
		version: 13
	},
	lungs: {
		id: "lungs",
		name: "Lungs",
		keywords: [
			"breathe"
		],
		skins: [
			{
				unified: "1fac1",
				native: "🫁"
			}
		],
		version: 13
	},
	tooth: {
		id: "tooth",
		name: "Tooth",
		keywords: [
			"teeth",
			"dentist"
		],
		skins: [
			{
				unified: "1f9b7",
				native: "🦷"
			}
		],
		version: 11
	},
	bone: {
		id: "bone",
		name: "Bone",
		keywords: [
			"skeleton"
		],
		skins: [
			{
				unified: "1f9b4",
				native: "🦴"
			}
		],
		version: 11
	},
	eyes: {
		id: "eyes",
		name: "Eyes",
		keywords: [
			"look",
			"watch",
			"stalk",
			"peek",
			"see"
		],
		skins: [
			{
				unified: "1f440",
				native: "👀"
			}
		],
		version: 1
	},
	eye: {
		id: "eye",
		name: "Eye",
		keywords: [
			"face",
			"look",
			"see",
			"watch",
			"stare"
		],
		skins: [
			{
				unified: "1f441-fe0f",
				native: "👁️"
			}
		],
		version: 1
	},
	tongue: {
		id: "tongue",
		name: "Tongue",
		keywords: [
			"mouth",
			"playful"
		],
		skins: [
			{
				unified: "1f445",
				native: "👅"
			}
		],
		version: 1
	},
	lips: {
		id: "lips",
		name: "Mouth",
		keywords: [
			"lips",
			"kiss"
		],
		skins: [
			{
				unified: "1f444",
				native: "👄"
			}
		],
		version: 1
	},
	biting_lip: {
		id: "biting_lip",
		name: "Biting Lip",
		keywords: [
			"flirt",
			"sexy",
			"pain",
			"worry"
		],
		skins: [
			{
				unified: "1fae6",
				native: "🫦"
			}
		],
		version: 14
	},
	baby: {
		id: "baby",
		name: "Baby",
		keywords: [
			"child",
			"boy",
			"girl",
			"toddler"
		],
		skins: [
			{
				unified: "1f476",
				native: "👶"
			},
			{
				unified: "1f476-1f3fb",
				native: "👶🏻"
			},
			{
				unified: "1f476-1f3fc",
				native: "👶🏼"
			},
			{
				unified: "1f476-1f3fd",
				native: "👶🏽"
			},
			{
				unified: "1f476-1f3fe",
				native: "👶🏾"
			},
			{
				unified: "1f476-1f3ff",
				native: "👶🏿"
			}
		],
		version: 1
	},
	child: {
		id: "child",
		name: "Child",
		keywords: [
			"gender",
			"neutral",
			"young"
		],
		skins: [
			{
				unified: "1f9d2",
				native: "🧒"
			},
			{
				unified: "1f9d2-1f3fb",
				native: "🧒🏻"
			},
			{
				unified: "1f9d2-1f3fc",
				native: "🧒🏼"
			},
			{
				unified: "1f9d2-1f3fd",
				native: "🧒🏽"
			},
			{
				unified: "1f9d2-1f3fe",
				native: "🧒🏾"
			},
			{
				unified: "1f9d2-1f3ff",
				native: "🧒🏿"
			}
		],
		version: 5
	},
	boy: {
		id: "boy",
		name: "Boy",
		keywords: [
			"man",
			"male",
			"guy",
			"teenager"
		],
		skins: [
			{
				unified: "1f466",
				native: "👦"
			},
			{
				unified: "1f466-1f3fb",
				native: "👦🏻"
			},
			{
				unified: "1f466-1f3fc",
				native: "👦🏼"
			},
			{
				unified: "1f466-1f3fd",
				native: "👦🏽"
			},
			{
				unified: "1f466-1f3fe",
				native: "👦🏾"
			},
			{
				unified: "1f466-1f3ff",
				native: "👦🏿"
			}
		],
		version: 1
	},
	girl: {
		id: "girl",
		name: "Girl",
		keywords: [
			"female",
			"woman",
			"teenager"
		],
		skins: [
			{
				unified: "1f467",
				native: "👧"
			},
			{
				unified: "1f467-1f3fb",
				native: "👧🏻"
			},
			{
				unified: "1f467-1f3fc",
				native: "👧🏼"
			},
			{
				unified: "1f467-1f3fd",
				native: "👧🏽"
			},
			{
				unified: "1f467-1f3fe",
				native: "👧🏾"
			},
			{
				unified: "1f467-1f3ff",
				native: "👧🏿"
			}
		],
		version: 1
	},
	adult: {
		id: "adult",
		name: "Adult",
		keywords: [
			"person",
			"gender",
			"neutral"
		],
		skins: [
			{
				unified: "1f9d1",
				native: "🧑"
			},
			{
				unified: "1f9d1-1f3fb",
				native: "🧑🏻"
			},
			{
				unified: "1f9d1-1f3fc",
				native: "🧑🏼"
			},
			{
				unified: "1f9d1-1f3fd",
				native: "🧑🏽"
			},
			{
				unified: "1f9d1-1f3fe",
				native: "🧑🏾"
			},
			{
				unified: "1f9d1-1f3ff",
				native: "🧑🏿"
			}
		],
		version: 5
	},
	person_with_blond_hair: {
		id: "person_with_blond_hair",
		name: "Person Blond Hair",
		keywords: [
			"with",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f471",
				native: "👱"
			},
			{
				unified: "1f471-1f3fb",
				native: "👱🏻"
			},
			{
				unified: "1f471-1f3fc",
				native: "👱🏼"
			},
			{
				unified: "1f471-1f3fd",
				native: "👱🏽"
			},
			{
				unified: "1f471-1f3fe",
				native: "👱🏾"
			},
			{
				unified: "1f471-1f3ff",
				native: "👱🏿"
			}
		],
		version: 1
	},
	man: {
		id: "man",
		name: "Man",
		keywords: [
			"mustache",
			"father",
			"dad",
			"guy",
			"classy",
			"sir",
			"moustache"
		],
		skins: [
			{
				unified: "1f468",
				native: "👨"
			},
			{
				unified: "1f468-1f3fb",
				native: "👨🏻"
			},
			{
				unified: "1f468-1f3fc",
				native: "👨🏼"
			},
			{
				unified: "1f468-1f3fd",
				native: "👨🏽"
			},
			{
				unified: "1f468-1f3fe",
				native: "👨🏾"
			},
			{
				unified: "1f468-1f3ff",
				native: "👨🏿"
			}
		],
		version: 1
	},
	bearded_person: {
		id: "bearded_person",
		name: "Person Beard",
		keywords: [
			"bearded",
			"man",
			"bewhiskered"
		],
		skins: [
			{
				unified: "1f9d4",
				native: "🧔"
			},
			{
				unified: "1f9d4-1f3fb",
				native: "🧔🏻"
			},
			{
				unified: "1f9d4-1f3fc",
				native: "🧔🏼"
			},
			{
				unified: "1f9d4-1f3fd",
				native: "🧔🏽"
			},
			{
				unified: "1f9d4-1f3fe",
				native: "🧔🏾"
			},
			{
				unified: "1f9d4-1f3ff",
				native: "🧔🏿"
			}
		],
		version: 5
	},
	man_with_beard: {
		id: "man_with_beard",
		name: "Man: Beard",
		keywords: [
			"man",
			"with",
			"facial",
			"hair"
		],
		skins: [
			{
				unified: "1f9d4-200d-2642-fe0f",
				native: "🧔‍♂️"
			},
			{
				unified: "1f9d4-1f3fb-200d-2642-fe0f",
				native: "🧔🏻‍♂️"
			},
			{
				unified: "1f9d4-1f3fc-200d-2642-fe0f",
				native: "🧔🏼‍♂️"
			},
			{
				unified: "1f9d4-1f3fd-200d-2642-fe0f",
				native: "🧔🏽‍♂️"
			},
			{
				unified: "1f9d4-1f3fe-200d-2642-fe0f",
				native: "🧔🏾‍♂️"
			},
			{
				unified: "1f9d4-1f3ff-200d-2642-fe0f",
				native: "🧔🏿‍♂️"
			}
		],
		version: 13.1
	},
	woman_with_beard: {
		id: "woman_with_beard",
		name: "Woman: Beard",
		keywords: [
			"woman",
			"with",
			"facial",
			"hair"
		],
		skins: [
			{
				unified: "1f9d4-200d-2640-fe0f",
				native: "🧔‍♀️"
			},
			{
				unified: "1f9d4-1f3fb-200d-2640-fe0f",
				native: "🧔🏻‍♀️"
			},
			{
				unified: "1f9d4-1f3fc-200d-2640-fe0f",
				native: "🧔🏼‍♀️"
			},
			{
				unified: "1f9d4-1f3fd-200d-2640-fe0f",
				native: "🧔🏽‍♀️"
			},
			{
				unified: "1f9d4-1f3fe-200d-2640-fe0f",
				native: "🧔🏾‍♀️"
			},
			{
				unified: "1f9d4-1f3ff-200d-2640-fe0f",
				native: "🧔🏿‍♀️"
			}
		],
		version: 13.1
	},
	red_haired_man: {
		id: "red_haired_man",
		name: "Man: Red Hair",
		keywords: [
			"haired",
			"man",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f468-200d-1f9b0",
				native: "👨‍🦰"
			},
			{
				unified: "1f468-1f3fb-200d-1f9b0",
				native: "👨🏻‍🦰"
			},
			{
				unified: "1f468-1f3fc-200d-1f9b0",
				native: "👨🏼‍🦰"
			},
			{
				unified: "1f468-1f3fd-200d-1f9b0",
				native: "👨🏽‍🦰"
			},
			{
				unified: "1f468-1f3fe-200d-1f9b0",
				native: "👨🏾‍🦰"
			},
			{
				unified: "1f468-1f3ff-200d-1f9b0",
				native: "👨🏿‍🦰"
			}
		],
		version: 11
	},
	curly_haired_man: {
		id: "curly_haired_man",
		name: "Man: Curly Hair",
		keywords: [
			"haired",
			"man",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f468-200d-1f9b1",
				native: "👨‍🦱"
			},
			{
				unified: "1f468-1f3fb-200d-1f9b1",
				native: "👨🏻‍🦱"
			},
			{
				unified: "1f468-1f3fc-200d-1f9b1",
				native: "👨🏼‍🦱"
			},
			{
				unified: "1f468-1f3fd-200d-1f9b1",
				native: "👨🏽‍🦱"
			},
			{
				unified: "1f468-1f3fe-200d-1f9b1",
				native: "👨🏾‍🦱"
			},
			{
				unified: "1f468-1f3ff-200d-1f9b1",
				native: "👨🏿‍🦱"
			}
		],
		version: 11
	},
	white_haired_man: {
		id: "white_haired_man",
		name: "Man: White Hair",
		keywords: [
			"haired",
			"man",
			"old",
			"elder"
		],
		skins: [
			{
				unified: "1f468-200d-1f9b3",
				native: "👨‍🦳"
			},
			{
				unified: "1f468-1f3fb-200d-1f9b3",
				native: "👨🏻‍🦳"
			},
			{
				unified: "1f468-1f3fc-200d-1f9b3",
				native: "👨🏼‍🦳"
			},
			{
				unified: "1f468-1f3fd-200d-1f9b3",
				native: "👨🏽‍🦳"
			},
			{
				unified: "1f468-1f3fe-200d-1f9b3",
				native: "👨🏾‍🦳"
			},
			{
				unified: "1f468-1f3ff-200d-1f9b3",
				native: "👨🏿‍🦳"
			}
		],
		version: 11
	},
	bald_man: {
		id: "bald_man",
		name: "Man: Bald",
		keywords: [
			"man",
			"hairless"
		],
		skins: [
			{
				unified: "1f468-200d-1f9b2",
				native: "👨‍🦲"
			},
			{
				unified: "1f468-1f3fb-200d-1f9b2",
				native: "👨🏻‍🦲"
			},
			{
				unified: "1f468-1f3fc-200d-1f9b2",
				native: "👨🏼‍🦲"
			},
			{
				unified: "1f468-1f3fd-200d-1f9b2",
				native: "👨🏽‍🦲"
			},
			{
				unified: "1f468-1f3fe-200d-1f9b2",
				native: "👨🏾‍🦲"
			},
			{
				unified: "1f468-1f3ff-200d-1f9b2",
				native: "👨🏿‍🦲"
			}
		],
		version: 11
	},
	woman: {
		id: "woman",
		name: "Woman",
		keywords: [
			"female",
			"girls",
			"lady"
		],
		skins: [
			{
				unified: "1f469",
				native: "👩"
			},
			{
				unified: "1f469-1f3fb",
				native: "👩🏻"
			},
			{
				unified: "1f469-1f3fc",
				native: "👩🏼"
			},
			{
				unified: "1f469-1f3fd",
				native: "👩🏽"
			},
			{
				unified: "1f469-1f3fe",
				native: "👩🏾"
			},
			{
				unified: "1f469-1f3ff",
				native: "👩🏿"
			}
		],
		version: 1
	},
	red_haired_woman: {
		id: "red_haired_woman",
		name: "Woman: Red Hair",
		keywords: [
			"haired",
			"woman",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f469-200d-1f9b0",
				native: "👩‍🦰"
			},
			{
				unified: "1f469-1f3fb-200d-1f9b0",
				native: "👩🏻‍🦰"
			},
			{
				unified: "1f469-1f3fc-200d-1f9b0",
				native: "👩🏼‍🦰"
			},
			{
				unified: "1f469-1f3fd-200d-1f9b0",
				native: "👩🏽‍🦰"
			},
			{
				unified: "1f469-1f3fe-200d-1f9b0",
				native: "👩🏾‍🦰"
			},
			{
				unified: "1f469-1f3ff-200d-1f9b0",
				native: "👩🏿‍🦰"
			}
		],
		version: 11
	},
	red_haired_person: {
		id: "red_haired_person",
		name: "Person: Red Hair",
		keywords: [
			"haired",
			"person",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9b0",
				native: "🧑‍🦰"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9b0",
				native: "🧑🏻‍🦰"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9b0",
				native: "🧑🏼‍🦰"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9b0",
				native: "🧑🏽‍🦰"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9b0",
				native: "🧑🏾‍🦰"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9b0",
				native: "🧑🏿‍🦰"
			}
		],
		version: 12.1
	},
	curly_haired_woman: {
		id: "curly_haired_woman",
		name: "Woman: Curly Hair",
		keywords: [
			"haired",
			"woman",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f469-200d-1f9b1",
				native: "👩‍🦱"
			},
			{
				unified: "1f469-1f3fb-200d-1f9b1",
				native: "👩🏻‍🦱"
			},
			{
				unified: "1f469-1f3fc-200d-1f9b1",
				native: "👩🏼‍🦱"
			},
			{
				unified: "1f469-1f3fd-200d-1f9b1",
				native: "👩🏽‍🦱"
			},
			{
				unified: "1f469-1f3fe-200d-1f9b1",
				native: "👩🏾‍🦱"
			},
			{
				unified: "1f469-1f3ff-200d-1f9b1",
				native: "👩🏿‍🦱"
			}
		],
		version: 11
	},
	curly_haired_person: {
		id: "curly_haired_person",
		name: "Person: Curly Hair",
		keywords: [
			"haired",
			"person",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9b1",
				native: "🧑‍🦱"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9b1",
				native: "🧑🏻‍🦱"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9b1",
				native: "🧑🏼‍🦱"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9b1",
				native: "🧑🏽‍🦱"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9b1",
				native: "🧑🏾‍🦱"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9b1",
				native: "🧑🏿‍🦱"
			}
		],
		version: 12.1
	},
	white_haired_woman: {
		id: "white_haired_woman",
		name: "Woman: White Hair",
		keywords: [
			"haired",
			"woman",
			"old",
			"elder"
		],
		skins: [
			{
				unified: "1f469-200d-1f9b3",
				native: "👩‍🦳"
			},
			{
				unified: "1f469-1f3fb-200d-1f9b3",
				native: "👩🏻‍🦳"
			},
			{
				unified: "1f469-1f3fc-200d-1f9b3",
				native: "👩🏼‍🦳"
			},
			{
				unified: "1f469-1f3fd-200d-1f9b3",
				native: "👩🏽‍🦳"
			},
			{
				unified: "1f469-1f3fe-200d-1f9b3",
				native: "👩🏾‍🦳"
			},
			{
				unified: "1f469-1f3ff-200d-1f9b3",
				native: "👩🏿‍🦳"
			}
		],
		version: 11
	},
	white_haired_person: {
		id: "white_haired_person",
		name: "Person: White Hair",
		keywords: [
			"haired",
			"person",
			"elder",
			"old"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9b3",
				native: "🧑‍🦳"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9b3",
				native: "🧑🏻‍🦳"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9b3",
				native: "🧑🏼‍🦳"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9b3",
				native: "🧑🏽‍🦳"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9b3",
				native: "🧑🏾‍🦳"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9b3",
				native: "🧑🏿‍🦳"
			}
		],
		version: 12.1
	},
	bald_woman: {
		id: "bald_woman",
		name: "Woman: Bald",
		keywords: [
			"woman",
			"hairless"
		],
		skins: [
			{
				unified: "1f469-200d-1f9b2",
				native: "👩‍🦲"
			},
			{
				unified: "1f469-1f3fb-200d-1f9b2",
				native: "👩🏻‍🦲"
			},
			{
				unified: "1f469-1f3fc-200d-1f9b2",
				native: "👩🏼‍🦲"
			},
			{
				unified: "1f469-1f3fd-200d-1f9b2",
				native: "👩🏽‍🦲"
			},
			{
				unified: "1f469-1f3fe-200d-1f9b2",
				native: "👩🏾‍🦲"
			},
			{
				unified: "1f469-1f3ff-200d-1f9b2",
				native: "👩🏿‍🦲"
			}
		],
		version: 11
	},
	bald_person: {
		id: "bald_person",
		name: "Person: Bald",
		keywords: [
			"person",
			"hairless"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9b2",
				native: "🧑‍🦲"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9b2",
				native: "🧑🏻‍🦲"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9b2",
				native: "🧑🏼‍🦲"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9b2",
				native: "🧑🏽‍🦲"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9b2",
				native: "🧑🏾‍🦲"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9b2",
				native: "🧑🏿‍🦲"
			}
		],
		version: 12.1
	},
	"blond-haired-woman": {
		id: "blond-haired-woman",
		name: "Woman: Blond Hair",
		keywords: [
			"haired-woman",
			"woman",
			"female",
			"girl",
			"blonde",
			"person"
		],
		skins: [
			{
				unified: "1f471-200d-2640-fe0f",
				native: "👱‍♀️"
			},
			{
				unified: "1f471-1f3fb-200d-2640-fe0f",
				native: "👱🏻‍♀️"
			},
			{
				unified: "1f471-1f3fc-200d-2640-fe0f",
				native: "👱🏼‍♀️"
			},
			{
				unified: "1f471-1f3fd-200d-2640-fe0f",
				native: "👱🏽‍♀️"
			},
			{
				unified: "1f471-1f3fe-200d-2640-fe0f",
				native: "👱🏾‍♀️"
			},
			{
				unified: "1f471-1f3ff-200d-2640-fe0f",
				native: "👱🏿‍♀️"
			}
		],
		version: 4
	},
	"blond-haired-man": {
		id: "blond-haired-man",
		name: "Man: Blond Hair",
		keywords: [
			"haired-man",
			"man",
			"male",
			"boy",
			"blonde",
			"guy",
			"person"
		],
		skins: [
			{
				unified: "1f471-200d-2642-fe0f",
				native: "👱‍♂️"
			},
			{
				unified: "1f471-1f3fb-200d-2642-fe0f",
				native: "👱🏻‍♂️"
			},
			{
				unified: "1f471-1f3fc-200d-2642-fe0f",
				native: "👱🏼‍♂️"
			},
			{
				unified: "1f471-1f3fd-200d-2642-fe0f",
				native: "👱🏽‍♂️"
			},
			{
				unified: "1f471-1f3fe-200d-2642-fe0f",
				native: "👱🏾‍♂️"
			},
			{
				unified: "1f471-1f3ff-200d-2642-fe0f",
				native: "👱🏿‍♂️"
			}
		],
		version: 4
	},
	older_adult: {
		id: "older_adult",
		name: "Older Adult",
		keywords: [
			"person",
			"human",
			"elder",
			"senior",
			"gender",
			"neutral"
		],
		skins: [
			{
				unified: "1f9d3",
				native: "🧓"
			},
			{
				unified: "1f9d3-1f3fb",
				native: "🧓🏻"
			},
			{
				unified: "1f9d3-1f3fc",
				native: "🧓🏼"
			},
			{
				unified: "1f9d3-1f3fd",
				native: "🧓🏽"
			},
			{
				unified: "1f9d3-1f3fe",
				native: "🧓🏾"
			},
			{
				unified: "1f9d3-1f3ff",
				native: "🧓🏿"
			}
		],
		version: 5
	},
	older_man: {
		id: "older_man",
		name: "Old Man",
		keywords: [
			"older",
			"human",
			"male",
			"men",
			"elder",
			"senior"
		],
		skins: [
			{
				unified: "1f474",
				native: "👴"
			},
			{
				unified: "1f474-1f3fb",
				native: "👴🏻"
			},
			{
				unified: "1f474-1f3fc",
				native: "👴🏼"
			},
			{
				unified: "1f474-1f3fd",
				native: "👴🏽"
			},
			{
				unified: "1f474-1f3fe",
				native: "👴🏾"
			},
			{
				unified: "1f474-1f3ff",
				native: "👴🏿"
			}
		],
		version: 1
	},
	older_woman: {
		id: "older_woman",
		name: "Old Woman",
		keywords: [
			"older",
			"human",
			"female",
			"women",
			"lady",
			"elder",
			"senior"
		],
		skins: [
			{
				unified: "1f475",
				native: "👵"
			},
			{
				unified: "1f475-1f3fb",
				native: "👵🏻"
			},
			{
				unified: "1f475-1f3fc",
				native: "👵🏼"
			},
			{
				unified: "1f475-1f3fd",
				native: "👵🏽"
			},
			{
				unified: "1f475-1f3fe",
				native: "👵🏾"
			},
			{
				unified: "1f475-1f3ff",
				native: "👵🏿"
			}
		],
		version: 1
	},
	person_frowning: {
		id: "person_frowning",
		name: "Person Frowning",
		keywords: [
			"worried"
		],
		skins: [
			{
				unified: "1f64d",
				native: "🙍"
			},
			{
				unified: "1f64d-1f3fb",
				native: "🙍🏻"
			},
			{
				unified: "1f64d-1f3fc",
				native: "🙍🏼"
			},
			{
				unified: "1f64d-1f3fd",
				native: "🙍🏽"
			},
			{
				unified: "1f64d-1f3fe",
				native: "🙍🏾"
			},
			{
				unified: "1f64d-1f3ff",
				native: "🙍🏿"
			}
		],
		version: 1
	},
	"man-frowning": {
		id: "man-frowning",
		name: "Man Frowning",
		keywords: [
			"male",
			"boy",
			"sad",
			"depressed",
			"discouraged",
			"unhappy"
		],
		skins: [
			{
				unified: "1f64d-200d-2642-fe0f",
				native: "🙍‍♂️"
			},
			{
				unified: "1f64d-1f3fb-200d-2642-fe0f",
				native: "🙍🏻‍♂️"
			},
			{
				unified: "1f64d-1f3fc-200d-2642-fe0f",
				native: "🙍🏼‍♂️"
			},
			{
				unified: "1f64d-1f3fd-200d-2642-fe0f",
				native: "🙍🏽‍♂️"
			},
			{
				unified: "1f64d-1f3fe-200d-2642-fe0f",
				native: "🙍🏾‍♂️"
			},
			{
				unified: "1f64d-1f3ff-200d-2642-fe0f",
				native: "🙍🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-frowning": {
		id: "woman-frowning",
		name: "Woman Frowning",
		keywords: [
			"female",
			"girl",
			"sad",
			"depressed",
			"discouraged",
			"unhappy"
		],
		skins: [
			{
				unified: "1f64d-200d-2640-fe0f",
				native: "🙍‍♀️"
			},
			{
				unified: "1f64d-1f3fb-200d-2640-fe0f",
				native: "🙍🏻‍♀️"
			},
			{
				unified: "1f64d-1f3fc-200d-2640-fe0f",
				native: "🙍🏼‍♀️"
			},
			{
				unified: "1f64d-1f3fd-200d-2640-fe0f",
				native: "🙍🏽‍♀️"
			},
			{
				unified: "1f64d-1f3fe-200d-2640-fe0f",
				native: "🙍🏾‍♀️"
			},
			{
				unified: "1f64d-1f3ff-200d-2640-fe0f",
				native: "🙍🏿‍♀️"
			}
		],
		version: 4
	},
	person_with_pouting_face: {
		id: "person_with_pouting_face",
		name: "Person Pouting",
		keywords: [
			"with",
			"face",
			"upset"
		],
		skins: [
			{
				unified: "1f64e",
				native: "🙎"
			},
			{
				unified: "1f64e-1f3fb",
				native: "🙎🏻"
			},
			{
				unified: "1f64e-1f3fc",
				native: "🙎🏼"
			},
			{
				unified: "1f64e-1f3fd",
				native: "🙎🏽"
			},
			{
				unified: "1f64e-1f3fe",
				native: "🙎🏾"
			},
			{
				unified: "1f64e-1f3ff",
				native: "🙎🏿"
			}
		],
		version: 1
	},
	"man-pouting": {
		id: "man-pouting",
		name: "Man Pouting",
		keywords: [
			"male",
			"boy"
		],
		skins: [
			{
				unified: "1f64e-200d-2642-fe0f",
				native: "🙎‍♂️"
			},
			{
				unified: "1f64e-1f3fb-200d-2642-fe0f",
				native: "🙎🏻‍♂️"
			},
			{
				unified: "1f64e-1f3fc-200d-2642-fe0f",
				native: "🙎🏼‍♂️"
			},
			{
				unified: "1f64e-1f3fd-200d-2642-fe0f",
				native: "🙎🏽‍♂️"
			},
			{
				unified: "1f64e-1f3fe-200d-2642-fe0f",
				native: "🙎🏾‍♂️"
			},
			{
				unified: "1f64e-1f3ff-200d-2642-fe0f",
				native: "🙎🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-pouting": {
		id: "woman-pouting",
		name: "Woman Pouting",
		keywords: [
			"female",
			"girl"
		],
		skins: [
			{
				unified: "1f64e-200d-2640-fe0f",
				native: "🙎‍♀️"
			},
			{
				unified: "1f64e-1f3fb-200d-2640-fe0f",
				native: "🙎🏻‍♀️"
			},
			{
				unified: "1f64e-1f3fc-200d-2640-fe0f",
				native: "🙎🏼‍♀️"
			},
			{
				unified: "1f64e-1f3fd-200d-2640-fe0f",
				native: "🙎🏽‍♀️"
			},
			{
				unified: "1f64e-1f3fe-200d-2640-fe0f",
				native: "🙎🏾‍♀️"
			},
			{
				unified: "1f64e-1f3ff-200d-2640-fe0f",
				native: "🙎🏿‍♀️"
			}
		],
		version: 4
	},
	no_good: {
		id: "no_good",
		name: "Person Gesturing No",
		keywords: [
			"good",
			"decline"
		],
		skins: [
			{
				unified: "1f645",
				native: "🙅"
			},
			{
				unified: "1f645-1f3fb",
				native: "🙅🏻"
			},
			{
				unified: "1f645-1f3fc",
				native: "🙅🏼"
			},
			{
				unified: "1f645-1f3fd",
				native: "🙅🏽"
			},
			{
				unified: "1f645-1f3fe",
				native: "🙅🏾"
			},
			{
				unified: "1f645-1f3ff",
				native: "🙅🏿"
			}
		],
		version: 1
	},
	"man-gesturing-no": {
		id: "man-gesturing-no",
		name: "Man Gesturing No",
		keywords: [
			"gesturing-no",
			"male",
			"boy",
			"nope"
		],
		skins: [
			{
				unified: "1f645-200d-2642-fe0f",
				native: "🙅‍♂️"
			},
			{
				unified: "1f645-1f3fb-200d-2642-fe0f",
				native: "🙅🏻‍♂️"
			},
			{
				unified: "1f645-1f3fc-200d-2642-fe0f",
				native: "🙅🏼‍♂️"
			},
			{
				unified: "1f645-1f3fd-200d-2642-fe0f",
				native: "🙅🏽‍♂️"
			},
			{
				unified: "1f645-1f3fe-200d-2642-fe0f",
				native: "🙅🏾‍♂️"
			},
			{
				unified: "1f645-1f3ff-200d-2642-fe0f",
				native: "🙅🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-gesturing-no": {
		id: "woman-gesturing-no",
		name: "Woman Gesturing No",
		keywords: [
			"gesturing-no",
			"female",
			"girl",
			"nope"
		],
		skins: [
			{
				unified: "1f645-200d-2640-fe0f",
				native: "🙅‍♀️"
			},
			{
				unified: "1f645-1f3fb-200d-2640-fe0f",
				native: "🙅🏻‍♀️"
			},
			{
				unified: "1f645-1f3fc-200d-2640-fe0f",
				native: "🙅🏼‍♀️"
			},
			{
				unified: "1f645-1f3fd-200d-2640-fe0f",
				native: "🙅🏽‍♀️"
			},
			{
				unified: "1f645-1f3fe-200d-2640-fe0f",
				native: "🙅🏾‍♀️"
			},
			{
				unified: "1f645-1f3ff-200d-2640-fe0f",
				native: "🙅🏿‍♀️"
			}
		],
		version: 4
	},
	ok_woman: {
		id: "ok_woman",
		name: "Person Gesturing Ok",
		keywords: [
			"woman",
			"agree"
		],
		skins: [
			{
				unified: "1f646",
				native: "🙆"
			},
			{
				unified: "1f646-1f3fb",
				native: "🙆🏻"
			},
			{
				unified: "1f646-1f3fc",
				native: "🙆🏼"
			},
			{
				unified: "1f646-1f3fd",
				native: "🙆🏽"
			},
			{
				unified: "1f646-1f3fe",
				native: "🙆🏾"
			},
			{
				unified: "1f646-1f3ff",
				native: "🙆🏿"
			}
		],
		version: 1
	},
	"man-gesturing-ok": {
		id: "man-gesturing-ok",
		name: "Man Gesturing Ok",
		keywords: [
			"gesturing-ok",
			"men",
			"boy",
			"male",
			"blue",
			"human"
		],
		skins: [
			{
				unified: "1f646-200d-2642-fe0f",
				native: "🙆‍♂️"
			},
			{
				unified: "1f646-1f3fb-200d-2642-fe0f",
				native: "🙆🏻‍♂️"
			},
			{
				unified: "1f646-1f3fc-200d-2642-fe0f",
				native: "🙆🏼‍♂️"
			},
			{
				unified: "1f646-1f3fd-200d-2642-fe0f",
				native: "🙆🏽‍♂️"
			},
			{
				unified: "1f646-1f3fe-200d-2642-fe0f",
				native: "🙆🏾‍♂️"
			},
			{
				unified: "1f646-1f3ff-200d-2642-fe0f",
				native: "🙆🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-gesturing-ok": {
		id: "woman-gesturing-ok",
		name: "Woman Gesturing Ok",
		keywords: [
			"gesturing-ok",
			"women",
			"girl",
			"female",
			"pink",
			"human"
		],
		skins: [
			{
				unified: "1f646-200d-2640-fe0f",
				native: "🙆‍♀️"
			},
			{
				unified: "1f646-1f3fb-200d-2640-fe0f",
				native: "🙆🏻‍♀️"
			},
			{
				unified: "1f646-1f3fc-200d-2640-fe0f",
				native: "🙆🏼‍♀️"
			},
			{
				unified: "1f646-1f3fd-200d-2640-fe0f",
				native: "🙆🏽‍♀️"
			},
			{
				unified: "1f646-1f3fe-200d-2640-fe0f",
				native: "🙆🏾‍♀️"
			},
			{
				unified: "1f646-1f3ff-200d-2640-fe0f",
				native: "🙆🏿‍♀️"
			}
		],
		version: 4
	},
	information_desk_person: {
		id: "information_desk_person",
		name: "Person Tipping Hand",
		keywords: [
			"information",
			"desk"
		],
		skins: [
			{
				unified: "1f481",
				native: "💁"
			},
			{
				unified: "1f481-1f3fb",
				native: "💁🏻"
			},
			{
				unified: "1f481-1f3fc",
				native: "💁🏼"
			},
			{
				unified: "1f481-1f3fd",
				native: "💁🏽"
			},
			{
				unified: "1f481-1f3fe",
				native: "💁🏾"
			},
			{
				unified: "1f481-1f3ff",
				native: "💁🏿"
			}
		],
		version: 1
	},
	"man-tipping-hand": {
		id: "man-tipping-hand",
		name: "Man Tipping Hand",
		keywords: [
			"tipping-hand",
			"male",
			"boy",
			"human",
			"information"
		],
		skins: [
			{
				unified: "1f481-200d-2642-fe0f",
				native: "💁‍♂️"
			},
			{
				unified: "1f481-1f3fb-200d-2642-fe0f",
				native: "💁🏻‍♂️"
			},
			{
				unified: "1f481-1f3fc-200d-2642-fe0f",
				native: "💁🏼‍♂️"
			},
			{
				unified: "1f481-1f3fd-200d-2642-fe0f",
				native: "💁🏽‍♂️"
			},
			{
				unified: "1f481-1f3fe-200d-2642-fe0f",
				native: "💁🏾‍♂️"
			},
			{
				unified: "1f481-1f3ff-200d-2642-fe0f",
				native: "💁🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-tipping-hand": {
		id: "woman-tipping-hand",
		name: "Woman Tipping Hand",
		keywords: [
			"tipping-hand",
			"female",
			"girl",
			"human",
			"information"
		],
		skins: [
			{
				unified: "1f481-200d-2640-fe0f",
				native: "💁‍♀️"
			},
			{
				unified: "1f481-1f3fb-200d-2640-fe0f",
				native: "💁🏻‍♀️"
			},
			{
				unified: "1f481-1f3fc-200d-2640-fe0f",
				native: "💁🏼‍♀️"
			},
			{
				unified: "1f481-1f3fd-200d-2640-fe0f",
				native: "💁🏽‍♀️"
			},
			{
				unified: "1f481-1f3fe-200d-2640-fe0f",
				native: "💁🏾‍♀️"
			},
			{
				unified: "1f481-1f3ff-200d-2640-fe0f",
				native: "💁🏿‍♀️"
			}
		],
		version: 4
	},
	raising_hand: {
		id: "raising_hand",
		name: "Person Raising Hand",
		keywords: [
			"question"
		],
		skins: [
			{
				unified: "1f64b",
				native: "🙋"
			},
			{
				unified: "1f64b-1f3fb",
				native: "🙋🏻"
			},
			{
				unified: "1f64b-1f3fc",
				native: "🙋🏼"
			},
			{
				unified: "1f64b-1f3fd",
				native: "🙋🏽"
			},
			{
				unified: "1f64b-1f3fe",
				native: "🙋🏾"
			},
			{
				unified: "1f64b-1f3ff",
				native: "🙋🏿"
			}
		],
		version: 1
	},
	"man-raising-hand": {
		id: "man-raising-hand",
		name: "Man Raising Hand",
		keywords: [
			"raising-hand",
			"male",
			"boy"
		],
		skins: [
			{
				unified: "1f64b-200d-2642-fe0f",
				native: "🙋‍♂️"
			},
			{
				unified: "1f64b-1f3fb-200d-2642-fe0f",
				native: "🙋🏻‍♂️"
			},
			{
				unified: "1f64b-1f3fc-200d-2642-fe0f",
				native: "🙋🏼‍♂️"
			},
			{
				unified: "1f64b-1f3fd-200d-2642-fe0f",
				native: "🙋🏽‍♂️"
			},
			{
				unified: "1f64b-1f3fe-200d-2642-fe0f",
				native: "🙋🏾‍♂️"
			},
			{
				unified: "1f64b-1f3ff-200d-2642-fe0f",
				native: "🙋🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-raising-hand": {
		id: "woman-raising-hand",
		name: "Woman Raising Hand",
		keywords: [
			"raising-hand",
			"female",
			"girl"
		],
		skins: [
			{
				unified: "1f64b-200d-2640-fe0f",
				native: "🙋‍♀️"
			},
			{
				unified: "1f64b-1f3fb-200d-2640-fe0f",
				native: "🙋🏻‍♀️"
			},
			{
				unified: "1f64b-1f3fc-200d-2640-fe0f",
				native: "🙋🏼‍♀️"
			},
			{
				unified: "1f64b-1f3fd-200d-2640-fe0f",
				native: "🙋🏽‍♀️"
			},
			{
				unified: "1f64b-1f3fe-200d-2640-fe0f",
				native: "🙋🏾‍♀️"
			},
			{
				unified: "1f64b-1f3ff-200d-2640-fe0f",
				native: "🙋🏿‍♀️"
			}
		],
		version: 4
	},
	deaf_person: {
		id: "deaf_person",
		name: "Deaf Person",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9cf",
				native: "🧏"
			},
			{
				unified: "1f9cf-1f3fb",
				native: "🧏🏻"
			},
			{
				unified: "1f9cf-1f3fc",
				native: "🧏🏼"
			},
			{
				unified: "1f9cf-1f3fd",
				native: "🧏🏽"
			},
			{
				unified: "1f9cf-1f3fe",
				native: "🧏🏾"
			},
			{
				unified: "1f9cf-1f3ff",
				native: "🧏🏿"
			}
		],
		version: 12
	},
	deaf_man: {
		id: "deaf_man",
		name: "Deaf Man",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9cf-200d-2642-fe0f",
				native: "🧏‍♂️"
			},
			{
				unified: "1f9cf-1f3fb-200d-2642-fe0f",
				native: "🧏🏻‍♂️"
			},
			{
				unified: "1f9cf-1f3fc-200d-2642-fe0f",
				native: "🧏🏼‍♂️"
			},
			{
				unified: "1f9cf-1f3fd-200d-2642-fe0f",
				native: "🧏🏽‍♂️"
			},
			{
				unified: "1f9cf-1f3fe-200d-2642-fe0f",
				native: "🧏🏾‍♂️"
			},
			{
				unified: "1f9cf-1f3ff-200d-2642-fe0f",
				native: "🧏🏿‍♂️"
			}
		],
		version: 12
	},
	deaf_woman: {
		id: "deaf_woman",
		name: "Deaf Woman",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9cf-200d-2640-fe0f",
				native: "🧏‍♀️"
			},
			{
				unified: "1f9cf-1f3fb-200d-2640-fe0f",
				native: "🧏🏻‍♀️"
			},
			{
				unified: "1f9cf-1f3fc-200d-2640-fe0f",
				native: "🧏🏼‍♀️"
			},
			{
				unified: "1f9cf-1f3fd-200d-2640-fe0f",
				native: "🧏🏽‍♀️"
			},
			{
				unified: "1f9cf-1f3fe-200d-2640-fe0f",
				native: "🧏🏾‍♀️"
			},
			{
				unified: "1f9cf-1f3ff-200d-2640-fe0f",
				native: "🧏🏿‍♀️"
			}
		],
		version: 12
	},
	bow: {
		id: "bow",
		name: "Person Bowing",
		keywords: [
			"bow",
			"respectiful"
		],
		skins: [
			{
				unified: "1f647",
				native: "🙇"
			},
			{
				unified: "1f647-1f3fb",
				native: "🙇🏻"
			},
			{
				unified: "1f647-1f3fc",
				native: "🙇🏼"
			},
			{
				unified: "1f647-1f3fd",
				native: "🙇🏽"
			},
			{
				unified: "1f647-1f3fe",
				native: "🙇🏾"
			},
			{
				unified: "1f647-1f3ff",
				native: "🙇🏿"
			}
		],
		version: 1
	},
	"man-bowing": {
		id: "man-bowing",
		name: "Man Bowing",
		keywords: [
			"male",
			"boy"
		],
		skins: [
			{
				unified: "1f647-200d-2642-fe0f",
				native: "🙇‍♂️"
			},
			{
				unified: "1f647-1f3fb-200d-2642-fe0f",
				native: "🙇🏻‍♂️"
			},
			{
				unified: "1f647-1f3fc-200d-2642-fe0f",
				native: "🙇🏼‍♂️"
			},
			{
				unified: "1f647-1f3fd-200d-2642-fe0f",
				native: "🙇🏽‍♂️"
			},
			{
				unified: "1f647-1f3fe-200d-2642-fe0f",
				native: "🙇🏾‍♂️"
			},
			{
				unified: "1f647-1f3ff-200d-2642-fe0f",
				native: "🙇🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-bowing": {
		id: "woman-bowing",
		name: "Woman Bowing",
		keywords: [
			"female",
			"girl"
		],
		skins: [
			{
				unified: "1f647-200d-2640-fe0f",
				native: "🙇‍♀️"
			},
			{
				unified: "1f647-1f3fb-200d-2640-fe0f",
				native: "🙇🏻‍♀️"
			},
			{
				unified: "1f647-1f3fc-200d-2640-fe0f",
				native: "🙇🏼‍♀️"
			},
			{
				unified: "1f647-1f3fd-200d-2640-fe0f",
				native: "🙇🏽‍♀️"
			},
			{
				unified: "1f647-1f3fe-200d-2640-fe0f",
				native: "🙇🏾‍♀️"
			},
			{
				unified: "1f647-1f3ff-200d-2640-fe0f",
				native: "🙇🏿‍♀️"
			}
		],
		version: 4
	},
	face_palm: {
		id: "face_palm",
		name: "Face Palm",
		keywords: [
			"person",
			"facepalming",
			"disappointed"
		],
		skins: [
			{
				unified: "1f926",
				native: "🤦"
			},
			{
				unified: "1f926-1f3fb",
				native: "🤦🏻"
			},
			{
				unified: "1f926-1f3fc",
				native: "🤦🏼"
			},
			{
				unified: "1f926-1f3fd",
				native: "🤦🏽"
			},
			{
				unified: "1f926-1f3fe",
				native: "🤦🏾"
			},
			{
				unified: "1f926-1f3ff",
				native: "🤦🏿"
			}
		],
		version: 3
	},
	"man-facepalming": {
		id: "man-facepalming",
		name: "Man Facepalming",
		keywords: [
			"male",
			"boy",
			"disbelief"
		],
		skins: [
			{
				unified: "1f926-200d-2642-fe0f",
				native: "🤦‍♂️"
			},
			{
				unified: "1f926-1f3fb-200d-2642-fe0f",
				native: "🤦🏻‍♂️"
			},
			{
				unified: "1f926-1f3fc-200d-2642-fe0f",
				native: "🤦🏼‍♂️"
			},
			{
				unified: "1f926-1f3fd-200d-2642-fe0f",
				native: "🤦🏽‍♂️"
			},
			{
				unified: "1f926-1f3fe-200d-2642-fe0f",
				native: "🤦🏾‍♂️"
			},
			{
				unified: "1f926-1f3ff-200d-2642-fe0f",
				native: "🤦🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-facepalming": {
		id: "woman-facepalming",
		name: "Woman Facepalming",
		keywords: [
			"female",
			"girl",
			"disbelief"
		],
		skins: [
			{
				unified: "1f926-200d-2640-fe0f",
				native: "🤦‍♀️"
			},
			{
				unified: "1f926-1f3fb-200d-2640-fe0f",
				native: "🤦🏻‍♀️"
			},
			{
				unified: "1f926-1f3fc-200d-2640-fe0f",
				native: "🤦🏼‍♀️"
			},
			{
				unified: "1f926-1f3fd-200d-2640-fe0f",
				native: "🤦🏽‍♀️"
			},
			{
				unified: "1f926-1f3fe-200d-2640-fe0f",
				native: "🤦🏾‍♀️"
			},
			{
				unified: "1f926-1f3ff-200d-2640-fe0f",
				native: "🤦🏿‍♀️"
			}
		],
		version: 4
	},
	shrug: {
		id: "shrug",
		name: "Shrug",
		keywords: [
			"person",
			"shrugging",
			"regardless"
		],
		skins: [
			{
				unified: "1f937",
				native: "🤷"
			},
			{
				unified: "1f937-1f3fb",
				native: "🤷🏻"
			},
			{
				unified: "1f937-1f3fc",
				native: "🤷🏼"
			},
			{
				unified: "1f937-1f3fd",
				native: "🤷🏽"
			},
			{
				unified: "1f937-1f3fe",
				native: "🤷🏾"
			},
			{
				unified: "1f937-1f3ff",
				native: "🤷🏿"
			}
		],
		version: 3
	},
	"man-shrugging": {
		id: "man-shrugging",
		name: "Man Shrugging",
		keywords: [
			"male",
			"boy",
			"confused",
			"indifferent",
			"doubt"
		],
		skins: [
			{
				unified: "1f937-200d-2642-fe0f",
				native: "🤷‍♂️"
			},
			{
				unified: "1f937-1f3fb-200d-2642-fe0f",
				native: "🤷🏻‍♂️"
			},
			{
				unified: "1f937-1f3fc-200d-2642-fe0f",
				native: "🤷🏼‍♂️"
			},
			{
				unified: "1f937-1f3fd-200d-2642-fe0f",
				native: "🤷🏽‍♂️"
			},
			{
				unified: "1f937-1f3fe-200d-2642-fe0f",
				native: "🤷🏾‍♂️"
			},
			{
				unified: "1f937-1f3ff-200d-2642-fe0f",
				native: "🤷🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-shrugging": {
		id: "woman-shrugging",
		name: "Woman Shrugging",
		keywords: [
			"female",
			"girl",
			"confused",
			"indifferent",
			"doubt"
		],
		skins: [
			{
				unified: "1f937-200d-2640-fe0f",
				native: "🤷‍♀️"
			},
			{
				unified: "1f937-1f3fb-200d-2640-fe0f",
				native: "🤷🏻‍♀️"
			},
			{
				unified: "1f937-1f3fc-200d-2640-fe0f",
				native: "🤷🏼‍♀️"
			},
			{
				unified: "1f937-1f3fd-200d-2640-fe0f",
				native: "🤷🏽‍♀️"
			},
			{
				unified: "1f937-1f3fe-200d-2640-fe0f",
				native: "🤷🏾‍♀️"
			},
			{
				unified: "1f937-1f3ff-200d-2640-fe0f",
				native: "🤷🏿‍♀️"
			}
		],
		version: 4
	},
	health_worker: {
		id: "health_worker",
		name: "Health Worker",
		keywords: [
			"hospital"
		],
		skins: [
			{
				unified: "1f9d1-200d-2695-fe0f",
				native: "🧑‍⚕️"
			},
			{
				unified: "1f9d1-1f3fb-200d-2695-fe0f",
				native: "🧑🏻‍⚕️"
			},
			{
				unified: "1f9d1-1f3fc-200d-2695-fe0f",
				native: "🧑🏼‍⚕️"
			},
			{
				unified: "1f9d1-1f3fd-200d-2695-fe0f",
				native: "🧑🏽‍⚕️"
			},
			{
				unified: "1f9d1-1f3fe-200d-2695-fe0f",
				native: "🧑🏾‍⚕️"
			},
			{
				unified: "1f9d1-1f3ff-200d-2695-fe0f",
				native: "🧑🏿‍⚕️"
			}
		],
		version: 12.1
	},
	"male-doctor": {
		id: "male-doctor",
		name: "Man Health Worker",
		keywords: [
			"male",
			"doctor",
			"nurse",
			"therapist",
			"healthcare",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-2695-fe0f",
				native: "👨‍⚕️"
			},
			{
				unified: "1f468-1f3fb-200d-2695-fe0f",
				native: "👨🏻‍⚕️"
			},
			{
				unified: "1f468-1f3fc-200d-2695-fe0f",
				native: "👨🏼‍⚕️"
			},
			{
				unified: "1f468-1f3fd-200d-2695-fe0f",
				native: "👨🏽‍⚕️"
			},
			{
				unified: "1f468-1f3fe-200d-2695-fe0f",
				native: "👨🏾‍⚕️"
			},
			{
				unified: "1f468-1f3ff-200d-2695-fe0f",
				native: "👨🏿‍⚕️"
			}
		],
		version: 4
	},
	"female-doctor": {
		id: "female-doctor",
		name: "Woman Health Worker",
		keywords: [
			"female",
			"doctor",
			"nurse",
			"therapist",
			"healthcare",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-2695-fe0f",
				native: "👩‍⚕️"
			},
			{
				unified: "1f469-1f3fb-200d-2695-fe0f",
				native: "👩🏻‍⚕️"
			},
			{
				unified: "1f469-1f3fc-200d-2695-fe0f",
				native: "👩🏼‍⚕️"
			},
			{
				unified: "1f469-1f3fd-200d-2695-fe0f",
				native: "👩🏽‍⚕️"
			},
			{
				unified: "1f469-1f3fe-200d-2695-fe0f",
				native: "👩🏾‍⚕️"
			},
			{
				unified: "1f469-1f3ff-200d-2695-fe0f",
				native: "👩🏿‍⚕️"
			}
		],
		version: 4
	},
	student: {
		id: "student",
		name: "Student",
		keywords: [
			"learn"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f393",
				native: "🧑‍🎓"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f393",
				native: "🧑🏻‍🎓"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f393",
				native: "🧑🏼‍🎓"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f393",
				native: "🧑🏽‍🎓"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f393",
				native: "🧑🏾‍🎓"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f393",
				native: "🧑🏿‍🎓"
			}
		],
		version: 12.1
	},
	"male-student": {
		id: "male-student",
		name: "Man Student",
		keywords: [
			"male",
			"graduate",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f393",
				native: "👨‍🎓"
			},
			{
				unified: "1f468-1f3fb-200d-1f393",
				native: "👨🏻‍🎓"
			},
			{
				unified: "1f468-1f3fc-200d-1f393",
				native: "👨🏼‍🎓"
			},
			{
				unified: "1f468-1f3fd-200d-1f393",
				native: "👨🏽‍🎓"
			},
			{
				unified: "1f468-1f3fe-200d-1f393",
				native: "👨🏾‍🎓"
			},
			{
				unified: "1f468-1f3ff-200d-1f393",
				native: "👨🏿‍🎓"
			}
		],
		version: 4
	},
	"female-student": {
		id: "female-student",
		name: "Woman Student",
		keywords: [
			"female",
			"graduate",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f393",
				native: "👩‍🎓"
			},
			{
				unified: "1f469-1f3fb-200d-1f393",
				native: "👩🏻‍🎓"
			},
			{
				unified: "1f469-1f3fc-200d-1f393",
				native: "👩🏼‍🎓"
			},
			{
				unified: "1f469-1f3fd-200d-1f393",
				native: "👩🏽‍🎓"
			},
			{
				unified: "1f469-1f3fe-200d-1f393",
				native: "👩🏾‍🎓"
			},
			{
				unified: "1f469-1f3ff-200d-1f393",
				native: "👩🏿‍🎓"
			}
		],
		version: 4
	},
	teacher: {
		id: "teacher",
		name: "Teacher",
		keywords: [
			"professor"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f3eb",
				native: "🧑‍🏫"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f3eb",
				native: "🧑🏻‍🏫"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f3eb",
				native: "🧑🏼‍🏫"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f3eb",
				native: "🧑🏽‍🏫"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f3eb",
				native: "🧑🏾‍🏫"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f3eb",
				native: "🧑🏿‍🏫"
			}
		],
		version: 12.1
	},
	"male-teacher": {
		id: "male-teacher",
		name: "Man Teacher",
		keywords: [
			"male",
			"instructor",
			"professor",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f3eb",
				native: "👨‍🏫"
			},
			{
				unified: "1f468-1f3fb-200d-1f3eb",
				native: "👨🏻‍🏫"
			},
			{
				unified: "1f468-1f3fc-200d-1f3eb",
				native: "👨🏼‍🏫"
			},
			{
				unified: "1f468-1f3fd-200d-1f3eb",
				native: "👨🏽‍🏫"
			},
			{
				unified: "1f468-1f3fe-200d-1f3eb",
				native: "👨🏾‍🏫"
			},
			{
				unified: "1f468-1f3ff-200d-1f3eb",
				native: "👨🏿‍🏫"
			}
		],
		version: 4
	},
	"female-teacher": {
		id: "female-teacher",
		name: "Woman Teacher",
		keywords: [
			"female",
			"instructor",
			"professor",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f3eb",
				native: "👩‍🏫"
			},
			{
				unified: "1f469-1f3fb-200d-1f3eb",
				native: "👩🏻‍🏫"
			},
			{
				unified: "1f469-1f3fc-200d-1f3eb",
				native: "👩🏼‍🏫"
			},
			{
				unified: "1f469-1f3fd-200d-1f3eb",
				native: "👩🏽‍🏫"
			},
			{
				unified: "1f469-1f3fe-200d-1f3eb",
				native: "👩🏾‍🏫"
			},
			{
				unified: "1f469-1f3ff-200d-1f3eb",
				native: "👩🏿‍🏫"
			}
		],
		version: 4
	},
	judge: {
		id: "judge",
		name: "Judge",
		keywords: [
			"law"
		],
		skins: [
			{
				unified: "1f9d1-200d-2696-fe0f",
				native: "🧑‍⚖️"
			},
			{
				unified: "1f9d1-1f3fb-200d-2696-fe0f",
				native: "🧑🏻‍⚖️"
			},
			{
				unified: "1f9d1-1f3fc-200d-2696-fe0f",
				native: "🧑🏼‍⚖️"
			},
			{
				unified: "1f9d1-1f3fd-200d-2696-fe0f",
				native: "🧑🏽‍⚖️"
			},
			{
				unified: "1f9d1-1f3fe-200d-2696-fe0f",
				native: "🧑🏾‍⚖️"
			},
			{
				unified: "1f9d1-1f3ff-200d-2696-fe0f",
				native: "🧑🏿‍⚖️"
			}
		],
		version: 12.1
	},
	"male-judge": {
		id: "male-judge",
		name: "Man Judge",
		keywords: [
			"male",
			"justice",
			"court",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-2696-fe0f",
				native: "👨‍⚖️"
			},
			{
				unified: "1f468-1f3fb-200d-2696-fe0f",
				native: "👨🏻‍⚖️"
			},
			{
				unified: "1f468-1f3fc-200d-2696-fe0f",
				native: "👨🏼‍⚖️"
			},
			{
				unified: "1f468-1f3fd-200d-2696-fe0f",
				native: "👨🏽‍⚖️"
			},
			{
				unified: "1f468-1f3fe-200d-2696-fe0f",
				native: "👨🏾‍⚖️"
			},
			{
				unified: "1f468-1f3ff-200d-2696-fe0f",
				native: "👨🏿‍⚖️"
			}
		],
		version: 4
	},
	"female-judge": {
		id: "female-judge",
		name: "Woman Judge",
		keywords: [
			"female",
			"justice",
			"court",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-2696-fe0f",
				native: "👩‍⚖️"
			},
			{
				unified: "1f469-1f3fb-200d-2696-fe0f",
				native: "👩🏻‍⚖️"
			},
			{
				unified: "1f469-1f3fc-200d-2696-fe0f",
				native: "👩🏼‍⚖️"
			},
			{
				unified: "1f469-1f3fd-200d-2696-fe0f",
				native: "👩🏽‍⚖️"
			},
			{
				unified: "1f469-1f3fe-200d-2696-fe0f",
				native: "👩🏾‍⚖️"
			},
			{
				unified: "1f469-1f3ff-200d-2696-fe0f",
				native: "👩🏿‍⚖️"
			}
		],
		version: 4
	},
	farmer: {
		id: "farmer",
		name: "Farmer",
		keywords: [
			"crops"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f33e",
				native: "🧑‍🌾"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f33e",
				native: "🧑🏻‍🌾"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f33e",
				native: "🧑🏼‍🌾"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f33e",
				native: "🧑🏽‍🌾"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f33e",
				native: "🧑🏾‍🌾"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f33e",
				native: "🧑🏿‍🌾"
			}
		],
		version: 12.1
	},
	"male-farmer": {
		id: "male-farmer",
		name: "Man Farmer",
		keywords: [
			"male",
			"rancher",
			"gardener",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f33e",
				native: "👨‍🌾"
			},
			{
				unified: "1f468-1f3fb-200d-1f33e",
				native: "👨🏻‍🌾"
			},
			{
				unified: "1f468-1f3fc-200d-1f33e",
				native: "👨🏼‍🌾"
			},
			{
				unified: "1f468-1f3fd-200d-1f33e",
				native: "👨🏽‍🌾"
			},
			{
				unified: "1f468-1f3fe-200d-1f33e",
				native: "👨🏾‍🌾"
			},
			{
				unified: "1f468-1f3ff-200d-1f33e",
				native: "👨🏿‍🌾"
			}
		],
		version: 4
	},
	"female-farmer": {
		id: "female-farmer",
		name: "Woman Farmer",
		keywords: [
			"female",
			"rancher",
			"gardener",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f33e",
				native: "👩‍🌾"
			},
			{
				unified: "1f469-1f3fb-200d-1f33e",
				native: "👩🏻‍🌾"
			},
			{
				unified: "1f469-1f3fc-200d-1f33e",
				native: "👩🏼‍🌾"
			},
			{
				unified: "1f469-1f3fd-200d-1f33e",
				native: "👩🏽‍🌾"
			},
			{
				unified: "1f469-1f3fe-200d-1f33e",
				native: "👩🏾‍🌾"
			},
			{
				unified: "1f469-1f3ff-200d-1f33e",
				native: "👩🏿‍🌾"
			}
		],
		version: 4
	},
	cook: {
		id: "cook",
		name: "Cook",
		keywords: [
			"food",
			"kitchen",
			"culinary"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f373",
				native: "🧑‍🍳"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f373",
				native: "🧑🏻‍🍳"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f373",
				native: "🧑🏼‍🍳"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f373",
				native: "🧑🏽‍🍳"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f373",
				native: "🧑🏾‍🍳"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f373",
				native: "🧑🏿‍🍳"
			}
		],
		version: 12.1
	},
	"male-cook": {
		id: "male-cook",
		name: "Man Cook",
		keywords: [
			"male",
			"chef",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f373",
				native: "👨‍🍳"
			},
			{
				unified: "1f468-1f3fb-200d-1f373",
				native: "👨🏻‍🍳"
			},
			{
				unified: "1f468-1f3fc-200d-1f373",
				native: "👨🏼‍🍳"
			},
			{
				unified: "1f468-1f3fd-200d-1f373",
				native: "👨🏽‍🍳"
			},
			{
				unified: "1f468-1f3fe-200d-1f373",
				native: "👨🏾‍🍳"
			},
			{
				unified: "1f468-1f3ff-200d-1f373",
				native: "👨🏿‍🍳"
			}
		],
		version: 4
	},
	"female-cook": {
		id: "female-cook",
		name: "Woman Cook",
		keywords: [
			"female",
			"chef",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f373",
				native: "👩‍🍳"
			},
			{
				unified: "1f469-1f3fb-200d-1f373",
				native: "👩🏻‍🍳"
			},
			{
				unified: "1f469-1f3fc-200d-1f373",
				native: "👩🏼‍🍳"
			},
			{
				unified: "1f469-1f3fd-200d-1f373",
				native: "👩🏽‍🍳"
			},
			{
				unified: "1f469-1f3fe-200d-1f373",
				native: "👩🏾‍🍳"
			},
			{
				unified: "1f469-1f3ff-200d-1f373",
				native: "👩🏿‍🍳"
			}
		],
		version: 4
	},
	mechanic: {
		id: "mechanic",
		name: "Mechanic",
		keywords: [
			"worker",
			"technician"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f527",
				native: "🧑‍🔧"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f527",
				native: "🧑🏻‍🔧"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f527",
				native: "🧑🏼‍🔧"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f527",
				native: "🧑🏽‍🔧"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f527",
				native: "🧑🏾‍🔧"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f527",
				native: "🧑🏿‍🔧"
			}
		],
		version: 12.1
	},
	"male-mechanic": {
		id: "male-mechanic",
		name: "Man Mechanic",
		keywords: [
			"male",
			"plumber",
			"human",
			"wrench"
		],
		skins: [
			{
				unified: "1f468-200d-1f527",
				native: "👨‍🔧"
			},
			{
				unified: "1f468-1f3fb-200d-1f527",
				native: "👨🏻‍🔧"
			},
			{
				unified: "1f468-1f3fc-200d-1f527",
				native: "👨🏼‍🔧"
			},
			{
				unified: "1f468-1f3fd-200d-1f527",
				native: "👨🏽‍🔧"
			},
			{
				unified: "1f468-1f3fe-200d-1f527",
				native: "👨🏾‍🔧"
			},
			{
				unified: "1f468-1f3ff-200d-1f527",
				native: "👨🏿‍🔧"
			}
		],
		version: 4
	},
	"female-mechanic": {
		id: "female-mechanic",
		name: "Woman Mechanic",
		keywords: [
			"female",
			"plumber",
			"human",
			"wrench"
		],
		skins: [
			{
				unified: "1f469-200d-1f527",
				native: "👩‍🔧"
			},
			{
				unified: "1f469-1f3fb-200d-1f527",
				native: "👩🏻‍🔧"
			},
			{
				unified: "1f469-1f3fc-200d-1f527",
				native: "👩🏼‍🔧"
			},
			{
				unified: "1f469-1f3fd-200d-1f527",
				native: "👩🏽‍🔧"
			},
			{
				unified: "1f469-1f3fe-200d-1f527",
				native: "👩🏾‍🔧"
			},
			{
				unified: "1f469-1f3ff-200d-1f527",
				native: "👩🏿‍🔧"
			}
		],
		version: 4
	},
	factory_worker: {
		id: "factory_worker",
		name: "Factory Worker",
		keywords: [
			"labor"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f3ed",
				native: "🧑‍🏭"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f3ed",
				native: "🧑🏻‍🏭"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f3ed",
				native: "🧑🏼‍🏭"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f3ed",
				native: "🧑🏽‍🏭"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f3ed",
				native: "🧑🏾‍🏭"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f3ed",
				native: "🧑🏿‍🏭"
			}
		],
		version: 12.1
	},
	"male-factory-worker": {
		id: "male-factory-worker",
		name: "Man Factory Worker",
		keywords: [
			"male",
			"factory-worker",
			"assembly",
			"industrial",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f3ed",
				native: "👨‍🏭"
			},
			{
				unified: "1f468-1f3fb-200d-1f3ed",
				native: "👨🏻‍🏭"
			},
			{
				unified: "1f468-1f3fc-200d-1f3ed",
				native: "👨🏼‍🏭"
			},
			{
				unified: "1f468-1f3fd-200d-1f3ed",
				native: "👨🏽‍🏭"
			},
			{
				unified: "1f468-1f3fe-200d-1f3ed",
				native: "👨🏾‍🏭"
			},
			{
				unified: "1f468-1f3ff-200d-1f3ed",
				native: "👨🏿‍🏭"
			}
		],
		version: 4
	},
	"female-factory-worker": {
		id: "female-factory-worker",
		name: "Woman Factory Worker",
		keywords: [
			"female",
			"factory-worker",
			"assembly",
			"industrial",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f3ed",
				native: "👩‍🏭"
			},
			{
				unified: "1f469-1f3fb-200d-1f3ed",
				native: "👩🏻‍🏭"
			},
			{
				unified: "1f469-1f3fc-200d-1f3ed",
				native: "👩🏼‍🏭"
			},
			{
				unified: "1f469-1f3fd-200d-1f3ed",
				native: "👩🏽‍🏭"
			},
			{
				unified: "1f469-1f3fe-200d-1f3ed",
				native: "👩🏾‍🏭"
			},
			{
				unified: "1f469-1f3ff-200d-1f3ed",
				native: "👩🏿‍🏭"
			}
		],
		version: 4
	},
	office_worker: {
		id: "office_worker",
		name: "Office Worker",
		keywords: [
			"business"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f4bc",
				native: "🧑‍💼"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f4bc",
				native: "🧑🏻‍💼"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f4bc",
				native: "🧑🏼‍💼"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f4bc",
				native: "🧑🏽‍💼"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f4bc",
				native: "🧑🏾‍💼"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f4bc",
				native: "🧑🏿‍💼"
			}
		],
		version: 12.1
	},
	"male-office-worker": {
		id: "male-office-worker",
		name: "Man Office Worker",
		keywords: [
			"male",
			"office-worker",
			"business",
			"manager",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f4bc",
				native: "👨‍💼"
			},
			{
				unified: "1f468-1f3fb-200d-1f4bc",
				native: "👨🏻‍💼"
			},
			{
				unified: "1f468-1f3fc-200d-1f4bc",
				native: "👨🏼‍💼"
			},
			{
				unified: "1f468-1f3fd-200d-1f4bc",
				native: "👨🏽‍💼"
			},
			{
				unified: "1f468-1f3fe-200d-1f4bc",
				native: "👨🏾‍💼"
			},
			{
				unified: "1f468-1f3ff-200d-1f4bc",
				native: "👨🏿‍💼"
			}
		],
		version: 4
	},
	"female-office-worker": {
		id: "female-office-worker",
		name: "Woman Office Worker",
		keywords: [
			"female",
			"office-worker",
			"business",
			"manager",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f4bc",
				native: "👩‍💼"
			},
			{
				unified: "1f469-1f3fb-200d-1f4bc",
				native: "👩🏻‍💼"
			},
			{
				unified: "1f469-1f3fc-200d-1f4bc",
				native: "👩🏼‍💼"
			},
			{
				unified: "1f469-1f3fd-200d-1f4bc",
				native: "👩🏽‍💼"
			},
			{
				unified: "1f469-1f3fe-200d-1f4bc",
				native: "👩🏾‍💼"
			},
			{
				unified: "1f469-1f3ff-200d-1f4bc",
				native: "👩🏿‍💼"
			}
		],
		version: 4
	},
	scientist: {
		id: "scientist",
		name: "Scientist",
		keywords: [
			"chemistry"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f52c",
				native: "🧑‍🔬"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f52c",
				native: "🧑🏻‍🔬"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f52c",
				native: "🧑🏼‍🔬"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f52c",
				native: "🧑🏽‍🔬"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f52c",
				native: "🧑🏾‍🔬"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f52c",
				native: "🧑🏿‍🔬"
			}
		],
		version: 12.1
	},
	"male-scientist": {
		id: "male-scientist",
		name: "Man Scientist",
		keywords: [
			"male",
			"biologist",
			"chemist",
			"engineer",
			"physicist",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f52c",
				native: "👨‍🔬"
			},
			{
				unified: "1f468-1f3fb-200d-1f52c",
				native: "👨🏻‍🔬"
			},
			{
				unified: "1f468-1f3fc-200d-1f52c",
				native: "👨🏼‍🔬"
			},
			{
				unified: "1f468-1f3fd-200d-1f52c",
				native: "👨🏽‍🔬"
			},
			{
				unified: "1f468-1f3fe-200d-1f52c",
				native: "👨🏾‍🔬"
			},
			{
				unified: "1f468-1f3ff-200d-1f52c",
				native: "👨🏿‍🔬"
			}
		],
		version: 4
	},
	"female-scientist": {
		id: "female-scientist",
		name: "Woman Scientist",
		keywords: [
			"female",
			"biologist",
			"chemist",
			"engineer",
			"physicist",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f52c",
				native: "👩‍🔬"
			},
			{
				unified: "1f469-1f3fb-200d-1f52c",
				native: "👩🏻‍🔬"
			},
			{
				unified: "1f469-1f3fc-200d-1f52c",
				native: "👩🏼‍🔬"
			},
			{
				unified: "1f469-1f3fd-200d-1f52c",
				native: "👩🏽‍🔬"
			},
			{
				unified: "1f469-1f3fe-200d-1f52c",
				native: "👩🏾‍🔬"
			},
			{
				unified: "1f469-1f3ff-200d-1f52c",
				native: "👩🏿‍🔬"
			}
		],
		version: 4
	},
	technologist: {
		id: "technologist",
		name: "Technologist",
		keywords: [
			"computer"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f4bb",
				native: "🧑‍💻"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f4bb",
				native: "🧑🏻‍💻"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f4bb",
				native: "🧑🏼‍💻"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f4bb",
				native: "🧑🏽‍💻"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f4bb",
				native: "🧑🏾‍💻"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f4bb",
				native: "🧑🏿‍💻"
			}
		],
		version: 12.1
	},
	"male-technologist": {
		id: "male-technologist",
		name: "Man Technologist",
		keywords: [
			"male",
			"coder",
			"developer",
			"engineer",
			"programmer",
			"software",
			"human",
			"laptop",
			"computer"
		],
		skins: [
			{
				unified: "1f468-200d-1f4bb",
				native: "👨‍💻"
			},
			{
				unified: "1f468-1f3fb-200d-1f4bb",
				native: "👨🏻‍💻"
			},
			{
				unified: "1f468-1f3fc-200d-1f4bb",
				native: "👨🏼‍💻"
			},
			{
				unified: "1f468-1f3fd-200d-1f4bb",
				native: "👨🏽‍💻"
			},
			{
				unified: "1f468-1f3fe-200d-1f4bb",
				native: "👨🏾‍💻"
			},
			{
				unified: "1f468-1f3ff-200d-1f4bb",
				native: "👨🏿‍💻"
			}
		],
		version: 4
	},
	"female-technologist": {
		id: "female-technologist",
		name: "Woman Technologist",
		keywords: [
			"female",
			"coder",
			"developer",
			"engineer",
			"programmer",
			"software",
			"human",
			"laptop",
			"computer"
		],
		skins: [
			{
				unified: "1f469-200d-1f4bb",
				native: "👩‍💻"
			},
			{
				unified: "1f469-1f3fb-200d-1f4bb",
				native: "👩🏻‍💻"
			},
			{
				unified: "1f469-1f3fc-200d-1f4bb",
				native: "👩🏼‍💻"
			},
			{
				unified: "1f469-1f3fd-200d-1f4bb",
				native: "👩🏽‍💻"
			},
			{
				unified: "1f469-1f3fe-200d-1f4bb",
				native: "👩🏾‍💻"
			},
			{
				unified: "1f469-1f3ff-200d-1f4bb",
				native: "👩🏿‍💻"
			}
		],
		version: 4
	},
	singer: {
		id: "singer",
		name: "Singer",
		keywords: [
			"song",
			"artist",
			"performer"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f3a4",
				native: "🧑‍🎤"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f3a4",
				native: "🧑🏻‍🎤"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f3a4",
				native: "🧑🏼‍🎤"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f3a4",
				native: "🧑🏽‍🎤"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f3a4",
				native: "🧑🏾‍🎤"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f3a4",
				native: "🧑🏿‍🎤"
			}
		],
		version: 12.1
	},
	"male-singer": {
		id: "male-singer",
		name: "Man Singer",
		keywords: [
			"male",
			"rockstar",
			"entertainer",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f3a4",
				native: "👨‍🎤"
			},
			{
				unified: "1f468-1f3fb-200d-1f3a4",
				native: "👨🏻‍🎤"
			},
			{
				unified: "1f468-1f3fc-200d-1f3a4",
				native: "👨🏼‍🎤"
			},
			{
				unified: "1f468-1f3fd-200d-1f3a4",
				native: "👨🏽‍🎤"
			},
			{
				unified: "1f468-1f3fe-200d-1f3a4",
				native: "👨🏾‍🎤"
			},
			{
				unified: "1f468-1f3ff-200d-1f3a4",
				native: "👨🏿‍🎤"
			}
		],
		version: 4
	},
	"female-singer": {
		id: "female-singer",
		name: "Woman Singer",
		keywords: [
			"female",
			"rockstar",
			"entertainer",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f3a4",
				native: "👩‍🎤"
			},
			{
				unified: "1f469-1f3fb-200d-1f3a4",
				native: "👩🏻‍🎤"
			},
			{
				unified: "1f469-1f3fc-200d-1f3a4",
				native: "👩🏼‍🎤"
			},
			{
				unified: "1f469-1f3fd-200d-1f3a4",
				native: "👩🏽‍🎤"
			},
			{
				unified: "1f469-1f3fe-200d-1f3a4",
				native: "👩🏾‍🎤"
			},
			{
				unified: "1f469-1f3ff-200d-1f3a4",
				native: "👩🏿‍🎤"
			}
		],
		version: 4
	},
	artist: {
		id: "artist",
		name: "Artist",
		keywords: [
			"painting",
			"draw",
			"creativity"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f3a8",
				native: "🧑‍🎨"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f3a8",
				native: "🧑🏻‍🎨"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f3a8",
				native: "🧑🏼‍🎨"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f3a8",
				native: "🧑🏽‍🎨"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f3a8",
				native: "🧑🏾‍🎨"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f3a8",
				native: "🧑🏿‍🎨"
			}
		],
		version: 12.1
	},
	"male-artist": {
		id: "male-artist",
		name: "Man Artist",
		keywords: [
			"male",
			"painter",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f3a8",
				native: "👨‍🎨"
			},
			{
				unified: "1f468-1f3fb-200d-1f3a8",
				native: "👨🏻‍🎨"
			},
			{
				unified: "1f468-1f3fc-200d-1f3a8",
				native: "👨🏼‍🎨"
			},
			{
				unified: "1f468-1f3fd-200d-1f3a8",
				native: "👨🏽‍🎨"
			},
			{
				unified: "1f468-1f3fe-200d-1f3a8",
				native: "👨🏾‍🎨"
			},
			{
				unified: "1f468-1f3ff-200d-1f3a8",
				native: "👨🏿‍🎨"
			}
		],
		version: 4
	},
	"female-artist": {
		id: "female-artist",
		name: "Woman Artist",
		keywords: [
			"female",
			"painter",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f3a8",
				native: "👩‍🎨"
			},
			{
				unified: "1f469-1f3fb-200d-1f3a8",
				native: "👩🏻‍🎨"
			},
			{
				unified: "1f469-1f3fc-200d-1f3a8",
				native: "👩🏼‍🎨"
			},
			{
				unified: "1f469-1f3fd-200d-1f3a8",
				native: "👩🏽‍🎨"
			},
			{
				unified: "1f469-1f3fe-200d-1f3a8",
				native: "👩🏾‍🎨"
			},
			{
				unified: "1f469-1f3ff-200d-1f3a8",
				native: "👩🏿‍🎨"
			}
		],
		version: 4
	},
	pilot: {
		id: "pilot",
		name: "Pilot",
		keywords: [
			"fly",
			"plane",
			"airplane"
		],
		skins: [
			{
				unified: "1f9d1-200d-2708-fe0f",
				native: "🧑‍✈️"
			},
			{
				unified: "1f9d1-1f3fb-200d-2708-fe0f",
				native: "🧑🏻‍✈️"
			},
			{
				unified: "1f9d1-1f3fc-200d-2708-fe0f",
				native: "🧑🏼‍✈️"
			},
			{
				unified: "1f9d1-1f3fd-200d-2708-fe0f",
				native: "🧑🏽‍✈️"
			},
			{
				unified: "1f9d1-1f3fe-200d-2708-fe0f",
				native: "🧑🏾‍✈️"
			},
			{
				unified: "1f9d1-1f3ff-200d-2708-fe0f",
				native: "🧑🏿‍✈️"
			}
		],
		version: 12.1
	},
	"male-pilot": {
		id: "male-pilot",
		name: "Man Pilot",
		keywords: [
			"male",
			"aviator",
			"plane",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-2708-fe0f",
				native: "👨‍✈️"
			},
			{
				unified: "1f468-1f3fb-200d-2708-fe0f",
				native: "👨🏻‍✈️"
			},
			{
				unified: "1f468-1f3fc-200d-2708-fe0f",
				native: "👨🏼‍✈️"
			},
			{
				unified: "1f468-1f3fd-200d-2708-fe0f",
				native: "👨🏽‍✈️"
			},
			{
				unified: "1f468-1f3fe-200d-2708-fe0f",
				native: "👨🏾‍✈️"
			},
			{
				unified: "1f468-1f3ff-200d-2708-fe0f",
				native: "👨🏿‍✈️"
			}
		],
		version: 4
	},
	"female-pilot": {
		id: "female-pilot",
		name: "Woman Pilot",
		keywords: [
			"female",
			"aviator",
			"plane",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-2708-fe0f",
				native: "👩‍✈️"
			},
			{
				unified: "1f469-1f3fb-200d-2708-fe0f",
				native: "👩🏻‍✈️"
			},
			{
				unified: "1f469-1f3fc-200d-2708-fe0f",
				native: "👩🏼‍✈️"
			},
			{
				unified: "1f469-1f3fd-200d-2708-fe0f",
				native: "👩🏽‍✈️"
			},
			{
				unified: "1f469-1f3fe-200d-2708-fe0f",
				native: "👩🏾‍✈️"
			},
			{
				unified: "1f469-1f3ff-200d-2708-fe0f",
				native: "👩🏿‍✈️"
			}
		],
		version: 4
	},
	astronaut: {
		id: "astronaut",
		name: "Astronaut",
		keywords: [
			"outerspace"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f680",
				native: "🧑‍🚀"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f680",
				native: "🧑🏻‍🚀"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f680",
				native: "🧑🏼‍🚀"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f680",
				native: "🧑🏽‍🚀"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f680",
				native: "🧑🏾‍🚀"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f680",
				native: "🧑🏿‍🚀"
			}
		],
		version: 12.1
	},
	"male-astronaut": {
		id: "male-astronaut",
		name: "Man Astronaut",
		keywords: [
			"male",
			"space",
			"rocket",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f680",
				native: "👨‍🚀"
			},
			{
				unified: "1f468-1f3fb-200d-1f680",
				native: "👨🏻‍🚀"
			},
			{
				unified: "1f468-1f3fc-200d-1f680",
				native: "👨🏼‍🚀"
			},
			{
				unified: "1f468-1f3fd-200d-1f680",
				native: "👨🏽‍🚀"
			},
			{
				unified: "1f468-1f3fe-200d-1f680",
				native: "👨🏾‍🚀"
			},
			{
				unified: "1f468-1f3ff-200d-1f680",
				native: "👨🏿‍🚀"
			}
		],
		version: 4
	},
	"female-astronaut": {
		id: "female-astronaut",
		name: "Woman Astronaut",
		keywords: [
			"female",
			"space",
			"rocket",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f680",
				native: "👩‍🚀"
			},
			{
				unified: "1f469-1f3fb-200d-1f680",
				native: "👩🏻‍🚀"
			},
			{
				unified: "1f469-1f3fc-200d-1f680",
				native: "👩🏼‍🚀"
			},
			{
				unified: "1f469-1f3fd-200d-1f680",
				native: "👩🏽‍🚀"
			},
			{
				unified: "1f469-1f3fe-200d-1f680",
				native: "👩🏾‍🚀"
			},
			{
				unified: "1f469-1f3ff-200d-1f680",
				native: "👩🏿‍🚀"
			}
		],
		version: 4
	},
	firefighter: {
		id: "firefighter",
		name: "Firefighter",
		keywords: [
			"fire"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f692",
				native: "🧑‍🚒"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f692",
				native: "🧑🏻‍🚒"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f692",
				native: "🧑🏼‍🚒"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f692",
				native: "🧑🏽‍🚒"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f692",
				native: "🧑🏾‍🚒"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f692",
				native: "🧑🏿‍🚒"
			}
		],
		version: 12.1
	},
	"male-firefighter": {
		id: "male-firefighter",
		name: "Man Firefighter",
		keywords: [
			"male",
			"fireman",
			"human"
		],
		skins: [
			{
				unified: "1f468-200d-1f692",
				native: "👨‍🚒"
			},
			{
				unified: "1f468-1f3fb-200d-1f692",
				native: "👨🏻‍🚒"
			},
			{
				unified: "1f468-1f3fc-200d-1f692",
				native: "👨🏼‍🚒"
			},
			{
				unified: "1f468-1f3fd-200d-1f692",
				native: "👨🏽‍🚒"
			},
			{
				unified: "1f468-1f3fe-200d-1f692",
				native: "👨🏾‍🚒"
			},
			{
				unified: "1f468-1f3ff-200d-1f692",
				native: "👨🏿‍🚒"
			}
		],
		version: 4
	},
	"female-firefighter": {
		id: "female-firefighter",
		name: "Woman Firefighter",
		keywords: [
			"female",
			"fireman",
			"human"
		],
		skins: [
			{
				unified: "1f469-200d-1f692",
				native: "👩‍🚒"
			},
			{
				unified: "1f469-1f3fb-200d-1f692",
				native: "👩🏻‍🚒"
			},
			{
				unified: "1f469-1f3fc-200d-1f692",
				native: "👩🏼‍🚒"
			},
			{
				unified: "1f469-1f3fd-200d-1f692",
				native: "👩🏽‍🚒"
			},
			{
				unified: "1f469-1f3fe-200d-1f692",
				native: "👩🏾‍🚒"
			},
			{
				unified: "1f469-1f3ff-200d-1f692",
				native: "👩🏿‍🚒"
			}
		],
		version: 4
	},
	cop: {
		id: "cop",
		name: "Police Officer",
		keywords: [
			"cop"
		],
		skins: [
			{
				unified: "1f46e",
				native: "👮"
			},
			{
				unified: "1f46e-1f3fb",
				native: "👮🏻"
			},
			{
				unified: "1f46e-1f3fc",
				native: "👮🏼"
			},
			{
				unified: "1f46e-1f3fd",
				native: "👮🏽"
			},
			{
				unified: "1f46e-1f3fe",
				native: "👮🏾"
			},
			{
				unified: "1f46e-1f3ff",
				native: "👮🏿"
			}
		],
		version: 1
	},
	"male-police-officer": {
		id: "male-police-officer",
		name: "Man Police Officer",
		keywords: [
			"male",
			"police-officer",
			"law",
			"legal",
			"enforcement",
			"arrest",
			"911"
		],
		skins: [
			{
				unified: "1f46e-200d-2642-fe0f",
				native: "👮‍♂️"
			},
			{
				unified: "1f46e-1f3fb-200d-2642-fe0f",
				native: "👮🏻‍♂️"
			},
			{
				unified: "1f46e-1f3fc-200d-2642-fe0f",
				native: "👮🏼‍♂️"
			},
			{
				unified: "1f46e-1f3fd-200d-2642-fe0f",
				native: "👮🏽‍♂️"
			},
			{
				unified: "1f46e-1f3fe-200d-2642-fe0f",
				native: "👮🏾‍♂️"
			},
			{
				unified: "1f46e-1f3ff-200d-2642-fe0f",
				native: "👮🏿‍♂️"
			}
		],
		version: 4
	},
	"female-police-officer": {
		id: "female-police-officer",
		name: "Woman Police Officer",
		keywords: [
			"female",
			"police-officer",
			"law",
			"legal",
			"enforcement",
			"arrest",
			"911"
		],
		skins: [
			{
				unified: "1f46e-200d-2640-fe0f",
				native: "👮‍♀️"
			},
			{
				unified: "1f46e-1f3fb-200d-2640-fe0f",
				native: "👮🏻‍♀️"
			},
			{
				unified: "1f46e-1f3fc-200d-2640-fe0f",
				native: "👮🏼‍♀️"
			},
			{
				unified: "1f46e-1f3fd-200d-2640-fe0f",
				native: "👮🏽‍♀️"
			},
			{
				unified: "1f46e-1f3fe-200d-2640-fe0f",
				native: "👮🏾‍♀️"
			},
			{
				unified: "1f46e-1f3ff-200d-2640-fe0f",
				native: "👮🏿‍♀️"
			}
		],
		version: 4
	},
	sleuth_or_spy: {
		id: "sleuth_or_spy",
		name: "Detective",
		keywords: [
			"sleuth",
			"or",
			"spy",
			"human"
		],
		skins: [
			{
				unified: "1f575-fe0f",
				native: "🕵️"
			},
			{
				unified: "1f575-1f3fb",
				native: "🕵🏻"
			},
			{
				unified: "1f575-1f3fc",
				native: "🕵🏼"
			},
			{
				unified: "1f575-1f3fd",
				native: "🕵🏽"
			},
			{
				unified: "1f575-1f3fe",
				native: "🕵🏾"
			},
			{
				unified: "1f575-1f3ff",
				native: "🕵🏿"
			}
		],
		version: 1
	},
	"male-detective": {
		id: "male-detective",
		name: "Man Detective",
		keywords: [
			"male",
			"crime"
		],
		skins: [
			{
				unified: "1f575-fe0f-200d-2642-fe0f",
				native: "🕵️‍♂️"
			},
			{
				unified: "1f575-1f3fb-200d-2642-fe0f",
				native: "🕵🏻‍♂️"
			},
			{
				unified: "1f575-1f3fc-200d-2642-fe0f",
				native: "🕵🏼‍♂️"
			},
			{
				unified: "1f575-1f3fd-200d-2642-fe0f",
				native: "🕵🏽‍♂️"
			},
			{
				unified: "1f575-1f3fe-200d-2642-fe0f",
				native: "🕵🏾‍♂️"
			},
			{
				unified: "1f575-1f3ff-200d-2642-fe0f",
				native: "🕵🏿‍♂️"
			}
		],
		version: 4
	},
	"female-detective": {
		id: "female-detective",
		name: "Woman Detective",
		keywords: [
			"female",
			"human",
			"spy"
		],
		skins: [
			{
				unified: "1f575-fe0f-200d-2640-fe0f",
				native: "🕵️‍♀️"
			},
			{
				unified: "1f575-1f3fb-200d-2640-fe0f",
				native: "🕵🏻‍♀️"
			},
			{
				unified: "1f575-1f3fc-200d-2640-fe0f",
				native: "🕵🏼‍♀️"
			},
			{
				unified: "1f575-1f3fd-200d-2640-fe0f",
				native: "🕵🏽‍♀️"
			},
			{
				unified: "1f575-1f3fe-200d-2640-fe0f",
				native: "🕵🏾‍♀️"
			},
			{
				unified: "1f575-1f3ff-200d-2640-fe0f",
				native: "🕵🏿‍♀️"
			}
		],
		version: 4
	},
	guardsman: {
		id: "guardsman",
		name: "Guard",
		keywords: [
			"guardsman",
			"protect"
		],
		skins: [
			{
				unified: "1f482",
				native: "💂"
			},
			{
				unified: "1f482-1f3fb",
				native: "💂🏻"
			},
			{
				unified: "1f482-1f3fc",
				native: "💂🏼"
			},
			{
				unified: "1f482-1f3fd",
				native: "💂🏽"
			},
			{
				unified: "1f482-1f3fe",
				native: "💂🏾"
			},
			{
				unified: "1f482-1f3ff",
				native: "💂🏿"
			}
		],
		version: 1
	},
	"male-guard": {
		id: "male-guard",
		name: "Man Guard",
		keywords: [
			"male",
			"uk",
			"gb",
			"british",
			"guy",
			"royal"
		],
		skins: [
			{
				unified: "1f482-200d-2642-fe0f",
				native: "💂‍♂️"
			},
			{
				unified: "1f482-1f3fb-200d-2642-fe0f",
				native: "💂🏻‍♂️"
			},
			{
				unified: "1f482-1f3fc-200d-2642-fe0f",
				native: "💂🏼‍♂️"
			},
			{
				unified: "1f482-1f3fd-200d-2642-fe0f",
				native: "💂🏽‍♂️"
			},
			{
				unified: "1f482-1f3fe-200d-2642-fe0f",
				native: "💂🏾‍♂️"
			},
			{
				unified: "1f482-1f3ff-200d-2642-fe0f",
				native: "💂🏿‍♂️"
			}
		],
		version: 4
	},
	"female-guard": {
		id: "female-guard",
		name: "Woman Guard",
		keywords: [
			"female",
			"uk",
			"gb",
			"british",
			"royal"
		],
		skins: [
			{
				unified: "1f482-200d-2640-fe0f",
				native: "💂‍♀️"
			},
			{
				unified: "1f482-1f3fb-200d-2640-fe0f",
				native: "💂🏻‍♀️"
			},
			{
				unified: "1f482-1f3fc-200d-2640-fe0f",
				native: "💂🏼‍♀️"
			},
			{
				unified: "1f482-1f3fd-200d-2640-fe0f",
				native: "💂🏽‍♀️"
			},
			{
				unified: "1f482-1f3fe-200d-2640-fe0f",
				native: "💂🏾‍♀️"
			},
			{
				unified: "1f482-1f3ff-200d-2640-fe0f",
				native: "💂🏿‍♀️"
			}
		],
		version: 4
	},
	ninja: {
		id: "ninja",
		name: "Ninja",
		keywords: [
			"ninjutsu",
			"skills",
			"japanese"
		],
		skins: [
			{
				unified: "1f977",
				native: "🥷"
			},
			{
				unified: "1f977-1f3fb",
				native: "🥷🏻"
			},
			{
				unified: "1f977-1f3fc",
				native: "🥷🏼"
			},
			{
				unified: "1f977-1f3fd",
				native: "🥷🏽"
			},
			{
				unified: "1f977-1f3fe",
				native: "🥷🏾"
			},
			{
				unified: "1f977-1f3ff",
				native: "🥷🏿"
			}
		],
		version: 13
	},
	construction_worker: {
		id: "construction_worker",
		name: "Construction Worker",
		keywords: [
			"labor",
			"build"
		],
		skins: [
			{
				unified: "1f477",
				native: "👷"
			},
			{
				unified: "1f477-1f3fb",
				native: "👷🏻"
			},
			{
				unified: "1f477-1f3fc",
				native: "👷🏼"
			},
			{
				unified: "1f477-1f3fd",
				native: "👷🏽"
			},
			{
				unified: "1f477-1f3fe",
				native: "👷🏾"
			},
			{
				unified: "1f477-1f3ff",
				native: "👷🏿"
			}
		],
		version: 1
	},
	"male-construction-worker": {
		id: "male-construction-worker",
		name: "Man Construction Worker",
		keywords: [
			"male",
			"construction-worker",
			"human",
			"wip",
			"guy",
			"build",
			"labor"
		],
		skins: [
			{
				unified: "1f477-200d-2642-fe0f",
				native: "👷‍♂️"
			},
			{
				unified: "1f477-1f3fb-200d-2642-fe0f",
				native: "👷🏻‍♂️"
			},
			{
				unified: "1f477-1f3fc-200d-2642-fe0f",
				native: "👷🏼‍♂️"
			},
			{
				unified: "1f477-1f3fd-200d-2642-fe0f",
				native: "👷🏽‍♂️"
			},
			{
				unified: "1f477-1f3fe-200d-2642-fe0f",
				native: "👷🏾‍♂️"
			},
			{
				unified: "1f477-1f3ff-200d-2642-fe0f",
				native: "👷🏿‍♂️"
			}
		],
		version: 4
	},
	"female-construction-worker": {
		id: "female-construction-worker",
		name: "Woman Construction Worker",
		keywords: [
			"female",
			"construction-worker",
			"human",
			"wip",
			"build",
			"labor"
		],
		skins: [
			{
				unified: "1f477-200d-2640-fe0f",
				native: "👷‍♀️"
			},
			{
				unified: "1f477-1f3fb-200d-2640-fe0f",
				native: "👷🏻‍♀️"
			},
			{
				unified: "1f477-1f3fc-200d-2640-fe0f",
				native: "👷🏼‍♀️"
			},
			{
				unified: "1f477-1f3fd-200d-2640-fe0f",
				native: "👷🏽‍♀️"
			},
			{
				unified: "1f477-1f3fe-200d-2640-fe0f",
				native: "👷🏾‍♀️"
			},
			{
				unified: "1f477-1f3ff-200d-2640-fe0f",
				native: "👷🏿‍♀️"
			}
		],
		version: 4
	},
	person_with_crown: {
		id: "person_with_crown",
		name: "Person with Crown",
		keywords: [
			"royalty",
			"power"
		],
		skins: [
			{
				unified: "1fac5",
				native: "🫅"
			},
			{
				unified: "1fac5-1f3fb",
				native: "🫅🏻"
			},
			{
				unified: "1fac5-1f3fc",
				native: "🫅🏼"
			},
			{
				unified: "1fac5-1f3fd",
				native: "🫅🏽"
			},
			{
				unified: "1fac5-1f3fe",
				native: "🫅🏾"
			},
			{
				unified: "1fac5-1f3ff",
				native: "🫅🏿"
			}
		],
		version: 14
	},
	prince: {
		id: "prince",
		name: "Prince",
		keywords: [
			"boy",
			"man",
			"male",
			"crown",
			"royal",
			"king"
		],
		skins: [
			{
				unified: "1f934",
				native: "🤴"
			},
			{
				unified: "1f934-1f3fb",
				native: "🤴🏻"
			},
			{
				unified: "1f934-1f3fc",
				native: "🤴🏼"
			},
			{
				unified: "1f934-1f3fd",
				native: "🤴🏽"
			},
			{
				unified: "1f934-1f3fe",
				native: "🤴🏾"
			},
			{
				unified: "1f934-1f3ff",
				native: "🤴🏿"
			}
		],
		version: 3
	},
	princess: {
		id: "princess",
		name: "Princess",
		keywords: [
			"girl",
			"woman",
			"female",
			"blond",
			"crown",
			"royal",
			"queen"
		],
		skins: [
			{
				unified: "1f478",
				native: "👸"
			},
			{
				unified: "1f478-1f3fb",
				native: "👸🏻"
			},
			{
				unified: "1f478-1f3fc",
				native: "👸🏼"
			},
			{
				unified: "1f478-1f3fd",
				native: "👸🏽"
			},
			{
				unified: "1f478-1f3fe",
				native: "👸🏾"
			},
			{
				unified: "1f478-1f3ff",
				native: "👸🏿"
			}
		],
		version: 1
	},
	man_with_turban: {
		id: "man_with_turban",
		name: "Man with Turban",
		keywords: [
			"person",
			"wearing",
			"headdress"
		],
		skins: [
			{
				unified: "1f473",
				native: "👳"
			},
			{
				unified: "1f473-1f3fb",
				native: "👳🏻"
			},
			{
				unified: "1f473-1f3fc",
				native: "👳🏼"
			},
			{
				unified: "1f473-1f3fd",
				native: "👳🏽"
			},
			{
				unified: "1f473-1f3fe",
				native: "👳🏾"
			},
			{
				unified: "1f473-1f3ff",
				native: "👳🏿"
			}
		],
		version: 1
	},
	"man-wearing-turban": {
		id: "man-wearing-turban",
		name: "Man Wearing Turban",
		keywords: [
			"wearing-turban",
			"male",
			"indian",
			"hinduism",
			"arabs"
		],
		skins: [
			{
				unified: "1f473-200d-2642-fe0f",
				native: "👳‍♂️"
			},
			{
				unified: "1f473-1f3fb-200d-2642-fe0f",
				native: "👳🏻‍♂️"
			},
			{
				unified: "1f473-1f3fc-200d-2642-fe0f",
				native: "👳🏼‍♂️"
			},
			{
				unified: "1f473-1f3fd-200d-2642-fe0f",
				native: "👳🏽‍♂️"
			},
			{
				unified: "1f473-1f3fe-200d-2642-fe0f",
				native: "👳🏾‍♂️"
			},
			{
				unified: "1f473-1f3ff-200d-2642-fe0f",
				native: "👳🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-wearing-turban": {
		id: "woman-wearing-turban",
		name: "Woman Wearing Turban",
		keywords: [
			"wearing-turban",
			"female",
			"indian",
			"hinduism",
			"arabs"
		],
		skins: [
			{
				unified: "1f473-200d-2640-fe0f",
				native: "👳‍♀️"
			},
			{
				unified: "1f473-1f3fb-200d-2640-fe0f",
				native: "👳🏻‍♀️"
			},
			{
				unified: "1f473-1f3fc-200d-2640-fe0f",
				native: "👳🏼‍♀️"
			},
			{
				unified: "1f473-1f3fd-200d-2640-fe0f",
				native: "👳🏽‍♀️"
			},
			{
				unified: "1f473-1f3fe-200d-2640-fe0f",
				native: "👳🏾‍♀️"
			},
			{
				unified: "1f473-1f3ff-200d-2640-fe0f",
				native: "👳🏿‍♀️"
			}
		],
		version: 4
	},
	man_with_gua_pi_mao: {
		id: "man_with_gua_pi_mao",
		name: "Man with Gua Pi Mao",
		keywords: [
			"skullcap",
			"male",
			"boy",
			"chinese"
		],
		skins: [
			{
				unified: "1f472",
				native: "👲"
			},
			{
				unified: "1f472-1f3fb",
				native: "👲🏻"
			},
			{
				unified: "1f472-1f3fc",
				native: "👲🏼"
			},
			{
				unified: "1f472-1f3fd",
				native: "👲🏽"
			},
			{
				unified: "1f472-1f3fe",
				native: "👲🏾"
			},
			{
				unified: "1f472-1f3ff",
				native: "👲🏿"
			}
		],
		version: 1
	},
	person_with_headscarf: {
		id: "person_with_headscarf",
		name: "Woman with Headscarf",
		keywords: [
			"person",
			"female",
			"hijab",
			"mantilla",
			"tichel"
		],
		skins: [
			{
				unified: "1f9d5",
				native: "🧕"
			},
			{
				unified: "1f9d5-1f3fb",
				native: "🧕🏻"
			},
			{
				unified: "1f9d5-1f3fc",
				native: "🧕🏼"
			},
			{
				unified: "1f9d5-1f3fd",
				native: "🧕🏽"
			},
			{
				unified: "1f9d5-1f3fe",
				native: "🧕🏾"
			},
			{
				unified: "1f9d5-1f3ff",
				native: "🧕🏿"
			}
		],
		version: 5
	},
	person_in_tuxedo: {
		id: "person_in_tuxedo",
		name: "Man in Tuxedo",
		keywords: [
			"person",
			"couple",
			"marriage",
			"wedding",
			"groom"
		],
		skins: [
			{
				unified: "1f935",
				native: "🤵"
			},
			{
				unified: "1f935-1f3fb",
				native: "🤵🏻"
			},
			{
				unified: "1f935-1f3fc",
				native: "🤵🏼"
			},
			{
				unified: "1f935-1f3fd",
				native: "🤵🏽"
			},
			{
				unified: "1f935-1f3fe",
				native: "🤵🏾"
			},
			{
				unified: "1f935-1f3ff",
				native: "🤵🏿"
			}
		],
		version: 3
	},
	man_in_tuxedo: {
		id: "man_in_tuxedo",
		name: "Man in Tuxedo",
		keywords: [
			"formal",
			"fashion"
		],
		skins: [
			{
				unified: "1f935-200d-2642-fe0f",
				native: "🤵‍♂️"
			},
			{
				unified: "1f935-1f3fb-200d-2642-fe0f",
				native: "🤵🏻‍♂️"
			},
			{
				unified: "1f935-1f3fc-200d-2642-fe0f",
				native: "🤵🏼‍♂️"
			},
			{
				unified: "1f935-1f3fd-200d-2642-fe0f",
				native: "🤵🏽‍♂️"
			},
			{
				unified: "1f935-1f3fe-200d-2642-fe0f",
				native: "🤵🏾‍♂️"
			},
			{
				unified: "1f935-1f3ff-200d-2642-fe0f",
				native: "🤵🏿‍♂️"
			}
		],
		version: 13
	},
	woman_in_tuxedo: {
		id: "woman_in_tuxedo",
		name: "Woman in Tuxedo",
		keywords: [
			"formal",
			"fashion"
		],
		skins: [
			{
				unified: "1f935-200d-2640-fe0f",
				native: "🤵‍♀️"
			},
			{
				unified: "1f935-1f3fb-200d-2640-fe0f",
				native: "🤵🏻‍♀️"
			},
			{
				unified: "1f935-1f3fc-200d-2640-fe0f",
				native: "🤵🏼‍♀️"
			},
			{
				unified: "1f935-1f3fd-200d-2640-fe0f",
				native: "🤵🏽‍♀️"
			},
			{
				unified: "1f935-1f3fe-200d-2640-fe0f",
				native: "🤵🏾‍♀️"
			},
			{
				unified: "1f935-1f3ff-200d-2640-fe0f",
				native: "🤵🏿‍♀️"
			}
		],
		version: 13
	},
	bride_with_veil: {
		id: "bride_with_veil",
		name: "Bride with Veil",
		keywords: [
			"couple",
			"marriage",
			"wedding",
			"woman"
		],
		skins: [
			{
				unified: "1f470",
				native: "👰"
			},
			{
				unified: "1f470-1f3fb",
				native: "👰🏻"
			},
			{
				unified: "1f470-1f3fc",
				native: "👰🏼"
			},
			{
				unified: "1f470-1f3fd",
				native: "👰🏽"
			},
			{
				unified: "1f470-1f3fe",
				native: "👰🏾"
			},
			{
				unified: "1f470-1f3ff",
				native: "👰🏿"
			}
		],
		version: 1
	},
	man_with_veil: {
		id: "man_with_veil",
		name: "Man with Veil",
		keywords: [
			"wedding",
			"marriage"
		],
		skins: [
			{
				unified: "1f470-200d-2642-fe0f",
				native: "👰‍♂️"
			},
			{
				unified: "1f470-1f3fb-200d-2642-fe0f",
				native: "👰🏻‍♂️"
			},
			{
				unified: "1f470-1f3fc-200d-2642-fe0f",
				native: "👰🏼‍♂️"
			},
			{
				unified: "1f470-1f3fd-200d-2642-fe0f",
				native: "👰🏽‍♂️"
			},
			{
				unified: "1f470-1f3fe-200d-2642-fe0f",
				native: "👰🏾‍♂️"
			},
			{
				unified: "1f470-1f3ff-200d-2642-fe0f",
				native: "👰🏿‍♂️"
			}
		],
		version: 13
	},
	woman_with_veil: {
		id: "woman_with_veil",
		name: "Woman with Veil",
		keywords: [
			"wedding",
			"marriage"
		],
		skins: [
			{
				unified: "1f470-200d-2640-fe0f",
				native: "👰‍♀️"
			},
			{
				unified: "1f470-1f3fb-200d-2640-fe0f",
				native: "👰🏻‍♀️"
			},
			{
				unified: "1f470-1f3fc-200d-2640-fe0f",
				native: "👰🏼‍♀️"
			},
			{
				unified: "1f470-1f3fd-200d-2640-fe0f",
				native: "👰🏽‍♀️"
			},
			{
				unified: "1f470-1f3fe-200d-2640-fe0f",
				native: "👰🏾‍♀️"
			},
			{
				unified: "1f470-1f3ff-200d-2640-fe0f",
				native: "👰🏿‍♀️"
			}
		],
		version: 13
	},
	pregnant_woman: {
		id: "pregnant_woman",
		name: "Pregnant Woman",
		keywords: [
			"baby"
		],
		skins: [
			{
				unified: "1f930",
				native: "🤰"
			},
			{
				unified: "1f930-1f3fb",
				native: "🤰🏻"
			},
			{
				unified: "1f930-1f3fc",
				native: "🤰🏼"
			},
			{
				unified: "1f930-1f3fd",
				native: "🤰🏽"
			},
			{
				unified: "1f930-1f3fe",
				native: "🤰🏾"
			},
			{
				unified: "1f930-1f3ff",
				native: "🤰🏿"
			}
		],
		version: 3
	},
	pregnant_man: {
		id: "pregnant_man",
		name: "Pregnant Man",
		keywords: [
			"baby",
			"belly"
		],
		skins: [
			{
				unified: "1fac3",
				native: "🫃"
			},
			{
				unified: "1fac3-1f3fb",
				native: "🫃🏻"
			},
			{
				unified: "1fac3-1f3fc",
				native: "🫃🏼"
			},
			{
				unified: "1fac3-1f3fd",
				native: "🫃🏽"
			},
			{
				unified: "1fac3-1f3fe",
				native: "🫃🏾"
			},
			{
				unified: "1fac3-1f3ff",
				native: "🫃🏿"
			}
		],
		version: 14
	},
	pregnant_person: {
		id: "pregnant_person",
		name: "Pregnant Person",
		keywords: [
			"baby",
			"belly"
		],
		skins: [
			{
				unified: "1fac4",
				native: "🫄"
			},
			{
				unified: "1fac4-1f3fb",
				native: "🫄🏻"
			},
			{
				unified: "1fac4-1f3fc",
				native: "🫄🏼"
			},
			{
				unified: "1fac4-1f3fd",
				native: "🫄🏽"
			},
			{
				unified: "1fac4-1f3fe",
				native: "🫄🏾"
			},
			{
				unified: "1fac4-1f3ff",
				native: "🫄🏿"
			}
		],
		version: 14
	},
	"breast-feeding": {
		id: "breast-feeding",
		name: "Breast-Feeding",
		keywords: [
			"breast",
			"feeding",
			"nursing",
			"baby"
		],
		skins: [
			{
				unified: "1f931",
				native: "🤱"
			},
			{
				unified: "1f931-1f3fb",
				native: "🤱🏻"
			},
			{
				unified: "1f931-1f3fc",
				native: "🤱🏼"
			},
			{
				unified: "1f931-1f3fd",
				native: "🤱🏽"
			},
			{
				unified: "1f931-1f3fe",
				native: "🤱🏾"
			},
			{
				unified: "1f931-1f3ff",
				native: "🤱🏿"
			}
		],
		version: 5
	},
	woman_feeding_baby: {
		id: "woman_feeding_baby",
		name: "Woman Feeding Baby",
		keywords: [
			"birth",
			"food"
		],
		skins: [
			{
				unified: "1f469-200d-1f37c",
				native: "👩‍🍼"
			},
			{
				unified: "1f469-1f3fb-200d-1f37c",
				native: "👩🏻‍🍼"
			},
			{
				unified: "1f469-1f3fc-200d-1f37c",
				native: "👩🏼‍🍼"
			},
			{
				unified: "1f469-1f3fd-200d-1f37c",
				native: "👩🏽‍🍼"
			},
			{
				unified: "1f469-1f3fe-200d-1f37c",
				native: "👩🏾‍🍼"
			},
			{
				unified: "1f469-1f3ff-200d-1f37c",
				native: "👩🏿‍🍼"
			}
		],
		version: 13
	},
	man_feeding_baby: {
		id: "man_feeding_baby",
		name: "Man Feeding Baby",
		keywords: [
			"birth",
			"food"
		],
		skins: [
			{
				unified: "1f468-200d-1f37c",
				native: "👨‍🍼"
			},
			{
				unified: "1f468-1f3fb-200d-1f37c",
				native: "👨🏻‍🍼"
			},
			{
				unified: "1f468-1f3fc-200d-1f37c",
				native: "👨🏼‍🍼"
			},
			{
				unified: "1f468-1f3fd-200d-1f37c",
				native: "👨🏽‍🍼"
			},
			{
				unified: "1f468-1f3fe-200d-1f37c",
				native: "👨🏾‍🍼"
			},
			{
				unified: "1f468-1f3ff-200d-1f37c",
				native: "👨🏿‍🍼"
			}
		],
		version: 13
	},
	person_feeding_baby: {
		id: "person_feeding_baby",
		name: "Person Feeding Baby",
		keywords: [
			"birth",
			"food"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f37c",
				native: "🧑‍🍼"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f37c",
				native: "🧑🏻‍🍼"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f37c",
				native: "🧑🏼‍🍼"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f37c",
				native: "🧑🏽‍🍼"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f37c",
				native: "🧑🏾‍🍼"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f37c",
				native: "🧑🏿‍🍼"
			}
		],
		version: 13
	},
	angel: {
		id: "angel",
		name: "Baby Angel",
		keywords: [
			"heaven",
			"wings",
			"halo"
		],
		skins: [
			{
				unified: "1f47c",
				native: "👼"
			},
			{
				unified: "1f47c-1f3fb",
				native: "👼🏻"
			},
			{
				unified: "1f47c-1f3fc",
				native: "👼🏼"
			},
			{
				unified: "1f47c-1f3fd",
				native: "👼🏽"
			},
			{
				unified: "1f47c-1f3fe",
				native: "👼🏾"
			},
			{
				unified: "1f47c-1f3ff",
				native: "👼🏿"
			}
		],
		version: 1
	},
	santa: {
		id: "santa",
		name: "Santa Claus",
		keywords: [
			"festival",
			"man",
			"male",
			"xmas",
			"father",
			"christmas"
		],
		skins: [
			{
				unified: "1f385",
				native: "🎅"
			},
			{
				unified: "1f385-1f3fb",
				native: "🎅🏻"
			},
			{
				unified: "1f385-1f3fc",
				native: "🎅🏼"
			},
			{
				unified: "1f385-1f3fd",
				native: "🎅🏽"
			},
			{
				unified: "1f385-1f3fe",
				native: "🎅🏾"
			},
			{
				unified: "1f385-1f3ff",
				native: "🎅🏿"
			}
		],
		version: 1
	},
	mrs_claus: {
		id: "mrs_claus",
		name: "Mrs. Claus",
		keywords: [
			"mrs",
			"mother",
			"christmas",
			"woman",
			"female",
			"xmas"
		],
		skins: [
			{
				unified: "1f936",
				native: "🤶"
			},
			{
				unified: "1f936-1f3fb",
				native: "🤶🏻"
			},
			{
				unified: "1f936-1f3fc",
				native: "🤶🏼"
			},
			{
				unified: "1f936-1f3fd",
				native: "🤶🏽"
			},
			{
				unified: "1f936-1f3fe",
				native: "🤶🏾"
			},
			{
				unified: "1f936-1f3ff",
				native: "🤶🏿"
			}
		],
		version: 3
	},
	mx_claus: {
		id: "mx_claus",
		name: "Mx Claus",
		keywords: [
			"christmas"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f384",
				native: "🧑‍🎄"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f384",
				native: "🧑🏻‍🎄"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f384",
				native: "🧑🏼‍🎄"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f384",
				native: "🧑🏽‍🎄"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f384",
				native: "🧑🏾‍🎄"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f384",
				native: "🧑🏿‍🎄"
			}
		],
		version: 13
	},
	superhero: {
		id: "superhero",
		name: "Superhero",
		keywords: [
			"marvel"
		],
		skins: [
			{
				unified: "1f9b8",
				native: "🦸"
			},
			{
				unified: "1f9b8-1f3fb",
				native: "🦸🏻"
			},
			{
				unified: "1f9b8-1f3fc",
				native: "🦸🏼"
			},
			{
				unified: "1f9b8-1f3fd",
				native: "🦸🏽"
			},
			{
				unified: "1f9b8-1f3fe",
				native: "🦸🏾"
			},
			{
				unified: "1f9b8-1f3ff",
				native: "🦸🏿"
			}
		],
		version: 11
	},
	male_superhero: {
		id: "male_superhero",
		name: "Man Superhero",
		keywords: [
			"male",
			"good",
			"hero",
			"superpowers"
		],
		skins: [
			{
				unified: "1f9b8-200d-2642-fe0f",
				native: "🦸‍♂️"
			},
			{
				unified: "1f9b8-1f3fb-200d-2642-fe0f",
				native: "🦸🏻‍♂️"
			},
			{
				unified: "1f9b8-1f3fc-200d-2642-fe0f",
				native: "🦸🏼‍♂️"
			},
			{
				unified: "1f9b8-1f3fd-200d-2642-fe0f",
				native: "🦸🏽‍♂️"
			},
			{
				unified: "1f9b8-1f3fe-200d-2642-fe0f",
				native: "🦸🏾‍♂️"
			},
			{
				unified: "1f9b8-1f3ff-200d-2642-fe0f",
				native: "🦸🏿‍♂️"
			}
		],
		version: 11
	},
	female_superhero: {
		id: "female_superhero",
		name: "Woman Superhero",
		keywords: [
			"female",
			"good",
			"heroine",
			"superpowers"
		],
		skins: [
			{
				unified: "1f9b8-200d-2640-fe0f",
				native: "🦸‍♀️"
			},
			{
				unified: "1f9b8-1f3fb-200d-2640-fe0f",
				native: "🦸🏻‍♀️"
			},
			{
				unified: "1f9b8-1f3fc-200d-2640-fe0f",
				native: "🦸🏼‍♀️"
			},
			{
				unified: "1f9b8-1f3fd-200d-2640-fe0f",
				native: "🦸🏽‍♀️"
			},
			{
				unified: "1f9b8-1f3fe-200d-2640-fe0f",
				native: "🦸🏾‍♀️"
			},
			{
				unified: "1f9b8-1f3ff-200d-2640-fe0f",
				native: "🦸🏿‍♀️"
			}
		],
		version: 11
	},
	supervillain: {
		id: "supervillain",
		name: "Supervillain",
		keywords: [
			"marvel"
		],
		skins: [
			{
				unified: "1f9b9",
				native: "🦹"
			},
			{
				unified: "1f9b9-1f3fb",
				native: "🦹🏻"
			},
			{
				unified: "1f9b9-1f3fc",
				native: "🦹🏼"
			},
			{
				unified: "1f9b9-1f3fd",
				native: "🦹🏽"
			},
			{
				unified: "1f9b9-1f3fe",
				native: "🦹🏾"
			},
			{
				unified: "1f9b9-1f3ff",
				native: "🦹🏿"
			}
		],
		version: 11
	},
	male_supervillain: {
		id: "male_supervillain",
		name: "Man Supervillain",
		keywords: [
			"male",
			"evil",
			"bad",
			"criminal",
			"hero",
			"superpowers"
		],
		skins: [
			{
				unified: "1f9b9-200d-2642-fe0f",
				native: "🦹‍♂️"
			},
			{
				unified: "1f9b9-1f3fb-200d-2642-fe0f",
				native: "🦹🏻‍♂️"
			},
			{
				unified: "1f9b9-1f3fc-200d-2642-fe0f",
				native: "🦹🏼‍♂️"
			},
			{
				unified: "1f9b9-1f3fd-200d-2642-fe0f",
				native: "🦹🏽‍♂️"
			},
			{
				unified: "1f9b9-1f3fe-200d-2642-fe0f",
				native: "🦹🏾‍♂️"
			},
			{
				unified: "1f9b9-1f3ff-200d-2642-fe0f",
				native: "🦹🏿‍♂️"
			}
		],
		version: 11
	},
	female_supervillain: {
		id: "female_supervillain",
		name: "Woman Supervillain",
		keywords: [
			"female",
			"evil",
			"bad",
			"criminal",
			"heroine",
			"superpowers"
		],
		skins: [
			{
				unified: "1f9b9-200d-2640-fe0f",
				native: "🦹‍♀️"
			},
			{
				unified: "1f9b9-1f3fb-200d-2640-fe0f",
				native: "🦹🏻‍♀️"
			},
			{
				unified: "1f9b9-1f3fc-200d-2640-fe0f",
				native: "🦹🏼‍♀️"
			},
			{
				unified: "1f9b9-1f3fd-200d-2640-fe0f",
				native: "🦹🏽‍♀️"
			},
			{
				unified: "1f9b9-1f3fe-200d-2640-fe0f",
				native: "🦹🏾‍♀️"
			},
			{
				unified: "1f9b9-1f3ff-200d-2640-fe0f",
				native: "🦹🏿‍♀️"
			}
		],
		version: 11
	},
	mage: {
		id: "mage",
		name: "Mage",
		keywords: [
			"magic"
		],
		skins: [
			{
				unified: "1f9d9",
				native: "🧙"
			},
			{
				unified: "1f9d9-1f3fb",
				native: "🧙🏻"
			},
			{
				unified: "1f9d9-1f3fc",
				native: "🧙🏼"
			},
			{
				unified: "1f9d9-1f3fd",
				native: "🧙🏽"
			},
			{
				unified: "1f9d9-1f3fe",
				native: "🧙🏾"
			},
			{
				unified: "1f9d9-1f3ff",
				native: "🧙🏿"
			}
		],
		version: 5
	},
	male_mage: {
		id: "male_mage",
		name: "Man Mage",
		keywords: [
			"male",
			"sorcerer"
		],
		skins: [
			{
				unified: "1f9d9-200d-2642-fe0f",
				native: "🧙‍♂️"
			},
			{
				unified: "1f9d9-1f3fb-200d-2642-fe0f",
				native: "🧙🏻‍♂️"
			},
			{
				unified: "1f9d9-1f3fc-200d-2642-fe0f",
				native: "🧙🏼‍♂️"
			},
			{
				unified: "1f9d9-1f3fd-200d-2642-fe0f",
				native: "🧙🏽‍♂️"
			},
			{
				unified: "1f9d9-1f3fe-200d-2642-fe0f",
				native: "🧙🏾‍♂️"
			},
			{
				unified: "1f9d9-1f3ff-200d-2642-fe0f",
				native: "🧙🏿‍♂️"
			}
		],
		version: 5
	},
	female_mage: {
		id: "female_mage",
		name: "Woman Mage",
		keywords: [
			"female",
			"witch"
		],
		skins: [
			{
				unified: "1f9d9-200d-2640-fe0f",
				native: "🧙‍♀️"
			},
			{
				unified: "1f9d9-1f3fb-200d-2640-fe0f",
				native: "🧙🏻‍♀️"
			},
			{
				unified: "1f9d9-1f3fc-200d-2640-fe0f",
				native: "🧙🏼‍♀️"
			},
			{
				unified: "1f9d9-1f3fd-200d-2640-fe0f",
				native: "🧙🏽‍♀️"
			},
			{
				unified: "1f9d9-1f3fe-200d-2640-fe0f",
				native: "🧙🏾‍♀️"
			},
			{
				unified: "1f9d9-1f3ff-200d-2640-fe0f",
				native: "🧙🏿‍♀️"
			}
		],
		version: 5
	},
	fairy: {
		id: "fairy",
		name: "Fairy",
		keywords: [
			"wings",
			"magical"
		],
		skins: [
			{
				unified: "1f9da",
				native: "🧚"
			},
			{
				unified: "1f9da-1f3fb",
				native: "🧚🏻"
			},
			{
				unified: "1f9da-1f3fc",
				native: "🧚🏼"
			},
			{
				unified: "1f9da-1f3fd",
				native: "🧚🏽"
			},
			{
				unified: "1f9da-1f3fe",
				native: "🧚🏾"
			},
			{
				unified: "1f9da-1f3ff",
				native: "🧚🏿"
			}
		],
		version: 5
	},
	male_fairy: {
		id: "male_fairy",
		name: "Man Fairy",
		keywords: [
			"male"
		],
		skins: [
			{
				unified: "1f9da-200d-2642-fe0f",
				native: "🧚‍♂️"
			},
			{
				unified: "1f9da-1f3fb-200d-2642-fe0f",
				native: "🧚🏻‍♂️"
			},
			{
				unified: "1f9da-1f3fc-200d-2642-fe0f",
				native: "🧚🏼‍♂️"
			},
			{
				unified: "1f9da-1f3fd-200d-2642-fe0f",
				native: "🧚🏽‍♂️"
			},
			{
				unified: "1f9da-1f3fe-200d-2642-fe0f",
				native: "🧚🏾‍♂️"
			},
			{
				unified: "1f9da-1f3ff-200d-2642-fe0f",
				native: "🧚🏿‍♂️"
			}
		],
		version: 5
	},
	female_fairy: {
		id: "female_fairy",
		name: "Woman Fairy",
		keywords: [
			"female"
		],
		skins: [
			{
				unified: "1f9da-200d-2640-fe0f",
				native: "🧚‍♀️"
			},
			{
				unified: "1f9da-1f3fb-200d-2640-fe0f",
				native: "🧚🏻‍♀️"
			},
			{
				unified: "1f9da-1f3fc-200d-2640-fe0f",
				native: "🧚🏼‍♀️"
			},
			{
				unified: "1f9da-1f3fd-200d-2640-fe0f",
				native: "🧚🏽‍♀️"
			},
			{
				unified: "1f9da-1f3fe-200d-2640-fe0f",
				native: "🧚🏾‍♀️"
			},
			{
				unified: "1f9da-1f3ff-200d-2640-fe0f",
				native: "🧚🏿‍♀️"
			}
		],
		version: 5
	},
	vampire: {
		id: "vampire",
		name: "Vampire",
		keywords: [
			"blood",
			"twilight"
		],
		skins: [
			{
				unified: "1f9db",
				native: "🧛"
			},
			{
				unified: "1f9db-1f3fb",
				native: "🧛🏻"
			},
			{
				unified: "1f9db-1f3fc",
				native: "🧛🏼"
			},
			{
				unified: "1f9db-1f3fd",
				native: "🧛🏽"
			},
			{
				unified: "1f9db-1f3fe",
				native: "🧛🏾"
			},
			{
				unified: "1f9db-1f3ff",
				native: "🧛🏿"
			}
		],
		version: 5
	},
	male_vampire: {
		id: "male_vampire",
		name: "Man Vampire",
		keywords: [
			"male",
			"dracula"
		],
		skins: [
			{
				unified: "1f9db-200d-2642-fe0f",
				native: "🧛‍♂️"
			},
			{
				unified: "1f9db-1f3fb-200d-2642-fe0f",
				native: "🧛🏻‍♂️"
			},
			{
				unified: "1f9db-1f3fc-200d-2642-fe0f",
				native: "🧛🏼‍♂️"
			},
			{
				unified: "1f9db-1f3fd-200d-2642-fe0f",
				native: "🧛🏽‍♂️"
			},
			{
				unified: "1f9db-1f3fe-200d-2642-fe0f",
				native: "🧛🏾‍♂️"
			},
			{
				unified: "1f9db-1f3ff-200d-2642-fe0f",
				native: "🧛🏿‍♂️"
			}
		],
		version: 5
	},
	female_vampire: {
		id: "female_vampire",
		name: "Woman Vampire",
		keywords: [
			"female"
		],
		skins: [
			{
				unified: "1f9db-200d-2640-fe0f",
				native: "🧛‍♀️"
			},
			{
				unified: "1f9db-1f3fb-200d-2640-fe0f",
				native: "🧛🏻‍♀️"
			},
			{
				unified: "1f9db-1f3fc-200d-2640-fe0f",
				native: "🧛🏼‍♀️"
			},
			{
				unified: "1f9db-1f3fd-200d-2640-fe0f",
				native: "🧛🏽‍♀️"
			},
			{
				unified: "1f9db-1f3fe-200d-2640-fe0f",
				native: "🧛🏾‍♀️"
			},
			{
				unified: "1f9db-1f3ff-200d-2640-fe0f",
				native: "🧛🏿‍♀️"
			}
		],
		version: 5
	},
	merperson: {
		id: "merperson",
		name: "Merperson",
		keywords: [
			"sea"
		],
		skins: [
			{
				unified: "1f9dc",
				native: "🧜"
			},
			{
				unified: "1f9dc-1f3fb",
				native: "🧜🏻"
			},
			{
				unified: "1f9dc-1f3fc",
				native: "🧜🏼"
			},
			{
				unified: "1f9dc-1f3fd",
				native: "🧜🏽"
			},
			{
				unified: "1f9dc-1f3fe",
				native: "🧜🏾"
			},
			{
				unified: "1f9dc-1f3ff",
				native: "🧜🏿"
			}
		],
		version: 5
	},
	merman: {
		id: "merman",
		name: "Merman",
		keywords: [
			"man",
			"male",
			"triton"
		],
		skins: [
			{
				unified: "1f9dc-200d-2642-fe0f",
				native: "🧜‍♂️"
			},
			{
				unified: "1f9dc-1f3fb-200d-2642-fe0f",
				native: "🧜🏻‍♂️"
			},
			{
				unified: "1f9dc-1f3fc-200d-2642-fe0f",
				native: "🧜🏼‍♂️"
			},
			{
				unified: "1f9dc-1f3fd-200d-2642-fe0f",
				native: "🧜🏽‍♂️"
			},
			{
				unified: "1f9dc-1f3fe-200d-2642-fe0f",
				native: "🧜🏾‍♂️"
			},
			{
				unified: "1f9dc-1f3ff-200d-2642-fe0f",
				native: "🧜🏿‍♂️"
			}
		],
		version: 5
	},
	mermaid: {
		id: "mermaid",
		name: "Mermaid",
		keywords: [
			"woman",
			"female",
			"merwoman",
			"ariel"
		],
		skins: [
			{
				unified: "1f9dc-200d-2640-fe0f",
				native: "🧜‍♀️"
			},
			{
				unified: "1f9dc-1f3fb-200d-2640-fe0f",
				native: "🧜🏻‍♀️"
			},
			{
				unified: "1f9dc-1f3fc-200d-2640-fe0f",
				native: "🧜🏼‍♀️"
			},
			{
				unified: "1f9dc-1f3fd-200d-2640-fe0f",
				native: "🧜🏽‍♀️"
			},
			{
				unified: "1f9dc-1f3fe-200d-2640-fe0f",
				native: "🧜🏾‍♀️"
			},
			{
				unified: "1f9dc-1f3ff-200d-2640-fe0f",
				native: "🧜🏿‍♀️"
			}
		],
		version: 5
	},
	elf: {
		id: "elf",
		name: "Elf",
		keywords: [
			"magical"
		],
		skins: [
			{
				unified: "1f9dd",
				native: "🧝"
			},
			{
				unified: "1f9dd-1f3fb",
				native: "🧝🏻"
			},
			{
				unified: "1f9dd-1f3fc",
				native: "🧝🏼"
			},
			{
				unified: "1f9dd-1f3fd",
				native: "🧝🏽"
			},
			{
				unified: "1f9dd-1f3fe",
				native: "🧝🏾"
			},
			{
				unified: "1f9dd-1f3ff",
				native: "🧝🏿"
			}
		],
		version: 5
	},
	male_elf: {
		id: "male_elf",
		name: "Man Elf",
		keywords: [
			"male"
		],
		skins: [
			{
				unified: "1f9dd-200d-2642-fe0f",
				native: "🧝‍♂️"
			},
			{
				unified: "1f9dd-1f3fb-200d-2642-fe0f",
				native: "🧝🏻‍♂️"
			},
			{
				unified: "1f9dd-1f3fc-200d-2642-fe0f",
				native: "🧝🏼‍♂️"
			},
			{
				unified: "1f9dd-1f3fd-200d-2642-fe0f",
				native: "🧝🏽‍♂️"
			},
			{
				unified: "1f9dd-1f3fe-200d-2642-fe0f",
				native: "🧝🏾‍♂️"
			},
			{
				unified: "1f9dd-1f3ff-200d-2642-fe0f",
				native: "🧝🏿‍♂️"
			}
		],
		version: 5
	},
	female_elf: {
		id: "female_elf",
		name: "Woman Elf",
		keywords: [
			"female"
		],
		skins: [
			{
				unified: "1f9dd-200d-2640-fe0f",
				native: "🧝‍♀️"
			},
			{
				unified: "1f9dd-1f3fb-200d-2640-fe0f",
				native: "🧝🏻‍♀️"
			},
			{
				unified: "1f9dd-1f3fc-200d-2640-fe0f",
				native: "🧝🏼‍♀️"
			},
			{
				unified: "1f9dd-1f3fd-200d-2640-fe0f",
				native: "🧝🏽‍♀️"
			},
			{
				unified: "1f9dd-1f3fe-200d-2640-fe0f",
				native: "🧝🏾‍♀️"
			},
			{
				unified: "1f9dd-1f3ff-200d-2640-fe0f",
				native: "🧝🏿‍♀️"
			}
		],
		version: 5
	},
	genie: {
		id: "genie",
		name: "Genie",
		keywords: [
			"magical",
			"wishes"
		],
		skins: [
			{
				unified: "1f9de",
				native: "🧞"
			}
		],
		version: 5
	},
	male_genie: {
		id: "male_genie",
		name: "Man Genie",
		keywords: [
			"male"
		],
		skins: [
			{
				unified: "1f9de-200d-2642-fe0f",
				native: "🧞‍♂️"
			}
		],
		version: 5
	},
	female_genie: {
		id: "female_genie",
		name: "Woman Genie",
		keywords: [
			"female"
		],
		skins: [
			{
				unified: "1f9de-200d-2640-fe0f",
				native: "🧞‍♀️"
			}
		],
		version: 5
	},
	zombie: {
		id: "zombie",
		name: "Zombie",
		keywords: [
			"dead"
		],
		skins: [
			{
				unified: "1f9df",
				native: "🧟"
			}
		],
		version: 5
	},
	male_zombie: {
		id: "male_zombie",
		name: "Man Zombie",
		keywords: [
			"male",
			"dracula",
			"undead",
			"walking",
			"dead"
		],
		skins: [
			{
				unified: "1f9df-200d-2642-fe0f",
				native: "🧟‍♂️"
			}
		],
		version: 5
	},
	female_zombie: {
		id: "female_zombie",
		name: "Woman Zombie",
		keywords: [
			"female",
			"undead",
			"walking",
			"dead"
		],
		skins: [
			{
				unified: "1f9df-200d-2640-fe0f",
				native: "🧟‍♀️"
			}
		],
		version: 5
	},
	troll: {
		id: "troll",
		name: "Troll",
		keywords: [
			"mystical",
			"monster"
		],
		skins: [
			{
				unified: "1f9cc",
				native: "🧌"
			}
		],
		version: 14
	},
	massage: {
		id: "massage",
		name: "Face Massage",
		keywords: [
			"person",
			"getting",
			"relax"
		],
		skins: [
			{
				unified: "1f486",
				native: "💆"
			},
			{
				unified: "1f486-1f3fb",
				native: "💆🏻"
			},
			{
				unified: "1f486-1f3fc",
				native: "💆🏼"
			},
			{
				unified: "1f486-1f3fd",
				native: "💆🏽"
			},
			{
				unified: "1f486-1f3fe",
				native: "💆🏾"
			},
			{
				unified: "1f486-1f3ff",
				native: "💆🏿"
			}
		],
		version: 1
	},
	"man-getting-massage": {
		id: "man-getting-massage",
		name: "Man Getting Massage",
		keywords: [
			"getting-massage",
			"male",
			"boy",
			"head"
		],
		skins: [
			{
				unified: "1f486-200d-2642-fe0f",
				native: "💆‍♂️"
			},
			{
				unified: "1f486-1f3fb-200d-2642-fe0f",
				native: "💆🏻‍♂️"
			},
			{
				unified: "1f486-1f3fc-200d-2642-fe0f",
				native: "💆🏼‍♂️"
			},
			{
				unified: "1f486-1f3fd-200d-2642-fe0f",
				native: "💆🏽‍♂️"
			},
			{
				unified: "1f486-1f3fe-200d-2642-fe0f",
				native: "💆🏾‍♂️"
			},
			{
				unified: "1f486-1f3ff-200d-2642-fe0f",
				native: "💆🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-getting-massage": {
		id: "woman-getting-massage",
		name: "Woman Getting Massage",
		keywords: [
			"getting-massage",
			"female",
			"girl",
			"head"
		],
		skins: [
			{
				unified: "1f486-200d-2640-fe0f",
				native: "💆‍♀️"
			},
			{
				unified: "1f486-1f3fb-200d-2640-fe0f",
				native: "💆🏻‍♀️"
			},
			{
				unified: "1f486-1f3fc-200d-2640-fe0f",
				native: "💆🏼‍♀️"
			},
			{
				unified: "1f486-1f3fd-200d-2640-fe0f",
				native: "💆🏽‍♀️"
			},
			{
				unified: "1f486-1f3fe-200d-2640-fe0f",
				native: "💆🏾‍♀️"
			},
			{
				unified: "1f486-1f3ff-200d-2640-fe0f",
				native: "💆🏿‍♀️"
			}
		],
		version: 4
	},
	haircut: {
		id: "haircut",
		name: "Haircut",
		keywords: [
			"person",
			"getting",
			"hairstyle"
		],
		skins: [
			{
				unified: "1f487",
				native: "💇"
			},
			{
				unified: "1f487-1f3fb",
				native: "💇🏻"
			},
			{
				unified: "1f487-1f3fc",
				native: "💇🏼"
			},
			{
				unified: "1f487-1f3fd",
				native: "💇🏽"
			},
			{
				unified: "1f487-1f3fe",
				native: "💇🏾"
			},
			{
				unified: "1f487-1f3ff",
				native: "💇🏿"
			}
		],
		version: 1
	},
	"man-getting-haircut": {
		id: "man-getting-haircut",
		name: "Man Getting Haircut",
		keywords: [
			"getting-haircut",
			"male",
			"boy"
		],
		skins: [
			{
				unified: "1f487-200d-2642-fe0f",
				native: "💇‍♂️"
			},
			{
				unified: "1f487-1f3fb-200d-2642-fe0f",
				native: "💇🏻‍♂️"
			},
			{
				unified: "1f487-1f3fc-200d-2642-fe0f",
				native: "💇🏼‍♂️"
			},
			{
				unified: "1f487-1f3fd-200d-2642-fe0f",
				native: "💇🏽‍♂️"
			},
			{
				unified: "1f487-1f3fe-200d-2642-fe0f",
				native: "💇🏾‍♂️"
			},
			{
				unified: "1f487-1f3ff-200d-2642-fe0f",
				native: "💇🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-getting-haircut": {
		id: "woman-getting-haircut",
		name: "Woman Getting Haircut",
		keywords: [
			"getting-haircut",
			"female",
			"girl"
		],
		skins: [
			{
				unified: "1f487-200d-2640-fe0f",
				native: "💇‍♀️"
			},
			{
				unified: "1f487-1f3fb-200d-2640-fe0f",
				native: "💇🏻‍♀️"
			},
			{
				unified: "1f487-1f3fc-200d-2640-fe0f",
				native: "💇🏼‍♀️"
			},
			{
				unified: "1f487-1f3fd-200d-2640-fe0f",
				native: "💇🏽‍♀️"
			},
			{
				unified: "1f487-1f3fe-200d-2640-fe0f",
				native: "💇🏾‍♀️"
			},
			{
				unified: "1f487-1f3ff-200d-2640-fe0f",
				native: "💇🏿‍♀️"
			}
		],
		version: 4
	},
	walking: {
		id: "walking",
		name: "Pedestrian",
		keywords: [
			"walking",
			"person",
			"move"
		],
		skins: [
			{
				unified: "1f6b6",
				native: "🚶"
			},
			{
				unified: "1f6b6-1f3fb",
				native: "🚶🏻"
			},
			{
				unified: "1f6b6-1f3fc",
				native: "🚶🏼"
			},
			{
				unified: "1f6b6-1f3fd",
				native: "🚶🏽"
			},
			{
				unified: "1f6b6-1f3fe",
				native: "🚶🏾"
			},
			{
				unified: "1f6b6-1f3ff",
				native: "🚶🏿"
			}
		],
		version: 1
	},
	"man-walking": {
		id: "man-walking",
		name: "Man Walking",
		keywords: [
			"human",
			"feet",
			"steps"
		],
		skins: [
			{
				unified: "1f6b6-200d-2642-fe0f",
				native: "🚶‍♂️"
			},
			{
				unified: "1f6b6-1f3fb-200d-2642-fe0f",
				native: "🚶🏻‍♂️"
			},
			{
				unified: "1f6b6-1f3fc-200d-2642-fe0f",
				native: "🚶🏼‍♂️"
			},
			{
				unified: "1f6b6-1f3fd-200d-2642-fe0f",
				native: "🚶🏽‍♂️"
			},
			{
				unified: "1f6b6-1f3fe-200d-2642-fe0f",
				native: "🚶🏾‍♂️"
			},
			{
				unified: "1f6b6-1f3ff-200d-2642-fe0f",
				native: "🚶🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-walking": {
		id: "woman-walking",
		name: "Woman Walking",
		keywords: [
			"human",
			"feet",
			"steps",
			"female"
		],
		skins: [
			{
				unified: "1f6b6-200d-2640-fe0f",
				native: "🚶‍♀️"
			},
			{
				unified: "1f6b6-1f3fb-200d-2640-fe0f",
				native: "🚶🏻‍♀️"
			},
			{
				unified: "1f6b6-1f3fc-200d-2640-fe0f",
				native: "🚶🏼‍♀️"
			},
			{
				unified: "1f6b6-1f3fd-200d-2640-fe0f",
				native: "🚶🏽‍♀️"
			},
			{
				unified: "1f6b6-1f3fe-200d-2640-fe0f",
				native: "🚶🏾‍♀️"
			},
			{
				unified: "1f6b6-1f3ff-200d-2640-fe0f",
				native: "🚶🏿‍♀️"
			}
		],
		version: 4
	},
	standing_person: {
		id: "standing_person",
		name: "Standing Person",
		keywords: [
			"still"
		],
		skins: [
			{
				unified: "1f9cd",
				native: "🧍"
			},
			{
				unified: "1f9cd-1f3fb",
				native: "🧍🏻"
			},
			{
				unified: "1f9cd-1f3fc",
				native: "🧍🏼"
			},
			{
				unified: "1f9cd-1f3fd",
				native: "🧍🏽"
			},
			{
				unified: "1f9cd-1f3fe",
				native: "🧍🏾"
			},
			{
				unified: "1f9cd-1f3ff",
				native: "🧍🏿"
			}
		],
		version: 12
	},
	man_standing: {
		id: "man_standing",
		name: "Man Standing",
		keywords: [
			"still"
		],
		skins: [
			{
				unified: "1f9cd-200d-2642-fe0f",
				native: "🧍‍♂️"
			},
			{
				unified: "1f9cd-1f3fb-200d-2642-fe0f",
				native: "🧍🏻‍♂️"
			},
			{
				unified: "1f9cd-1f3fc-200d-2642-fe0f",
				native: "🧍🏼‍♂️"
			},
			{
				unified: "1f9cd-1f3fd-200d-2642-fe0f",
				native: "🧍🏽‍♂️"
			},
			{
				unified: "1f9cd-1f3fe-200d-2642-fe0f",
				native: "🧍🏾‍♂️"
			},
			{
				unified: "1f9cd-1f3ff-200d-2642-fe0f",
				native: "🧍🏿‍♂️"
			}
		],
		version: 12
	},
	woman_standing: {
		id: "woman_standing",
		name: "Woman Standing",
		keywords: [
			"still"
		],
		skins: [
			{
				unified: "1f9cd-200d-2640-fe0f",
				native: "🧍‍♀️"
			},
			{
				unified: "1f9cd-1f3fb-200d-2640-fe0f",
				native: "🧍🏻‍♀️"
			},
			{
				unified: "1f9cd-1f3fc-200d-2640-fe0f",
				native: "🧍🏼‍♀️"
			},
			{
				unified: "1f9cd-1f3fd-200d-2640-fe0f",
				native: "🧍🏽‍♀️"
			},
			{
				unified: "1f9cd-1f3fe-200d-2640-fe0f",
				native: "🧍🏾‍♀️"
			},
			{
				unified: "1f9cd-1f3ff-200d-2640-fe0f",
				native: "🧍🏿‍♀️"
			}
		],
		version: 12
	},
	kneeling_person: {
		id: "kneeling_person",
		name: "Kneeling Person",
		keywords: [
			"pray",
			"respectful"
		],
		skins: [
			{
				unified: "1f9ce",
				native: "🧎"
			},
			{
				unified: "1f9ce-1f3fb",
				native: "🧎🏻"
			},
			{
				unified: "1f9ce-1f3fc",
				native: "🧎🏼"
			},
			{
				unified: "1f9ce-1f3fd",
				native: "🧎🏽"
			},
			{
				unified: "1f9ce-1f3fe",
				native: "🧎🏾"
			},
			{
				unified: "1f9ce-1f3ff",
				native: "🧎🏿"
			}
		],
		version: 12
	},
	man_kneeling: {
		id: "man_kneeling",
		name: "Man Kneeling",
		keywords: [
			"pray",
			"respectful"
		],
		skins: [
			{
				unified: "1f9ce-200d-2642-fe0f",
				native: "🧎‍♂️"
			},
			{
				unified: "1f9ce-1f3fb-200d-2642-fe0f",
				native: "🧎🏻‍♂️"
			},
			{
				unified: "1f9ce-1f3fc-200d-2642-fe0f",
				native: "🧎🏼‍♂️"
			},
			{
				unified: "1f9ce-1f3fd-200d-2642-fe0f",
				native: "🧎🏽‍♂️"
			},
			{
				unified: "1f9ce-1f3fe-200d-2642-fe0f",
				native: "🧎🏾‍♂️"
			},
			{
				unified: "1f9ce-1f3ff-200d-2642-fe0f",
				native: "🧎🏿‍♂️"
			}
		],
		version: 12
	},
	woman_kneeling: {
		id: "woman_kneeling",
		name: "Woman Kneeling",
		keywords: [
			"respectful",
			"pray"
		],
		skins: [
			{
				unified: "1f9ce-200d-2640-fe0f",
				native: "🧎‍♀️"
			},
			{
				unified: "1f9ce-1f3fb-200d-2640-fe0f",
				native: "🧎🏻‍♀️"
			},
			{
				unified: "1f9ce-1f3fc-200d-2640-fe0f",
				native: "🧎🏼‍♀️"
			},
			{
				unified: "1f9ce-1f3fd-200d-2640-fe0f",
				native: "🧎🏽‍♀️"
			},
			{
				unified: "1f9ce-1f3fe-200d-2640-fe0f",
				native: "🧎🏾‍♀️"
			},
			{
				unified: "1f9ce-1f3ff-200d-2640-fe0f",
				native: "🧎🏿‍♀️"
			}
		],
		version: 12
	},
	person_with_probing_cane: {
		id: "person_with_probing_cane",
		name: "Person with White Cane",
		keywords: [
			"probing",
			"blind"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9af",
				native: "🧑‍🦯"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9af",
				native: "🧑🏻‍🦯"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9af",
				native: "🧑🏼‍🦯"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9af",
				native: "🧑🏽‍🦯"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9af",
				native: "🧑🏾‍🦯"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9af",
				native: "🧑🏿‍🦯"
			}
		],
		version: 12.1
	},
	man_with_probing_cane: {
		id: "man_with_probing_cane",
		name: "Man with White Cane",
		keywords: [
			"probing",
			"blind"
		],
		skins: [
			{
				unified: "1f468-200d-1f9af",
				native: "👨‍🦯"
			},
			{
				unified: "1f468-1f3fb-200d-1f9af",
				native: "👨🏻‍🦯"
			},
			{
				unified: "1f468-1f3fc-200d-1f9af",
				native: "👨🏼‍🦯"
			},
			{
				unified: "1f468-1f3fd-200d-1f9af",
				native: "👨🏽‍🦯"
			},
			{
				unified: "1f468-1f3fe-200d-1f9af",
				native: "👨🏾‍🦯"
			},
			{
				unified: "1f468-1f3ff-200d-1f9af",
				native: "👨🏿‍🦯"
			}
		],
		version: 12
	},
	woman_with_probing_cane: {
		id: "woman_with_probing_cane",
		name: "Woman with White Cane",
		keywords: [
			"probing",
			"blind"
		],
		skins: [
			{
				unified: "1f469-200d-1f9af",
				native: "👩‍🦯"
			},
			{
				unified: "1f469-1f3fb-200d-1f9af",
				native: "👩🏻‍🦯"
			},
			{
				unified: "1f469-1f3fc-200d-1f9af",
				native: "👩🏼‍🦯"
			},
			{
				unified: "1f469-1f3fd-200d-1f9af",
				native: "👩🏽‍🦯"
			},
			{
				unified: "1f469-1f3fe-200d-1f9af",
				native: "👩🏾‍🦯"
			},
			{
				unified: "1f469-1f3ff-200d-1f9af",
				native: "👩🏿‍🦯"
			}
		],
		version: 12
	},
	person_in_motorized_wheelchair: {
		id: "person_in_motorized_wheelchair",
		name: "Person in Motorized Wheelchair",
		keywords: [
			"disability",
			"accessibility"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9bc",
				native: "🧑‍🦼"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9bc",
				native: "🧑🏻‍🦼"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9bc",
				native: "🧑🏼‍🦼"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9bc",
				native: "🧑🏽‍🦼"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9bc",
				native: "🧑🏾‍🦼"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9bc",
				native: "🧑🏿‍🦼"
			}
		],
		version: 12.1
	},
	man_in_motorized_wheelchair: {
		id: "man_in_motorized_wheelchair",
		name: "Man in Motorized Wheelchair",
		keywords: [
			"disability",
			"accessibility"
		],
		skins: [
			{
				unified: "1f468-200d-1f9bc",
				native: "👨‍🦼"
			},
			{
				unified: "1f468-1f3fb-200d-1f9bc",
				native: "👨🏻‍🦼"
			},
			{
				unified: "1f468-1f3fc-200d-1f9bc",
				native: "👨🏼‍🦼"
			},
			{
				unified: "1f468-1f3fd-200d-1f9bc",
				native: "👨🏽‍🦼"
			},
			{
				unified: "1f468-1f3fe-200d-1f9bc",
				native: "👨🏾‍🦼"
			},
			{
				unified: "1f468-1f3ff-200d-1f9bc",
				native: "👨🏿‍🦼"
			}
		],
		version: 12
	},
	woman_in_motorized_wheelchair: {
		id: "woman_in_motorized_wheelchair",
		name: "Woman in Motorized Wheelchair",
		keywords: [
			"disability",
			"accessibility"
		],
		skins: [
			{
				unified: "1f469-200d-1f9bc",
				native: "👩‍🦼"
			},
			{
				unified: "1f469-1f3fb-200d-1f9bc",
				native: "👩🏻‍🦼"
			},
			{
				unified: "1f469-1f3fc-200d-1f9bc",
				native: "👩🏼‍🦼"
			},
			{
				unified: "1f469-1f3fd-200d-1f9bc",
				native: "👩🏽‍🦼"
			},
			{
				unified: "1f469-1f3fe-200d-1f9bc",
				native: "👩🏾‍🦼"
			},
			{
				unified: "1f469-1f3ff-200d-1f9bc",
				native: "👩🏿‍🦼"
			}
		],
		version: 12
	},
	person_in_manual_wheelchair: {
		id: "person_in_manual_wheelchair",
		name: "Person in Manual Wheelchair",
		keywords: [
			"disability",
			"accessibility"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f9bd",
				native: "🧑‍🦽"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f9bd",
				native: "🧑🏻‍🦽"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f9bd",
				native: "🧑🏼‍🦽"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f9bd",
				native: "🧑🏽‍🦽"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f9bd",
				native: "🧑🏾‍🦽"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f9bd",
				native: "🧑🏿‍🦽"
			}
		],
		version: 12.1
	},
	man_in_manual_wheelchair: {
		id: "man_in_manual_wheelchair",
		name: "Man in Manual Wheelchair",
		keywords: [
			"disability",
			"accessibility"
		],
		skins: [
			{
				unified: "1f468-200d-1f9bd",
				native: "👨‍🦽"
			},
			{
				unified: "1f468-1f3fb-200d-1f9bd",
				native: "👨🏻‍🦽"
			},
			{
				unified: "1f468-1f3fc-200d-1f9bd",
				native: "👨🏼‍🦽"
			},
			{
				unified: "1f468-1f3fd-200d-1f9bd",
				native: "👨🏽‍🦽"
			},
			{
				unified: "1f468-1f3fe-200d-1f9bd",
				native: "👨🏾‍🦽"
			},
			{
				unified: "1f468-1f3ff-200d-1f9bd",
				native: "👨🏿‍🦽"
			}
		],
		version: 12
	},
	woman_in_manual_wheelchair: {
		id: "woman_in_manual_wheelchair",
		name: "Woman in Manual Wheelchair",
		keywords: [
			"disability",
			"accessibility"
		],
		skins: [
			{
				unified: "1f469-200d-1f9bd",
				native: "👩‍🦽"
			},
			{
				unified: "1f469-1f3fb-200d-1f9bd",
				native: "👩🏻‍🦽"
			},
			{
				unified: "1f469-1f3fc-200d-1f9bd",
				native: "👩🏼‍🦽"
			},
			{
				unified: "1f469-1f3fd-200d-1f9bd",
				native: "👩🏽‍🦽"
			},
			{
				unified: "1f469-1f3fe-200d-1f9bd",
				native: "👩🏾‍🦽"
			},
			{
				unified: "1f469-1f3ff-200d-1f9bd",
				native: "👩🏿‍🦽"
			}
		],
		version: 12
	},
	runner: {
		id: "runner",
		name: "Runner",
		keywords: [
			"running",
			"person",
			"move"
		],
		skins: [
			{
				unified: "1f3c3",
				native: "🏃"
			},
			{
				unified: "1f3c3-1f3fb",
				native: "🏃🏻"
			},
			{
				unified: "1f3c3-1f3fc",
				native: "🏃🏼"
			},
			{
				unified: "1f3c3-1f3fd",
				native: "🏃🏽"
			},
			{
				unified: "1f3c3-1f3fe",
				native: "🏃🏾"
			},
			{
				unified: "1f3c3-1f3ff",
				native: "🏃🏿"
			}
		],
		version: 1
	},
	"man-running": {
		id: "man-running",
		name: "Man Running",
		keywords: [
			"walking",
			"exercise",
			"race"
		],
		skins: [
			{
				unified: "1f3c3-200d-2642-fe0f",
				native: "🏃‍♂️"
			},
			{
				unified: "1f3c3-1f3fb-200d-2642-fe0f",
				native: "🏃🏻‍♂️"
			},
			{
				unified: "1f3c3-1f3fc-200d-2642-fe0f",
				native: "🏃🏼‍♂️"
			},
			{
				unified: "1f3c3-1f3fd-200d-2642-fe0f",
				native: "🏃🏽‍♂️"
			},
			{
				unified: "1f3c3-1f3fe-200d-2642-fe0f",
				native: "🏃🏾‍♂️"
			},
			{
				unified: "1f3c3-1f3ff-200d-2642-fe0f",
				native: "🏃🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-running": {
		id: "woman-running",
		name: "Woman Running",
		keywords: [
			"walking",
			"exercise",
			"race",
			"female"
		],
		skins: [
			{
				unified: "1f3c3-200d-2640-fe0f",
				native: "🏃‍♀️"
			},
			{
				unified: "1f3c3-1f3fb-200d-2640-fe0f",
				native: "🏃🏻‍♀️"
			},
			{
				unified: "1f3c3-1f3fc-200d-2640-fe0f",
				native: "🏃🏼‍♀️"
			},
			{
				unified: "1f3c3-1f3fd-200d-2640-fe0f",
				native: "🏃🏽‍♀️"
			},
			{
				unified: "1f3c3-1f3fe-200d-2640-fe0f",
				native: "🏃🏾‍♀️"
			},
			{
				unified: "1f3c3-1f3ff-200d-2640-fe0f",
				native: "🏃🏿‍♀️"
			}
		],
		version: 4
	},
	dancer: {
		id: "dancer",
		name: "Dancer",
		keywords: [
			"woman",
			"dancing",
			"female",
			"girl",
			"fun"
		],
		skins: [
			{
				unified: "1f483",
				native: "💃"
			},
			{
				unified: "1f483-1f3fb",
				native: "💃🏻"
			},
			{
				unified: "1f483-1f3fc",
				native: "💃🏼"
			},
			{
				unified: "1f483-1f3fd",
				native: "💃🏽"
			},
			{
				unified: "1f483-1f3fe",
				native: "💃🏾"
			},
			{
				unified: "1f483-1f3ff",
				native: "💃🏿"
			}
		],
		version: 1
	},
	man_dancing: {
		id: "man_dancing",
		name: "Man Dancing",
		keywords: [
			"male",
			"boy",
			"fun",
			"dancer"
		],
		skins: [
			{
				unified: "1f57a",
				native: "🕺"
			},
			{
				unified: "1f57a-1f3fb",
				native: "🕺🏻"
			},
			{
				unified: "1f57a-1f3fc",
				native: "🕺🏼"
			},
			{
				unified: "1f57a-1f3fd",
				native: "🕺🏽"
			},
			{
				unified: "1f57a-1f3fe",
				native: "🕺🏾"
			},
			{
				unified: "1f57a-1f3ff",
				native: "🕺🏿"
			}
		],
		version: 3
	},
	man_in_business_suit_levitating: {
		id: "man_in_business_suit_levitating",
		name: "Person in Suit Levitating",
		keywords: [
			"man",
			"business",
			"levitate",
			"hover",
			"jump"
		],
		skins: [
			{
				unified: "1f574-fe0f",
				native: "🕴️"
			},
			{
				unified: "1f574-1f3fb",
				native: "🕴🏻"
			},
			{
				unified: "1f574-1f3fc",
				native: "🕴🏼"
			},
			{
				unified: "1f574-1f3fd",
				native: "🕴🏽"
			},
			{
				unified: "1f574-1f3fe",
				native: "🕴🏾"
			},
			{
				unified: "1f574-1f3ff",
				native: "🕴🏿"
			}
		],
		version: 1
	},
	dancers: {
		id: "dancers",
		name: "Woman with Bunny Ears",
		keywords: [
			"dancers",
			"people",
			"perform",
			"costume"
		],
		skins: [
			{
				unified: "1f46f",
				native: "👯"
			}
		],
		version: 1
	},
	"men-with-bunny-ears-partying": {
		id: "men-with-bunny-ears-partying",
		name: "Men with Bunny Ears",
		keywords: [
			"with-bunny-ears-partying",
			"man",
			"male",
			"boys"
		],
		skins: [
			{
				unified: "1f46f-200d-2642-fe0f",
				native: "👯‍♂️"
			}
		],
		version: 4
	},
	"women-with-bunny-ears-partying": {
		id: "women-with-bunny-ears-partying",
		name: "Women with Bunny Ears",
		keywords: [
			"with-bunny-ears-partying",
			"woman",
			"female",
			"girls"
		],
		skins: [
			{
				unified: "1f46f-200d-2640-fe0f",
				native: "👯‍♀️"
			}
		],
		version: 4
	},
	person_in_steamy_room: {
		id: "person_in_steamy_room",
		name: "Person in Steamy Room",
		keywords: [
			"relax",
			"spa"
		],
		skins: [
			{
				unified: "1f9d6",
				native: "🧖"
			},
			{
				unified: "1f9d6-1f3fb",
				native: "🧖🏻"
			},
			{
				unified: "1f9d6-1f3fc",
				native: "🧖🏼"
			},
			{
				unified: "1f9d6-1f3fd",
				native: "🧖🏽"
			},
			{
				unified: "1f9d6-1f3fe",
				native: "🧖🏾"
			},
			{
				unified: "1f9d6-1f3ff",
				native: "🧖🏿"
			}
		],
		version: 5
	},
	man_in_steamy_room: {
		id: "man_in_steamy_room",
		name: "Man in Steamy Room",
		keywords: [
			"male",
			"spa",
			"steamroom",
			"sauna"
		],
		skins: [
			{
				unified: "1f9d6-200d-2642-fe0f",
				native: "🧖‍♂️"
			},
			{
				unified: "1f9d6-1f3fb-200d-2642-fe0f",
				native: "🧖🏻‍♂️"
			},
			{
				unified: "1f9d6-1f3fc-200d-2642-fe0f",
				native: "🧖🏼‍♂️"
			},
			{
				unified: "1f9d6-1f3fd-200d-2642-fe0f",
				native: "🧖🏽‍♂️"
			},
			{
				unified: "1f9d6-1f3fe-200d-2642-fe0f",
				native: "🧖🏾‍♂️"
			},
			{
				unified: "1f9d6-1f3ff-200d-2642-fe0f",
				native: "🧖🏿‍♂️"
			}
		],
		version: 5
	},
	woman_in_steamy_room: {
		id: "woman_in_steamy_room",
		name: "Woman in Steamy Room",
		keywords: [
			"female",
			"spa",
			"steamroom",
			"sauna"
		],
		skins: [
			{
				unified: "1f9d6-200d-2640-fe0f",
				native: "🧖‍♀️"
			},
			{
				unified: "1f9d6-1f3fb-200d-2640-fe0f",
				native: "🧖🏻‍♀️"
			},
			{
				unified: "1f9d6-1f3fc-200d-2640-fe0f",
				native: "🧖🏼‍♀️"
			},
			{
				unified: "1f9d6-1f3fd-200d-2640-fe0f",
				native: "🧖🏽‍♀️"
			},
			{
				unified: "1f9d6-1f3fe-200d-2640-fe0f",
				native: "🧖🏾‍♀️"
			},
			{
				unified: "1f9d6-1f3ff-200d-2640-fe0f",
				native: "🧖🏿‍♀️"
			}
		],
		version: 5
	},
	person_climbing: {
		id: "person_climbing",
		name: "Person Climbing",
		keywords: [
			"sport"
		],
		skins: [
			{
				unified: "1f9d7",
				native: "🧗"
			},
			{
				unified: "1f9d7-1f3fb",
				native: "🧗🏻"
			},
			{
				unified: "1f9d7-1f3fc",
				native: "🧗🏼"
			},
			{
				unified: "1f9d7-1f3fd",
				native: "🧗🏽"
			},
			{
				unified: "1f9d7-1f3fe",
				native: "🧗🏾"
			},
			{
				unified: "1f9d7-1f3ff",
				native: "🧗🏿"
			}
		],
		version: 5
	},
	man_climbing: {
		id: "man_climbing",
		name: "Man Climbing",
		keywords: [
			"sports",
			"hobby",
			"male",
			"rock"
		],
		skins: [
			{
				unified: "1f9d7-200d-2642-fe0f",
				native: "🧗‍♂️"
			},
			{
				unified: "1f9d7-1f3fb-200d-2642-fe0f",
				native: "🧗🏻‍♂️"
			},
			{
				unified: "1f9d7-1f3fc-200d-2642-fe0f",
				native: "🧗🏼‍♂️"
			},
			{
				unified: "1f9d7-1f3fd-200d-2642-fe0f",
				native: "🧗🏽‍♂️"
			},
			{
				unified: "1f9d7-1f3fe-200d-2642-fe0f",
				native: "🧗🏾‍♂️"
			},
			{
				unified: "1f9d7-1f3ff-200d-2642-fe0f",
				native: "🧗🏿‍♂️"
			}
		],
		version: 5
	},
	woman_climbing: {
		id: "woman_climbing",
		name: "Woman Climbing",
		keywords: [
			"sports",
			"hobby",
			"female",
			"rock"
		],
		skins: [
			{
				unified: "1f9d7-200d-2640-fe0f",
				native: "🧗‍♀️"
			},
			{
				unified: "1f9d7-1f3fb-200d-2640-fe0f",
				native: "🧗🏻‍♀️"
			},
			{
				unified: "1f9d7-1f3fc-200d-2640-fe0f",
				native: "🧗🏼‍♀️"
			},
			{
				unified: "1f9d7-1f3fd-200d-2640-fe0f",
				native: "🧗🏽‍♀️"
			},
			{
				unified: "1f9d7-1f3fe-200d-2640-fe0f",
				native: "🧗🏾‍♀️"
			},
			{
				unified: "1f9d7-1f3ff-200d-2640-fe0f",
				native: "🧗🏿‍♀️"
			}
		],
		version: 5
	},
	fencer: {
		id: "fencer",
		name: "Fencer",
		keywords: [
			"person",
			"fencing",
			"sports",
			"sword"
		],
		skins: [
			{
				unified: "1f93a",
				native: "🤺"
			}
		],
		version: 3
	},
	horse_racing: {
		id: "horse_racing",
		name: "Horse Racing",
		keywords: [
			"animal",
			"betting",
			"competition",
			"gambling",
			"luck"
		],
		skins: [
			{
				unified: "1f3c7",
				native: "🏇"
			},
			{
				unified: "1f3c7-1f3fb",
				native: "🏇🏻"
			},
			{
				unified: "1f3c7-1f3fc",
				native: "🏇🏼"
			},
			{
				unified: "1f3c7-1f3fd",
				native: "🏇🏽"
			},
			{
				unified: "1f3c7-1f3fe",
				native: "🏇🏾"
			},
			{
				unified: "1f3c7-1f3ff",
				native: "🏇🏿"
			}
		],
		version: 1
	},
	skier: {
		id: "skier",
		name: "Skier",
		keywords: [
			"sports",
			"winter",
			"snow"
		],
		skins: [
			{
				unified: "26f7-fe0f",
				native: "⛷️"
			}
		],
		version: 1
	},
	snowboarder: {
		id: "snowboarder",
		name: "Snowboarder",
		keywords: [
			"sports",
			"winter"
		],
		skins: [
			{
				unified: "1f3c2",
				native: "🏂"
			},
			{
				unified: "1f3c2-1f3fb",
				native: "🏂🏻"
			},
			{
				unified: "1f3c2-1f3fc",
				native: "🏂🏼"
			},
			{
				unified: "1f3c2-1f3fd",
				native: "🏂🏽"
			},
			{
				unified: "1f3c2-1f3fe",
				native: "🏂🏾"
			},
			{
				unified: "1f3c2-1f3ff",
				native: "🏂🏿"
			}
		],
		version: 1
	},
	golfer: {
		id: "golfer",
		name: "Person Golfing",
		keywords: [
			"golfer",
			"sports",
			"business"
		],
		skins: [
			{
				unified: "1f3cc-fe0f",
				native: "🏌️"
			},
			{
				unified: "1f3cc-1f3fb",
				native: "🏌🏻"
			},
			{
				unified: "1f3cc-1f3fc",
				native: "🏌🏼"
			},
			{
				unified: "1f3cc-1f3fd",
				native: "🏌🏽"
			},
			{
				unified: "1f3cc-1f3fe",
				native: "🏌🏾"
			},
			{
				unified: "1f3cc-1f3ff",
				native: "🏌🏿"
			}
		],
		version: 1
	},
	"man-golfing": {
		id: "man-golfing",
		name: "Man Golfing",
		keywords: [
			"sport"
		],
		skins: [
			{
				unified: "1f3cc-fe0f-200d-2642-fe0f",
				native: "🏌️‍♂️"
			},
			{
				unified: "1f3cc-1f3fb-200d-2642-fe0f",
				native: "🏌🏻‍♂️"
			},
			{
				unified: "1f3cc-1f3fc-200d-2642-fe0f",
				native: "🏌🏼‍♂️"
			},
			{
				unified: "1f3cc-1f3fd-200d-2642-fe0f",
				native: "🏌🏽‍♂️"
			},
			{
				unified: "1f3cc-1f3fe-200d-2642-fe0f",
				native: "🏌🏾‍♂️"
			},
			{
				unified: "1f3cc-1f3ff-200d-2642-fe0f",
				native: "🏌🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-golfing": {
		id: "woman-golfing",
		name: "Woman Golfing",
		keywords: [
			"sports",
			"business",
			"female"
		],
		skins: [
			{
				unified: "1f3cc-fe0f-200d-2640-fe0f",
				native: "🏌️‍♀️"
			},
			{
				unified: "1f3cc-1f3fb-200d-2640-fe0f",
				native: "🏌🏻‍♀️"
			},
			{
				unified: "1f3cc-1f3fc-200d-2640-fe0f",
				native: "🏌🏼‍♀️"
			},
			{
				unified: "1f3cc-1f3fd-200d-2640-fe0f",
				native: "🏌🏽‍♀️"
			},
			{
				unified: "1f3cc-1f3fe-200d-2640-fe0f",
				native: "🏌🏾‍♀️"
			},
			{
				unified: "1f3cc-1f3ff-200d-2640-fe0f",
				native: "🏌🏿‍♀️"
			}
		],
		version: 4
	},
	surfer: {
		id: "surfer",
		name: "Surfer",
		keywords: [
			"person",
			"surfing",
			"sport",
			"sea"
		],
		skins: [
			{
				unified: "1f3c4",
				native: "🏄"
			},
			{
				unified: "1f3c4-1f3fb",
				native: "🏄🏻"
			},
			{
				unified: "1f3c4-1f3fc",
				native: "🏄🏼"
			},
			{
				unified: "1f3c4-1f3fd",
				native: "🏄🏽"
			},
			{
				unified: "1f3c4-1f3fe",
				native: "🏄🏾"
			},
			{
				unified: "1f3c4-1f3ff",
				native: "🏄🏿"
			}
		],
		version: 1
	},
	"man-surfing": {
		id: "man-surfing",
		name: "Man Surfing",
		keywords: [
			"sports",
			"ocean",
			"sea",
			"summer",
			"beach"
		],
		skins: [
			{
				unified: "1f3c4-200d-2642-fe0f",
				native: "🏄‍♂️"
			},
			{
				unified: "1f3c4-1f3fb-200d-2642-fe0f",
				native: "🏄🏻‍♂️"
			},
			{
				unified: "1f3c4-1f3fc-200d-2642-fe0f",
				native: "🏄🏼‍♂️"
			},
			{
				unified: "1f3c4-1f3fd-200d-2642-fe0f",
				native: "🏄🏽‍♂️"
			},
			{
				unified: "1f3c4-1f3fe-200d-2642-fe0f",
				native: "🏄🏾‍♂️"
			},
			{
				unified: "1f3c4-1f3ff-200d-2642-fe0f",
				native: "🏄🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-surfing": {
		id: "woman-surfing",
		name: "Woman Surfing",
		keywords: [
			"sports",
			"ocean",
			"sea",
			"summer",
			"beach",
			"female"
		],
		skins: [
			{
				unified: "1f3c4-200d-2640-fe0f",
				native: "🏄‍♀️"
			},
			{
				unified: "1f3c4-1f3fb-200d-2640-fe0f",
				native: "🏄🏻‍♀️"
			},
			{
				unified: "1f3c4-1f3fc-200d-2640-fe0f",
				native: "🏄🏼‍♀️"
			},
			{
				unified: "1f3c4-1f3fd-200d-2640-fe0f",
				native: "🏄🏽‍♀️"
			},
			{
				unified: "1f3c4-1f3fe-200d-2640-fe0f",
				native: "🏄🏾‍♀️"
			},
			{
				unified: "1f3c4-1f3ff-200d-2640-fe0f",
				native: "🏄🏿‍♀️"
			}
		],
		version: 4
	},
	rowboat: {
		id: "rowboat",
		name: "Rowboat",
		keywords: [
			"person",
			"rowing",
			"boat",
			"sport",
			"move"
		],
		skins: [
			{
				unified: "1f6a3",
				native: "🚣"
			},
			{
				unified: "1f6a3-1f3fb",
				native: "🚣🏻"
			},
			{
				unified: "1f6a3-1f3fc",
				native: "🚣🏼"
			},
			{
				unified: "1f6a3-1f3fd",
				native: "🚣🏽"
			},
			{
				unified: "1f6a3-1f3fe",
				native: "🚣🏾"
			},
			{
				unified: "1f6a3-1f3ff",
				native: "🚣🏿"
			}
		],
		version: 1
	},
	"man-rowing-boat": {
		id: "man-rowing-boat",
		name: "Man Rowing Boat",
		keywords: [
			"rowing-boat",
			"sports",
			"hobby",
			"water",
			"ship"
		],
		skins: [
			{
				unified: "1f6a3-200d-2642-fe0f",
				native: "🚣‍♂️"
			},
			{
				unified: "1f6a3-1f3fb-200d-2642-fe0f",
				native: "🚣🏻‍♂️"
			},
			{
				unified: "1f6a3-1f3fc-200d-2642-fe0f",
				native: "🚣🏼‍♂️"
			},
			{
				unified: "1f6a3-1f3fd-200d-2642-fe0f",
				native: "🚣🏽‍♂️"
			},
			{
				unified: "1f6a3-1f3fe-200d-2642-fe0f",
				native: "🚣🏾‍♂️"
			},
			{
				unified: "1f6a3-1f3ff-200d-2642-fe0f",
				native: "🚣🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-rowing-boat": {
		id: "woman-rowing-boat",
		name: "Woman Rowing Boat",
		keywords: [
			"rowing-boat",
			"sports",
			"hobby",
			"water",
			"ship",
			"female"
		],
		skins: [
			{
				unified: "1f6a3-200d-2640-fe0f",
				native: "🚣‍♀️"
			},
			{
				unified: "1f6a3-1f3fb-200d-2640-fe0f",
				native: "🚣🏻‍♀️"
			},
			{
				unified: "1f6a3-1f3fc-200d-2640-fe0f",
				native: "🚣🏼‍♀️"
			},
			{
				unified: "1f6a3-1f3fd-200d-2640-fe0f",
				native: "🚣🏽‍♀️"
			},
			{
				unified: "1f6a3-1f3fe-200d-2640-fe0f",
				native: "🚣🏾‍♀️"
			},
			{
				unified: "1f6a3-1f3ff-200d-2640-fe0f",
				native: "🚣🏿‍♀️"
			}
		],
		version: 4
	},
	swimmer: {
		id: "swimmer",
		name: "Swimmer",
		keywords: [
			"person",
			"swimming",
			"sport",
			"pool"
		],
		skins: [
			{
				unified: "1f3ca",
				native: "🏊"
			},
			{
				unified: "1f3ca-1f3fb",
				native: "🏊🏻"
			},
			{
				unified: "1f3ca-1f3fc",
				native: "🏊🏼"
			},
			{
				unified: "1f3ca-1f3fd",
				native: "🏊🏽"
			},
			{
				unified: "1f3ca-1f3fe",
				native: "🏊🏾"
			},
			{
				unified: "1f3ca-1f3ff",
				native: "🏊🏿"
			}
		],
		version: 1
	},
	"man-swimming": {
		id: "man-swimming",
		name: "Man Swimming",
		keywords: [
			"sports",
			"exercise",
			"human",
			"athlete",
			"water",
			"summer"
		],
		skins: [
			{
				unified: "1f3ca-200d-2642-fe0f",
				native: "🏊‍♂️"
			},
			{
				unified: "1f3ca-1f3fb-200d-2642-fe0f",
				native: "🏊🏻‍♂️"
			},
			{
				unified: "1f3ca-1f3fc-200d-2642-fe0f",
				native: "🏊🏼‍♂️"
			},
			{
				unified: "1f3ca-1f3fd-200d-2642-fe0f",
				native: "🏊🏽‍♂️"
			},
			{
				unified: "1f3ca-1f3fe-200d-2642-fe0f",
				native: "🏊🏾‍♂️"
			},
			{
				unified: "1f3ca-1f3ff-200d-2642-fe0f",
				native: "🏊🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-swimming": {
		id: "woman-swimming",
		name: "Woman Swimming",
		keywords: [
			"sports",
			"exercise",
			"human",
			"athlete",
			"water",
			"summer",
			"female"
		],
		skins: [
			{
				unified: "1f3ca-200d-2640-fe0f",
				native: "🏊‍♀️"
			},
			{
				unified: "1f3ca-1f3fb-200d-2640-fe0f",
				native: "🏊🏻‍♀️"
			},
			{
				unified: "1f3ca-1f3fc-200d-2640-fe0f",
				native: "🏊🏼‍♀️"
			},
			{
				unified: "1f3ca-1f3fd-200d-2640-fe0f",
				native: "🏊🏽‍♀️"
			},
			{
				unified: "1f3ca-1f3fe-200d-2640-fe0f",
				native: "🏊🏾‍♀️"
			},
			{
				unified: "1f3ca-1f3ff-200d-2640-fe0f",
				native: "🏊🏿‍♀️"
			}
		],
		version: 4
	},
	person_with_ball: {
		id: "person_with_ball",
		name: "Person Bouncing Ball",
		keywords: [
			"with",
			"sports",
			"human"
		],
		skins: [
			{
				unified: "26f9-fe0f",
				native: "⛹️"
			},
			{
				unified: "26f9-1f3fb",
				native: "⛹🏻"
			},
			{
				unified: "26f9-1f3fc",
				native: "⛹🏼"
			},
			{
				unified: "26f9-1f3fd",
				native: "⛹🏽"
			},
			{
				unified: "26f9-1f3fe",
				native: "⛹🏾"
			},
			{
				unified: "26f9-1f3ff",
				native: "⛹🏿"
			}
		],
		version: 1
	},
	"man-bouncing-ball": {
		id: "man-bouncing-ball",
		name: "Man Bouncing Ball",
		keywords: [
			"bouncing-ball",
			"sport"
		],
		skins: [
			{
				unified: "26f9-fe0f-200d-2642-fe0f",
				native: "⛹️‍♂️"
			},
			{
				unified: "26f9-1f3fb-200d-2642-fe0f",
				native: "⛹🏻‍♂️"
			},
			{
				unified: "26f9-1f3fc-200d-2642-fe0f",
				native: "⛹🏼‍♂️"
			},
			{
				unified: "26f9-1f3fd-200d-2642-fe0f",
				native: "⛹🏽‍♂️"
			},
			{
				unified: "26f9-1f3fe-200d-2642-fe0f",
				native: "⛹🏾‍♂️"
			},
			{
				unified: "26f9-1f3ff-200d-2642-fe0f",
				native: "⛹🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-bouncing-ball": {
		id: "woman-bouncing-ball",
		name: "Woman Bouncing Ball",
		keywords: [
			"bouncing-ball",
			"sports",
			"human",
			"female"
		],
		skins: [
			{
				unified: "26f9-fe0f-200d-2640-fe0f",
				native: "⛹️‍♀️"
			},
			{
				unified: "26f9-1f3fb-200d-2640-fe0f",
				native: "⛹🏻‍♀️"
			},
			{
				unified: "26f9-1f3fc-200d-2640-fe0f",
				native: "⛹🏼‍♀️"
			},
			{
				unified: "26f9-1f3fd-200d-2640-fe0f",
				native: "⛹🏽‍♀️"
			},
			{
				unified: "26f9-1f3fe-200d-2640-fe0f",
				native: "⛹🏾‍♀️"
			},
			{
				unified: "26f9-1f3ff-200d-2640-fe0f",
				native: "⛹🏿‍♀️"
			}
		],
		version: 4
	},
	weight_lifter: {
		id: "weight_lifter",
		name: "Person Lifting Weights",
		keywords: [
			"weight",
			"lifter",
			"sports",
			"training",
			"exercise"
		],
		skins: [
			{
				unified: "1f3cb-fe0f",
				native: "🏋️"
			},
			{
				unified: "1f3cb-1f3fb",
				native: "🏋🏻"
			},
			{
				unified: "1f3cb-1f3fc",
				native: "🏋🏼"
			},
			{
				unified: "1f3cb-1f3fd",
				native: "🏋🏽"
			},
			{
				unified: "1f3cb-1f3fe",
				native: "🏋🏾"
			},
			{
				unified: "1f3cb-1f3ff",
				native: "🏋🏿"
			}
		],
		version: 1
	},
	"man-lifting-weights": {
		id: "man-lifting-weights",
		name: "Man Lifting Weights",
		keywords: [
			"lifting-weights",
			"sport"
		],
		skins: [
			{
				unified: "1f3cb-fe0f-200d-2642-fe0f",
				native: "🏋️‍♂️"
			},
			{
				unified: "1f3cb-1f3fb-200d-2642-fe0f",
				native: "🏋🏻‍♂️"
			},
			{
				unified: "1f3cb-1f3fc-200d-2642-fe0f",
				native: "🏋🏼‍♂️"
			},
			{
				unified: "1f3cb-1f3fd-200d-2642-fe0f",
				native: "🏋🏽‍♂️"
			},
			{
				unified: "1f3cb-1f3fe-200d-2642-fe0f",
				native: "🏋🏾‍♂️"
			},
			{
				unified: "1f3cb-1f3ff-200d-2642-fe0f",
				native: "🏋🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-lifting-weights": {
		id: "woman-lifting-weights",
		name: "Woman Lifting Weights",
		keywords: [
			"lifting-weights",
			"sports",
			"training",
			"exercise",
			"female"
		],
		skins: [
			{
				unified: "1f3cb-fe0f-200d-2640-fe0f",
				native: "🏋️‍♀️"
			},
			{
				unified: "1f3cb-1f3fb-200d-2640-fe0f",
				native: "🏋🏻‍♀️"
			},
			{
				unified: "1f3cb-1f3fc-200d-2640-fe0f",
				native: "🏋🏼‍♀️"
			},
			{
				unified: "1f3cb-1f3fd-200d-2640-fe0f",
				native: "🏋🏽‍♀️"
			},
			{
				unified: "1f3cb-1f3fe-200d-2640-fe0f",
				native: "🏋🏾‍♀️"
			},
			{
				unified: "1f3cb-1f3ff-200d-2640-fe0f",
				native: "🏋🏿‍♀️"
			}
		],
		version: 4
	},
	bicyclist: {
		id: "bicyclist",
		name: "Bicyclist",
		keywords: [
			"person",
			"biking",
			"sport",
			"move"
		],
		skins: [
			{
				unified: "1f6b4",
				native: "🚴"
			},
			{
				unified: "1f6b4-1f3fb",
				native: "🚴🏻"
			},
			{
				unified: "1f6b4-1f3fc",
				native: "🚴🏼"
			},
			{
				unified: "1f6b4-1f3fd",
				native: "🚴🏽"
			},
			{
				unified: "1f6b4-1f3fe",
				native: "🚴🏾"
			},
			{
				unified: "1f6b4-1f3ff",
				native: "🚴🏿"
			}
		],
		version: 1
	},
	"man-biking": {
		id: "man-biking",
		name: "Man Biking",
		keywords: [
			"sports",
			"bike",
			"exercise",
			"hipster"
		],
		skins: [
			{
				unified: "1f6b4-200d-2642-fe0f",
				native: "🚴‍♂️"
			},
			{
				unified: "1f6b4-1f3fb-200d-2642-fe0f",
				native: "🚴🏻‍♂️"
			},
			{
				unified: "1f6b4-1f3fc-200d-2642-fe0f",
				native: "🚴🏼‍♂️"
			},
			{
				unified: "1f6b4-1f3fd-200d-2642-fe0f",
				native: "🚴🏽‍♂️"
			},
			{
				unified: "1f6b4-1f3fe-200d-2642-fe0f",
				native: "🚴🏾‍♂️"
			},
			{
				unified: "1f6b4-1f3ff-200d-2642-fe0f",
				native: "🚴🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-biking": {
		id: "woman-biking",
		name: "Woman Biking",
		keywords: [
			"sports",
			"bike",
			"exercise",
			"hipster",
			"female"
		],
		skins: [
			{
				unified: "1f6b4-200d-2640-fe0f",
				native: "🚴‍♀️"
			},
			{
				unified: "1f6b4-1f3fb-200d-2640-fe0f",
				native: "🚴🏻‍♀️"
			},
			{
				unified: "1f6b4-1f3fc-200d-2640-fe0f",
				native: "🚴🏼‍♀️"
			},
			{
				unified: "1f6b4-1f3fd-200d-2640-fe0f",
				native: "🚴🏽‍♀️"
			},
			{
				unified: "1f6b4-1f3fe-200d-2640-fe0f",
				native: "🚴🏾‍♀️"
			},
			{
				unified: "1f6b4-1f3ff-200d-2640-fe0f",
				native: "🚴🏿‍♀️"
			}
		],
		version: 4
	},
	mountain_bicyclist: {
		id: "mountain_bicyclist",
		name: "Mountain Bicyclist",
		keywords: [
			"person",
			"biking",
			"sport",
			"move"
		],
		skins: [
			{
				unified: "1f6b5",
				native: "🚵"
			},
			{
				unified: "1f6b5-1f3fb",
				native: "🚵🏻"
			},
			{
				unified: "1f6b5-1f3fc",
				native: "🚵🏼"
			},
			{
				unified: "1f6b5-1f3fd",
				native: "🚵🏽"
			},
			{
				unified: "1f6b5-1f3fe",
				native: "🚵🏾"
			},
			{
				unified: "1f6b5-1f3ff",
				native: "🚵🏿"
			}
		],
		version: 1
	},
	"man-mountain-biking": {
		id: "man-mountain-biking",
		name: "Man Mountain Biking",
		keywords: [
			"mountain-biking",
			"transportation",
			"sports",
			"human",
			"race",
			"bike"
		],
		skins: [
			{
				unified: "1f6b5-200d-2642-fe0f",
				native: "🚵‍♂️"
			},
			{
				unified: "1f6b5-1f3fb-200d-2642-fe0f",
				native: "🚵🏻‍♂️"
			},
			{
				unified: "1f6b5-1f3fc-200d-2642-fe0f",
				native: "🚵🏼‍♂️"
			},
			{
				unified: "1f6b5-1f3fd-200d-2642-fe0f",
				native: "🚵🏽‍♂️"
			},
			{
				unified: "1f6b5-1f3fe-200d-2642-fe0f",
				native: "🚵🏾‍♂️"
			},
			{
				unified: "1f6b5-1f3ff-200d-2642-fe0f",
				native: "🚵🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-mountain-biking": {
		id: "woman-mountain-biking",
		name: "Woman Mountain Biking",
		keywords: [
			"mountain-biking",
			"transportation",
			"sports",
			"human",
			"race",
			"bike",
			"female"
		],
		skins: [
			{
				unified: "1f6b5-200d-2640-fe0f",
				native: "🚵‍♀️"
			},
			{
				unified: "1f6b5-1f3fb-200d-2640-fe0f",
				native: "🚵🏻‍♀️"
			},
			{
				unified: "1f6b5-1f3fc-200d-2640-fe0f",
				native: "🚵🏼‍♀️"
			},
			{
				unified: "1f6b5-1f3fd-200d-2640-fe0f",
				native: "🚵🏽‍♀️"
			},
			{
				unified: "1f6b5-1f3fe-200d-2640-fe0f",
				native: "🚵🏾‍♀️"
			},
			{
				unified: "1f6b5-1f3ff-200d-2640-fe0f",
				native: "🚵🏿‍♀️"
			}
		],
		version: 4
	},
	person_doing_cartwheel: {
		id: "person_doing_cartwheel",
		name: "Person Cartwheeling",
		keywords: [
			"doing",
			"cartwheel",
			"sport",
			"gymnastic"
		],
		skins: [
			{
				unified: "1f938",
				native: "🤸"
			},
			{
				unified: "1f938-1f3fb",
				native: "🤸🏻"
			},
			{
				unified: "1f938-1f3fc",
				native: "🤸🏼"
			},
			{
				unified: "1f938-1f3fd",
				native: "🤸🏽"
			},
			{
				unified: "1f938-1f3fe",
				native: "🤸🏾"
			},
			{
				unified: "1f938-1f3ff",
				native: "🤸🏿"
			}
		],
		version: 3
	},
	"man-cartwheeling": {
		id: "man-cartwheeling",
		name: "Man Cartwheeling",
		keywords: [
			"gymnastics"
		],
		skins: [
			{
				unified: "1f938-200d-2642-fe0f",
				native: "🤸‍♂️"
			},
			{
				unified: "1f938-1f3fb-200d-2642-fe0f",
				native: "🤸🏻‍♂️"
			},
			{
				unified: "1f938-1f3fc-200d-2642-fe0f",
				native: "🤸🏼‍♂️"
			},
			{
				unified: "1f938-1f3fd-200d-2642-fe0f",
				native: "🤸🏽‍♂️"
			},
			{
				unified: "1f938-1f3fe-200d-2642-fe0f",
				native: "🤸🏾‍♂️"
			},
			{
				unified: "1f938-1f3ff-200d-2642-fe0f",
				native: "🤸🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-cartwheeling": {
		id: "woman-cartwheeling",
		name: "Woman Cartwheeling",
		keywords: [
			"gymnastics"
		],
		skins: [
			{
				unified: "1f938-200d-2640-fe0f",
				native: "🤸‍♀️"
			},
			{
				unified: "1f938-1f3fb-200d-2640-fe0f",
				native: "🤸🏻‍♀️"
			},
			{
				unified: "1f938-1f3fc-200d-2640-fe0f",
				native: "🤸🏼‍♀️"
			},
			{
				unified: "1f938-1f3fd-200d-2640-fe0f",
				native: "🤸🏽‍♀️"
			},
			{
				unified: "1f938-1f3fe-200d-2640-fe0f",
				native: "🤸🏾‍♀️"
			},
			{
				unified: "1f938-1f3ff-200d-2640-fe0f",
				native: "🤸🏿‍♀️"
			}
		],
		version: 4
	},
	wrestlers: {
		id: "wrestlers",
		name: "Wrestlers",
		keywords: [
			"people",
			"wrestling",
			"sport"
		],
		skins: [
			{
				unified: "1f93c",
				native: "🤼"
			}
		],
		version: 3
	},
	"man-wrestling": {
		id: "man-wrestling",
		name: "Men Wrestling",
		keywords: [
			"man",
			"sports",
			"wrestlers"
		],
		skins: [
			{
				unified: "1f93c-200d-2642-fe0f",
				native: "🤼‍♂️"
			}
		],
		version: 4
	},
	"woman-wrestling": {
		id: "woman-wrestling",
		name: "Women Wrestling",
		keywords: [
			"woman",
			"sports",
			"wrestlers"
		],
		skins: [
			{
				unified: "1f93c-200d-2640-fe0f",
				native: "🤼‍♀️"
			}
		],
		version: 4
	},
	water_polo: {
		id: "water_polo",
		name: "Water Polo",
		keywords: [
			"person",
			"playing",
			"sport"
		],
		skins: [
			{
				unified: "1f93d",
				native: "🤽"
			},
			{
				unified: "1f93d-1f3fb",
				native: "🤽🏻"
			},
			{
				unified: "1f93d-1f3fc",
				native: "🤽🏼"
			},
			{
				unified: "1f93d-1f3fd",
				native: "🤽🏽"
			},
			{
				unified: "1f93d-1f3fe",
				native: "🤽🏾"
			},
			{
				unified: "1f93d-1f3ff",
				native: "🤽🏿"
			}
		],
		version: 3
	},
	"man-playing-water-polo": {
		id: "man-playing-water-polo",
		name: "Man Playing Water Polo",
		keywords: [
			"playing-water-polo",
			"sports",
			"pool"
		],
		skins: [
			{
				unified: "1f93d-200d-2642-fe0f",
				native: "🤽‍♂️"
			},
			{
				unified: "1f93d-1f3fb-200d-2642-fe0f",
				native: "🤽🏻‍♂️"
			},
			{
				unified: "1f93d-1f3fc-200d-2642-fe0f",
				native: "🤽🏼‍♂️"
			},
			{
				unified: "1f93d-1f3fd-200d-2642-fe0f",
				native: "🤽🏽‍♂️"
			},
			{
				unified: "1f93d-1f3fe-200d-2642-fe0f",
				native: "🤽🏾‍♂️"
			},
			{
				unified: "1f93d-1f3ff-200d-2642-fe0f",
				native: "🤽🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-playing-water-polo": {
		id: "woman-playing-water-polo",
		name: "Woman Playing Water Polo",
		keywords: [
			"playing-water-polo",
			"sports",
			"pool"
		],
		skins: [
			{
				unified: "1f93d-200d-2640-fe0f",
				native: "🤽‍♀️"
			},
			{
				unified: "1f93d-1f3fb-200d-2640-fe0f",
				native: "🤽🏻‍♀️"
			},
			{
				unified: "1f93d-1f3fc-200d-2640-fe0f",
				native: "🤽🏼‍♀️"
			},
			{
				unified: "1f93d-1f3fd-200d-2640-fe0f",
				native: "🤽🏽‍♀️"
			},
			{
				unified: "1f93d-1f3fe-200d-2640-fe0f",
				native: "🤽🏾‍♀️"
			},
			{
				unified: "1f93d-1f3ff-200d-2640-fe0f",
				native: "🤽🏿‍♀️"
			}
		],
		version: 4
	},
	handball: {
		id: "handball",
		name: "Handball",
		keywords: [
			"person",
			"playing",
			"sport"
		],
		skins: [
			{
				unified: "1f93e",
				native: "🤾"
			},
			{
				unified: "1f93e-1f3fb",
				native: "🤾🏻"
			},
			{
				unified: "1f93e-1f3fc",
				native: "🤾🏼"
			},
			{
				unified: "1f93e-1f3fd",
				native: "🤾🏽"
			},
			{
				unified: "1f93e-1f3fe",
				native: "🤾🏾"
			},
			{
				unified: "1f93e-1f3ff",
				native: "🤾🏿"
			}
		],
		version: 3
	},
	"man-playing-handball": {
		id: "man-playing-handball",
		name: "Man Playing Handball",
		keywords: [
			"playing-handball",
			"sports"
		],
		skins: [
			{
				unified: "1f93e-200d-2642-fe0f",
				native: "🤾‍♂️"
			},
			{
				unified: "1f93e-1f3fb-200d-2642-fe0f",
				native: "🤾🏻‍♂️"
			},
			{
				unified: "1f93e-1f3fc-200d-2642-fe0f",
				native: "🤾🏼‍♂️"
			},
			{
				unified: "1f93e-1f3fd-200d-2642-fe0f",
				native: "🤾🏽‍♂️"
			},
			{
				unified: "1f93e-1f3fe-200d-2642-fe0f",
				native: "🤾🏾‍♂️"
			},
			{
				unified: "1f93e-1f3ff-200d-2642-fe0f",
				native: "🤾🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-playing-handball": {
		id: "woman-playing-handball",
		name: "Woman Playing Handball",
		keywords: [
			"playing-handball",
			"sports"
		],
		skins: [
			{
				unified: "1f93e-200d-2640-fe0f",
				native: "🤾‍♀️"
			},
			{
				unified: "1f93e-1f3fb-200d-2640-fe0f",
				native: "🤾🏻‍♀️"
			},
			{
				unified: "1f93e-1f3fc-200d-2640-fe0f",
				native: "🤾🏼‍♀️"
			},
			{
				unified: "1f93e-1f3fd-200d-2640-fe0f",
				native: "🤾🏽‍♀️"
			},
			{
				unified: "1f93e-1f3fe-200d-2640-fe0f",
				native: "🤾🏾‍♀️"
			},
			{
				unified: "1f93e-1f3ff-200d-2640-fe0f",
				native: "🤾🏿‍♀️"
			}
		],
		version: 4
	},
	juggling: {
		id: "juggling",
		name: "Juggling",
		keywords: [
			"person",
			"performance",
			"balance"
		],
		skins: [
			{
				unified: "1f939",
				native: "🤹"
			},
			{
				unified: "1f939-1f3fb",
				native: "🤹🏻"
			},
			{
				unified: "1f939-1f3fc",
				native: "🤹🏼"
			},
			{
				unified: "1f939-1f3fd",
				native: "🤹🏽"
			},
			{
				unified: "1f939-1f3fe",
				native: "🤹🏾"
			},
			{
				unified: "1f939-1f3ff",
				native: "🤹🏿"
			}
		],
		version: 3
	},
	"man-juggling": {
		id: "man-juggling",
		name: "Man Juggling",
		keywords: [
			"juggle",
			"balance",
			"skill",
			"multitask"
		],
		skins: [
			{
				unified: "1f939-200d-2642-fe0f",
				native: "🤹‍♂️"
			},
			{
				unified: "1f939-1f3fb-200d-2642-fe0f",
				native: "🤹🏻‍♂️"
			},
			{
				unified: "1f939-1f3fc-200d-2642-fe0f",
				native: "🤹🏼‍♂️"
			},
			{
				unified: "1f939-1f3fd-200d-2642-fe0f",
				native: "🤹🏽‍♂️"
			},
			{
				unified: "1f939-1f3fe-200d-2642-fe0f",
				native: "🤹🏾‍♂️"
			},
			{
				unified: "1f939-1f3ff-200d-2642-fe0f",
				native: "🤹🏿‍♂️"
			}
		],
		version: 4
	},
	"woman-juggling": {
		id: "woman-juggling",
		name: "Woman Juggling",
		keywords: [
			"juggle",
			"balance",
			"skill",
			"multitask"
		],
		skins: [
			{
				unified: "1f939-200d-2640-fe0f",
				native: "🤹‍♀️"
			},
			{
				unified: "1f939-1f3fb-200d-2640-fe0f",
				native: "🤹🏻‍♀️"
			},
			{
				unified: "1f939-1f3fc-200d-2640-fe0f",
				native: "🤹🏼‍♀️"
			},
			{
				unified: "1f939-1f3fd-200d-2640-fe0f",
				native: "🤹🏽‍♀️"
			},
			{
				unified: "1f939-1f3fe-200d-2640-fe0f",
				native: "🤹🏾‍♀️"
			},
			{
				unified: "1f939-1f3ff-200d-2640-fe0f",
				native: "🤹🏿‍♀️"
			}
		],
		version: 4
	},
	person_in_lotus_position: {
		id: "person_in_lotus_position",
		name: "Person in Lotus Position",
		keywords: [
			"meditate"
		],
		skins: [
			{
				unified: "1f9d8",
				native: "🧘"
			},
			{
				unified: "1f9d8-1f3fb",
				native: "🧘🏻"
			},
			{
				unified: "1f9d8-1f3fc",
				native: "🧘🏼"
			},
			{
				unified: "1f9d8-1f3fd",
				native: "🧘🏽"
			},
			{
				unified: "1f9d8-1f3fe",
				native: "🧘🏾"
			},
			{
				unified: "1f9d8-1f3ff",
				native: "🧘🏿"
			}
		],
		version: 5
	},
	man_in_lotus_position: {
		id: "man_in_lotus_position",
		name: "Man in Lotus Position",
		keywords: [
			"male",
			"meditation",
			"yoga",
			"serenity",
			"zen",
			"mindfulness"
		],
		skins: [
			{
				unified: "1f9d8-200d-2642-fe0f",
				native: "🧘‍♂️"
			},
			{
				unified: "1f9d8-1f3fb-200d-2642-fe0f",
				native: "🧘🏻‍♂️"
			},
			{
				unified: "1f9d8-1f3fc-200d-2642-fe0f",
				native: "🧘🏼‍♂️"
			},
			{
				unified: "1f9d8-1f3fd-200d-2642-fe0f",
				native: "🧘🏽‍♂️"
			},
			{
				unified: "1f9d8-1f3fe-200d-2642-fe0f",
				native: "🧘🏾‍♂️"
			},
			{
				unified: "1f9d8-1f3ff-200d-2642-fe0f",
				native: "🧘🏿‍♂️"
			}
		],
		version: 5
	},
	woman_in_lotus_position: {
		id: "woman_in_lotus_position",
		name: "Woman in Lotus Position",
		keywords: [
			"female",
			"meditation",
			"yoga",
			"serenity",
			"zen",
			"mindfulness"
		],
		skins: [
			{
				unified: "1f9d8-200d-2640-fe0f",
				native: "🧘‍♀️"
			},
			{
				unified: "1f9d8-1f3fb-200d-2640-fe0f",
				native: "🧘🏻‍♀️"
			},
			{
				unified: "1f9d8-1f3fc-200d-2640-fe0f",
				native: "🧘🏼‍♀️"
			},
			{
				unified: "1f9d8-1f3fd-200d-2640-fe0f",
				native: "🧘🏽‍♀️"
			},
			{
				unified: "1f9d8-1f3fe-200d-2640-fe0f",
				native: "🧘🏾‍♀️"
			},
			{
				unified: "1f9d8-1f3ff-200d-2640-fe0f",
				native: "🧘🏿‍♀️"
			}
		],
		version: 5
	},
	bath: {
		id: "bath",
		name: "Bath",
		keywords: [
			"person",
			"taking",
			"clean",
			"shower",
			"bathroom"
		],
		skins: [
			{
				unified: "1f6c0",
				native: "🛀"
			},
			{
				unified: "1f6c0-1f3fb",
				native: "🛀🏻"
			},
			{
				unified: "1f6c0-1f3fc",
				native: "🛀🏼"
			},
			{
				unified: "1f6c0-1f3fd",
				native: "🛀🏽"
			},
			{
				unified: "1f6c0-1f3fe",
				native: "🛀🏾"
			},
			{
				unified: "1f6c0-1f3ff",
				native: "🛀🏿"
			}
		],
		version: 1
	},
	sleeping_accommodation: {
		id: "sleeping_accommodation",
		name: "Person in Bed",
		keywords: [
			"sleeping",
			"accommodation",
			"rest"
		],
		skins: [
			{
				unified: "1f6cc",
				native: "🛌"
			},
			{
				unified: "1f6cc-1f3fb",
				native: "🛌🏻"
			},
			{
				unified: "1f6cc-1f3fc",
				native: "🛌🏼"
			},
			{
				unified: "1f6cc-1f3fd",
				native: "🛌🏽"
			},
			{
				unified: "1f6cc-1f3fe",
				native: "🛌🏾"
			},
			{
				unified: "1f6cc-1f3ff",
				native: "🛌🏿"
			}
		],
		version: 1
	},
	people_holding_hands: {
		id: "people_holding_hands",
		name: "People Holding Hands",
		keywords: [
			"friendship"
		],
		skins: [
			{
				unified: "1f9d1-200d-1f91d-200d-1f9d1",
				native: "🧑‍🤝‍🧑"
			},
			{
				unified: "1f9d1-1f3fb-200d-1f91d-200d-1f9d1-1f3fb",
				native: "🧑🏻‍🤝‍🧑🏻"
			},
			{
				unified: "1f9d1-1f3fc-200d-1f91d-200d-1f9d1-1f3fc",
				native: "🧑🏼‍🤝‍🧑🏼"
			},
			{
				unified: "1f9d1-1f3fd-200d-1f91d-200d-1f9d1-1f3fd",
				native: "🧑🏽‍🤝‍🧑🏽"
			},
			{
				unified: "1f9d1-1f3fe-200d-1f91d-200d-1f9d1-1f3fe",
				native: "🧑🏾‍🤝‍🧑🏾"
			},
			{
				unified: "1f9d1-1f3ff-200d-1f91d-200d-1f9d1-1f3ff",
				native: "🧑🏿‍🤝‍🧑🏿"
			}
		],
		version: 12
	},
	two_women_holding_hands: {
		id: "two_women_holding_hands",
		name: "Women Holding Hands",
		keywords: [
			"two",
			"pair",
			"friendship",
			"couple",
			"love",
			"like",
			"female",
			"people",
			"human"
		],
		skins: [
			{
				unified: "1f46d",
				native: "👭"
			},
			{
				unified: "1f46d-1f3fb",
				native: "👭🏻"
			},
			{
				unified: "1f46d-1f3fc",
				native: "👭🏼"
			},
			{
				unified: "1f46d-1f3fd",
				native: "👭🏽"
			},
			{
				unified: "1f46d-1f3fe",
				native: "👭🏾"
			},
			{
				unified: "1f46d-1f3ff",
				native: "👭🏿"
			}
		],
		version: 1
	},
	man_and_woman_holding_hands: {
		id: "man_and_woman_holding_hands",
		name: "Man and Woman Holding Hands",
		keywords: [
			"couple",
			"pair",
			"people",
			"human",
			"love",
			"date",
			"dating",
			"like",
			"affection",
			"valentines",
			"marriage"
		],
		skins: [
			{
				unified: "1f46b",
				native: "👫"
			},
			{
				unified: "1f46b-1f3fb",
				native: "👫🏻"
			},
			{
				unified: "1f46b-1f3fc",
				native: "👫🏼"
			},
			{
				unified: "1f46b-1f3fd",
				native: "👫🏽"
			},
			{
				unified: "1f46b-1f3fe",
				native: "👫🏾"
			},
			{
				unified: "1f46b-1f3ff",
				native: "👫🏿"
			}
		],
		version: 1
	},
	two_men_holding_hands: {
		id: "two_men_holding_hands",
		name: "Men Holding Hands",
		keywords: [
			"two",
			"pair",
			"couple",
			"love",
			"like",
			"bromance",
			"friendship",
			"people",
			"human"
		],
		skins: [
			{
				unified: "1f46c",
				native: "👬"
			},
			{
				unified: "1f46c-1f3fb",
				native: "👬🏻"
			},
			{
				unified: "1f46c-1f3fc",
				native: "👬🏼"
			},
			{
				unified: "1f46c-1f3fd",
				native: "👬🏽"
			},
			{
				unified: "1f46c-1f3fe",
				native: "👬🏾"
			},
			{
				unified: "1f46c-1f3ff",
				native: "👬🏿"
			}
		],
		version: 1
	},
	couplekiss: {
		id: "couplekiss",
		name: "Kiss",
		keywords: [
			"couplekiss",
			"pair",
			"valentines",
			"love",
			"like",
			"dating",
			"marriage"
		],
		skins: [
			{
				unified: "1f48f",
				native: "💏"
			},
			{
				unified: "1f48f-1f3fb",
				native: "💏🏻"
			},
			{
				unified: "1f48f-1f3fc",
				native: "💏🏼"
			},
			{
				unified: "1f48f-1f3fd",
				native: "💏🏽"
			},
			{
				unified: "1f48f-1f3fe",
				native: "💏🏾"
			},
			{
				unified: "1f48f-1f3ff",
				native: "💏🏿"
			}
		],
		version: 1
	},
	"woman-kiss-man": {
		id: "woman-kiss-man",
		name: "Kiss: Woman, Man",
		keywords: [
			"woman",
			"kiss-man",
			"kiss",
			"love"
		],
		skins: [
			{
				unified: "1f469-200d-2764-fe0f-200d-1f48b-200d-1f468",
				native: "👩‍❤️‍💋‍👨"
			},
			{
				unified: "1f469-1f3fb-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fb",
				native: "👩🏻‍❤️‍💋‍👨🏻"
			},
			{
				unified: "1f469-1f3fc-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fc",
				native: "👩🏼‍❤️‍💋‍👨🏼"
			},
			{
				unified: "1f469-1f3fd-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fd",
				native: "👩🏽‍❤️‍💋‍👨🏽"
			},
			{
				unified: "1f469-1f3fe-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fe",
				native: "👩🏾‍❤️‍💋‍👨🏾"
			},
			{
				unified: "1f469-1f3ff-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3ff",
				native: "👩🏿‍❤️‍💋‍👨🏿"
			}
		],
		version: 2
	},
	"man-kiss-man": {
		id: "man-kiss-man",
		name: "Kiss: Man, Man",
		keywords: [
			"kiss-man",
			"kiss",
			"pair",
			"valentines",
			"love",
			"like",
			"dating",
			"marriage"
		],
		skins: [
			{
				unified: "1f468-200d-2764-fe0f-200d-1f48b-200d-1f468",
				native: "👨‍❤️‍💋‍👨"
			},
			{
				unified: "1f468-1f3fb-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fb",
				native: "👨🏻‍❤️‍💋‍👨🏻"
			},
			{
				unified: "1f468-1f3fc-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fc",
				native: "👨🏼‍❤️‍💋‍👨🏼"
			},
			{
				unified: "1f468-1f3fd-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fd",
				native: "👨🏽‍❤️‍💋‍👨🏽"
			},
			{
				unified: "1f468-1f3fe-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fe",
				native: "👨🏾‍❤️‍💋‍👨🏾"
			},
			{
				unified: "1f468-1f3ff-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3ff",
				native: "👨🏿‍❤️‍💋‍👨🏿"
			}
		],
		version: 2
	},
	"woman-kiss-woman": {
		id: "woman-kiss-woman",
		name: "Kiss: Woman, Woman",
		keywords: [
			"kiss-woman",
			"kiss",
			"pair",
			"valentines",
			"love",
			"like",
			"dating",
			"marriage"
		],
		skins: [
			{
				unified: "1f469-200d-2764-fe0f-200d-1f48b-200d-1f469",
				native: "👩‍❤️‍💋‍👩"
			},
			{
				unified: "1f469-1f3fb-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fb",
				native: "👩🏻‍❤️‍💋‍👩🏻"
			},
			{
				unified: "1f469-1f3fc-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fc",
				native: "👩🏼‍❤️‍💋‍👩🏼"
			},
			{
				unified: "1f469-1f3fd-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fd",
				native: "👩🏽‍❤️‍💋‍👩🏽"
			},
			{
				unified: "1f469-1f3fe-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fe",
				native: "👩🏾‍❤️‍💋‍👩🏾"
			},
			{
				unified: "1f469-1f3ff-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3ff",
				native: "👩🏿‍❤️‍💋‍👩🏿"
			}
		],
		version: 2
	},
	couple_with_heart: {
		id: "couple_with_heart",
		name: "Couple with Heart",
		keywords: [
			"pair",
			"love",
			"like",
			"affection",
			"human",
			"dating",
			"valentines",
			"marriage"
		],
		skins: [
			{
				unified: "1f491",
				native: "💑"
			},
			{
				unified: "1f491-1f3fb",
				native: "💑🏻"
			},
			{
				unified: "1f491-1f3fc",
				native: "💑🏼"
			},
			{
				unified: "1f491-1f3fd",
				native: "💑🏽"
			},
			{
				unified: "1f491-1f3fe",
				native: "💑🏾"
			},
			{
				unified: "1f491-1f3ff",
				native: "💑🏿"
			}
		],
		version: 1
	},
	"woman-heart-man": {
		id: "woman-heart-man",
		name: "Couple with Heart: Woman, Man",
		keywords: [
			"woman",
			"heart-man",
			"heart",
			"love"
		],
		skins: [
			{
				unified: "1f469-200d-2764-fe0f-200d-1f468",
				native: "👩‍❤️‍👨"
			},
			{
				unified: "1f469-1f3fb-200d-2764-fe0f-200d-1f468-1f3fb",
				native: "👩🏻‍❤️‍👨🏻"
			},
			{
				unified: "1f469-1f3fc-200d-2764-fe0f-200d-1f468-1f3fc",
				native: "👩🏼‍❤️‍👨🏼"
			},
			{
				unified: "1f469-1f3fd-200d-2764-fe0f-200d-1f468-1f3fd",
				native: "👩🏽‍❤️‍👨🏽"
			},
			{
				unified: "1f469-1f3fe-200d-2764-fe0f-200d-1f468-1f3fe",
				native: "👩🏾‍❤️‍👨🏾"
			},
			{
				unified: "1f469-1f3ff-200d-2764-fe0f-200d-1f468-1f3ff",
				native: "👩🏿‍❤️‍👨🏿"
			}
		],
		version: 2
	},
	"man-heart-man": {
		id: "man-heart-man",
		name: "Couple with Heart: Man, Man",
		keywords: [
			"heart-man",
			"heart",
			"pair",
			"love",
			"like",
			"affection",
			"human",
			"dating",
			"valentines",
			"marriage"
		],
		skins: [
			{
				unified: "1f468-200d-2764-fe0f-200d-1f468",
				native: "👨‍❤️‍👨"
			},
			{
				unified: "1f468-1f3fb-200d-2764-fe0f-200d-1f468-1f3fb",
				native: "👨🏻‍❤️‍👨🏻"
			},
			{
				unified: "1f468-1f3fc-200d-2764-fe0f-200d-1f468-1f3fc",
				native: "👨🏼‍❤️‍👨🏼"
			},
			{
				unified: "1f468-1f3fd-200d-2764-fe0f-200d-1f468-1f3fd",
				native: "👨🏽‍❤️‍👨🏽"
			},
			{
				unified: "1f468-1f3fe-200d-2764-fe0f-200d-1f468-1f3fe",
				native: "👨🏾‍❤️‍👨🏾"
			},
			{
				unified: "1f468-1f3ff-200d-2764-fe0f-200d-1f468-1f3ff",
				native: "👨🏿‍❤️‍👨🏿"
			}
		],
		version: 2
	},
	"woman-heart-woman": {
		id: "woman-heart-woman",
		name: "Couple with Heart: Woman, Woman",
		keywords: [
			"heart-woman",
			"heart",
			"pair",
			"love",
			"like",
			"affection",
			"human",
			"dating",
			"valentines",
			"marriage"
		],
		skins: [
			{
				unified: "1f469-200d-2764-fe0f-200d-1f469",
				native: "👩‍❤️‍👩"
			},
			{
				unified: "1f469-1f3fb-200d-2764-fe0f-200d-1f469-1f3fb",
				native: "👩🏻‍❤️‍👩🏻"
			},
			{
				unified: "1f469-1f3fc-200d-2764-fe0f-200d-1f469-1f3fc",
				native: "👩🏼‍❤️‍👩🏼"
			},
			{
				unified: "1f469-1f3fd-200d-2764-fe0f-200d-1f469-1f3fd",
				native: "👩🏽‍❤️‍👩🏽"
			},
			{
				unified: "1f469-1f3fe-200d-2764-fe0f-200d-1f469-1f3fe",
				native: "👩🏾‍❤️‍👩🏾"
			},
			{
				unified: "1f469-1f3ff-200d-2764-fe0f-200d-1f469-1f3ff",
				native: "👩🏿‍❤️‍👩🏿"
			}
		],
		version: 2
	},
	family: {
		id: "family",
		name: "Family",
		keywords: [
			"home",
			"parents",
			"child",
			"mom",
			"dad",
			"father",
			"mother",
			"people",
			"human"
		],
		skins: [
			{
				unified: "1f46a",
				native: "👪"
			}
		],
		version: 1
	},
	"man-woman-boy": {
		id: "man-woman-boy",
		name: "Family: Man, Woman, Boy",
		keywords: [
			"man",
			"woman-boy",
			"family",
			"woman",
			"love"
		],
		skins: [
			{
				unified: "1f468-200d-1f469-200d-1f466",
				native: "👨‍👩‍👦"
			}
		],
		version: 2
	},
	"man-woman-girl": {
		id: "man-woman-girl",
		name: "Family: Man, Woman, Girl",
		keywords: [
			"man",
			"woman-girl",
			"family",
			"woman",
			"home",
			"parents",
			"people",
			"human",
			"child"
		],
		skins: [
			{
				unified: "1f468-200d-1f469-200d-1f467",
				native: "👨‍👩‍👧"
			}
		],
		version: 2
	},
	"man-woman-girl-boy": {
		id: "man-woman-girl-boy",
		name: "Family: Man, Woman, Girl, Boy",
		keywords: [
			"man",
			"woman-girl-boy",
			"family",
			"woman",
			"girl",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f469-200d-1f467-200d-1f466",
				native: "👨‍👩‍👧‍👦"
			}
		],
		version: 2
	},
	"man-woman-boy-boy": {
		id: "man-woman-boy-boy",
		name: "Family: Man, Woman, Boy, Boy",
		keywords: [
			"man",
			"woman-boy-boy",
			"family",
			"woman",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f469-200d-1f466-200d-1f466",
				native: "👨‍👩‍👦‍👦"
			}
		],
		version: 2
	},
	"man-woman-girl-girl": {
		id: "man-woman-girl-girl",
		name: "Family: Man, Woman, Girl, Girl",
		keywords: [
			"man",
			"woman-girl-girl",
			"family",
			"woman",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f469-200d-1f467-200d-1f467",
				native: "👨‍👩‍👧‍👧"
			}
		],
		version: 2
	},
	"man-man-boy": {
		id: "man-man-boy",
		name: "Family: Man, Man, Boy",
		keywords: [
			"man",
			"man-boy",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f468-200d-1f466",
				native: "👨‍👨‍👦"
			}
		],
		version: 2
	},
	"man-man-girl": {
		id: "man-man-girl",
		name: "Family: Man, Man, Girl",
		keywords: [
			"man",
			"man-girl",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f468-200d-1f467",
				native: "👨‍👨‍👧"
			}
		],
		version: 2
	},
	"man-man-girl-boy": {
		id: "man-man-girl-boy",
		name: "Family: Man, Man, Girl, Boy",
		keywords: [
			"man",
			"man-girl-boy",
			"family",
			"girl",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f468-200d-1f467-200d-1f466",
				native: "👨‍👨‍👧‍👦"
			}
		],
		version: 2
	},
	"man-man-boy-boy": {
		id: "man-man-boy-boy",
		name: "Family: Man, Man, Boy, Boy",
		keywords: [
			"man",
			"man-boy-boy",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f468-200d-1f466-200d-1f466",
				native: "👨‍👨‍👦‍👦"
			}
		],
		version: 2
	},
	"man-man-girl-girl": {
		id: "man-man-girl-girl",
		name: "Family: Man, Man, Girl, Girl",
		keywords: [
			"man",
			"man-girl-girl",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f468-200d-1f467-200d-1f467",
				native: "👨‍👨‍👧‍👧"
			}
		],
		version: 2
	},
	"woman-woman-boy": {
		id: "woman-woman-boy",
		name: "Family: Woman, Woman, Boy",
		keywords: [
			"woman",
			"woman-boy",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f469-200d-1f466",
				native: "👩‍👩‍👦"
			}
		],
		version: 2
	},
	"woman-woman-girl": {
		id: "woman-woman-girl",
		name: "Family: Woman, Woman, Girl",
		keywords: [
			"woman",
			"woman-girl",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f469-200d-1f467",
				native: "👩‍👩‍👧"
			}
		],
		version: 2
	},
	"woman-woman-girl-boy": {
		id: "woman-woman-girl-boy",
		name: "Family: Woman, Woman, Girl, Boy",
		keywords: [
			"woman",
			"woman-girl-boy",
			"family",
			"girl",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f469-200d-1f467-200d-1f466",
				native: "👩‍👩‍👧‍👦"
			}
		],
		version: 2
	},
	"woman-woman-boy-boy": {
		id: "woman-woman-boy-boy",
		name: "Family: Woman, Woman, Boy, Boy",
		keywords: [
			"woman",
			"woman-boy-boy",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f469-200d-1f466-200d-1f466",
				native: "👩‍👩‍👦‍👦"
			}
		],
		version: 2
	},
	"woman-woman-girl-girl": {
		id: "woman-woman-girl-girl",
		name: "Family: Woman, Woman, Girl, Girl",
		keywords: [
			"woman",
			"woman-girl-girl",
			"family",
			"home",
			"parents",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f469-200d-1f467-200d-1f467",
				native: "👩‍👩‍👧‍👧"
			}
		],
		version: 2
	},
	"man-boy": {
		id: "man-boy",
		name: "Family: Man, Boy",
		keywords: [
			"man",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"child"
		],
		skins: [
			{
				unified: "1f468-200d-1f466",
				native: "👨‍👦"
			}
		],
		version: 4
	},
	"man-boy-boy": {
		id: "man-boy-boy",
		name: "Family: Man, Boy, Boy",
		keywords: [
			"man",
			"boy-boy",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f466-200d-1f466",
				native: "👨‍👦‍👦"
			}
		],
		version: 4
	},
	"man-girl": {
		id: "man-girl",
		name: "Family: Man, Girl",
		keywords: [
			"man",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"child"
		],
		skins: [
			{
				unified: "1f468-200d-1f467",
				native: "👨‍👧"
			}
		],
		version: 4
	},
	"man-girl-boy": {
		id: "man-girl-boy",
		name: "Family: Man, Girl, Boy",
		keywords: [
			"man",
			"girl-boy",
			"family",
			"girl",
			"home",
			"parent",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f467-200d-1f466",
				native: "👨‍👧‍👦"
			}
		],
		version: 4
	},
	"man-girl-girl": {
		id: "man-girl-girl",
		name: "Family: Man, Girl, Girl",
		keywords: [
			"man",
			"girl-girl",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f468-200d-1f467-200d-1f467",
				native: "👨‍👧‍👧"
			}
		],
		version: 4
	},
	"woman-boy": {
		id: "woman-boy",
		name: "Family: Woman, Boy",
		keywords: [
			"woman",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"child"
		],
		skins: [
			{
				unified: "1f469-200d-1f466",
				native: "👩‍👦"
			}
		],
		version: 4
	},
	"woman-boy-boy": {
		id: "woman-boy-boy",
		name: "Family: Woman, Boy, Boy",
		keywords: [
			"woman",
			"boy-boy",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f466-200d-1f466",
				native: "👩‍👦‍👦"
			}
		],
		version: 4
	},
	"woman-girl": {
		id: "woman-girl",
		name: "Family: Woman, Girl",
		keywords: [
			"woman",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"child"
		],
		skins: [
			{
				unified: "1f469-200d-1f467",
				native: "👩‍👧"
			}
		],
		version: 4
	},
	"woman-girl-boy": {
		id: "woman-girl-boy",
		name: "Family: Woman, Girl, Boy",
		keywords: [
			"woman",
			"girl-boy",
			"family",
			"girl",
			"home",
			"parent",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f467-200d-1f466",
				native: "👩‍👧‍👦"
			}
		],
		version: 4
	},
	"woman-girl-girl": {
		id: "woman-girl-girl",
		name: "Family: Woman, Girl, Girl",
		keywords: [
			"woman",
			"girl-girl",
			"family",
			"home",
			"parent",
			"people",
			"human",
			"children"
		],
		skins: [
			{
				unified: "1f469-200d-1f467-200d-1f467",
				native: "👩‍👧‍👧"
			}
		],
		version: 4
	},
	speaking_head_in_silhouette: {
		id: "speaking_head_in_silhouette",
		name: "Speaking Head",
		keywords: [
			"in",
			"silhouette",
			"user",
			"person",
			"human",
			"sing",
			"say",
			"talk"
		],
		skins: [
			{
				unified: "1f5e3-fe0f",
				native: "🗣️"
			}
		],
		version: 1
	},
	bust_in_silhouette: {
		id: "bust_in_silhouette",
		name: "Bust in Silhouette",
		keywords: [
			"user",
			"person",
			"human"
		],
		skins: [
			{
				unified: "1f464",
				native: "👤"
			}
		],
		version: 1
	},
	busts_in_silhouette: {
		id: "busts_in_silhouette",
		name: "Busts in Silhouette",
		keywords: [
			"user",
			"person",
			"human",
			"group",
			"team"
		],
		skins: [
			{
				unified: "1f465",
				native: "👥"
			}
		],
		version: 1
	},
	people_hugging: {
		id: "people_hugging",
		name: "People Hugging",
		keywords: [
			"care"
		],
		skins: [
			{
				unified: "1fac2",
				native: "🫂"
			}
		],
		version: 13
	},
	footprints: {
		id: "footprints",
		name: "Footprints",
		keywords: [
			"feet",
			"tracking",
			"walking",
			"beach"
		],
		skins: [
			{
				unified: "1f463",
				native: "👣"
			}
		],
		version: 1
	},
	monkey_face: {
		id: "monkey_face",
		name: "Monkey Face",
		emoticons: [
			":o)"
		],
		keywords: [
			"animal",
			"nature",
			"circus"
		],
		skins: [
			{
				unified: "1f435",
				native: "🐵"
			}
		],
		version: 1
	},
	monkey: {
		id: "monkey",
		name: "Monkey",
		keywords: [
			"animal",
			"nature",
			"banana",
			"circus"
		],
		skins: [
			{
				unified: "1f412",
				native: "🐒"
			}
		],
		version: 1
	},
	gorilla: {
		id: "gorilla",
		name: "Gorilla",
		keywords: [
			"animal",
			"nature",
			"circus"
		],
		skins: [
			{
				unified: "1f98d",
				native: "🦍"
			}
		],
		version: 3
	},
	orangutan: {
		id: "orangutan",
		name: "Orangutan",
		keywords: [
			"animal"
		],
		skins: [
			{
				unified: "1f9a7",
				native: "🦧"
			}
		],
		version: 12
	},
	dog: {
		id: "dog",
		name: "Dog Face",
		keywords: [
			"animal",
			"friend",
			"nature",
			"woof",
			"puppy",
			"pet",
			"faithful"
		],
		skins: [
			{
				unified: "1f436",
				native: "🐶"
			}
		],
		version: 1
	},
	dog2: {
		id: "dog2",
		name: "Dog",
		keywords: [
			"dog2",
			"animal",
			"nature",
			"friend",
			"doge",
			"pet",
			"faithful"
		],
		skins: [
			{
				unified: "1f415",
				native: "🐕"
			}
		],
		version: 1
	},
	guide_dog: {
		id: "guide_dog",
		name: "Guide Dog",
		keywords: [
			"animal",
			"blind"
		],
		skins: [
			{
				unified: "1f9ae",
				native: "🦮"
			}
		],
		version: 12
	},
	service_dog: {
		id: "service_dog",
		name: "Service Dog",
		keywords: [
			"blind",
			"animal"
		],
		skins: [
			{
				unified: "1f415-200d-1f9ba",
				native: "🐕‍🦺"
			}
		],
		version: 12
	},
	poodle: {
		id: "poodle",
		name: "Poodle",
		keywords: [
			"dog",
			"animal",
			"101",
			"nature",
			"pet"
		],
		skins: [
			{
				unified: "1f429",
				native: "🐩"
			}
		],
		version: 1
	},
	wolf: {
		id: "wolf",
		name: "Wolf",
		keywords: [
			"animal",
			"nature",
			"wild"
		],
		skins: [
			{
				unified: "1f43a",
				native: "🐺"
			}
		],
		version: 1
	},
	fox_face: {
		id: "fox_face",
		name: "Fox",
		keywords: [
			"face",
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f98a",
				native: "🦊"
			}
		],
		version: 3
	},
	raccoon: {
		id: "raccoon",
		name: "Raccoon",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f99d",
				native: "🦝"
			}
		],
		version: 11
	},
	cat: {
		id: "cat",
		name: "Cat Face",
		keywords: [
			"animal",
			"meow",
			"nature",
			"pet",
			"kitten"
		],
		skins: [
			{
				unified: "1f431",
				native: "🐱"
			}
		],
		version: 1
	},
	cat2: {
		id: "cat2",
		name: "Cat",
		keywords: [
			"cat2",
			"animal",
			"meow",
			"pet",
			"cats"
		],
		skins: [
			{
				unified: "1f408",
				native: "🐈"
			}
		],
		version: 1
	},
	black_cat: {
		id: "black_cat",
		name: "Black Cat",
		keywords: [
			"superstition",
			"luck"
		],
		skins: [
			{
				unified: "1f408-200d-2b1b",
				native: "🐈‍⬛"
			}
		],
		version: 13
	},
	lion_face: {
		id: "lion_face",
		name: "Lion",
		keywords: [
			"face",
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f981",
				native: "🦁"
			}
		],
		version: 1
	},
	tiger: {
		id: "tiger",
		name: "Tiger Face",
		keywords: [
			"animal",
			"cat",
			"danger",
			"wild",
			"nature",
			"roar"
		],
		skins: [
			{
				unified: "1f42f",
				native: "🐯"
			}
		],
		version: 1
	},
	tiger2: {
		id: "tiger2",
		name: "Tiger",
		keywords: [
			"tiger2",
			"animal",
			"nature",
			"roar"
		],
		skins: [
			{
				unified: "1f405",
				native: "🐅"
			}
		],
		version: 1
	},
	leopard: {
		id: "leopard",
		name: "Leopard",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f406",
				native: "🐆"
			}
		],
		version: 1
	},
	horse: {
		id: "horse",
		name: "Horse Face",
		keywords: [
			"animal",
			"brown",
			"nature"
		],
		skins: [
			{
				unified: "1f434",
				native: "🐴"
			}
		],
		version: 1
	},
	moose: {
		id: "moose",
		name: "Moose",
		keywords: [
			"shrek",
			"canada",
			"sweden",
			"sven",
			"cool"
		],
		skins: [
			{
				unified: "1face",
				native: "🫎"
			}
		],
		version: 15
	},
	donkey: {
		id: "donkey",
		name: "Donkey",
		keywords: [
			"eeyore",
			"mule"
		],
		skins: [
			{
				unified: "1facf",
				native: "🫏"
			}
		],
		version: 15
	},
	racehorse: {
		id: "racehorse",
		name: "Horse",
		keywords: [
			"racehorse",
			"animal",
			"gamble",
			"luck"
		],
		skins: [
			{
				unified: "1f40e",
				native: "🐎"
			}
		],
		version: 1
	},
	unicorn_face: {
		id: "unicorn_face",
		name: "Unicorn",
		keywords: [
			"face",
			"animal",
			"nature",
			"mystical"
		],
		skins: [
			{
				unified: "1f984",
				native: "🦄"
			}
		],
		version: 1
	},
	zebra_face: {
		id: "zebra_face",
		name: "Zebra",
		keywords: [
			"face",
			"animal",
			"nature",
			"stripes",
			"safari"
		],
		skins: [
			{
				unified: "1f993",
				native: "🦓"
			}
		],
		version: 5
	},
	deer: {
		id: "deer",
		name: "Deer",
		keywords: [
			"animal",
			"nature",
			"horns",
			"venison"
		],
		skins: [
			{
				unified: "1f98c",
				native: "🦌"
			}
		],
		version: 3
	},
	bison: {
		id: "bison",
		name: "Bison",
		keywords: [
			"ox"
		],
		skins: [
			{
				unified: "1f9ac",
				native: "🦬"
			}
		],
		version: 13
	},
	cow: {
		id: "cow",
		name: "Cow Face",
		keywords: [
			"beef",
			"ox",
			"animal",
			"nature",
			"moo",
			"milk"
		],
		skins: [
			{
				unified: "1f42e",
				native: "🐮"
			}
		],
		version: 1
	},
	ox: {
		id: "ox",
		name: "Ox",
		keywords: [
			"animal",
			"cow",
			"beef"
		],
		skins: [
			{
				unified: "1f402",
				native: "🐂"
			}
		],
		version: 1
	},
	water_buffalo: {
		id: "water_buffalo",
		name: "Water Buffalo",
		keywords: [
			"animal",
			"nature",
			"ox",
			"cow"
		],
		skins: [
			{
				unified: "1f403",
				native: "🐃"
			}
		],
		version: 1
	},
	cow2: {
		id: "cow2",
		name: "Cow",
		keywords: [
			"cow2",
			"beef",
			"ox",
			"animal",
			"nature",
			"moo",
			"milk"
		],
		skins: [
			{
				unified: "1f404",
				native: "🐄"
			}
		],
		version: 1
	},
	pig: {
		id: "pig",
		name: "Pig Face",
		keywords: [
			"animal",
			"oink",
			"nature"
		],
		skins: [
			{
				unified: "1f437",
				native: "🐷"
			}
		],
		version: 1
	},
	pig2: {
		id: "pig2",
		name: "Pig",
		keywords: [
			"pig2",
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f416",
				native: "🐖"
			}
		],
		version: 1
	},
	boar: {
		id: "boar",
		name: "Boar",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f417",
				native: "🐗"
			}
		],
		version: 1
	},
	pig_nose: {
		id: "pig_nose",
		name: "Pig Nose",
		keywords: [
			"animal",
			"oink"
		],
		skins: [
			{
				unified: "1f43d",
				native: "🐽"
			}
		],
		version: 1
	},
	ram: {
		id: "ram",
		name: "Ram",
		keywords: [
			"animal",
			"sheep",
			"nature"
		],
		skins: [
			{
				unified: "1f40f",
				native: "🐏"
			}
		],
		version: 1
	},
	sheep: {
		id: "sheep",
		name: "Ewe",
		keywords: [
			"sheep",
			"animal",
			"nature",
			"wool",
			"shipit"
		],
		skins: [
			{
				unified: "1f411",
				native: "🐑"
			}
		],
		version: 1
	},
	goat: {
		id: "goat",
		name: "Goat",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f410",
				native: "🐐"
			}
		],
		version: 1
	},
	dromedary_camel: {
		id: "dromedary_camel",
		name: "Camel",
		keywords: [
			"dromedary",
			"animal",
			"hot",
			"desert",
			"hump"
		],
		skins: [
			{
				unified: "1f42a",
				native: "🐪"
			}
		],
		version: 1
	},
	camel: {
		id: "camel",
		name: "Bactrian Camel",
		keywords: [
			"two",
			"hump",
			"animal",
			"nature",
			"hot",
			"desert"
		],
		skins: [
			{
				unified: "1f42b",
				native: "🐫"
			}
		],
		version: 1
	},
	llama: {
		id: "llama",
		name: "Llama",
		keywords: [
			"animal",
			"nature",
			"alpaca"
		],
		skins: [
			{
				unified: "1f999",
				native: "🦙"
			}
		],
		version: 11
	},
	giraffe_face: {
		id: "giraffe_face",
		name: "Giraffe",
		keywords: [
			"face",
			"animal",
			"nature",
			"spots",
			"safari"
		],
		skins: [
			{
				unified: "1f992",
				native: "🦒"
			}
		],
		version: 5
	},
	elephant: {
		id: "elephant",
		name: "Elephant",
		keywords: [
			"animal",
			"nature",
			"nose",
			"th",
			"circus"
		],
		skins: [
			{
				unified: "1f418",
				native: "🐘"
			}
		],
		version: 1
	},
	mammoth: {
		id: "mammoth",
		name: "Mammoth",
		keywords: [
			"elephant",
			"tusks"
		],
		skins: [
			{
				unified: "1f9a3",
				native: "🦣"
			}
		],
		version: 13
	},
	rhinoceros: {
		id: "rhinoceros",
		name: "Rhinoceros",
		keywords: [
			"animal",
			"nature",
			"horn"
		],
		skins: [
			{
				unified: "1f98f",
				native: "🦏"
			}
		],
		version: 3
	},
	hippopotamus: {
		id: "hippopotamus",
		name: "Hippopotamus",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f99b",
				native: "🦛"
			}
		],
		version: 11
	},
	mouse: {
		id: "mouse",
		name: "Mouse Face",
		keywords: [
			"animal",
			"nature",
			"cheese",
			"wedge",
			"rodent"
		],
		skins: [
			{
				unified: "1f42d",
				native: "🐭"
			}
		],
		version: 1
	},
	mouse2: {
		id: "mouse2",
		name: "Mouse",
		keywords: [
			"mouse2",
			"animal",
			"nature",
			"rodent"
		],
		skins: [
			{
				unified: "1f401",
				native: "🐁"
			}
		],
		version: 1
	},
	rat: {
		id: "rat",
		name: "Rat",
		keywords: [
			"animal",
			"mouse",
			"rodent"
		],
		skins: [
			{
				unified: "1f400",
				native: "🐀"
			}
		],
		version: 1
	},
	hamster: {
		id: "hamster",
		name: "Hamster",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f439",
				native: "🐹"
			}
		],
		version: 1
	},
	rabbit: {
		id: "rabbit",
		name: "Rabbit Face",
		keywords: [
			"animal",
			"nature",
			"pet",
			"spring",
			"magic",
			"bunny"
		],
		skins: [
			{
				unified: "1f430",
				native: "🐰"
			}
		],
		version: 1
	},
	rabbit2: {
		id: "rabbit2",
		name: "Rabbit",
		keywords: [
			"rabbit2",
			"animal",
			"nature",
			"pet",
			"magic",
			"spring"
		],
		skins: [
			{
				unified: "1f407",
				native: "🐇"
			}
		],
		version: 1
	},
	chipmunk: {
		id: "chipmunk",
		name: "Chipmunk",
		keywords: [
			"animal",
			"nature",
			"rodent",
			"squirrel"
		],
		skins: [
			{
				unified: "1f43f-fe0f",
				native: "🐿️"
			}
		],
		version: 1
	},
	beaver: {
		id: "beaver",
		name: "Beaver",
		keywords: [
			"animal",
			"rodent"
		],
		skins: [
			{
				unified: "1f9ab",
				native: "🦫"
			}
		],
		version: 13
	},
	hedgehog: {
		id: "hedgehog",
		name: "Hedgehog",
		keywords: [
			"animal",
			"nature",
			"spiny"
		],
		skins: [
			{
				unified: "1f994",
				native: "🦔"
			}
		],
		version: 5
	},
	bat: {
		id: "bat",
		name: "Bat",
		keywords: [
			"animal",
			"nature",
			"blind",
			"vampire"
		],
		skins: [
			{
				unified: "1f987",
				native: "🦇"
			}
		],
		version: 3
	},
	bear: {
		id: "bear",
		name: "Bear",
		keywords: [
			"animal",
			"nature",
			"wild"
		],
		skins: [
			{
				unified: "1f43b",
				native: "🐻"
			}
		],
		version: 1
	},
	polar_bear: {
		id: "polar_bear",
		name: "Polar Bear",
		keywords: [
			"animal",
			"arctic"
		],
		skins: [
			{
				unified: "1f43b-200d-2744-fe0f",
				native: "🐻‍❄️"
			}
		],
		version: 13
	},
	koala: {
		id: "koala",
		name: "Koala",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f428",
				native: "🐨"
			}
		],
		version: 1
	},
	panda_face: {
		id: "panda_face",
		name: "Panda",
		keywords: [
			"face",
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f43c",
				native: "🐼"
			}
		],
		version: 1
	},
	sloth: {
		id: "sloth",
		name: "Sloth",
		keywords: [
			"animal"
		],
		skins: [
			{
				unified: "1f9a5",
				native: "🦥"
			}
		],
		version: 12
	},
	otter: {
		id: "otter",
		name: "Otter",
		keywords: [
			"animal"
		],
		skins: [
			{
				unified: "1f9a6",
				native: "🦦"
			}
		],
		version: 12
	},
	skunk: {
		id: "skunk",
		name: "Skunk",
		keywords: [
			"animal"
		],
		skins: [
			{
				unified: "1f9a8",
				native: "🦨"
			}
		],
		version: 12
	},
	kangaroo: {
		id: "kangaroo",
		name: "Kangaroo",
		keywords: [
			"animal",
			"nature",
			"australia",
			"joey",
			"hop",
			"marsupial"
		],
		skins: [
			{
				unified: "1f998",
				native: "🦘"
			}
		],
		version: 11
	},
	badger: {
		id: "badger",
		name: "Badger",
		keywords: [
			"animal",
			"nature",
			"honey"
		],
		skins: [
			{
				unified: "1f9a1",
				native: "🦡"
			}
		],
		version: 11
	},
	feet: {
		id: "feet",
		name: "Paw Prints",
		keywords: [
			"feet",
			"animal",
			"tracking",
			"footprints",
			"dog",
			"cat",
			"pet"
		],
		skins: [
			{
				unified: "1f43e",
				native: "🐾"
			}
		],
		version: 1
	},
	turkey: {
		id: "turkey",
		name: "Turkey",
		keywords: [
			"animal",
			"bird"
		],
		skins: [
			{
				unified: "1f983",
				native: "🦃"
			}
		],
		version: 1
	},
	chicken: {
		id: "chicken",
		name: "Chicken",
		keywords: [
			"animal",
			"cluck",
			"nature",
			"bird"
		],
		skins: [
			{
				unified: "1f414",
				native: "🐔"
			}
		],
		version: 1
	},
	rooster: {
		id: "rooster",
		name: "Rooster",
		keywords: [
			"animal",
			"nature",
			"chicken"
		],
		skins: [
			{
				unified: "1f413",
				native: "🐓"
			}
		],
		version: 1
	},
	hatching_chick: {
		id: "hatching_chick",
		name: "Hatching Chick",
		keywords: [
			"animal",
			"chicken",
			"egg",
			"born",
			"baby",
			"bird"
		],
		skins: [
			{
				unified: "1f423",
				native: "🐣"
			}
		],
		version: 1
	},
	baby_chick: {
		id: "baby_chick",
		name: "Baby Chick",
		keywords: [
			"animal",
			"chicken",
			"bird"
		],
		skins: [
			{
				unified: "1f424",
				native: "🐤"
			}
		],
		version: 1
	},
	hatched_chick: {
		id: "hatched_chick",
		name: "Front-Facing Baby Chick",
		keywords: [
			"hatched",
			"front",
			"facing",
			"animal",
			"chicken",
			"bird"
		],
		skins: [
			{
				unified: "1f425",
				native: "🐥"
			}
		],
		version: 1
	},
	bird: {
		id: "bird",
		name: "Bird",
		keywords: [
			"animal",
			"nature",
			"fly",
			"tweet",
			"spring"
		],
		skins: [
			{
				unified: "1f426",
				native: "🐦"
			}
		],
		version: 1
	},
	penguin: {
		id: "penguin",
		name: "Penguin",
		keywords: [
			"animal",
			"nature"
		],
		skins: [
			{
				unified: "1f427",
				native: "🐧"
			}
		],
		version: 1
	},
	dove_of_peace: {
		id: "dove_of_peace",
		name: "Dove",
		keywords: [
			"of",
			"peace",
			"animal",
			"bird"
		],
		skins: [
			{
				unified: "1f54a-fe0f",
				native: "🕊️"
			}
		],
		version: 1
	},
	eagle: {
		id: "eagle",
		name: "Eagle",
		keywords: [
			"animal",
			"nature",
			"bird"
		],
		skins: [
			{
				unified: "1f985",
				native: "🦅"
			}
		],
		version: 3
	},
	duck: {
		id: "duck",
		name: "Duck",
		keywords: [
			"animal",
			"nature",
			"bird",
			"mallard"
		],
		skins: [
			{
				unified: "1f986",
				native: "🦆"
			}
		],
		version: 3
	},
	swan: {
		id: "swan",
		name: "Swan",
		keywords: [
			"animal",
			"nature",
			"bird"
		],
		skins: [
			{
				unified: "1f9a2",
				native: "🦢"
			}
		],
		version: 11
	},
	owl: {
		id: "owl",
		name: "Owl",
		keywords: [
			"animal",
			"nature",
			"bird",
			"hoot"
		],
		skins: [
			{
				unified: "1f989",
				native: "🦉"
			}
		],
		version: 3
	},
	dodo: {
		id: "dodo",
		name: "Dodo",
		keywords: [
			"animal",
			"bird"
		],
		skins: [
			{
				unified: "1f9a4",
				native: "🦤"
			}
		],
		version: 13
	},
	feather: {
		id: "feather",
		name: "Feather",
		keywords: [
			"bird",
			"fly"
		],
		skins: [
			{
				unified: "1fab6",
				native: "🪶"
			}
		],
		version: 13
	},
	flamingo: {
		id: "flamingo",
		name: "Flamingo",
		keywords: [
			"animal"
		],
		skins: [
			{
				unified: "1f9a9",
				native: "🦩"
			}
		],
		version: 12
	},
	peacock: {
		id: "peacock",
		name: "Peacock",
		keywords: [
			"animal",
			"nature",
			"peahen",
			"bird"
		],
		skins: [
			{
				unified: "1f99a",
				native: "🦚"
			}
		],
		version: 11
	},
	parrot: {
		id: "parrot",
		name: "Parrot",
		keywords: [
			"animal",
			"nature",
			"bird",
			"pirate",
			"talk"
		],
		skins: [
			{
				unified: "1f99c",
				native: "🦜"
			}
		],
		version: 11
	},
	wing: {
		id: "wing",
		name: "Wing",
		keywords: [
			"angel",
			"birds",
			"flying"
		],
		skins: [
			{
				unified: "1fabd",
				native: "🪽"
			}
		],
		version: 15
	},
	black_bird: {
		id: "black_bird",
		name: "Black Bird",
		keywords: [
			"crow"
		],
		skins: [
			{
				unified: "1f426-200d-2b1b",
				native: "🐦‍⬛"
			}
		],
		version: 15
	},
	goose: {
		id: "goose",
		name: "Goose",
		keywords: [
			"silly",
			"jemima",
			"goosebumps"
		],
		skins: [
			{
				unified: "1fabf",
				native: "🪿"
			}
		],
		version: 15
	},
	frog: {
		id: "frog",
		name: "Frog",
		keywords: [
			"animal",
			"nature",
			"croak",
			"toad"
		],
		skins: [
			{
				unified: "1f438",
				native: "🐸"
			}
		],
		version: 1
	},
	crocodile: {
		id: "crocodile",
		name: "Crocodile",
		keywords: [
			"animal",
			"nature",
			"reptile",
			"lizard",
			"alligator"
		],
		skins: [
			{
				unified: "1f40a",
				native: "🐊"
			}
		],
		version: 1
	},
	turtle: {
		id: "turtle",
		name: "Turtle",
		keywords: [
			"animal",
			"slow",
			"nature",
			"tortoise"
		],
		skins: [
			{
				unified: "1f422",
				native: "🐢"
			}
		],
		version: 1
	},
	lizard: {
		id: "lizard",
		name: "Lizard",
		keywords: [
			"animal",
			"nature",
			"reptile"
		],
		skins: [
			{
				unified: "1f98e",
				native: "🦎"
			}
		],
		version: 3
	},
	snake: {
		id: "snake",
		name: "Snake",
		keywords: [
			"animal",
			"evil",
			"nature",
			"hiss",
			"python"
		],
		skins: [
			{
				unified: "1f40d",
				native: "🐍"
			}
		],
		version: 1
	},
	dragon_face: {
		id: "dragon_face",
		name: "Dragon Face",
		keywords: [
			"animal",
			"myth",
			"nature",
			"chinese",
			"green"
		],
		skins: [
			{
				unified: "1f432",
				native: "🐲"
			}
		],
		version: 1
	},
	dragon: {
		id: "dragon",
		name: "Dragon",
		keywords: [
			"animal",
			"myth",
			"nature",
			"chinese",
			"green"
		],
		skins: [
			{
				unified: "1f409",
				native: "🐉"
			}
		],
		version: 1
	},
	sauropod: {
		id: "sauropod",
		name: "Sauropod",
		keywords: [
			"animal",
			"nature",
			"dinosaur",
			"brachiosaurus",
			"brontosaurus",
			"diplodocus",
			"extinct"
		],
		skins: [
			{
				unified: "1f995",
				native: "🦕"
			}
		],
		version: 5
	},
	"t-rex": {
		id: "t-rex",
		name: "T-Rex",
		keywords: [
			"t",
			"rex",
			"animal",
			"nature",
			"dinosaur",
			"tyrannosaurus",
			"extinct"
		],
		skins: [
			{
				unified: "1f996",
				native: "🦖"
			}
		],
		version: 5
	},
	whale: {
		id: "whale",
		name: "Spouting Whale",
		keywords: [
			"animal",
			"nature",
			"sea",
			"ocean"
		],
		skins: [
			{
				unified: "1f433",
				native: "🐳"
			}
		],
		version: 1
	},
	whale2: {
		id: "whale2",
		name: "Whale",
		keywords: [
			"whale2",
			"animal",
			"nature",
			"sea",
			"ocean"
		],
		skins: [
			{
				unified: "1f40b",
				native: "🐋"
			}
		],
		version: 1
	},
	dolphin: {
		id: "dolphin",
		name: "Dolphin",
		keywords: [
			"flipper",
			"animal",
			"nature",
			"fish",
			"sea",
			"ocean",
			"fins",
			"beach"
		],
		skins: [
			{
				unified: "1f42c",
				native: "🐬"
			}
		],
		version: 1
	},
	seal: {
		id: "seal",
		name: "Seal",
		keywords: [
			"animal",
			"creature",
			"sea"
		],
		skins: [
			{
				unified: "1f9ad",
				native: "🦭"
			}
		],
		version: 13
	},
	fish: {
		id: "fish",
		name: "Fish",
		keywords: [
			"animal",
			"food",
			"nature"
		],
		skins: [
			{
				unified: "1f41f",
				native: "🐟"
			}
		],
		version: 1
	},
	tropical_fish: {
		id: "tropical_fish",
		name: "Tropical Fish",
		keywords: [
			"animal",
			"swim",
			"ocean",
			"beach",
			"nemo"
		],
		skins: [
			{
				unified: "1f420",
				native: "🐠"
			}
		],
		version: 1
	},
	blowfish: {
		id: "blowfish",
		name: "Blowfish",
		keywords: [
			"animal",
			"nature",
			"food",
			"sea",
			"ocean"
		],
		skins: [
			{
				unified: "1f421",
				native: "🐡"
			}
		],
		version: 1
	},
	shark: {
		id: "shark",
		name: "Shark",
		keywords: [
			"animal",
			"nature",
			"fish",
			"sea",
			"ocean",
			"jaws",
			"fins",
			"beach"
		],
		skins: [
			{
				unified: "1f988",
				native: "🦈"
			}
		],
		version: 3
	},
	octopus: {
		id: "octopus",
		name: "Octopus",
		keywords: [
			"animal",
			"creature",
			"ocean",
			"sea",
			"nature",
			"beach"
		],
		skins: [
			{
				unified: "1f419",
				native: "🐙"
			}
		],
		version: 1
	},
	shell: {
		id: "shell",
		name: "Spiral Shell",
		keywords: [
			"nature",
			"sea",
			"beach"
		],
		skins: [
			{
				unified: "1f41a",
				native: "🐚"
			}
		],
		version: 1
	},
	coral: {
		id: "coral",
		name: "Coral",
		keywords: [
			"ocean",
			"sea",
			"reef"
		],
		skins: [
			{
				unified: "1fab8",
				native: "🪸"
			}
		],
		version: 14
	},
	jellyfish: {
		id: "jellyfish",
		name: "Jellyfish",
		keywords: [
			"sting",
			"tentacles"
		],
		skins: [
			{
				unified: "1fabc",
				native: "🪼"
			}
		],
		version: 15
	},
	snail: {
		id: "snail",
		name: "Snail",
		keywords: [
			"slow",
			"animal",
			"shell"
		],
		skins: [
			{
				unified: "1f40c",
				native: "🐌"
			}
		],
		version: 1
	},
	butterfly: {
		id: "butterfly",
		name: "Butterfly",
		keywords: [
			"animal",
			"insect",
			"nature",
			"caterpillar"
		],
		skins: [
			{
				unified: "1f98b",
				native: "🦋"
			}
		],
		version: 3
	},
	bug: {
		id: "bug",
		name: "Bug",
		keywords: [
			"animal",
			"insect",
			"nature",
			"worm"
		],
		skins: [
			{
				unified: "1f41b",
				native: "🐛"
			}
		],
		version: 1
	},
	ant: {
		id: "ant",
		name: "Ant",
		keywords: [
			"animal",
			"insect",
			"nature",
			"bug"
		],
		skins: [
			{
				unified: "1f41c",
				native: "🐜"
			}
		],
		version: 1
	},
	bee: {
		id: "bee",
		name: "Honeybee",
		keywords: [
			"bee",
			"animal",
			"insect",
			"nature",
			"bug",
			"spring",
			"honey"
		],
		skins: [
			{
				unified: "1f41d",
				native: "🐝"
			}
		],
		version: 1
	},
	beetle: {
		id: "beetle",
		name: "Beetle",
		keywords: [
			"insect"
		],
		skins: [
			{
				unified: "1fab2",
				native: "🪲"
			}
		],
		version: 13
	},
	ladybug: {
		id: "ladybug",
		name: "Lady Beetle",
		keywords: [
			"ladybug",
			"animal",
			"insect",
			"nature"
		],
		skins: [
			{
				unified: "1f41e",
				native: "🐞"
			}
		],
		version: 1
	},
	cricket: {
		id: "cricket",
		name: "Cricket",
		keywords: [
			"animal",
			"chirp"
		],
		skins: [
			{
				unified: "1f997",
				native: "🦗"
			}
		],
		version: 5
	},
	cockroach: {
		id: "cockroach",
		name: "Cockroach",
		keywords: [
			"insect",
			"pests"
		],
		skins: [
			{
				unified: "1fab3",
				native: "🪳"
			}
		],
		version: 13
	},
	spider: {
		id: "spider",
		name: "Spider",
		keywords: [
			"animal",
			"arachnid"
		],
		skins: [
			{
				unified: "1f577-fe0f",
				native: "🕷️"
			}
		],
		version: 1
	},
	spider_web: {
		id: "spider_web",
		name: "Spider Web",
		keywords: [
			"animal",
			"insect",
			"arachnid",
			"silk"
		],
		skins: [
			{
				unified: "1f578-fe0f",
				native: "🕸️"
			}
		],
		version: 1
	},
	scorpion: {
		id: "scorpion",
		name: "Scorpion",
		keywords: [
			"animal",
			"arachnid"
		],
		skins: [
			{
				unified: "1f982",
				native: "🦂"
			}
		],
		version: 1
	},
	mosquito: {
		id: "mosquito",
		name: "Mosquito",
		keywords: [
			"animal",
			"nature",
			"insect",
			"malaria"
		],
		skins: [
			{
				unified: "1f99f",
				native: "🦟"
			}
		],
		version: 11
	},
	fly: {
		id: "fly",
		name: "Fly",
		keywords: [
			"insect"
		],
		skins: [
			{
				unified: "1fab0",
				native: "🪰"
			}
		],
		version: 13
	},
	worm: {
		id: "worm",
		name: "Worm",
		keywords: [
			"animal"
		],
		skins: [
			{
				unified: "1fab1",
				native: "🪱"
			}
		],
		version: 13
	},
	microbe: {
		id: "microbe",
		name: "Microbe",
		keywords: [
			"amoeba",
			"bacteria",
			"germs",
			"virus",
			"covid"
		],
		skins: [
			{
				unified: "1f9a0",
				native: "🦠"
			}
		],
		version: 11
	},
	bouquet: {
		id: "bouquet",
		name: "Bouquet",
		keywords: [
			"flowers",
			"nature",
			"spring"
		],
		skins: [
			{
				unified: "1f490",
				native: "💐"
			}
		],
		version: 1
	},
	cherry_blossom: {
		id: "cherry_blossom",
		name: "Cherry Blossom",
		keywords: [
			"nature",
			"plant",
			"spring",
			"flower"
		],
		skins: [
			{
				unified: "1f338",
				native: "🌸"
			}
		],
		version: 1
	},
	white_flower: {
		id: "white_flower",
		name: "White Flower",
		keywords: [
			"japanese",
			"spring"
		],
		skins: [
			{
				unified: "1f4ae",
				native: "💮"
			}
		],
		version: 1
	},
	lotus: {
		id: "lotus",
		name: "Lotus",
		keywords: [
			"flower",
			"calm",
			"meditation"
		],
		skins: [
			{
				unified: "1fab7",
				native: "🪷"
			}
		],
		version: 14
	},
	rosette: {
		id: "rosette",
		name: "Rosette",
		keywords: [
			"flower",
			"decoration",
			"military"
		],
		skins: [
			{
				unified: "1f3f5-fe0f",
				native: "🏵️"
			}
		],
		version: 1
	},
	rose: {
		id: "rose",
		name: "Rose",
		keywords: [
			"flowers",
			"valentines",
			"love",
			"spring"
		],
		skins: [
			{
				unified: "1f339",
				native: "🌹"
			}
		],
		version: 1
	},
	wilted_flower: {
		id: "wilted_flower",
		name: "Wilted Flower",
		keywords: [
			"plant",
			"nature",
			"rose"
		],
		skins: [
			{
				unified: "1f940",
				native: "🥀"
			}
		],
		version: 3
	},
	hibiscus: {
		id: "hibiscus",
		name: "Hibiscus",
		keywords: [
			"plant",
			"vegetable",
			"flowers",
			"beach"
		],
		skins: [
			{
				unified: "1f33a",
				native: "🌺"
			}
		],
		version: 1
	},
	sunflower: {
		id: "sunflower",
		name: "Sunflower",
		keywords: [
			"nature",
			"plant",
			"fall"
		],
		skins: [
			{
				unified: "1f33b",
				native: "🌻"
			}
		],
		version: 1
	},
	blossom: {
		id: "blossom",
		name: "Blossom",
		keywords: [
			"nature",
			"flowers",
			"yellow"
		],
		skins: [
			{
				unified: "1f33c",
				native: "🌼"
			}
		],
		version: 1
	},
	tulip: {
		id: "tulip",
		name: "Tulip",
		keywords: [
			"flowers",
			"plant",
			"nature",
			"summer",
			"spring"
		],
		skins: [
			{
				unified: "1f337",
				native: "🌷"
			}
		],
		version: 1
	},
	hyacinth: {
		id: "hyacinth",
		name: "Hyacinth",
		keywords: [
			"flower",
			"lavender"
		],
		skins: [
			{
				unified: "1fabb",
				native: "🪻"
			}
		],
		version: 15
	},
	seedling: {
		id: "seedling",
		name: "Seedling",
		keywords: [
			"plant",
			"nature",
			"grass",
			"lawn",
			"spring"
		],
		skins: [
			{
				unified: "1f331",
				native: "🌱"
			}
		],
		version: 1
	},
	potted_plant: {
		id: "potted_plant",
		name: "Potted Plant",
		keywords: [
			"greenery",
			"house"
		],
		skins: [
			{
				unified: "1fab4",
				native: "🪴"
			}
		],
		version: 13
	},
	evergreen_tree: {
		id: "evergreen_tree",
		name: "Evergreen Tree",
		keywords: [
			"plant",
			"nature"
		],
		skins: [
			{
				unified: "1f332",
				native: "🌲"
			}
		],
		version: 1
	},
	deciduous_tree: {
		id: "deciduous_tree",
		name: "Deciduous Tree",
		keywords: [
			"plant",
			"nature"
		],
		skins: [
			{
				unified: "1f333",
				native: "🌳"
			}
		],
		version: 1
	},
	palm_tree: {
		id: "palm_tree",
		name: "Palm Tree",
		keywords: [
			"plant",
			"vegetable",
			"nature",
			"summer",
			"beach",
			"mojito",
			"tropical"
		],
		skins: [
			{
				unified: "1f334",
				native: "🌴"
			}
		],
		version: 1
	},
	cactus: {
		id: "cactus",
		name: "Cactus",
		keywords: [
			"vegetable",
			"plant",
			"nature"
		],
		skins: [
			{
				unified: "1f335",
				native: "🌵"
			}
		],
		version: 1
	},
	ear_of_rice: {
		id: "ear_of_rice",
		name: "Ear of Rice",
		keywords: [
			"sheaf",
			"nature",
			"plant"
		],
		skins: [
			{
				unified: "1f33e",
				native: "🌾"
			}
		],
		version: 1
	},
	herb: {
		id: "herb",
		name: "Herb",
		keywords: [
			"vegetable",
			"plant",
			"medicine",
			"weed",
			"grass",
			"lawn"
		],
		skins: [
			{
				unified: "1f33f",
				native: "🌿"
			}
		],
		version: 1
	},
	shamrock: {
		id: "shamrock",
		name: "Shamrock",
		keywords: [
			"vegetable",
			"plant",
			"nature",
			"irish",
			"clover"
		],
		skins: [
			{
				unified: "2618-fe0f",
				native: "☘️"
			}
		],
		version: 1
	},
	four_leaf_clover: {
		id: "four_leaf_clover",
		name: "Four Leaf Clover",
		keywords: [
			"vegetable",
			"plant",
			"nature",
			"lucky",
			"irish"
		],
		skins: [
			{
				unified: "1f340",
				native: "🍀"
			}
		],
		version: 1
	},
	maple_leaf: {
		id: "maple_leaf",
		name: "Maple Leaf",
		keywords: [
			"nature",
			"plant",
			"vegetable",
			"ca",
			"fall"
		],
		skins: [
			{
				unified: "1f341",
				native: "🍁"
			}
		],
		version: 1
	},
	fallen_leaf: {
		id: "fallen_leaf",
		name: "Fallen Leaf",
		keywords: [
			"nature",
			"plant",
			"vegetable",
			"leaves"
		],
		skins: [
			{
				unified: "1f342",
				native: "🍂"
			}
		],
		version: 1
	},
	leaves: {
		id: "leaves",
		name: "Leaf Fluttering in Wind",
		keywords: [
			"leaves",
			"nature",
			"plant",
			"tree",
			"vegetable",
			"grass",
			"lawn",
			"spring"
		],
		skins: [
			{
				unified: "1f343",
				native: "🍃"
			}
		],
		version: 1
	},
	empty_nest: {
		id: "empty_nest",
		name: "Empty Nest",
		keywords: [
			"bird"
		],
		skins: [
			{
				unified: "1fab9",
				native: "🪹"
			}
		],
		version: 14
	},
	nest_with_eggs: {
		id: "nest_with_eggs",
		name: "Nest with Eggs",
		keywords: [
			"bird"
		],
		skins: [
			{
				unified: "1faba",
				native: "🪺"
			}
		],
		version: 14
	},
	mushroom: {
		id: "mushroom",
		name: "Mushroom",
		keywords: [
			"plant",
			"vegetable"
		],
		skins: [
			{
				unified: "1f344",
				native: "🍄"
			}
		],
		version: 1
	},
	grapes: {
		id: "grapes",
		name: "Grapes",
		keywords: [
			"fruit",
			"food",
			"wine"
		],
		skins: [
			{
				unified: "1f347",
				native: "🍇"
			}
		],
		version: 1
	},
	melon: {
		id: "melon",
		name: "Melon",
		keywords: [
			"fruit",
			"nature",
			"food"
		],
		skins: [
			{
				unified: "1f348",
				native: "🍈"
			}
		],
		version: 1
	},
	watermelon: {
		id: "watermelon",
		name: "Watermelon",
		keywords: [
			"fruit",
			"food",
			"picnic",
			"summer"
		],
		skins: [
			{
				unified: "1f349",
				native: "🍉"
			}
		],
		version: 1
	},
	tangerine: {
		id: "tangerine",
		name: "Tangerine",
		keywords: [
			"food",
			"fruit",
			"nature",
			"orange"
		],
		skins: [
			{
				unified: "1f34a",
				native: "🍊"
			}
		],
		version: 1
	},
	lemon: {
		id: "lemon",
		name: "Lemon",
		keywords: [
			"fruit",
			"nature"
		],
		skins: [
			{
				unified: "1f34b",
				native: "🍋"
			}
		],
		version: 1
	},
	banana: {
		id: "banana",
		name: "Banana",
		keywords: [
			"fruit",
			"food",
			"monkey"
		],
		skins: [
			{
				unified: "1f34c",
				native: "🍌"
			}
		],
		version: 1
	},
	pineapple: {
		id: "pineapple",
		name: "Pineapple",
		keywords: [
			"fruit",
			"nature",
			"food"
		],
		skins: [
			{
				unified: "1f34d",
				native: "🍍"
			}
		],
		version: 1
	},
	mango: {
		id: "mango",
		name: "Mango",
		keywords: [
			"fruit",
			"food",
			"tropical"
		],
		skins: [
			{
				unified: "1f96d",
				native: "🥭"
			}
		],
		version: 11
	},
	apple: {
		id: "apple",
		name: "Red Apple",
		keywords: [
			"fruit",
			"mac",
			"school"
		],
		skins: [
			{
				unified: "1f34e",
				native: "🍎"
			}
		],
		version: 1
	},
	green_apple: {
		id: "green_apple",
		name: "Green Apple",
		keywords: [
			"fruit",
			"nature"
		],
		skins: [
			{
				unified: "1f34f",
				native: "🍏"
			}
		],
		version: 1
	},
	pear: {
		id: "pear",
		name: "Pear",
		keywords: [
			"fruit",
			"nature",
			"food"
		],
		skins: [
			{
				unified: "1f350",
				native: "🍐"
			}
		],
		version: 1
	},
	peach: {
		id: "peach",
		name: "Peach",
		keywords: [
			"fruit",
			"nature",
			"food"
		],
		skins: [
			{
				unified: "1f351",
				native: "🍑"
			}
		],
		version: 1
	},
	cherries: {
		id: "cherries",
		name: "Cherries",
		keywords: [
			"food",
			"fruit"
		],
		skins: [
			{
				unified: "1f352",
				native: "🍒"
			}
		],
		version: 1
	},
	strawberry: {
		id: "strawberry",
		name: "Strawberry",
		keywords: [
			"fruit",
			"food",
			"nature"
		],
		skins: [
			{
				unified: "1f353",
				native: "🍓"
			}
		],
		version: 1
	},
	blueberries: {
		id: "blueberries",
		name: "Blueberries",
		keywords: [
			"fruit"
		],
		skins: [
			{
				unified: "1fad0",
				native: "🫐"
			}
		],
		version: 13
	},
	kiwifruit: {
		id: "kiwifruit",
		name: "Kiwifruit",
		keywords: [
			"kiwi",
			"fruit",
			"food"
		],
		skins: [
			{
				unified: "1f95d",
				native: "🥝"
			}
		],
		version: 3
	},
	tomato: {
		id: "tomato",
		name: "Tomato",
		keywords: [
			"fruit",
			"vegetable",
			"nature",
			"food"
		],
		skins: [
			{
				unified: "1f345",
				native: "🍅"
			}
		],
		version: 1
	},
	olive: {
		id: "olive",
		name: "Olive",
		keywords: [
			"fruit"
		],
		skins: [
			{
				unified: "1fad2",
				native: "🫒"
			}
		],
		version: 13
	},
	coconut: {
		id: "coconut",
		name: "Coconut",
		keywords: [
			"fruit",
			"nature",
			"food",
			"palm"
		],
		skins: [
			{
				unified: "1f965",
				native: "🥥"
			}
		],
		version: 5
	},
	avocado: {
		id: "avocado",
		name: "Avocado",
		keywords: [
			"fruit",
			"food"
		],
		skins: [
			{
				unified: "1f951",
				native: "🥑"
			}
		],
		version: 3
	},
	eggplant: {
		id: "eggplant",
		name: "Eggplant",
		keywords: [
			"vegetable",
			"nature",
			"food",
			"aubergine"
		],
		skins: [
			{
				unified: "1f346",
				native: "🍆"
			}
		],
		version: 1
	},
	potato: {
		id: "potato",
		name: "Potato",
		keywords: [
			"food",
			"tuber",
			"vegatable",
			"starch"
		],
		skins: [
			{
				unified: "1f954",
				native: "🥔"
			}
		],
		version: 3
	},
	carrot: {
		id: "carrot",
		name: "Carrot",
		keywords: [
			"vegetable",
			"food",
			"orange"
		],
		skins: [
			{
				unified: "1f955",
				native: "🥕"
			}
		],
		version: 3
	},
	corn: {
		id: "corn",
		name: "Ear of Corn",
		keywords: [
			"food",
			"vegetable",
			"plant"
		],
		skins: [
			{
				unified: "1f33d",
				native: "🌽"
			}
		],
		version: 1
	},
	hot_pepper: {
		id: "hot_pepper",
		name: "Hot Pepper",
		keywords: [
			"food",
			"spicy",
			"chilli",
			"chili"
		],
		skins: [
			{
				unified: "1f336-fe0f",
				native: "🌶️"
			}
		],
		version: 1
	},
	bell_pepper: {
		id: "bell_pepper",
		name: "Bell Pepper",
		keywords: [
			"fruit",
			"plant"
		],
		skins: [
			{
				unified: "1fad1",
				native: "🫑"
			}
		],
		version: 13
	},
	cucumber: {
		id: "cucumber",
		name: "Cucumber",
		keywords: [
			"fruit",
			"food",
			"pickle"
		],
		skins: [
			{
				unified: "1f952",
				native: "🥒"
			}
		],
		version: 3
	},
	leafy_green: {
		id: "leafy_green",
		name: "Leafy Green",
		keywords: [
			"food",
			"vegetable",
			"plant",
			"bok",
			"choy",
			"cabbage",
			"kale",
			"lettuce"
		],
		skins: [
			{
				unified: "1f96c",
				native: "🥬"
			}
		],
		version: 11
	},
	broccoli: {
		id: "broccoli",
		name: "Broccoli",
		keywords: [
			"fruit",
			"food",
			"vegetable"
		],
		skins: [
			{
				unified: "1f966",
				native: "🥦"
			}
		],
		version: 5
	},
	garlic: {
		id: "garlic",
		name: "Garlic",
		keywords: [
			"food",
			"spice",
			"cook"
		],
		skins: [
			{
				unified: "1f9c4",
				native: "🧄"
			}
		],
		version: 12
	},
	onion: {
		id: "onion",
		name: "Onion",
		keywords: [
			"cook",
			"food",
			"spice"
		],
		skins: [
			{
				unified: "1f9c5",
				native: "🧅"
			}
		],
		version: 12
	},
	peanuts: {
		id: "peanuts",
		name: "Peanuts",
		keywords: [
			"food",
			"nut"
		],
		skins: [
			{
				unified: "1f95c",
				native: "🥜"
			}
		],
		version: 3
	},
	beans: {
		id: "beans",
		name: "Beans",
		keywords: [
			"food"
		],
		skins: [
			{
				unified: "1fad8",
				native: "🫘"
			}
		],
		version: 14
	},
	chestnut: {
		id: "chestnut",
		name: "Chestnut",
		keywords: [
			"food",
			"squirrel"
		],
		skins: [
			{
				unified: "1f330",
				native: "🌰"
			}
		],
		version: 1
	},
	ginger_root: {
		id: "ginger_root",
		name: "Ginger Root",
		keywords: [
			"spice",
			"yellow",
			"cooking",
			"gingerbread"
		],
		skins: [
			{
				unified: "1fada",
				native: "🫚"
			}
		],
		version: 15
	},
	pea_pod: {
		id: "pea_pod",
		name: "Pea Pod",
		keywords: [
			"cozy",
			"green"
		],
		skins: [
			{
				unified: "1fadb",
				native: "🫛"
			}
		],
		version: 15
	},
	bread: {
		id: "bread",
		name: "Bread",
		keywords: [
			"food",
			"wheat",
			"breakfast",
			"toast"
		],
		skins: [
			{
				unified: "1f35e",
				native: "🍞"
			}
		],
		version: 1
	},
	croissant: {
		id: "croissant",
		name: "Croissant",
		keywords: [
			"food",
			"bread",
			"french"
		],
		skins: [
			{
				unified: "1f950",
				native: "🥐"
			}
		],
		version: 3
	},
	baguette_bread: {
		id: "baguette_bread",
		name: "Baguette Bread",
		keywords: [
			"food",
			"french",
			"france",
			"bakery"
		],
		skins: [
			{
				unified: "1f956",
				native: "🥖"
			}
		],
		version: 3
	},
	flatbread: {
		id: "flatbread",
		name: "Flatbread",
		keywords: [
			"flour",
			"food",
			"bakery"
		],
		skins: [
			{
				unified: "1fad3",
				native: "🫓"
			}
		],
		version: 13
	},
	pretzel: {
		id: "pretzel",
		name: "Pretzel",
		keywords: [
			"food",
			"bread",
			"twisted",
			"germany",
			"bakery"
		],
		skins: [
			{
				unified: "1f968",
				native: "🥨"
			}
		],
		version: 5
	},
	bagel: {
		id: "bagel",
		name: "Bagel",
		keywords: [
			"food",
			"bread",
			"bakery",
			"schmear",
			"jewish"
		],
		skins: [
			{
				unified: "1f96f",
				native: "🥯"
			}
		],
		version: 11
	},
	pancakes: {
		id: "pancakes",
		name: "Pancakes",
		keywords: [
			"food",
			"breakfast",
			"flapjacks",
			"hotcakes",
			"brunch"
		],
		skins: [
			{
				unified: "1f95e",
				native: "🥞"
			}
		],
		version: 3
	},
	waffle: {
		id: "waffle",
		name: "Waffle",
		keywords: [
			"food",
			"breakfast",
			"brunch"
		],
		skins: [
			{
				unified: "1f9c7",
				native: "🧇"
			}
		],
		version: 12
	},
	cheese_wedge: {
		id: "cheese_wedge",
		name: "Cheese Wedge",
		keywords: [
			"food",
			"chadder",
			"swiss"
		],
		skins: [
			{
				unified: "1f9c0",
				native: "🧀"
			}
		],
		version: 1
	},
	meat_on_bone: {
		id: "meat_on_bone",
		name: "Meat on Bone",
		keywords: [
			"good",
			"food",
			"drumstick"
		],
		skins: [
			{
				unified: "1f356",
				native: "🍖"
			}
		],
		version: 1
	},
	poultry_leg: {
		id: "poultry_leg",
		name: "Poultry Leg",
		keywords: [
			"food",
			"meat",
			"drumstick",
			"bird",
			"chicken",
			"turkey"
		],
		skins: [
			{
				unified: "1f357",
				native: "🍗"
			}
		],
		version: 1
	},
	cut_of_meat: {
		id: "cut_of_meat",
		name: "Cut of Meat",
		keywords: [
			"food",
			"cow",
			"chop",
			"lambchop",
			"porkchop"
		],
		skins: [
			{
				unified: "1f969",
				native: "🥩"
			}
		],
		version: 5
	},
	bacon: {
		id: "bacon",
		name: "Bacon",
		keywords: [
			"food",
			"breakfast",
			"pork",
			"pig",
			"meat",
			"brunch"
		],
		skins: [
			{
				unified: "1f953",
				native: "🥓"
			}
		],
		version: 3
	},
	hamburger: {
		id: "hamburger",
		name: "Hamburger",
		keywords: [
			"meat",
			"fast",
			"food",
			"beef",
			"cheeseburger",
			"mcdonalds",
			"burger",
			"king"
		],
		skins: [
			{
				unified: "1f354",
				native: "🍔"
			}
		],
		version: 1
	},
	fries: {
		id: "fries",
		name: "French Fries",
		keywords: [
			"chips",
			"snack",
			"fast",
			"food",
			"potato"
		],
		skins: [
			{
				unified: "1f35f",
				native: "🍟"
			}
		],
		version: 1
	},
	pizza: {
		id: "pizza",
		name: "Pizza",
		keywords: [
			"food",
			"party",
			"italy"
		],
		skins: [
			{
				unified: "1f355",
				native: "🍕"
			}
		],
		version: 1
	},
	hotdog: {
		id: "hotdog",
		name: "Hot Dog",
		keywords: [
			"hotdog",
			"food",
			"frankfurter",
			"america"
		],
		skins: [
			{
				unified: "1f32d",
				native: "🌭"
			}
		],
		version: 1
	},
	sandwich: {
		id: "sandwich",
		name: "Sandwich",
		keywords: [
			"food",
			"lunch",
			"bread",
			"toast",
			"bakery"
		],
		skins: [
			{
				unified: "1f96a",
				native: "🥪"
			}
		],
		version: 5
	},
	taco: {
		id: "taco",
		name: "Taco",
		keywords: [
			"food",
			"mexican"
		],
		skins: [
			{
				unified: "1f32e",
				native: "🌮"
			}
		],
		version: 1
	},
	burrito: {
		id: "burrito",
		name: "Burrito",
		keywords: [
			"food",
			"mexican"
		],
		skins: [
			{
				unified: "1f32f",
				native: "🌯"
			}
		],
		version: 1
	},
	tamale: {
		id: "tamale",
		name: "Tamale",
		keywords: [
			"food",
			"masa"
		],
		skins: [
			{
				unified: "1fad4",
				native: "🫔"
			}
		],
		version: 13
	},
	stuffed_flatbread: {
		id: "stuffed_flatbread",
		name: "Stuffed Flatbread",
		keywords: [
			"food",
			"gyro",
			"mediterranean"
		],
		skins: [
			{
				unified: "1f959",
				native: "🥙"
			}
		],
		version: 3
	},
	falafel: {
		id: "falafel",
		name: "Falafel",
		keywords: [
			"food",
			"mediterranean"
		],
		skins: [
			{
				unified: "1f9c6",
				native: "🧆"
			}
		],
		version: 12
	},
	egg: {
		id: "egg",
		name: "Egg",
		keywords: [
			"food",
			"chicken",
			"breakfast"
		],
		skins: [
			{
				unified: "1f95a",
				native: "🥚"
			}
		],
		version: 3
	},
	fried_egg: {
		id: "fried_egg",
		name: "Cooking",
		keywords: [
			"fried",
			"egg",
			"food",
			"breakfast",
			"kitchen",
			"skillet"
		],
		skins: [
			{
				unified: "1f373",
				native: "🍳"
			}
		],
		version: 1
	},
	shallow_pan_of_food: {
		id: "shallow_pan_of_food",
		name: "Shallow Pan of Food",
		keywords: [
			"cooking",
			"casserole",
			"paella",
			"skillet"
		],
		skins: [
			{
				unified: "1f958",
				native: "🥘"
			}
		],
		version: 3
	},
	stew: {
		id: "stew",
		name: "Pot of Food",
		keywords: [
			"stew",
			"meat",
			"soup",
			"hot"
		],
		skins: [
			{
				unified: "1f372",
				native: "🍲"
			}
		],
		version: 1
	},
	fondue: {
		id: "fondue",
		name: "Fondue",
		keywords: [
			"cheese",
			"pot",
			"food"
		],
		skins: [
			{
				unified: "1fad5",
				native: "🫕"
			}
		],
		version: 13
	},
	bowl_with_spoon: {
		id: "bowl_with_spoon",
		name: "Bowl with Spoon",
		keywords: [
			"food",
			"breakfast",
			"cereal",
			"oatmeal",
			"porridge"
		],
		skins: [
			{
				unified: "1f963",
				native: "🥣"
			}
		],
		version: 5
	},
	green_salad: {
		id: "green_salad",
		name: "Green Salad",
		keywords: [
			"food",
			"healthy",
			"lettuce",
			"vegetable"
		],
		skins: [
			{
				unified: "1f957",
				native: "🥗"
			}
		],
		version: 3
	},
	popcorn: {
		id: "popcorn",
		name: "Popcorn",
		keywords: [
			"food",
			"movie",
			"theater",
			"films",
			"snack",
			"drama"
		],
		skins: [
			{
				unified: "1f37f",
				native: "🍿"
			}
		],
		version: 1
	},
	butter: {
		id: "butter",
		name: "Butter",
		keywords: [
			"food",
			"cook"
		],
		skins: [
			{
				unified: "1f9c8",
				native: "🧈"
			}
		],
		version: 12
	},
	salt: {
		id: "salt",
		name: "Salt",
		keywords: [
			"condiment",
			"shaker"
		],
		skins: [
			{
				unified: "1f9c2",
				native: "🧂"
			}
		],
		version: 11
	},
	canned_food: {
		id: "canned_food",
		name: "Canned Food",
		keywords: [
			"soup",
			"tomatoes"
		],
		skins: [
			{
				unified: "1f96b",
				native: "🥫"
			}
		],
		version: 5
	},
	bento: {
		id: "bento",
		name: "Bento Box",
		keywords: [
			"food",
			"japanese",
			"lunch"
		],
		skins: [
			{
				unified: "1f371",
				native: "🍱"
			}
		],
		version: 1
	},
	rice_cracker: {
		id: "rice_cracker",
		name: "Rice Cracker",
		keywords: [
			"food",
			"japanese",
			"snack"
		],
		skins: [
			{
				unified: "1f358",
				native: "🍘"
			}
		],
		version: 1
	},
	rice_ball: {
		id: "rice_ball",
		name: "Rice Ball",
		keywords: [
			"food",
			"japanese"
		],
		skins: [
			{
				unified: "1f359",
				native: "🍙"
			}
		],
		version: 1
	},
	rice: {
		id: "rice",
		name: "Cooked Rice",
		keywords: [
			"food",
			"asian"
		],
		skins: [
			{
				unified: "1f35a",
				native: "🍚"
			}
		],
		version: 1
	},
	curry: {
		id: "curry",
		name: "Curry Rice",
		keywords: [
			"food",
			"spicy",
			"hot",
			"indian"
		],
		skins: [
			{
				unified: "1f35b",
				native: "🍛"
			}
		],
		version: 1
	},
	ramen: {
		id: "ramen",
		name: "Steaming Bowl",
		keywords: [
			"ramen",
			"food",
			"japanese",
			"noodle",
			"chopsticks"
		],
		skins: [
			{
				unified: "1f35c",
				native: "🍜"
			}
		],
		version: 1
	},
	spaghetti: {
		id: "spaghetti",
		name: "Spaghetti",
		keywords: [
			"food",
			"italian",
			"pasta",
			"noodle"
		],
		skins: [
			{
				unified: "1f35d",
				native: "🍝"
			}
		],
		version: 1
	},
	sweet_potato: {
		id: "sweet_potato",
		name: "Roasted Sweet Potato",
		keywords: [
			"food",
			"nature",
			"plant"
		],
		skins: [
			{
				unified: "1f360",
				native: "🍠"
			}
		],
		version: 1
	},
	oden: {
		id: "oden",
		name: "Oden",
		keywords: [
			"food",
			"japanese"
		],
		skins: [
			{
				unified: "1f362",
				native: "🍢"
			}
		],
		version: 1
	},
	sushi: {
		id: "sushi",
		name: "Sushi",
		keywords: [
			"food",
			"fish",
			"japanese",
			"rice"
		],
		skins: [
			{
				unified: "1f363",
				native: "🍣"
			}
		],
		version: 1
	},
	fried_shrimp: {
		id: "fried_shrimp",
		name: "Fried Shrimp",
		keywords: [
			"food",
			"animal",
			"appetizer",
			"summer"
		],
		skins: [
			{
				unified: "1f364",
				native: "🍤"
			}
		],
		version: 1
	},
	fish_cake: {
		id: "fish_cake",
		name: "Fish Cake with Swirl",
		keywords: [
			"food",
			"japan",
			"sea",
			"beach",
			"narutomaki",
			"pink",
			"kamaboko",
			"surimi",
			"ramen"
		],
		skins: [
			{
				unified: "1f365",
				native: "🍥"
			}
		],
		version: 1
	},
	moon_cake: {
		id: "moon_cake",
		name: "Moon Cake",
		keywords: [
			"food",
			"autumn",
			"dessert"
		],
		skins: [
			{
				unified: "1f96e",
				native: "🥮"
			}
		],
		version: 11
	},
	dango: {
		id: "dango",
		name: "Dango",
		keywords: [
			"food",
			"dessert",
			"sweet",
			"japanese",
			"barbecue",
			"meat"
		],
		skins: [
			{
				unified: "1f361",
				native: "🍡"
			}
		],
		version: 1
	},
	dumpling: {
		id: "dumpling",
		name: "Dumpling",
		keywords: [
			"food",
			"empanada",
			"pierogi",
			"potsticker",
			"gyoza"
		],
		skins: [
			{
				unified: "1f95f",
				native: "🥟"
			}
		],
		version: 5
	},
	fortune_cookie: {
		id: "fortune_cookie",
		name: "Fortune Cookie",
		keywords: [
			"food",
			"prophecy",
			"dessert"
		],
		skins: [
			{
				unified: "1f960",
				native: "🥠"
			}
		],
		version: 5
	},
	takeout_box: {
		id: "takeout_box",
		name: "Takeout Box",
		keywords: [
			"food",
			"leftovers"
		],
		skins: [
			{
				unified: "1f961",
				native: "🥡"
			}
		],
		version: 5
	},
	crab: {
		id: "crab",
		name: "Crab",
		keywords: [
			"animal",
			"crustacean"
		],
		skins: [
			{
				unified: "1f980",
				native: "🦀"
			}
		],
		version: 1
	},
	lobster: {
		id: "lobster",
		name: "Lobster",
		keywords: [
			"animal",
			"nature",
			"bisque",
			"claws",
			"seafood"
		],
		skins: [
			{
				unified: "1f99e",
				native: "🦞"
			}
		],
		version: 11
	},
	shrimp: {
		id: "shrimp",
		name: "Shrimp",
		keywords: [
			"animal",
			"ocean",
			"nature",
			"seafood"
		],
		skins: [
			{
				unified: "1f990",
				native: "🦐"
			}
		],
		version: 3
	},
	squid: {
		id: "squid",
		name: "Squid",
		keywords: [
			"animal",
			"nature",
			"ocean",
			"sea"
		],
		skins: [
			{
				unified: "1f991",
				native: "🦑"
			}
		],
		version: 3
	},
	oyster: {
		id: "oyster",
		name: "Oyster",
		keywords: [
			"food"
		],
		skins: [
			{
				unified: "1f9aa",
				native: "🦪"
			}
		],
		version: 12
	},
	icecream: {
		id: "icecream",
		name: "Soft Ice Cream",
		keywords: [
			"icecream",
			"food",
			"hot",
			"dessert",
			"summer"
		],
		skins: [
			{
				unified: "1f366",
				native: "🍦"
			}
		],
		version: 1
	},
	shaved_ice: {
		id: "shaved_ice",
		name: "Shaved Ice",
		keywords: [
			"hot",
			"dessert",
			"summer"
		],
		skins: [
			{
				unified: "1f367",
				native: "🍧"
			}
		],
		version: 1
	},
	ice_cream: {
		id: "ice_cream",
		name: "Ice Cream",
		keywords: [
			"food",
			"hot",
			"dessert"
		],
		skins: [
			{
				unified: "1f368",
				native: "🍨"
			}
		],
		version: 1
	},
	doughnut: {
		id: "doughnut",
		name: "Doughnut",
		keywords: [
			"food",
			"dessert",
			"snack",
			"sweet",
			"donut"
		],
		skins: [
			{
				unified: "1f369",
				native: "🍩"
			}
		],
		version: 1
	},
	cookie: {
		id: "cookie",
		name: "Cookie",
		keywords: [
			"food",
			"snack",
			"oreo",
			"chocolate",
			"sweet",
			"dessert"
		],
		skins: [
			{
				unified: "1f36a",
				native: "🍪"
			}
		],
		version: 1
	},
	birthday: {
		id: "birthday",
		name: "Birthday Cake",
		keywords: [
			"food",
			"dessert"
		],
		skins: [
			{
				unified: "1f382",
				native: "🎂"
			}
		],
		version: 1
	},
	cake: {
		id: "cake",
		name: "Shortcake",
		keywords: [
			"cake",
			"food",
			"dessert"
		],
		skins: [
			{
				unified: "1f370",
				native: "🍰"
			}
		],
		version: 1
	},
	cupcake: {
		id: "cupcake",
		name: "Cupcake",
		keywords: [
			"food",
			"dessert",
			"bakery",
			"sweet"
		],
		skins: [
			{
				unified: "1f9c1",
				native: "🧁"
			}
		],
		version: 11
	},
	pie: {
		id: "pie",
		name: "Pie",
		keywords: [
			"food",
			"dessert",
			"pastry"
		],
		skins: [
			{
				unified: "1f967",
				native: "🥧"
			}
		],
		version: 5
	},
	chocolate_bar: {
		id: "chocolate_bar",
		name: "Chocolate Bar",
		keywords: [
			"food",
			"snack",
			"dessert",
			"sweet"
		],
		skins: [
			{
				unified: "1f36b",
				native: "🍫"
			}
		],
		version: 1
	},
	candy: {
		id: "candy",
		name: "Candy",
		keywords: [
			"snack",
			"dessert",
			"sweet",
			"lolly"
		],
		skins: [
			{
				unified: "1f36c",
				native: "🍬"
			}
		],
		version: 1
	},
	lollipop: {
		id: "lollipop",
		name: "Lollipop",
		keywords: [
			"food",
			"snack",
			"candy",
			"sweet"
		],
		skins: [
			{
				unified: "1f36d",
				native: "🍭"
			}
		],
		version: 1
	},
	custard: {
		id: "custard",
		name: "Custard",
		keywords: [
			"dessert",
			"food"
		],
		skins: [
			{
				unified: "1f36e",
				native: "🍮"
			}
		],
		version: 1
	},
	honey_pot: {
		id: "honey_pot",
		name: "Honey Pot",
		keywords: [
			"bees",
			"sweet",
			"kitchen"
		],
		skins: [
			{
				unified: "1f36f",
				native: "🍯"
			}
		],
		version: 1
	},
	baby_bottle: {
		id: "baby_bottle",
		name: "Baby Bottle",
		keywords: [
			"food",
			"container",
			"milk"
		],
		skins: [
			{
				unified: "1f37c",
				native: "🍼"
			}
		],
		version: 1
	},
	glass_of_milk: {
		id: "glass_of_milk",
		name: "Glass of Milk",
		keywords: [
			"beverage",
			"drink",
			"cow"
		],
		skins: [
			{
				unified: "1f95b",
				native: "🥛"
			}
		],
		version: 3
	},
	coffee: {
		id: "coffee",
		name: "Hot Beverage",
		keywords: [
			"coffee",
			"caffeine",
			"latte",
			"espresso",
			"mug"
		],
		skins: [
			{
				unified: "2615",
				native: "☕"
			}
		],
		version: 1
	},
	teapot: {
		id: "teapot",
		name: "Teapot",
		keywords: [
			"drink",
			"hot"
		],
		skins: [
			{
				unified: "1fad6",
				native: "🫖"
			}
		],
		version: 13
	},
	tea: {
		id: "tea",
		name: "Teacup Without Handle",
		keywords: [
			"tea",
			"drink",
			"bowl",
			"breakfast",
			"green",
			"british"
		],
		skins: [
			{
				unified: "1f375",
				native: "🍵"
			}
		],
		version: 1
	},
	sake: {
		id: "sake",
		name: "Sake",
		keywords: [
			"wine",
			"drink",
			"drunk",
			"beverage",
			"japanese",
			"alcohol",
			"booze"
		],
		skins: [
			{
				unified: "1f376",
				native: "🍶"
			}
		],
		version: 1
	},
	champagne: {
		id: "champagne",
		name: "Bottle with Popping Cork",
		keywords: [
			"champagne",
			"drink",
			"wine",
			"celebration"
		],
		skins: [
			{
				unified: "1f37e",
				native: "🍾"
			}
		],
		version: 1
	},
	wine_glass: {
		id: "wine_glass",
		name: "Wine Glass",
		keywords: [
			"drink",
			"beverage",
			"drunk",
			"alcohol",
			"booze"
		],
		skins: [
			{
				unified: "1f377",
				native: "🍷"
			}
		],
		version: 1
	},
	cocktail: {
		id: "cocktail",
		name: "Cocktail Glass",
		keywords: [
			"drink",
			"drunk",
			"alcohol",
			"beverage",
			"booze",
			"mojito"
		],
		skins: [
			{
				unified: "1f378",
				native: "🍸"
			}
		],
		version: 1
	},
	tropical_drink: {
		id: "tropical_drink",
		name: "Tropical Drink",
		keywords: [
			"beverage",
			"cocktail",
			"summer",
			"beach",
			"alcohol",
			"booze",
			"mojito"
		],
		skins: [
			{
				unified: "1f379",
				native: "🍹"
			}
		],
		version: 1
	},
	beer: {
		id: "beer",
		name: "Beer Mug",
		keywords: [
			"relax",
			"beverage",
			"drink",
			"drunk",
			"party",
			"pub",
			"summer",
			"alcohol",
			"booze"
		],
		skins: [
			{
				unified: "1f37a",
				native: "🍺"
			}
		],
		version: 1
	},
	beers: {
		id: "beers",
		name: "Clinking Beer Mugs",
		keywords: [
			"beers",
			"relax",
			"beverage",
			"drink",
			"drunk",
			"party",
			"pub",
			"summer",
			"alcohol",
			"booze"
		],
		skins: [
			{
				unified: "1f37b",
				native: "🍻"
			}
		],
		version: 1
	},
	clinking_glasses: {
		id: "clinking_glasses",
		name: "Clinking Glasses",
		keywords: [
			"beverage",
			"drink",
			"party",
			"alcohol",
			"celebrate",
			"cheers",
			"wine",
			"champagne",
			"toast"
		],
		skins: [
			{
				unified: "1f942",
				native: "🥂"
			}
		],
		version: 3
	},
	tumbler_glass: {
		id: "tumbler_glass",
		name: "Tumbler Glass",
		keywords: [
			"drink",
			"beverage",
			"drunk",
			"alcohol",
			"liquor",
			"booze",
			"bourbon",
			"scotch",
			"whisky",
			"shot"
		],
		skins: [
			{
				unified: "1f943",
				native: "🥃"
			}
		],
		version: 3
	},
	pouring_liquid: {
		id: "pouring_liquid",
		name: "Pouring Liquid",
		keywords: [
			"cup",
			"water"
		],
		skins: [
			{
				unified: "1fad7",
				native: "🫗"
			}
		],
		version: 14
	},
	cup_with_straw: {
		id: "cup_with_straw",
		name: "Cup with Straw",
		keywords: [
			"drink",
			"soda"
		],
		skins: [
			{
				unified: "1f964",
				native: "🥤"
			}
		],
		version: 5
	},
	bubble_tea: {
		id: "bubble_tea",
		name: "Bubble Tea",
		keywords: [
			"taiwan",
			"boba",
			"milk",
			"straw"
		],
		skins: [
			{
				unified: "1f9cb",
				native: "🧋"
			}
		],
		version: 13
	},
	beverage_box: {
		id: "beverage_box",
		name: "Beverage Box",
		keywords: [
			"drink"
		],
		skins: [
			{
				unified: "1f9c3",
				native: "🧃"
			}
		],
		version: 12
	},
	mate_drink: {
		id: "mate_drink",
		name: "Mate",
		keywords: [
			"drink",
			"tea",
			"beverage"
		],
		skins: [
			{
				unified: "1f9c9",
				native: "🧉"
			}
		],
		version: 12
	},
	ice_cube: {
		id: "ice_cube",
		name: "Ice",
		keywords: [
			"cube",
			"water",
			"cold"
		],
		skins: [
			{
				unified: "1f9ca",
				native: "🧊"
			}
		],
		version: 12
	},
	chopsticks: {
		id: "chopsticks",
		name: "Chopsticks",
		keywords: [
			"food"
		],
		skins: [
			{
				unified: "1f962",
				native: "🥢"
			}
		],
		version: 5
	},
	knife_fork_plate: {
		id: "knife_fork_plate",
		name: "Fork and Knife with Plate",
		keywords: [
			"food",
			"eat",
			"meal",
			"lunch",
			"dinner",
			"restaurant"
		],
		skins: [
			{
				unified: "1f37d-fe0f",
				native: "🍽️"
			}
		],
		version: 1
	},
	fork_and_knife: {
		id: "fork_and_knife",
		name: "Fork and Knife",
		keywords: [
			"cutlery",
			"kitchen"
		],
		skins: [
			{
				unified: "1f374",
				native: "🍴"
			}
		],
		version: 1
	},
	spoon: {
		id: "spoon",
		name: "Spoon",
		keywords: [
			"cutlery",
			"kitchen",
			"tableware"
		],
		skins: [
			{
				unified: "1f944",
				native: "🥄"
			}
		],
		version: 3
	},
	hocho: {
		id: "hocho",
		name: "Hocho",
		keywords: [
			"knife",
			"kitchen",
			"blade",
			"cutlery",
			"weapon"
		],
		skins: [
			{
				unified: "1f52a",
				native: "🔪"
			}
		],
		version: 1
	},
	jar: {
		id: "jar",
		name: "Jar",
		keywords: [
			"container",
			"sauce"
		],
		skins: [
			{
				unified: "1fad9",
				native: "🫙"
			}
		],
		version: 14
	},
	amphora: {
		id: "amphora",
		name: "Amphora",
		keywords: [
			"vase",
			"jar"
		],
		skins: [
			{
				unified: "1f3fa",
				native: "🏺"
			}
		],
		version: 1
	},
	earth_africa: {
		id: "earth_africa",
		name: "Earth Globe Europe-Africa",
		keywords: [
			"africa",
			"showing",
			"europe",
			"world",
			"international"
		],
		skins: [
			{
				unified: "1f30d",
				native: "🌍"
			}
		],
		version: 1
	},
	earth_americas: {
		id: "earth_americas",
		name: "Earth Globe Americas",
		keywords: [
			"showing",
			"world",
			"USA",
			"international"
		],
		skins: [
			{
				unified: "1f30e",
				native: "🌎"
			}
		],
		version: 1
	},
	earth_asia: {
		id: "earth_asia",
		name: "Earth Globe Asia-Australia",
		keywords: [
			"asia",
			"showing",
			"australia",
			"world",
			"east",
			"international"
		],
		skins: [
			{
				unified: "1f30f",
				native: "🌏"
			}
		],
		version: 1
	},
	globe_with_meridians: {
		id: "globe_with_meridians",
		name: "Globe with Meridians",
		keywords: [
			"earth",
			"international",
			"world",
			"internet",
			"interweb",
			"i18n"
		],
		skins: [
			{
				unified: "1f310",
				native: "🌐"
			}
		],
		version: 1
	},
	world_map: {
		id: "world_map",
		name: "World Map",
		keywords: [
			"location",
			"direction"
		],
		skins: [
			{
				unified: "1f5fa-fe0f",
				native: "🗺️"
			}
		],
		version: 1
	},
	japan: {
		id: "japan",
		name: "Map of Japan",
		keywords: [
			"nation",
			"country",
			"japanese",
			"asia"
		],
		skins: [
			{
				unified: "1f5fe",
				native: "🗾"
			}
		],
		version: 1
	},
	compass: {
		id: "compass",
		name: "Compass",
		keywords: [
			"magnetic",
			"navigation",
			"orienteering"
		],
		skins: [
			{
				unified: "1f9ed",
				native: "🧭"
			}
		],
		version: 11
	},
	snow_capped_mountain: {
		id: "snow_capped_mountain",
		name: "Snow-Capped Mountain",
		keywords: [
			"snow",
			"capped",
			"photo",
			"nature",
			"environment",
			"winter",
			"cold"
		],
		skins: [
			{
				unified: "1f3d4-fe0f",
				native: "🏔️"
			}
		],
		version: 1
	},
	mountain: {
		id: "mountain",
		name: "Mountain",
		keywords: [
			"photo",
			"nature",
			"environment"
		],
		skins: [
			{
				unified: "26f0-fe0f",
				native: "⛰️"
			}
		],
		version: 1
	},
	volcano: {
		id: "volcano",
		name: "Volcano",
		keywords: [
			"photo",
			"nature",
			"disaster"
		],
		skins: [
			{
				unified: "1f30b",
				native: "🌋"
			}
		],
		version: 1
	},
	mount_fuji: {
		id: "mount_fuji",
		name: "Mount Fuji",
		keywords: [
			"photo",
			"mountain",
			"nature",
			"japanese"
		],
		skins: [
			{
				unified: "1f5fb",
				native: "🗻"
			}
		],
		version: 1
	},
	camping: {
		id: "camping",
		name: "Camping",
		keywords: [
			"photo",
			"outdoors",
			"tent"
		],
		skins: [
			{
				unified: "1f3d5-fe0f",
				native: "🏕️"
			}
		],
		version: 1
	},
	beach_with_umbrella: {
		id: "beach_with_umbrella",
		name: "Beach with Umbrella",
		keywords: [
			"weather",
			"summer",
			"sunny",
			"sand",
			"mojito"
		],
		skins: [
			{
				unified: "1f3d6-fe0f",
				native: "🏖️"
			}
		],
		version: 1
	},
	desert: {
		id: "desert",
		name: "Desert",
		keywords: [
			"photo",
			"warm",
			"saharah"
		],
		skins: [
			{
				unified: "1f3dc-fe0f",
				native: "🏜️"
			}
		],
		version: 1
	},
	desert_island: {
		id: "desert_island",
		name: "Desert Island",
		keywords: [
			"photo",
			"tropical",
			"mojito"
		],
		skins: [
			{
				unified: "1f3dd-fe0f",
				native: "🏝️"
			}
		],
		version: 1
	},
	national_park: {
		id: "national_park",
		name: "National Park",
		keywords: [
			"photo",
			"environment",
			"nature"
		],
		skins: [
			{
				unified: "1f3de-fe0f",
				native: "🏞️"
			}
		],
		version: 1
	},
	stadium: {
		id: "stadium",
		name: "Stadium",
		keywords: [
			"photo",
			"place",
			"sports",
			"concert",
			"venue"
		],
		skins: [
			{
				unified: "1f3df-fe0f",
				native: "🏟️"
			}
		],
		version: 1
	},
	classical_building: {
		id: "classical_building",
		name: "Classical Building",
		keywords: [
			"art",
			"culture",
			"history"
		],
		skins: [
			{
				unified: "1f3db-fe0f",
				native: "🏛️"
			}
		],
		version: 1
	},
	building_construction: {
		id: "building_construction",
		name: "Building Construction",
		keywords: [
			"wip",
			"working",
			"progress"
		],
		skins: [
			{
				unified: "1f3d7-fe0f",
				native: "🏗️"
			}
		],
		version: 1
	},
	bricks: {
		id: "bricks",
		name: "Brick",
		keywords: [
			"bricks"
		],
		skins: [
			{
				unified: "1f9f1",
				native: "🧱"
			}
		],
		version: 11
	},
	rock: {
		id: "rock",
		name: "Rock",
		keywords: [
			"stone"
		],
		skins: [
			{
				unified: "1faa8",
				native: "🪨"
			}
		],
		version: 13
	},
	wood: {
		id: "wood",
		name: "Wood",
		keywords: [
			"nature",
			"timber",
			"trunk"
		],
		skins: [
			{
				unified: "1fab5",
				native: "🪵"
			}
		],
		version: 13
	},
	hut: {
		id: "hut",
		name: "Hut",
		keywords: [
			"house",
			"structure"
		],
		skins: [
			{
				unified: "1f6d6",
				native: "🛖"
			}
		],
		version: 13
	},
	house_buildings: {
		id: "house_buildings",
		name: "Houses",
		keywords: [
			"house",
			"buildings",
			"photo"
		],
		skins: [
			{
				unified: "1f3d8-fe0f",
				native: "🏘️"
			}
		],
		version: 1
	},
	derelict_house_building: {
		id: "derelict_house_building",
		name: "Derelict House",
		keywords: [
			"building",
			"abandon",
			"evict",
			"broken"
		],
		skins: [
			{
				unified: "1f3da-fe0f",
				native: "🏚️"
			}
		],
		version: 1
	},
	house: {
		id: "house",
		name: "House",
		keywords: [
			"building",
			"home"
		],
		skins: [
			{
				unified: "1f3e0",
				native: "🏠"
			}
		],
		version: 1
	},
	house_with_garden: {
		id: "house_with_garden",
		name: "House with Garden",
		keywords: [
			"home",
			"plant",
			"nature"
		],
		skins: [
			{
				unified: "1f3e1",
				native: "🏡"
			}
		],
		version: 1
	},
	office: {
		id: "office",
		name: "Office Building",
		keywords: [
			"bureau",
			"work"
		],
		skins: [
			{
				unified: "1f3e2",
				native: "🏢"
			}
		],
		version: 1
	},
	post_office: {
		id: "post_office",
		name: "Japanese Post Office",
		keywords: [
			"building",
			"envelope",
			"communication"
		],
		skins: [
			{
				unified: "1f3e3",
				native: "🏣"
			}
		],
		version: 1
	},
	european_post_office: {
		id: "european_post_office",
		name: "Post Office",
		keywords: [
			"european",
			"building",
			"email"
		],
		skins: [
			{
				unified: "1f3e4",
				native: "🏤"
			}
		],
		version: 1
	},
	hospital: {
		id: "hospital",
		name: "Hospital",
		keywords: [
			"building",
			"health",
			"surgery",
			"doctor"
		],
		skins: [
			{
				unified: "1f3e5",
				native: "🏥"
			}
		],
		version: 1
	},
	bank: {
		id: "bank",
		name: "Bank",
		keywords: [
			"building",
			"money",
			"sales",
			"cash",
			"business",
			"enterprise"
		],
		skins: [
			{
				unified: "1f3e6",
				native: "🏦"
			}
		],
		version: 1
	},
	hotel: {
		id: "hotel",
		name: "Hotel",
		keywords: [
			"building",
			"accomodation",
			"checkin"
		],
		skins: [
			{
				unified: "1f3e8",
				native: "🏨"
			}
		],
		version: 1
	},
	love_hotel: {
		id: "love_hotel",
		name: "Love Hotel",
		keywords: [
			"like",
			"affection",
			"dating"
		],
		skins: [
			{
				unified: "1f3e9",
				native: "🏩"
			}
		],
		version: 1
	},
	convenience_store: {
		id: "convenience_store",
		name: "Convenience Store",
		keywords: [
			"building",
			"shopping",
			"groceries"
		],
		skins: [
			{
				unified: "1f3ea",
				native: "🏪"
			}
		],
		version: 1
	},
	school: {
		id: "school",
		name: "School",
		keywords: [
			"building",
			"student",
			"education",
			"learn",
			"teach"
		],
		skins: [
			{
				unified: "1f3eb",
				native: "🏫"
			}
		],
		version: 1
	},
	department_store: {
		id: "department_store",
		name: "Department Store",
		keywords: [
			"building",
			"shopping",
			"mall"
		],
		skins: [
			{
				unified: "1f3ec",
				native: "🏬"
			}
		],
		version: 1
	},
	factory: {
		id: "factory",
		name: "Factory",
		keywords: [
			"building",
			"industry",
			"pollution",
			"smoke"
		],
		skins: [
			{
				unified: "1f3ed",
				native: "🏭"
			}
		],
		version: 1
	},
	japanese_castle: {
		id: "japanese_castle",
		name: "Japanese Castle",
		keywords: [
			"photo",
			"building"
		],
		skins: [
			{
				unified: "1f3ef",
				native: "🏯"
			}
		],
		version: 1
	},
	european_castle: {
		id: "european_castle",
		name: "Castle",
		keywords: [
			"european",
			"building",
			"royalty",
			"history"
		],
		skins: [
			{
				unified: "1f3f0",
				native: "🏰"
			}
		],
		version: 1
	},
	wedding: {
		id: "wedding",
		name: "Wedding",
		keywords: [
			"love",
			"like",
			"affection",
			"couple",
			"marriage",
			"bride",
			"groom"
		],
		skins: [
			{
				unified: "1f492",
				native: "💒"
			}
		],
		version: 1
	},
	tokyo_tower: {
		id: "tokyo_tower",
		name: "Tokyo Tower",
		keywords: [
			"photo",
			"japanese"
		],
		skins: [
			{
				unified: "1f5fc",
				native: "🗼"
			}
		],
		version: 1
	},
	statue_of_liberty: {
		id: "statue_of_liberty",
		name: "Statue of Liberty",
		keywords: [
			"american",
			"newyork"
		],
		skins: [
			{
				unified: "1f5fd",
				native: "🗽"
			}
		],
		version: 1
	},
	church: {
		id: "church",
		name: "Church",
		keywords: [
			"building",
			"religion",
			"christ"
		],
		skins: [
			{
				unified: "26ea",
				native: "⛪"
			}
		],
		version: 1
	},
	mosque: {
		id: "mosque",
		name: "Mosque",
		keywords: [
			"islam",
			"worship",
			"minaret"
		],
		skins: [
			{
				unified: "1f54c",
				native: "🕌"
			}
		],
		version: 1
	},
	hindu_temple: {
		id: "hindu_temple",
		name: "Hindu Temple",
		keywords: [
			"religion"
		],
		skins: [
			{
				unified: "1f6d5",
				native: "🛕"
			}
		],
		version: 12
	},
	synagogue: {
		id: "synagogue",
		name: "Synagogue",
		keywords: [
			"judaism",
			"worship",
			"temple",
			"jewish"
		],
		skins: [
			{
				unified: "1f54d",
				native: "🕍"
			}
		],
		version: 1
	},
	shinto_shrine: {
		id: "shinto_shrine",
		name: "Shinto Shrine",
		keywords: [
			"temple",
			"japan",
			"kyoto"
		],
		skins: [
			{
				unified: "26e9-fe0f",
				native: "⛩️"
			}
		],
		version: 1
	},
	kaaba: {
		id: "kaaba",
		name: "Kaaba",
		keywords: [
			"mecca",
			"mosque",
			"islam"
		],
		skins: [
			{
				unified: "1f54b",
				native: "🕋"
			}
		],
		version: 1
	},
	fountain: {
		id: "fountain",
		name: "Fountain",
		keywords: [
			"photo",
			"summer",
			"water",
			"fresh"
		],
		skins: [
			{
				unified: "26f2",
				native: "⛲"
			}
		],
		version: 1
	},
	tent: {
		id: "tent",
		name: "Tent",
		keywords: [
			"photo",
			"camping",
			"outdoors"
		],
		skins: [
			{
				unified: "26fa",
				native: "⛺"
			}
		],
		version: 1
	},
	foggy: {
		id: "foggy",
		name: "Foggy",
		keywords: [
			"photo",
			"mountain"
		],
		skins: [
			{
				unified: "1f301",
				native: "🌁"
			}
		],
		version: 1
	},
	night_with_stars: {
		id: "night_with_stars",
		name: "Night with Stars",
		keywords: [
			"evening",
			"city",
			"downtown"
		],
		skins: [
			{
				unified: "1f303",
				native: "🌃"
			}
		],
		version: 1
	},
	cityscape: {
		id: "cityscape",
		name: "Cityscape",
		keywords: [
			"photo",
			"night",
			"life",
			"urban"
		],
		skins: [
			{
				unified: "1f3d9-fe0f",
				native: "🏙️"
			}
		],
		version: 1
	},
	sunrise_over_mountains: {
		id: "sunrise_over_mountains",
		name: "Sunrise over Mountains",
		keywords: [
			"view",
			"vacation",
			"photo"
		],
		skins: [
			{
				unified: "1f304",
				native: "🌄"
			}
		],
		version: 1
	},
	sunrise: {
		id: "sunrise",
		name: "Sunrise",
		keywords: [
			"morning",
			"view",
			"vacation",
			"photo"
		],
		skins: [
			{
				unified: "1f305",
				native: "🌅"
			}
		],
		version: 1
	},
	city_sunset: {
		id: "city_sunset",
		name: "Cityscape at Dusk",
		keywords: [
			"city",
			"sunset",
			"photo",
			"evening",
			"sky",
			"buildings"
		],
		skins: [
			{
				unified: "1f306",
				native: "🌆"
			}
		],
		version: 1
	},
	city_sunrise: {
		id: "city_sunrise",
		name: "Sunset",
		keywords: [
			"city",
			"sunrise",
			"photo",
			"good",
			"morning",
			"dawn"
		],
		skins: [
			{
				unified: "1f307",
				native: "🌇"
			}
		],
		version: 1
	},
	bridge_at_night: {
		id: "bridge_at_night",
		name: "Bridge at Night",
		keywords: [
			"photo",
			"sanfrancisco"
		],
		skins: [
			{
				unified: "1f309",
				native: "🌉"
			}
		],
		version: 1
	},
	hotsprings: {
		id: "hotsprings",
		name: "Hot Springs",
		keywords: [
			"hotsprings",
			"bath",
			"warm",
			"relax"
		],
		skins: [
			{
				unified: "2668-fe0f",
				native: "♨️"
			}
		],
		version: 1
	},
	carousel_horse: {
		id: "carousel_horse",
		name: "Carousel Horse",
		keywords: [
			"photo",
			"carnival"
		],
		skins: [
			{
				unified: "1f3a0",
				native: "🎠"
			}
		],
		version: 1
	},
	playground_slide: {
		id: "playground_slide",
		name: "Playground Slide",
		keywords: [
			"fun",
			"park"
		],
		skins: [
			{
				unified: "1f6dd",
				native: "🛝"
			}
		],
		version: 14
	},
	ferris_wheel: {
		id: "ferris_wheel",
		name: "Ferris Wheel",
		keywords: [
			"photo",
			"carnival",
			"londoneye"
		],
		skins: [
			{
				unified: "1f3a1",
				native: "🎡"
			}
		],
		version: 1
	},
	roller_coaster: {
		id: "roller_coaster",
		name: "Roller Coaster",
		keywords: [
			"carnival",
			"playground",
			"photo",
			"fun"
		],
		skins: [
			{
				unified: "1f3a2",
				native: "🎢"
			}
		],
		version: 1
	},
	barber: {
		id: "barber",
		name: "Barber Pole",
		keywords: [
			"hair",
			"salon",
			"style"
		],
		skins: [
			{
				unified: "1f488",
				native: "💈"
			}
		],
		version: 1
	},
	circus_tent: {
		id: "circus_tent",
		name: "Circus Tent",
		keywords: [
			"festival",
			"carnival",
			"party"
		],
		skins: [
			{
				unified: "1f3aa",
				native: "🎪"
			}
		],
		version: 1
	},
	steam_locomotive: {
		id: "steam_locomotive",
		name: "Locomotive",
		keywords: [
			"steam",
			"transportation",
			"vehicle",
			"train"
		],
		skins: [
			{
				unified: "1f682",
				native: "🚂"
			}
		],
		version: 1
	},
	railway_car: {
		id: "railway_car",
		name: "Railway Car",
		keywords: [
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f683",
				native: "🚃"
			}
		],
		version: 1
	},
	bullettrain_side: {
		id: "bullettrain_side",
		name: "High-Speed Train",
		keywords: [
			"bullettrain",
			"side",
			"high",
			"speed",
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f684",
				native: "🚄"
			}
		],
		version: 1
	},
	bullettrain_front: {
		id: "bullettrain_front",
		name: "Bullet Train",
		keywords: [
			"bullettrain",
			"front",
			"transportation",
			"vehicle",
			"speed",
			"fast",
			"public",
			"travel"
		],
		skins: [
			{
				unified: "1f685",
				native: "🚅"
			}
		],
		version: 1
	},
	train2: {
		id: "train2",
		name: "Train",
		keywords: [
			"train2",
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f686",
				native: "🚆"
			}
		],
		version: 1
	},
	metro: {
		id: "metro",
		name: "Metro",
		keywords: [
			"transportation",
			"blue",
			"square",
			"mrt",
			"underground",
			"tube"
		],
		skins: [
			{
				unified: "1f687",
				native: "🚇"
			}
		],
		version: 1
	},
	light_rail: {
		id: "light_rail",
		name: "Light Rail",
		keywords: [
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f688",
				native: "🚈"
			}
		],
		version: 1
	},
	station: {
		id: "station",
		name: "Station",
		keywords: [
			"transportation",
			"vehicle",
			"public"
		],
		skins: [
			{
				unified: "1f689",
				native: "🚉"
			}
		],
		version: 1
	},
	tram: {
		id: "tram",
		name: "Tram",
		keywords: [
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f68a",
				native: "🚊"
			}
		],
		version: 1
	},
	monorail: {
		id: "monorail",
		name: "Monorail",
		keywords: [
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f69d",
				native: "🚝"
			}
		],
		version: 1
	},
	mountain_railway: {
		id: "mountain_railway",
		name: "Mountain Railway",
		keywords: [
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f69e",
				native: "🚞"
			}
		],
		version: 1
	},
	train: {
		id: "train",
		name: "Tram Car",
		keywords: [
			"train",
			"transportation",
			"vehicle",
			"carriage",
			"public",
			"travel"
		],
		skins: [
			{
				unified: "1f68b",
				native: "🚋"
			}
		],
		version: 1
	},
	bus: {
		id: "bus",
		name: "Bus",
		keywords: [
			"car",
			"vehicle",
			"transportation"
		],
		skins: [
			{
				unified: "1f68c",
				native: "🚌"
			}
		],
		version: 1
	},
	oncoming_bus: {
		id: "oncoming_bus",
		name: "Oncoming Bus",
		keywords: [
			"vehicle",
			"transportation"
		],
		skins: [
			{
				unified: "1f68d",
				native: "🚍"
			}
		],
		version: 1
	},
	trolleybus: {
		id: "trolleybus",
		name: "Trolleybus",
		keywords: [
			"bart",
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f68e",
				native: "🚎"
			}
		],
		version: 1
	},
	minibus: {
		id: "minibus",
		name: "Minibus",
		keywords: [
			"vehicle",
			"car",
			"transportation"
		],
		skins: [
			{
				unified: "1f690",
				native: "🚐"
			}
		],
		version: 1
	},
	ambulance: {
		id: "ambulance",
		name: "Ambulance",
		keywords: [
			"health",
			"911",
			"hospital"
		],
		skins: [
			{
				unified: "1f691",
				native: "🚑"
			}
		],
		version: 1
	},
	fire_engine: {
		id: "fire_engine",
		name: "Fire Engine",
		keywords: [
			"transportation",
			"cars",
			"vehicle"
		],
		skins: [
			{
				unified: "1f692",
				native: "🚒"
			}
		],
		version: 1
	},
	police_car: {
		id: "police_car",
		name: "Police Car",
		keywords: [
			"vehicle",
			"cars",
			"transportation",
			"law",
			"legal",
			"enforcement"
		],
		skins: [
			{
				unified: "1f693",
				native: "🚓"
			}
		],
		version: 1
	},
	oncoming_police_car: {
		id: "oncoming_police_car",
		name: "Oncoming Police Car",
		keywords: [
			"vehicle",
			"law",
			"legal",
			"enforcement",
			"911"
		],
		skins: [
			{
				unified: "1f694",
				native: "🚔"
			}
		],
		version: 1
	},
	taxi: {
		id: "taxi",
		name: "Taxi",
		keywords: [
			"uber",
			"vehicle",
			"cars",
			"transportation"
		],
		skins: [
			{
				unified: "1f695",
				native: "🚕"
			}
		],
		version: 1
	},
	oncoming_taxi: {
		id: "oncoming_taxi",
		name: "Oncoming Taxi",
		keywords: [
			"vehicle",
			"cars",
			"uber"
		],
		skins: [
			{
				unified: "1f696",
				native: "🚖"
			}
		],
		version: 1
	},
	car: {
		id: "car",
		name: "Automobile",
		keywords: [
			"car",
			"red",
			"transportation",
			"vehicle"
		],
		skins: [
			{
				unified: "1f697",
				native: "🚗"
			}
		],
		version: 1
	},
	oncoming_automobile: {
		id: "oncoming_automobile",
		name: "Oncoming Automobile",
		keywords: [
			"car",
			"vehicle",
			"transportation"
		],
		skins: [
			{
				unified: "1f698",
				native: "🚘"
			}
		],
		version: 1
	},
	blue_car: {
		id: "blue_car",
		name: "Recreational Vehicle",
		keywords: [
			"blue",
			"car",
			"sport",
			"utility",
			"transportation"
		],
		skins: [
			{
				unified: "1f699",
				native: "🚙"
			}
		],
		version: 1
	},
	pickup_truck: {
		id: "pickup_truck",
		name: "Pickup Truck",
		keywords: [
			"car",
			"transportation"
		],
		skins: [
			{
				unified: "1f6fb",
				native: "🛻"
			}
		],
		version: 13
	},
	truck: {
		id: "truck",
		name: "Delivery Truck",
		keywords: [
			"cars",
			"transportation"
		],
		skins: [
			{
				unified: "1f69a",
				native: "🚚"
			}
		],
		version: 1
	},
	articulated_lorry: {
		id: "articulated_lorry",
		name: "Articulated Lorry",
		keywords: [
			"vehicle",
			"cars",
			"transportation",
			"express"
		],
		skins: [
			{
				unified: "1f69b",
				native: "🚛"
			}
		],
		version: 1
	},
	tractor: {
		id: "tractor",
		name: "Tractor",
		keywords: [
			"vehicle",
			"car",
			"farming",
			"agriculture"
		],
		skins: [
			{
				unified: "1f69c",
				native: "🚜"
			}
		],
		version: 1
	},
	racing_car: {
		id: "racing_car",
		name: "Racing Car",
		keywords: [
			"sports",
			"race",
			"fast",
			"formula",
			"f1"
		],
		skins: [
			{
				unified: "1f3ce-fe0f",
				native: "🏎️"
			}
		],
		version: 1
	},
	racing_motorcycle: {
		id: "racing_motorcycle",
		name: "Motorcycle",
		keywords: [
			"racing",
			"race",
			"sports",
			"fast"
		],
		skins: [
			{
				unified: "1f3cd-fe0f",
				native: "🏍️"
			}
		],
		version: 1
	},
	motor_scooter: {
		id: "motor_scooter",
		name: "Motor Scooter",
		keywords: [
			"vehicle",
			"vespa",
			"sasha"
		],
		skins: [
			{
				unified: "1f6f5",
				native: "🛵"
			}
		],
		version: 3
	},
	manual_wheelchair: {
		id: "manual_wheelchair",
		name: "Manual Wheelchair",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9bd",
				native: "🦽"
			}
		],
		version: 12
	},
	motorized_wheelchair: {
		id: "motorized_wheelchair",
		name: "Motorized Wheelchair",
		keywords: [
			"accessibility"
		],
		skins: [
			{
				unified: "1f9bc",
				native: "🦼"
			}
		],
		version: 12
	},
	auto_rickshaw: {
		id: "auto_rickshaw",
		name: "Auto Rickshaw",
		keywords: [
			"move",
			"transportation"
		],
		skins: [
			{
				unified: "1f6fa",
				native: "🛺"
			}
		],
		version: 12
	},
	bike: {
		id: "bike",
		name: "Bicycle",
		keywords: [
			"bike",
			"sports",
			"exercise",
			"hipster"
		],
		skins: [
			{
				unified: "1f6b2",
				native: "🚲"
			}
		],
		version: 1
	},
	scooter: {
		id: "scooter",
		name: "Scooter",
		keywords: [
			"kick",
			"vehicle",
			"razor"
		],
		skins: [
			{
				unified: "1f6f4",
				native: "🛴"
			}
		],
		version: 3
	},
	skateboard: {
		id: "skateboard",
		name: "Skateboard",
		keywords: [
			"board"
		],
		skins: [
			{
				unified: "1f6f9",
				native: "🛹"
			}
		],
		version: 11
	},
	roller_skate: {
		id: "roller_skate",
		name: "Roller Skate",
		keywords: [
			"footwear",
			"sports"
		],
		skins: [
			{
				unified: "1f6fc",
				native: "🛼"
			}
		],
		version: 13
	},
	busstop: {
		id: "busstop",
		name: "Bus Stop",
		keywords: [
			"busstop",
			"transportation",
			"wait"
		],
		skins: [
			{
				unified: "1f68f",
				native: "🚏"
			}
		],
		version: 1
	},
	motorway: {
		id: "motorway",
		name: "Motorway",
		keywords: [
			"road",
			"cupertino",
			"interstate",
			"highway"
		],
		skins: [
			{
				unified: "1f6e3-fe0f",
				native: "🛣️"
			}
		],
		version: 1
	},
	railway_track: {
		id: "railway_track",
		name: "Railway Track",
		keywords: [
			"train",
			"transportation"
		],
		skins: [
			{
				unified: "1f6e4-fe0f",
				native: "🛤️"
			}
		],
		version: 1
	},
	oil_drum: {
		id: "oil_drum",
		name: "Oil Drum",
		keywords: [
			"barrell"
		],
		skins: [
			{
				unified: "1f6e2-fe0f",
				native: "🛢️"
			}
		],
		version: 1
	},
	fuelpump: {
		id: "fuelpump",
		name: "Fuel Pump",
		keywords: [
			"fuelpump",
			"gas",
			"station",
			"petroleum"
		],
		skins: [
			{
				unified: "26fd",
				native: "⛽"
			}
		],
		version: 1
	},
	wheel: {
		id: "wheel",
		name: "Wheel",
		keywords: [
			"car",
			"transport"
		],
		skins: [
			{
				unified: "1f6de",
				native: "🛞"
			}
		],
		version: 14
	},
	rotating_light: {
		id: "rotating_light",
		name: "Police Car Light",
		keywords: [
			"rotating",
			"ambulance",
			"911",
			"emergency",
			"alert",
			"error",
			"pinged",
			"law",
			"legal"
		],
		skins: [
			{
				unified: "1f6a8",
				native: "🚨"
			}
		],
		version: 1
	},
	traffic_light: {
		id: "traffic_light",
		name: "Horizontal Traffic Light",
		keywords: [
			"transportation",
			"signal"
		],
		skins: [
			{
				unified: "1f6a5",
				native: "🚥"
			}
		],
		version: 1
	},
	vertical_traffic_light: {
		id: "vertical_traffic_light",
		name: "Vertical Traffic Light",
		keywords: [
			"transportation",
			"driving"
		],
		skins: [
			{
				unified: "1f6a6",
				native: "🚦"
			}
		],
		version: 1
	},
	octagonal_sign: {
		id: "octagonal_sign",
		name: "Stop Sign",
		keywords: [
			"octagonal"
		],
		skins: [
			{
				unified: "1f6d1",
				native: "🛑"
			}
		],
		version: 3
	},
	construction: {
		id: "construction",
		name: "Construction",
		keywords: [
			"wip",
			"progress",
			"caution",
			"warning"
		],
		skins: [
			{
				unified: "1f6a7",
				native: "🚧"
			}
		],
		version: 1
	},
	anchor: {
		id: "anchor",
		name: "Anchor",
		keywords: [
			"ship",
			"ferry",
			"sea",
			"boat"
		],
		skins: [
			{
				unified: "2693",
				native: "⚓"
			}
		],
		version: 1
	},
	ring_buoy: {
		id: "ring_buoy",
		name: "Ring Buoy",
		keywords: [
			"life",
			"saver",
			"preserver"
		],
		skins: [
			{
				unified: "1f6df",
				native: "🛟"
			}
		],
		version: 14
	},
	boat: {
		id: "boat",
		name: "Sailboat",
		keywords: [
			"boat",
			"ship",
			"summer",
			"transportation",
			"water",
			"sailing"
		],
		skins: [
			{
				unified: "26f5",
				native: "⛵"
			}
		],
		version: 1
	},
	canoe: {
		id: "canoe",
		name: "Canoe",
		keywords: [
			"boat",
			"paddle",
			"water",
			"ship"
		],
		skins: [
			{
				unified: "1f6f6",
				native: "🛶"
			}
		],
		version: 3
	},
	speedboat: {
		id: "speedboat",
		name: "Speedboat",
		keywords: [
			"ship",
			"transportation",
			"vehicle",
			"summer"
		],
		skins: [
			{
				unified: "1f6a4",
				native: "🚤"
			}
		],
		version: 1
	},
	passenger_ship: {
		id: "passenger_ship",
		name: "Passenger Ship",
		keywords: [
			"yacht",
			"cruise",
			"ferry"
		],
		skins: [
			{
				unified: "1f6f3-fe0f",
				native: "🛳️"
			}
		],
		version: 1
	},
	ferry: {
		id: "ferry",
		name: "Ferry",
		keywords: [
			"boat",
			"ship",
			"yacht"
		],
		skins: [
			{
				unified: "26f4-fe0f",
				native: "⛴️"
			}
		],
		version: 1
	},
	motor_boat: {
		id: "motor_boat",
		name: "Motor Boat",
		keywords: [
			"ship"
		],
		skins: [
			{
				unified: "1f6e5-fe0f",
				native: "🛥️"
			}
		],
		version: 1
	},
	ship: {
		id: "ship",
		name: "Ship",
		keywords: [
			"transportation",
			"titanic",
			"deploy"
		],
		skins: [
			{
				unified: "1f6a2",
				native: "🚢"
			}
		],
		version: 1
	},
	airplane: {
		id: "airplane",
		name: "Airplane",
		keywords: [
			"vehicle",
			"transportation",
			"flight",
			"fly"
		],
		skins: [
			{
				unified: "2708-fe0f",
				native: "✈️"
			}
		],
		version: 1
	},
	small_airplane: {
		id: "small_airplane",
		name: "Small Airplane",
		keywords: [
			"flight",
			"transportation",
			"fly",
			"vehicle"
		],
		skins: [
			{
				unified: "1f6e9-fe0f",
				native: "🛩️"
			}
		],
		version: 1
	},
	airplane_departure: {
		id: "airplane_departure",
		name: "Airplane Departure",
		keywords: [
			"airport",
			"flight",
			"landing"
		],
		skins: [
			{
				unified: "1f6eb",
				native: "🛫"
			}
		],
		version: 1
	},
	airplane_arriving: {
		id: "airplane_arriving",
		name: "Airplane Arrival",
		keywords: [
			"arriving",
			"airport",
			"flight",
			"boarding"
		],
		skins: [
			{
				unified: "1f6ec",
				native: "🛬"
			}
		],
		version: 1
	},
	parachute: {
		id: "parachute",
		name: "Parachute",
		keywords: [
			"fly",
			"glide"
		],
		skins: [
			{
				unified: "1fa82",
				native: "🪂"
			}
		],
		version: 12
	},
	seat: {
		id: "seat",
		name: "Seat",
		keywords: [
			"sit",
			"airplane",
			"transport",
			"bus",
			"flight",
			"fly"
		],
		skins: [
			{
				unified: "1f4ba",
				native: "💺"
			}
		],
		version: 1
	},
	helicopter: {
		id: "helicopter",
		name: "Helicopter",
		keywords: [
			"transportation",
			"vehicle",
			"fly"
		],
		skins: [
			{
				unified: "1f681",
				native: "🚁"
			}
		],
		version: 1
	},
	suspension_railway: {
		id: "suspension_railway",
		name: "Suspension Railway",
		keywords: [
			"vehicle",
			"transportation"
		],
		skins: [
			{
				unified: "1f69f",
				native: "🚟"
			}
		],
		version: 1
	},
	mountain_cableway: {
		id: "mountain_cableway",
		name: "Mountain Cableway",
		keywords: [
			"transportation",
			"vehicle",
			"ski"
		],
		skins: [
			{
				unified: "1f6a0",
				native: "🚠"
			}
		],
		version: 1
	},
	aerial_tramway: {
		id: "aerial_tramway",
		name: "Aerial Tramway",
		keywords: [
			"transportation",
			"vehicle",
			"ski"
		],
		skins: [
			{
				unified: "1f6a1",
				native: "🚡"
			}
		],
		version: 1
	},
	satellite: {
		id: "satellite",
		name: "Satellite",
		keywords: [
			"communication",
			"gps",
			"orbit",
			"spaceflight",
			"NASA",
			"ISS"
		],
		skins: [
			{
				unified: "1f6f0-fe0f",
				native: "🛰️"
			}
		],
		version: 1
	},
	rocket: {
		id: "rocket",
		name: "Rocket",
		keywords: [
			"launch",
			"ship",
			"staffmode",
			"NASA",
			"outer",
			"space",
			"fly"
		],
		skins: [
			{
				unified: "1f680",
				native: "🚀"
			}
		],
		version: 1
	},
	flying_saucer: {
		id: "flying_saucer",
		name: "Flying Saucer",
		keywords: [
			"transportation",
			"vehicle",
			"ufo"
		],
		skins: [
			{
				unified: "1f6f8",
				native: "🛸"
			}
		],
		version: 5
	},
	bellhop_bell: {
		id: "bellhop_bell",
		name: "Bellhop Bell",
		keywords: [
			"service"
		],
		skins: [
			{
				unified: "1f6ce-fe0f",
				native: "🛎️"
			}
		],
		version: 1
	},
	luggage: {
		id: "luggage",
		name: "Luggage",
		keywords: [
			"packing",
			"travel"
		],
		skins: [
			{
				unified: "1f9f3",
				native: "🧳"
			}
		],
		version: 11
	},
	hourglass: {
		id: "hourglass",
		name: "Hourglass",
		keywords: [
			"done",
			"time",
			"clock",
			"oldschool",
			"limit",
			"exam",
			"quiz",
			"test"
		],
		skins: [
			{
				unified: "231b",
				native: "⌛"
			}
		],
		version: 1
	},
	hourglass_flowing_sand: {
		id: "hourglass_flowing_sand",
		name: "Hourglass Not Done",
		keywords: [
			"flowing",
			"sand",
			"oldschool",
			"time",
			"countdown"
		],
		skins: [
			{
				unified: "23f3",
				native: "⏳"
			}
		],
		version: 1
	},
	watch: {
		id: "watch",
		name: "Watch",
		keywords: [
			"time",
			"accessories"
		],
		skins: [
			{
				unified: "231a",
				native: "⌚"
			}
		],
		version: 1
	},
	alarm_clock: {
		id: "alarm_clock",
		name: "Alarm Clock",
		keywords: [
			"time",
			"wake"
		],
		skins: [
			{
				unified: "23f0",
				native: "⏰"
			}
		],
		version: 1
	},
	stopwatch: {
		id: "stopwatch",
		name: "Stopwatch",
		keywords: [
			"time",
			"deadline"
		],
		skins: [
			{
				unified: "23f1-fe0f",
				native: "⏱️"
			}
		],
		version: 1
	},
	timer_clock: {
		id: "timer_clock",
		name: "Timer Clock",
		keywords: [
			"alarm"
		],
		skins: [
			{
				unified: "23f2-fe0f",
				native: "⏲️"
			}
		],
		version: 1
	},
	mantelpiece_clock: {
		id: "mantelpiece_clock",
		name: "Mantelpiece Clock",
		keywords: [
			"time"
		],
		skins: [
			{
				unified: "1f570-fe0f",
				native: "🕰️"
			}
		],
		version: 1
	},
	clock12: {
		id: "clock12",
		name: "Twelve O’clock",
		keywords: [
			"clock12",
			"o",
			"clock",
			"12",
			"00:00",
			"0000",
			"12:00",
			"1200",
			"time",
			"noon",
			"midnight",
			"midday",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f55b",
				native: "🕛"
			}
		],
		version: 1
	},
	clock1230: {
		id: "clock1230",
		name: "Twelve-Thirty",
		keywords: [
			"clock1230",
			"twelve",
			"thirty",
			"00:30",
			"0030",
			"12:30",
			"1230",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f567",
				native: "🕧"
			}
		],
		version: 1
	},
	clock1: {
		id: "clock1",
		name: "One O’clock",
		keywords: [
			"clock1",
			"o",
			"clock",
			"1",
			"1:00",
			"100",
			"13:00",
			"1300",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f550",
				native: "🕐"
			}
		],
		version: 1
	},
	clock130: {
		id: "clock130",
		name: "One-Thirty",
		keywords: [
			"clock130",
			"one",
			"thirty",
			"1:30",
			"130",
			"13:30",
			"1330",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f55c",
				native: "🕜"
			}
		],
		version: 1
	},
	clock2: {
		id: "clock2",
		name: "Two O’clock",
		keywords: [
			"clock2",
			"o",
			"clock",
			"2",
			"2:00",
			"200",
			"14:00",
			"1400",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f551",
				native: "🕑"
			}
		],
		version: 1
	},
	clock230: {
		id: "clock230",
		name: "Two-Thirty",
		keywords: [
			"clock230",
			"two",
			"thirty",
			"2:30",
			"230",
			"14:30",
			"1430",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f55d",
				native: "🕝"
			}
		],
		version: 1
	},
	clock3: {
		id: "clock3",
		name: "Three O’clock",
		keywords: [
			"clock3",
			"o",
			"clock",
			"3",
			"3:00",
			"300",
			"15:00",
			"1500",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f552",
				native: "🕒"
			}
		],
		version: 1
	},
	clock330: {
		id: "clock330",
		name: "Three-Thirty",
		keywords: [
			"clock330",
			"three",
			"thirty",
			"3:30",
			"330",
			"15:30",
			"1530",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f55e",
				native: "🕞"
			}
		],
		version: 1
	},
	clock4: {
		id: "clock4",
		name: "Four O’clock",
		keywords: [
			"clock4",
			"o",
			"clock",
			"4",
			"4:00",
			"400",
			"16:00",
			"1600",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f553",
				native: "🕓"
			}
		],
		version: 1
	},
	clock430: {
		id: "clock430",
		name: "Four-Thirty",
		keywords: [
			"clock430",
			"four",
			"thirty",
			"4:30",
			"430",
			"16:30",
			"1630",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f55f",
				native: "🕟"
			}
		],
		version: 1
	},
	clock5: {
		id: "clock5",
		name: "Five O’clock",
		keywords: [
			"clock5",
			"o",
			"clock",
			"5",
			"5:00",
			"500",
			"17:00",
			"1700",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f554",
				native: "🕔"
			}
		],
		version: 1
	},
	clock530: {
		id: "clock530",
		name: "Five-Thirty",
		keywords: [
			"clock530",
			"five",
			"thirty",
			"5:30",
			"530",
			"17:30",
			"1730",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f560",
				native: "🕠"
			}
		],
		version: 1
	},
	clock6: {
		id: "clock6",
		name: "Six O’clock",
		keywords: [
			"clock6",
			"o",
			"clock",
			"6",
			"6:00",
			"600",
			"18:00",
			"1800",
			"time",
			"late",
			"early",
			"schedule",
			"dawn",
			"dusk"
		],
		skins: [
			{
				unified: "1f555",
				native: "🕕"
			}
		],
		version: 1
	},
	clock630: {
		id: "clock630",
		name: "Six-Thirty",
		keywords: [
			"clock630",
			"six",
			"thirty",
			"6:30",
			"630",
			"18:30",
			"1830",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f561",
				native: "🕡"
			}
		],
		version: 1
	},
	clock7: {
		id: "clock7",
		name: "Seven O’clock",
		keywords: [
			"clock7",
			"o",
			"clock",
			"7",
			"7:00",
			"700",
			"19:00",
			"1900",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f556",
				native: "🕖"
			}
		],
		version: 1
	},
	clock730: {
		id: "clock730",
		name: "Seven-Thirty",
		keywords: [
			"clock730",
			"seven",
			"thirty",
			"7:30",
			"730",
			"19:30",
			"1930",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f562",
				native: "🕢"
			}
		],
		version: 1
	},
	clock8: {
		id: "clock8",
		name: "Eight O’clock",
		keywords: [
			"clock8",
			"o",
			"clock",
			"8",
			"8:00",
			"800",
			"20:00",
			"2000",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f557",
				native: "🕗"
			}
		],
		version: 1
	},
	clock830: {
		id: "clock830",
		name: "Eight-Thirty",
		keywords: [
			"clock830",
			"eight",
			"thirty",
			"8:30",
			"830",
			"20:30",
			"2030",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f563",
				native: "🕣"
			}
		],
		version: 1
	},
	clock9: {
		id: "clock9",
		name: "Nine O’clock",
		keywords: [
			"clock9",
			"o",
			"clock",
			"9",
			"9:00",
			"900",
			"21:00",
			"2100",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f558",
				native: "🕘"
			}
		],
		version: 1
	},
	clock930: {
		id: "clock930",
		name: "Nine-Thirty",
		keywords: [
			"clock930",
			"nine",
			"thirty",
			"9:30",
			"930",
			"21:30",
			"2130",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f564",
				native: "🕤"
			}
		],
		version: 1
	},
	clock10: {
		id: "clock10",
		name: "Ten O’clock",
		keywords: [
			"clock10",
			"o",
			"clock",
			"10",
			"10:00",
			"1000",
			"22:00",
			"2200",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f559",
				native: "🕙"
			}
		],
		version: 1
	},
	clock1030: {
		id: "clock1030",
		name: "Ten-Thirty",
		keywords: [
			"clock1030",
			"ten",
			"thirty",
			"10:30",
			"1030",
			"22:30",
			"2230",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f565",
				native: "🕥"
			}
		],
		version: 1
	},
	clock11: {
		id: "clock11",
		name: "Eleven O’clock",
		keywords: [
			"clock11",
			"o",
			"clock",
			"11",
			"11:00",
			"1100",
			"23:00",
			"2300",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f55a",
				native: "🕚"
			}
		],
		version: 1
	},
	clock1130: {
		id: "clock1130",
		name: "Eleven-Thirty",
		keywords: [
			"clock1130",
			"eleven",
			"thirty",
			"11:30",
			"1130",
			"23:30",
			"2330",
			"time",
			"late",
			"early",
			"schedule"
		],
		skins: [
			{
				unified: "1f566",
				native: "🕦"
			}
		],
		version: 1
	},
	new_moon: {
		id: "new_moon",
		name: "New Moon",
		keywords: [
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f311",
				native: "🌑"
			}
		],
		version: 1
	},
	waxing_crescent_moon: {
		id: "waxing_crescent_moon",
		name: "Waxing Crescent Moon",
		keywords: [
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f312",
				native: "🌒"
			}
		],
		version: 1
	},
	first_quarter_moon: {
		id: "first_quarter_moon",
		name: "First Quarter Moon",
		keywords: [
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f313",
				native: "🌓"
			}
		],
		version: 1
	},
	moon: {
		id: "moon",
		name: "Waxing Gibbous Moon",
		keywords: [
			"nature",
			"night",
			"sky",
			"gray",
			"twilight",
			"planet",
			"space",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f314",
				native: "🌔"
			}
		],
		version: 1
	},
	full_moon: {
		id: "full_moon",
		name: "Full Moon",
		keywords: [
			"nature",
			"yellow",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f315",
				native: "🌕"
			}
		],
		version: 1
	},
	waning_gibbous_moon: {
		id: "waning_gibbous_moon",
		name: "Waning Gibbous Moon",
		keywords: [
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep",
			"waxing"
		],
		skins: [
			{
				unified: "1f316",
				native: "🌖"
			}
		],
		version: 1
	},
	last_quarter_moon: {
		id: "last_quarter_moon",
		name: "Last Quarter Moon",
		keywords: [
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f317",
				native: "🌗"
			}
		],
		version: 1
	},
	waning_crescent_moon: {
		id: "waning_crescent_moon",
		name: "Waning Crescent Moon",
		keywords: [
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f318",
				native: "🌘"
			}
		],
		version: 1
	},
	crescent_moon: {
		id: "crescent_moon",
		name: "Crescent Moon",
		keywords: [
			"night",
			"sleep",
			"sky",
			"evening",
			"magic"
		],
		skins: [
			{
				unified: "1f319",
				native: "🌙"
			}
		],
		version: 1
	},
	new_moon_with_face: {
		id: "new_moon_with_face",
		name: "New Moon Face",
		keywords: [
			"with",
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f31a",
				native: "🌚"
			}
		],
		version: 1
	},
	first_quarter_moon_with_face: {
		id: "first_quarter_moon_with_face",
		name: "First Quarter Moon Face",
		keywords: [
			"with",
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f31b",
				native: "🌛"
			}
		],
		version: 1
	},
	last_quarter_moon_with_face: {
		id: "last_quarter_moon_with_face",
		name: "Last Quarter Moon Face",
		keywords: [
			"with",
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f31c",
				native: "🌜"
			}
		],
		version: 1
	},
	thermometer: {
		id: "thermometer",
		name: "Thermometer",
		keywords: [
			"weather",
			"temperature",
			"hot",
			"cold"
		],
		skins: [
			{
				unified: "1f321-fe0f",
				native: "🌡️"
			}
		],
		version: 1
	},
	sunny: {
		id: "sunny",
		name: "Sun",
		keywords: [
			"sunny",
			"weather",
			"nature",
			"brightness",
			"summer",
			"beach",
			"spring"
		],
		skins: [
			{
				unified: "2600-fe0f",
				native: "☀️"
			}
		],
		version: 1
	},
	full_moon_with_face: {
		id: "full_moon_with_face",
		name: "Full Moon Face",
		keywords: [
			"with",
			"nature",
			"twilight",
			"planet",
			"space",
			"night",
			"evening",
			"sleep"
		],
		skins: [
			{
				unified: "1f31d",
				native: "🌝"
			}
		],
		version: 1
	},
	sun_with_face: {
		id: "sun_with_face",
		name: "Sun with Face",
		keywords: [
			"nature",
			"morning",
			"sky"
		],
		skins: [
			{
				unified: "1f31e",
				native: "🌞"
			}
		],
		version: 1
	},
	ringed_planet: {
		id: "ringed_planet",
		name: "Ringed Planet",
		keywords: [
			"outerspace"
		],
		skins: [
			{
				unified: "1fa90",
				native: "🪐"
			}
		],
		version: 12
	},
	star: {
		id: "star",
		name: "Star",
		keywords: [
			"night",
			"yellow"
		],
		skins: [
			{
				unified: "2b50",
				native: "⭐"
			}
		],
		version: 1
	},
	star2: {
		id: "star2",
		name: "Glowing Star",
		keywords: [
			"star2",
			"night",
			"sparkle",
			"awesome",
			"good",
			"magic"
		],
		skins: [
			{
				unified: "1f31f",
				native: "🌟"
			}
		],
		version: 1
	},
	stars: {
		id: "stars",
		name: "Shooting Star",
		keywords: [
			"stars",
			"night",
			"photo"
		],
		skins: [
			{
				unified: "1f320",
				native: "🌠"
			}
		],
		version: 1
	},
	milky_way: {
		id: "milky_way",
		name: "Milky Way",
		keywords: [
			"photo",
			"space",
			"stars"
		],
		skins: [
			{
				unified: "1f30c",
				native: "🌌"
			}
		],
		version: 1
	},
	cloud: {
		id: "cloud",
		name: "Cloud",
		keywords: [
			"weather",
			"sky"
		],
		skins: [
			{
				unified: "2601-fe0f",
				native: "☁️"
			}
		],
		version: 1
	},
	partly_sunny: {
		id: "partly_sunny",
		name: "Sun Behind Cloud",
		keywords: [
			"partly",
			"sunny",
			"weather",
			"nature",
			"cloudy",
			"morning",
			"fall",
			"spring"
		],
		skins: [
			{
				unified: "26c5",
				native: "⛅"
			}
		],
		version: 1
	},
	thunder_cloud_and_rain: {
		id: "thunder_cloud_and_rain",
		name: "Cloud with Lightning and Rain",
		keywords: [
			"thunder",
			"weather"
		],
		skins: [
			{
				unified: "26c8-fe0f",
				native: "⛈️"
			}
		],
		version: 1
	},
	mostly_sunny: {
		id: "mostly_sunny",
		name: "Sun Behind Small Cloud",
		keywords: [
			"mostly",
			"sunny",
			"weather"
		],
		skins: [
			{
				unified: "1f324-fe0f",
				native: "🌤️"
			}
		],
		version: 1
	},
	barely_sunny: {
		id: "barely_sunny",
		name: "Sun Behind Large Cloud",
		keywords: [
			"barely",
			"sunny",
			"weather"
		],
		skins: [
			{
				unified: "1f325-fe0f",
				native: "🌥️"
			}
		],
		version: 1
	},
	partly_sunny_rain: {
		id: "partly_sunny_rain",
		name: "Sun Behind Rain Cloud",
		keywords: [
			"partly",
			"sunny",
			"weather"
		],
		skins: [
			{
				unified: "1f326-fe0f",
				native: "🌦️"
			}
		],
		version: 1
	},
	rain_cloud: {
		id: "rain_cloud",
		name: "Cloud with Rain",
		keywords: [
			"weather"
		],
		skins: [
			{
				unified: "1f327-fe0f",
				native: "🌧️"
			}
		],
		version: 1
	},
	snow_cloud: {
		id: "snow_cloud",
		name: "Cloud with Snow",
		keywords: [
			"weather"
		],
		skins: [
			{
				unified: "1f328-fe0f",
				native: "🌨️"
			}
		],
		version: 1
	},
	lightning: {
		id: "lightning",
		name: "Cloud with Lightning",
		keywords: [
			"weather",
			"thunder"
		],
		skins: [
			{
				unified: "1f329-fe0f",
				native: "🌩️"
			}
		],
		version: 1
	},
	tornado: {
		id: "tornado",
		name: "Tornado",
		keywords: [
			"cloud",
			"weather",
			"cyclone",
			"twister"
		],
		skins: [
			{
				unified: "1f32a-fe0f",
				native: "🌪️"
			}
		],
		version: 1
	},
	fog: {
		id: "fog",
		name: "Fog",
		keywords: [
			"weather"
		],
		skins: [
			{
				unified: "1f32b-fe0f",
				native: "🌫️"
			}
		],
		version: 1
	},
	wind_blowing_face: {
		id: "wind_blowing_face",
		name: "Wind Face",
		keywords: [
			"blowing",
			"gust",
			"air"
		],
		skins: [
			{
				unified: "1f32c-fe0f",
				native: "🌬️"
			}
		],
		version: 1
	},
	cyclone: {
		id: "cyclone",
		name: "Cyclone",
		keywords: [
			"weather",
			"swirl",
			"blue",
			"cloud",
			"vortex",
			"spiral",
			"whirlpool",
			"spin",
			"tornado",
			"hurricane",
			"typhoon"
		],
		skins: [
			{
				unified: "1f300",
				native: "🌀"
			}
		],
		version: 1
	},
	rainbow: {
		id: "rainbow",
		name: "Rainbow",
		keywords: [
			"nature",
			"happy",
			"unicorn",
			"face",
			"photo",
			"sky",
			"spring"
		],
		skins: [
			{
				unified: "1f308",
				native: "🌈"
			}
		],
		version: 1
	},
	closed_umbrella: {
		id: "closed_umbrella",
		name: "Closed Umbrella",
		keywords: [
			"weather",
			"rain",
			"drizzle"
		],
		skins: [
			{
				unified: "1f302",
				native: "🌂"
			}
		],
		version: 1
	},
	umbrella: {
		id: "umbrella",
		name: "Umbrella",
		keywords: [
			"weather",
			"spring"
		],
		skins: [
			{
				unified: "2602-fe0f",
				native: "☂️"
			}
		],
		version: 1
	},
	umbrella_with_rain_drops: {
		id: "umbrella_with_rain_drops",
		name: "Umbrella with Rain Drops",
		keywords: [
			"rainy",
			"weather",
			"spring"
		],
		skins: [
			{
				unified: "2614",
				native: "☔"
			}
		],
		version: 1
	},
	umbrella_on_ground: {
		id: "umbrella_on_ground",
		name: "Umbrella on Ground",
		keywords: [
			"weather",
			"summer"
		],
		skins: [
			{
				unified: "26f1-fe0f",
				native: "⛱️"
			}
		],
		version: 1
	},
	zap: {
		id: "zap",
		name: "High Voltage",
		keywords: [
			"zap",
			"thunder",
			"weather",
			"lightning",
			"bolt",
			"fast"
		],
		skins: [
			{
				unified: "26a1",
				native: "⚡"
			}
		],
		version: 1
	},
	snowflake: {
		id: "snowflake",
		name: "Snowflake",
		keywords: [
			"winter",
			"season",
			"cold",
			"weather",
			"christmas",
			"xmas"
		],
		skins: [
			{
				unified: "2744-fe0f",
				native: "❄️"
			}
		],
		version: 1
	},
	snowman: {
		id: "snowman",
		name: "Snowman",
		keywords: [
			"winter",
			"season",
			"cold",
			"weather",
			"christmas",
			"xmas",
			"frozen"
		],
		skins: [
			{
				unified: "2603-fe0f",
				native: "☃️"
			}
		],
		version: 1
	},
	snowman_without_snow: {
		id: "snowman_without_snow",
		name: "Snowman Without Snow",
		keywords: [
			"winter",
			"season",
			"cold",
			"weather",
			"christmas",
			"xmas",
			"frozen"
		],
		skins: [
			{
				unified: "26c4",
				native: "⛄"
			}
		],
		version: 1
	},
	comet: {
		id: "comet",
		name: "Comet",
		keywords: [
			"space"
		],
		skins: [
			{
				unified: "2604-fe0f",
				native: "☄️"
			}
		],
		version: 1
	},
	fire: {
		id: "fire",
		name: "Fire",
		keywords: [
			"hot",
			"cook",
			"flame"
		],
		skins: [
			{
				unified: "1f525",
				native: "🔥"
			}
		],
		version: 1
	},
	droplet: {
		id: "droplet",
		name: "Droplet",
		keywords: [
			"water",
			"drip",
			"faucet",
			"spring"
		],
		skins: [
			{
				unified: "1f4a7",
				native: "💧"
			}
		],
		version: 1
	},
	ocean: {
		id: "ocean",
		name: "Water Wave",
		keywords: [
			"ocean",
			"sea",
			"nature",
			"tsunami",
			"disaster"
		],
		skins: [
			{
				unified: "1f30a",
				native: "🌊"
			}
		],
		version: 1
	},
	jack_o_lantern: {
		id: "jack_o_lantern",
		name: "Jack-O-Lantern",
		keywords: [
			"jack",
			"o",
			"lantern",
			"halloween",
			"light",
			"pumpkin",
			"creepy",
			"fall"
		],
		skins: [
			{
				unified: "1f383",
				native: "🎃"
			}
		],
		version: 1
	},
	christmas_tree: {
		id: "christmas_tree",
		name: "Christmas Tree",
		keywords: [
			"festival",
			"vacation",
			"december",
			"xmas",
			"celebration"
		],
		skins: [
			{
				unified: "1f384",
				native: "🎄"
			}
		],
		version: 1
	},
	fireworks: {
		id: "fireworks",
		name: "Fireworks",
		keywords: [
			"photo",
			"festival",
			"carnival",
			"congratulations"
		],
		skins: [
			{
				unified: "1f386",
				native: "🎆"
			}
		],
		version: 1
	},
	sparkler: {
		id: "sparkler",
		name: "Sparkler",
		keywords: [
			"stars",
			"night",
			"shine"
		],
		skins: [
			{
				unified: "1f387",
				native: "🎇"
			}
		],
		version: 1
	},
	firecracker: {
		id: "firecracker",
		name: "Firecracker",
		keywords: [
			"dynamite",
			"boom",
			"explode",
			"explosion",
			"explosive"
		],
		skins: [
			{
				unified: "1f9e8",
				native: "🧨"
			}
		],
		version: 11
	},
	sparkles: {
		id: "sparkles",
		name: "Sparkles",
		keywords: [
			"stars",
			"shine",
			"shiny",
			"cool",
			"awesome",
			"good",
			"magic"
		],
		skins: [
			{
				unified: "2728",
				native: "✨"
			}
		],
		version: 1
	},
	balloon: {
		id: "balloon",
		name: "Balloon",
		keywords: [
			"party",
			"celebration",
			"birthday",
			"circus"
		],
		skins: [
			{
				unified: "1f388",
				native: "🎈"
			}
		],
		version: 1
	},
	tada: {
		id: "tada",
		name: "Party Popper",
		keywords: [
			"tada",
			"congratulations",
			"birthday",
			"magic",
			"circus",
			"celebration"
		],
		skins: [
			{
				unified: "1f389",
				native: "🎉"
			}
		],
		version: 1
	},
	confetti_ball: {
		id: "confetti_ball",
		name: "Confetti Ball",
		keywords: [
			"festival",
			"party",
			"birthday",
			"circus"
		],
		skins: [
			{
				unified: "1f38a",
				native: "🎊"
			}
		],
		version: 1
	},
	tanabata_tree: {
		id: "tanabata_tree",
		name: "Tanabata Tree",
		keywords: [
			"plant",
			"nature",
			"branch",
			"summer",
			"bamboo",
			"wish",
			"star",
			"festival",
			"tanzaku"
		],
		skins: [
			{
				unified: "1f38b",
				native: "🎋"
			}
		],
		version: 1
	},
	bamboo: {
		id: "bamboo",
		name: "Pine Decoration",
		keywords: [
			"bamboo",
			"japanese",
			"plant",
			"nature",
			"vegetable",
			"panda",
			"new",
			"years"
		],
		skins: [
			{
				unified: "1f38d",
				native: "🎍"
			}
		],
		version: 1
	},
	dolls: {
		id: "dolls",
		name: "Japanese Dolls",
		keywords: [
			"toy",
			"kimono"
		],
		skins: [
			{
				unified: "1f38e",
				native: "🎎"
			}
		],
		version: 1
	},
	flags: {
		id: "flags",
		name: "Carp Streamer",
		keywords: [
			"flags",
			"fish",
			"japanese",
			"koinobori",
			"banner"
		],
		skins: [
			{
				unified: "1f38f",
				native: "🎏"
			}
		],
		version: 1
	},
	wind_chime: {
		id: "wind_chime",
		name: "Wind Chime",
		keywords: [
			"nature",
			"ding",
			"spring",
			"bell"
		],
		skins: [
			{
				unified: "1f390",
				native: "🎐"
			}
		],
		version: 1
	},
	rice_scene: {
		id: "rice_scene",
		name: "Moon Viewing Ceremony",
		keywords: [
			"rice",
			"scene",
			"photo",
			"japan",
			"asia",
			"tsukimi"
		],
		skins: [
			{
				unified: "1f391",
				native: "🎑"
			}
		],
		version: 1
	},
	red_envelope: {
		id: "red_envelope",
		name: "Red Envelope",
		keywords: [
			"gift"
		],
		skins: [
			{
				unified: "1f9e7",
				native: "🧧"
			}
		],
		version: 11
	},
	ribbon: {
		id: "ribbon",
		name: "Ribbon",
		keywords: [
			"decoration",
			"pink",
			"girl",
			"bowtie"
		],
		skins: [
			{
				unified: "1f380",
				native: "🎀"
			}
		],
		version: 1
	},
	gift: {
		id: "gift",
		name: "Wrapped Gift",
		keywords: [
			"present",
			"birthday",
			"christmas",
			"xmas"
		],
		skins: [
			{
				unified: "1f381",
				native: "🎁"
			}
		],
		version: 1
	},
	reminder_ribbon: {
		id: "reminder_ribbon",
		name: "Reminder Ribbon",
		keywords: [
			"sports",
			"cause",
			"support",
			"awareness"
		],
		skins: [
			{
				unified: "1f397-fe0f",
				native: "🎗️"
			}
		],
		version: 1
	},
	admission_tickets: {
		id: "admission_tickets",
		name: "Admission Tickets",
		keywords: [
			"sports",
			"concert",
			"entrance"
		],
		skins: [
			{
				unified: "1f39f-fe0f",
				native: "🎟️"
			}
		],
		version: 1
	},
	ticket: {
		id: "ticket",
		name: "Ticket",
		keywords: [
			"event",
			"concert",
			"pass"
		],
		skins: [
			{
				unified: "1f3ab",
				native: "🎫"
			}
		],
		version: 1
	},
	medal: {
		id: "medal",
		name: "Military Medal",
		keywords: [
			"award",
			"winning",
			"army"
		],
		skins: [
			{
				unified: "1f396-fe0f",
				native: "🎖️"
			}
		],
		version: 1
	},
	trophy: {
		id: "trophy",
		name: "Trophy",
		keywords: [
			"win",
			"award",
			"contest",
			"place",
			"ftw",
			"ceremony"
		],
		skins: [
			{
				unified: "1f3c6",
				native: "🏆"
			}
		],
		version: 1
	},
	sports_medal: {
		id: "sports_medal",
		name: "Sports Medal",
		keywords: [
			"award",
			"winning"
		],
		skins: [
			{
				unified: "1f3c5",
				native: "🏅"
			}
		],
		version: 1
	},
	first_place_medal: {
		id: "first_place_medal",
		name: "1st Place Medal",
		keywords: [
			"first",
			"award",
			"winning"
		],
		skins: [
			{
				unified: "1f947",
				native: "🥇"
			}
		],
		version: 3
	},
	second_place_medal: {
		id: "second_place_medal",
		name: "2nd Place Medal",
		keywords: [
			"second",
			"award"
		],
		skins: [
			{
				unified: "1f948",
				native: "🥈"
			}
		],
		version: 3
	},
	third_place_medal: {
		id: "third_place_medal",
		name: "3rd Place Medal",
		keywords: [
			"third",
			"award"
		],
		skins: [
			{
				unified: "1f949",
				native: "🥉"
			}
		],
		version: 3
	},
	soccer: {
		id: "soccer",
		name: "Soccer Ball",
		keywords: [
			"sports",
			"football"
		],
		skins: [
			{
				unified: "26bd",
				native: "⚽"
			}
		],
		version: 1
	},
	baseball: {
		id: "baseball",
		name: "Baseball",
		keywords: [
			"sports",
			"balls"
		],
		skins: [
			{
				unified: "26be",
				native: "⚾"
			}
		],
		version: 1
	},
	softball: {
		id: "softball",
		name: "Softball",
		keywords: [
			"sports",
			"balls"
		],
		skins: [
			{
				unified: "1f94e",
				native: "🥎"
			}
		],
		version: 11
	},
	basketball: {
		id: "basketball",
		name: "Basketball",
		keywords: [
			"sports",
			"balls",
			"NBA"
		],
		skins: [
			{
				unified: "1f3c0",
				native: "🏀"
			}
		],
		version: 1
	},
	volleyball: {
		id: "volleyball",
		name: "Volleyball",
		keywords: [
			"sports",
			"balls"
		],
		skins: [
			{
				unified: "1f3d0",
				native: "🏐"
			}
		],
		version: 1
	},
	football: {
		id: "football",
		name: "American Football",
		keywords: [
			"sports",
			"balls",
			"NFL"
		],
		skins: [
			{
				unified: "1f3c8",
				native: "🏈"
			}
		],
		version: 1
	},
	rugby_football: {
		id: "rugby_football",
		name: "Rugby Football",
		keywords: [
			"sports",
			"team"
		],
		skins: [
			{
				unified: "1f3c9",
				native: "🏉"
			}
		],
		version: 1
	},
	tennis: {
		id: "tennis",
		name: "Tennis",
		keywords: [
			"sports",
			"balls",
			"green"
		],
		skins: [
			{
				unified: "1f3be",
				native: "🎾"
			}
		],
		version: 1
	},
	flying_disc: {
		id: "flying_disc",
		name: "Flying Disc",
		keywords: [
			"sports",
			"frisbee",
			"ultimate"
		],
		skins: [
			{
				unified: "1f94f",
				native: "🥏"
			}
		],
		version: 11
	},
	bowling: {
		id: "bowling",
		name: "Bowling",
		keywords: [
			"sports",
			"fun",
			"play"
		],
		skins: [
			{
				unified: "1f3b3",
				native: "🎳"
			}
		],
		version: 1
	},
	cricket_bat_and_ball: {
		id: "cricket_bat_and_ball",
		name: "Cricket Game",
		keywords: [
			"bat",
			"and",
			"ball",
			"sports"
		],
		skins: [
			{
				unified: "1f3cf",
				native: "🏏"
			}
		],
		version: 1
	},
	field_hockey_stick_and_ball: {
		id: "field_hockey_stick_and_ball",
		name: "Field Hockey",
		keywords: [
			"stick",
			"and",
			"ball",
			"sports"
		],
		skins: [
			{
				unified: "1f3d1",
				native: "🏑"
			}
		],
		version: 1
	},
	ice_hockey_stick_and_puck: {
		id: "ice_hockey_stick_and_puck",
		name: "Ice Hockey",
		keywords: [
			"stick",
			"and",
			"puck",
			"sports"
		],
		skins: [
			{
				unified: "1f3d2",
				native: "🏒"
			}
		],
		version: 1
	},
	lacrosse: {
		id: "lacrosse",
		name: "Lacrosse",
		keywords: [
			"sports",
			"ball",
			"stick"
		],
		skins: [
			{
				unified: "1f94d",
				native: "🥍"
			}
		],
		version: 11
	},
	table_tennis_paddle_and_ball: {
		id: "table_tennis_paddle_and_ball",
		name: "Ping Pong",
		keywords: [
			"table",
			"tennis",
			"paddle",
			"and",
			"ball",
			"sports",
			"pingpong"
		],
		skins: [
			{
				unified: "1f3d3",
				native: "🏓"
			}
		],
		version: 1
	},
	badminton_racquet_and_shuttlecock: {
		id: "badminton_racquet_and_shuttlecock",
		name: "Badminton",
		keywords: [
			"racquet",
			"and",
			"shuttlecock",
			"sports"
		],
		skins: [
			{
				unified: "1f3f8",
				native: "🏸"
			}
		],
		version: 1
	},
	boxing_glove: {
		id: "boxing_glove",
		name: "Boxing Glove",
		keywords: [
			"sports",
			"fighting"
		],
		skins: [
			{
				unified: "1f94a",
				native: "🥊"
			}
		],
		version: 3
	},
	martial_arts_uniform: {
		id: "martial_arts_uniform",
		name: "Martial Arts Uniform",
		keywords: [
			"judo",
			"karate",
			"taekwondo"
		],
		skins: [
			{
				unified: "1f94b",
				native: "🥋"
			}
		],
		version: 3
	},
	goal_net: {
		id: "goal_net",
		name: "Goal Net",
		keywords: [
			"sports"
		],
		skins: [
			{
				unified: "1f945",
				native: "🥅"
			}
		],
		version: 3
	},
	golf: {
		id: "golf",
		name: "Flag in Hole",
		keywords: [
			"golf",
			"sports",
			"business",
			"summer"
		],
		skins: [
			{
				unified: "26f3",
				native: "⛳"
			}
		],
		version: 1
	},
	ice_skate: {
		id: "ice_skate",
		name: "Ice Skate",
		keywords: [
			"sports"
		],
		skins: [
			{
				unified: "26f8-fe0f",
				native: "⛸️"
			}
		],
		version: 1
	},
	fishing_pole_and_fish: {
		id: "fishing_pole_and_fish",
		name: "Fishing Pole",
		keywords: [
			"and",
			"fish",
			"food",
			"hobby",
			"summer"
		],
		skins: [
			{
				unified: "1f3a3",
				native: "🎣"
			}
		],
		version: 1
	},
	diving_mask: {
		id: "diving_mask",
		name: "Diving Mask",
		keywords: [
			"sport",
			"ocean"
		],
		skins: [
			{
				unified: "1f93f",
				native: "🤿"
			}
		],
		version: 12
	},
	running_shirt_with_sash: {
		id: "running_shirt_with_sash",
		name: "Running Shirt",
		keywords: [
			"with",
			"sash",
			"play",
			"pageant"
		],
		skins: [
			{
				unified: "1f3bd",
				native: "🎽"
			}
		],
		version: 1
	},
	ski: {
		id: "ski",
		name: "Skis",
		keywords: [
			"ski",
			"sports",
			"winter",
			"cold",
			"snow"
		],
		skins: [
			{
				unified: "1f3bf",
				native: "🎿"
			}
		],
		version: 1
	},
	sled: {
		id: "sled",
		name: "Sled",
		keywords: [
			"sleigh",
			"luge",
			"toboggan"
		],
		skins: [
			{
				unified: "1f6f7",
				native: "🛷"
			}
		],
		version: 5
	},
	curling_stone: {
		id: "curling_stone",
		name: "Curling Stone",
		keywords: [
			"sports"
		],
		skins: [
			{
				unified: "1f94c",
				native: "🥌"
			}
		],
		version: 5
	},
	dart: {
		id: "dart",
		name: "Bullseye",
		keywords: [
			"dart",
			"direct",
			"hit",
			"game",
			"play",
			"bar",
			"target"
		],
		skins: [
			{
				unified: "1f3af",
				native: "🎯"
			}
		],
		version: 1
	},
	"yo-yo": {
		id: "yo-yo",
		name: "Yo-Yo",
		keywords: [
			"yo",
			"toy"
		],
		skins: [
			{
				unified: "1fa80",
				native: "🪀"
			}
		],
		version: 12
	},
	kite: {
		id: "kite",
		name: "Kite",
		keywords: [
			"wind",
			"fly"
		],
		skins: [
			{
				unified: "1fa81",
				native: "🪁"
			}
		],
		version: 12
	},
	gun: {
		id: "gun",
		name: "Pistol",
		keywords: [
			"gun",
			"violence",
			"weapon",
			"revolver"
		],
		skins: [
			{
				unified: "1f52b",
				native: "🔫"
			}
		],
		version: 1
	},
	"8ball": {
		id: "8ball",
		name: "Billiards",
		keywords: [
			"8ball",
			"pool",
			"8",
			"ball",
			"hobby",
			"game",
			"luck",
			"magic"
		],
		skins: [
			{
				unified: "1f3b1",
				native: "🎱"
			}
		],
		version: 1
	},
	crystal_ball: {
		id: "crystal_ball",
		name: "Crystal Ball",
		keywords: [
			"disco",
			"party",
			"magic",
			"circus",
			"fortune",
			"teller"
		],
		skins: [
			{
				unified: "1f52e",
				native: "🔮"
			}
		],
		version: 1
	},
	magic_wand: {
		id: "magic_wand",
		name: "Magic Wand",
		keywords: [
			"supernature",
			"power"
		],
		skins: [
			{
				unified: "1fa84",
				native: "🪄"
			}
		],
		version: 13
	},
	video_game: {
		id: "video_game",
		name: "Video Game",
		keywords: [
			"play",
			"console",
			"PS4",
			"controller"
		],
		skins: [
			{
				unified: "1f3ae",
				native: "🎮"
			}
		],
		version: 1
	},
	joystick: {
		id: "joystick",
		name: "Joystick",
		keywords: [
			"game",
			"play"
		],
		skins: [
			{
				unified: "1f579-fe0f",
				native: "🕹️"
			}
		],
		version: 1
	},
	slot_machine: {
		id: "slot_machine",
		name: "Slot Machine",
		keywords: [
			"bet",
			"gamble",
			"vegas",
			"fruit",
			"luck",
			"casino"
		],
		skins: [
			{
				unified: "1f3b0",
				native: "🎰"
			}
		],
		version: 1
	},
	game_die: {
		id: "game_die",
		name: "Game Die",
		keywords: [
			"dice",
			"random",
			"tabletop",
			"play",
			"luck"
		],
		skins: [
			{
				unified: "1f3b2",
				native: "🎲"
			}
		],
		version: 1
	},
	jigsaw: {
		id: "jigsaw",
		name: "Puzzle Piece",
		keywords: [
			"jigsaw",
			"interlocking"
		],
		skins: [
			{
				unified: "1f9e9",
				native: "🧩"
			}
		],
		version: 11
	},
	teddy_bear: {
		id: "teddy_bear",
		name: "Teddy Bear",
		keywords: [
			"plush",
			"stuffed"
		],
		skins: [
			{
				unified: "1f9f8",
				native: "🧸"
			}
		],
		version: 11
	},
	pinata: {
		id: "pinata",
		name: "Pinata",
		keywords: [
			"mexico",
			"candy",
			"celebration"
		],
		skins: [
			{
				unified: "1fa85",
				native: "🪅"
			}
		],
		version: 13
	},
	mirror_ball: {
		id: "mirror_ball",
		name: "Mirror Ball",
		keywords: [
			"disco",
			"dance",
			"party"
		],
		skins: [
			{
				unified: "1faa9",
				native: "🪩"
			}
		],
		version: 14
	},
	nesting_dolls: {
		id: "nesting_dolls",
		name: "Nesting Dolls",
		keywords: [
			"matryoshka",
			"toy"
		],
		skins: [
			{
				unified: "1fa86",
				native: "🪆"
			}
		],
		version: 13
	},
	spades: {
		id: "spades",
		name: "Spade Suit",
		keywords: [
			"spades",
			"poker",
			"cards",
			"suits",
			"magic"
		],
		skins: [
			{
				unified: "2660-fe0f",
				native: "♠️"
			}
		],
		version: 1
	},
	hearts: {
		id: "hearts",
		name: "Heart Suit",
		keywords: [
			"hearts",
			"poker",
			"cards",
			"magic",
			"suits"
		],
		skins: [
			{
				unified: "2665-fe0f",
				native: "♥️"
			}
		],
		version: 1
	},
	diamonds: {
		id: "diamonds",
		name: "Diamond Suit",
		keywords: [
			"diamonds",
			"poker",
			"cards",
			"magic",
			"suits"
		],
		skins: [
			{
				unified: "2666-fe0f",
				native: "♦️"
			}
		],
		version: 1
	},
	clubs: {
		id: "clubs",
		name: "Club Suit",
		keywords: [
			"clubs",
			"poker",
			"cards",
			"magic",
			"suits"
		],
		skins: [
			{
				unified: "2663-fe0f",
				native: "♣️"
			}
		],
		version: 1
	},
	chess_pawn: {
		id: "chess_pawn",
		name: "Chess Pawn",
		keywords: [
			"expendable"
		],
		skins: [
			{
				unified: "265f-fe0f",
				native: "♟️"
			}
		],
		version: 11
	},
	black_joker: {
		id: "black_joker",
		name: "Joker",
		keywords: [
			"black",
			"poker",
			"cards",
			"game",
			"play",
			"magic"
		],
		skins: [
			{
				unified: "1f0cf",
				native: "🃏"
			}
		],
		version: 1
	},
	mahjong: {
		id: "mahjong",
		name: "Mahjong Red Dragon",
		keywords: [
			"game",
			"play",
			"chinese",
			"kanji"
		],
		skins: [
			{
				unified: "1f004",
				native: "🀄"
			}
		],
		version: 1
	},
	flower_playing_cards: {
		id: "flower_playing_cards",
		name: "Flower Playing Cards",
		keywords: [
			"game",
			"sunset",
			"red"
		],
		skins: [
			{
				unified: "1f3b4",
				native: "🎴"
			}
		],
		version: 1
	},
	performing_arts: {
		id: "performing_arts",
		name: "Performing Arts",
		keywords: [
			"acting",
			"theater",
			"drama"
		],
		skins: [
			{
				unified: "1f3ad",
				native: "🎭"
			}
		],
		version: 1
	},
	frame_with_picture: {
		id: "frame_with_picture",
		name: "Framed Picture",
		keywords: [
			"frame",
			"with",
			"photography"
		],
		skins: [
			{
				unified: "1f5bc-fe0f",
				native: "🖼️"
			}
		],
		version: 1
	},
	art: {
		id: "art",
		name: "Artist Palette",
		keywords: [
			"art",
			"design",
			"paint",
			"draw",
			"colors"
		],
		skins: [
			{
				unified: "1f3a8",
				native: "🎨"
			}
		],
		version: 1
	},
	thread: {
		id: "thread",
		name: "Thread",
		keywords: [
			"needle",
			"sewing",
			"spool",
			"string"
		],
		skins: [
			{
				unified: "1f9f5",
				native: "🧵"
			}
		],
		version: 11
	},
	sewing_needle: {
		id: "sewing_needle",
		name: "Sewing Needle",
		keywords: [
			"stitches"
		],
		skins: [
			{
				unified: "1faa1",
				native: "🪡"
			}
		],
		version: 13
	},
	yarn: {
		id: "yarn",
		name: "Yarn",
		keywords: [
			"ball",
			"crochet",
			"knit"
		],
		skins: [
			{
				unified: "1f9f6",
				native: "🧶"
			}
		],
		version: 11
	},
	knot: {
		id: "knot",
		name: "Knot",
		keywords: [
			"rope",
			"scout"
		],
		skins: [
			{
				unified: "1faa2",
				native: "🪢"
			}
		],
		version: 13
	},
	eyeglasses: {
		id: "eyeglasses",
		name: "Glasses",
		keywords: [
			"eyeglasses",
			"fashion",
			"accessories",
			"eyesight",
			"nerdy",
			"dork",
			"geek"
		],
		skins: [
			{
				unified: "1f453",
				native: "👓"
			}
		],
		version: 1
	},
	dark_sunglasses: {
		id: "dark_sunglasses",
		name: "Sunglasses",
		keywords: [
			"dark",
			"face",
			"cool",
			"accessories"
		],
		skins: [
			{
				unified: "1f576-fe0f",
				native: "🕶️"
			}
		],
		version: 1
	},
	goggles: {
		id: "goggles",
		name: "Goggles",
		keywords: [
			"eyes",
			"protection",
			"safety"
		],
		skins: [
			{
				unified: "1f97d",
				native: "🥽"
			}
		],
		version: 11
	},
	lab_coat: {
		id: "lab_coat",
		name: "Lab Coat",
		keywords: [
			"doctor",
			"experiment",
			"scientist",
			"chemist"
		],
		skins: [
			{
				unified: "1f97c",
				native: "🥼"
			}
		],
		version: 11
	},
	safety_vest: {
		id: "safety_vest",
		name: "Safety Vest",
		keywords: [
			"protection"
		],
		skins: [
			{
				unified: "1f9ba",
				native: "🦺"
			}
		],
		version: 12
	},
	necktie: {
		id: "necktie",
		name: "Necktie",
		keywords: [
			"shirt",
			"suitup",
			"formal",
			"fashion",
			"cloth",
			"business"
		],
		skins: [
			{
				unified: "1f454",
				native: "👔"
			}
		],
		version: 1
	},
	shirt: {
		id: "shirt",
		name: "T-Shirt",
		keywords: [
			"shirt",
			"tshirt",
			"t",
			"fashion",
			"cloth",
			"casual",
			"tee"
		],
		skins: [
			{
				unified: "1f455",
				native: "👕"
			}
		],
		version: 1
	},
	jeans: {
		id: "jeans",
		name: "Jeans",
		keywords: [
			"fashion",
			"shopping"
		],
		skins: [
			{
				unified: "1f456",
				native: "👖"
			}
		],
		version: 1
	},
	scarf: {
		id: "scarf",
		name: "Scarf",
		keywords: [
			"neck",
			"winter",
			"clothes"
		],
		skins: [
			{
				unified: "1f9e3",
				native: "🧣"
			}
		],
		version: 5
	},
	gloves: {
		id: "gloves",
		name: "Gloves",
		keywords: [
			"hands",
			"winter",
			"clothes"
		],
		skins: [
			{
				unified: "1f9e4",
				native: "🧤"
			}
		],
		version: 5
	},
	coat: {
		id: "coat",
		name: "Coat",
		keywords: [
			"jacket"
		],
		skins: [
			{
				unified: "1f9e5",
				native: "🧥"
			}
		],
		version: 5
	},
	socks: {
		id: "socks",
		name: "Socks",
		keywords: [
			"stockings",
			"clothes"
		],
		skins: [
			{
				unified: "1f9e6",
				native: "🧦"
			}
		],
		version: 5
	},
	dress: {
		id: "dress",
		name: "Dress",
		keywords: [
			"clothes",
			"fashion",
			"shopping"
		],
		skins: [
			{
				unified: "1f457",
				native: "👗"
			}
		],
		version: 1
	},
	kimono: {
		id: "kimono",
		name: "Kimono",
		keywords: [
			"dress",
			"fashion",
			"women",
			"female",
			"japanese"
		],
		skins: [
			{
				unified: "1f458",
				native: "👘"
			}
		],
		version: 1
	},
	sari: {
		id: "sari",
		name: "Sari",
		keywords: [
			"dress"
		],
		skins: [
			{
				unified: "1f97b",
				native: "🥻"
			}
		],
		version: 12
	},
	"one-piece_swimsuit": {
		id: "one-piece_swimsuit",
		name: "One-Piece Swimsuit",
		keywords: [
			"one",
			"piece",
			"fashion"
		],
		skins: [
			{
				unified: "1fa71",
				native: "🩱"
			}
		],
		version: 12
	},
	briefs: {
		id: "briefs",
		name: "Briefs",
		keywords: [
			"clothing"
		],
		skins: [
			{
				unified: "1fa72",
				native: "🩲"
			}
		],
		version: 12
	},
	shorts: {
		id: "shorts",
		name: "Shorts",
		keywords: [
			"clothing"
		],
		skins: [
			{
				unified: "1fa73",
				native: "🩳"
			}
		],
		version: 12
	},
	bikini: {
		id: "bikini",
		name: "Bikini",
		keywords: [
			"swimming",
			"female",
			"woman",
			"girl",
			"fashion",
			"beach",
			"summer"
		],
		skins: [
			{
				unified: "1f459",
				native: "👙"
			}
		],
		version: 1
	},
	womans_clothes: {
		id: "womans_clothes",
		name: "Womans Clothes",
		keywords: [
			"woman",
			"s",
			"fashion",
			"shopping",
			"bags",
			"female"
		],
		skins: [
			{
				unified: "1f45a",
				native: "👚"
			}
		],
		version: 1
	},
	folding_hand_fan: {
		id: "folding_hand_fan",
		name: "Folding Hand Fan",
		keywords: [
			"flamenco",
			"hot"
		],
		skins: [
			{
				unified: "1faad",
				native: "🪭"
			}
		],
		version: 15
	},
	purse: {
		id: "purse",
		name: "Purse",
		keywords: [
			"fashion",
			"accessories",
			"money",
			"sales",
			"shopping"
		],
		skins: [
			{
				unified: "1f45b",
				native: "👛"
			}
		],
		version: 1
	},
	handbag: {
		id: "handbag",
		name: "Handbag",
		keywords: [
			"fashion",
			"accessory",
			"accessories",
			"shopping"
		],
		skins: [
			{
				unified: "1f45c",
				native: "👜"
			}
		],
		version: 1
	},
	pouch: {
		id: "pouch",
		name: "Pouch",
		keywords: [
			"clutch",
			"bag",
			"accessories",
			"shopping"
		],
		skins: [
			{
				unified: "1f45d",
				native: "👝"
			}
		],
		version: 1
	},
	shopping_bags: {
		id: "shopping_bags",
		name: "Shopping Bags",
		keywords: [
			"mall",
			"buy",
			"purchase"
		],
		skins: [
			{
				unified: "1f6cd-fe0f",
				native: "🛍️"
			}
		],
		version: 1
	},
	school_satchel: {
		id: "school_satchel",
		name: "Backpack",
		keywords: [
			"school",
			"satchel",
			"student",
			"education",
			"bag"
		],
		skins: [
			{
				unified: "1f392",
				native: "🎒"
			}
		],
		version: 1
	},
	thong_sandal: {
		id: "thong_sandal",
		name: "Thong Sandal",
		keywords: [
			"footwear",
			"summer"
		],
		skins: [
			{
				unified: "1fa74",
				native: "🩴"
			}
		],
		version: 13
	},
	mans_shoe: {
		id: "mans_shoe",
		name: "Mans Shoe",
		keywords: [
			"man",
			"s",
			"fashion",
			"male"
		],
		skins: [
			{
				unified: "1f45e",
				native: "👞"
			}
		],
		version: 1
	},
	athletic_shoe: {
		id: "athletic_shoe",
		name: "Running Shoe",
		keywords: [
			"athletic",
			"shoes",
			"sports",
			"sneakers"
		],
		skins: [
			{
				unified: "1f45f",
				native: "👟"
			}
		],
		version: 1
	},
	hiking_boot: {
		id: "hiking_boot",
		name: "Hiking Boot",
		keywords: [
			"backpacking",
			"camping"
		],
		skins: [
			{
				unified: "1f97e",
				native: "🥾"
			}
		],
		version: 11
	},
	womans_flat_shoe: {
		id: "womans_flat_shoe",
		name: "Flat Shoe",
		keywords: [
			"womans",
			"ballet",
			"slip",
			"on",
			"slipper"
		],
		skins: [
			{
				unified: "1f97f",
				native: "🥿"
			}
		],
		version: 11
	},
	high_heel: {
		id: "high_heel",
		name: "High-Heeled Shoe",
		keywords: [
			"high",
			"heel",
			"heeled",
			"fashion",
			"shoes",
			"female",
			"pumps",
			"stiletto"
		],
		skins: [
			{
				unified: "1f460",
				native: "👠"
			}
		],
		version: 1
	},
	sandal: {
		id: "sandal",
		name: "Womans Sandal",
		keywords: [
			"woman",
			"s",
			"shoes",
			"fashion",
			"flip",
			"flops"
		],
		skins: [
			{
				unified: "1f461",
				native: "👡"
			}
		],
		version: 1
	},
	ballet_shoes: {
		id: "ballet_shoes",
		name: "Ballet Shoes",
		keywords: [
			"dance"
		],
		skins: [
			{
				unified: "1fa70",
				native: "🩰"
			}
		],
		version: 12
	},
	boot: {
		id: "boot",
		name: "Womans Boots",
		keywords: [
			"boot",
			"woman",
			"s",
			"shoes",
			"fashion"
		],
		skins: [
			{
				unified: "1f462",
				native: "👢"
			}
		],
		version: 1
	},
	hair_pick: {
		id: "hair_pick",
		name: "Hair Pick",
		keywords: [
			"afro",
			"comb"
		],
		skins: [
			{
				unified: "1faae",
				native: "🪮"
			}
		],
		version: 15
	},
	crown: {
		id: "crown",
		name: "Crown",
		keywords: [
			"king",
			"kod",
			"leader",
			"royalty",
			"lord"
		],
		skins: [
			{
				unified: "1f451",
				native: "👑"
			}
		],
		version: 1
	},
	womans_hat: {
		id: "womans_hat",
		name: "Womans Hat",
		keywords: [
			"woman",
			"s",
			"fashion",
			"accessories",
			"female",
			"lady",
			"spring"
		],
		skins: [
			{
				unified: "1f452",
				native: "👒"
			}
		],
		version: 1
	},
	tophat: {
		id: "tophat",
		name: "Top Hat",
		keywords: [
			"tophat",
			"magic",
			"gentleman",
			"classy",
			"circus"
		],
		skins: [
			{
				unified: "1f3a9",
				native: "🎩"
			}
		],
		version: 1
	},
	mortar_board: {
		id: "mortar_board",
		name: "Graduation Cap",
		keywords: [
			"mortar",
			"board",
			"school",
			"college",
			"degree",
			"university",
			"hat",
			"legal",
			"learn",
			"education"
		],
		skins: [
			{
				unified: "1f393",
				native: "🎓"
			}
		],
		version: 1
	},
	billed_cap: {
		id: "billed_cap",
		name: "Billed Cap",
		keywords: [
			"baseball"
		],
		skins: [
			{
				unified: "1f9e2",
				native: "🧢"
			}
		],
		version: 5
	},
	military_helmet: {
		id: "military_helmet",
		name: "Military Helmet",
		keywords: [
			"army",
			"protection"
		],
		skins: [
			{
				unified: "1fa96",
				native: "🪖"
			}
		],
		version: 13
	},
	helmet_with_white_cross: {
		id: "helmet_with_white_cross",
		name: "Rescue Worker’s Helmet",
		keywords: [
			"with",
			"white",
			"cross",
			"worker",
			"s",
			"construction",
			"build"
		],
		skins: [
			{
				unified: "26d1-fe0f",
				native: "⛑️"
			}
		],
		version: 1
	},
	prayer_beads: {
		id: "prayer_beads",
		name: "Prayer Beads",
		keywords: [
			"dhikr",
			"religious"
		],
		skins: [
			{
				unified: "1f4ff",
				native: "📿"
			}
		],
		version: 1
	},
	lipstick: {
		id: "lipstick",
		name: "Lipstick",
		keywords: [
			"female",
			"girl",
			"fashion",
			"woman"
		],
		skins: [
			{
				unified: "1f484",
				native: "💄"
			}
		],
		version: 1
	},
	ring: {
		id: "ring",
		name: "Ring",
		keywords: [
			"wedding",
			"propose",
			"marriage",
			"valentines",
			"diamond",
			"fashion",
			"jewelry",
			"gem",
			"engagement"
		],
		skins: [
			{
				unified: "1f48d",
				native: "💍"
			}
		],
		version: 1
	},
	gem: {
		id: "gem",
		name: "Gem Stone",
		keywords: [
			"blue",
			"ruby",
			"diamond",
			"jewelry"
		],
		skins: [
			{
				unified: "1f48e",
				native: "💎"
			}
		],
		version: 1
	},
	mute: {
		id: "mute",
		name: "Muted Speaker",
		keywords: [
			"mute",
			"sound",
			"volume",
			"silence",
			"quiet"
		],
		skins: [
			{
				unified: "1f507",
				native: "🔇"
			}
		],
		version: 1
	},
	speaker: {
		id: "speaker",
		name: "Speaker",
		keywords: [
			"low",
			"volume",
			"sound",
			"silence",
			"broadcast"
		],
		skins: [
			{
				unified: "1f508",
				native: "🔈"
			}
		],
		version: 1
	},
	sound: {
		id: "sound",
		name: "Speaker Medium Volume",
		keywords: [
			"sound",
			"broadcast"
		],
		skins: [
			{
				unified: "1f509",
				native: "🔉"
			}
		],
		version: 1
	},
	loud_sound: {
		id: "loud_sound",
		name: "Speaker High Volume",
		keywords: [
			"loud",
			"sound",
			"noise",
			"noisy",
			"broadcast"
		],
		skins: [
			{
				unified: "1f50a",
				native: "🔊"
			}
		],
		version: 1
	},
	loudspeaker: {
		id: "loudspeaker",
		name: "Loudspeaker",
		keywords: [
			"volume",
			"sound"
		],
		skins: [
			{
				unified: "1f4e2",
				native: "📢"
			}
		],
		version: 1
	},
	mega: {
		id: "mega",
		name: "Megaphone",
		keywords: [
			"mega",
			"sound",
			"speaker",
			"volume"
		],
		skins: [
			{
				unified: "1f4e3",
				native: "📣"
			}
		],
		version: 1
	},
	postal_horn: {
		id: "postal_horn",
		name: "Postal Horn",
		keywords: [
			"instrument",
			"music"
		],
		skins: [
			{
				unified: "1f4ef",
				native: "📯"
			}
		],
		version: 1
	},
	bell: {
		id: "bell",
		name: "Bell",
		keywords: [
			"sound",
			"notification",
			"christmas",
			"xmas",
			"chime"
		],
		skins: [
			{
				unified: "1f514",
				native: "🔔"
			}
		],
		version: 1
	},
	no_bell: {
		id: "no_bell",
		name: "Bell with Slash",
		keywords: [
			"no",
			"sound",
			"volume",
			"mute",
			"quiet",
			"silent"
		],
		skins: [
			{
				unified: "1f515",
				native: "🔕"
			}
		],
		version: 1
	},
	musical_score: {
		id: "musical_score",
		name: "Musical Score",
		keywords: [
			"treble",
			"clef",
			"compose"
		],
		skins: [
			{
				unified: "1f3bc",
				native: "🎼"
			}
		],
		version: 1
	},
	musical_note: {
		id: "musical_note",
		name: "Musical Note",
		keywords: [
			"score",
			"tone",
			"sound"
		],
		skins: [
			{
				unified: "1f3b5",
				native: "🎵"
			}
		],
		version: 1
	},
	notes: {
		id: "notes",
		name: "Musical Notes",
		keywords: [
			"music",
			"score"
		],
		skins: [
			{
				unified: "1f3b6",
				native: "🎶"
			}
		],
		version: 1
	},
	studio_microphone: {
		id: "studio_microphone",
		name: "Studio Microphone",
		keywords: [
			"sing",
			"recording",
			"artist",
			"talkshow"
		],
		skins: [
			{
				unified: "1f399-fe0f",
				native: "🎙️"
			}
		],
		version: 1
	},
	level_slider: {
		id: "level_slider",
		name: "Level Slider",
		keywords: [
			"scale"
		],
		skins: [
			{
				unified: "1f39a-fe0f",
				native: "🎚️"
			}
		],
		version: 1
	},
	control_knobs: {
		id: "control_knobs",
		name: "Control Knobs",
		keywords: [
			"dial"
		],
		skins: [
			{
				unified: "1f39b-fe0f",
				native: "🎛️"
			}
		],
		version: 1
	},
	microphone: {
		id: "microphone",
		name: "Microphone",
		keywords: [
			"sound",
			"music",
			"PA",
			"sing",
			"talkshow"
		],
		skins: [
			{
				unified: "1f3a4",
				native: "🎤"
			}
		],
		version: 1
	},
	headphones: {
		id: "headphones",
		name: "Headphone",
		keywords: [
			"headphones",
			"music",
			"score",
			"gadgets"
		],
		skins: [
			{
				unified: "1f3a7",
				native: "🎧"
			}
		],
		version: 1
	},
	radio: {
		id: "radio",
		name: "Radio",
		keywords: [
			"communication",
			"music",
			"podcast",
			"program"
		],
		skins: [
			{
				unified: "1f4fb",
				native: "📻"
			}
		],
		version: 1
	},
	saxophone: {
		id: "saxophone",
		name: "Saxophone",
		keywords: [
			"music",
			"instrument",
			"jazz",
			"blues"
		],
		skins: [
			{
				unified: "1f3b7",
				native: "🎷"
			}
		],
		version: 1
	},
	accordion: {
		id: "accordion",
		name: "Accordion",
		keywords: [
			"music"
		],
		skins: [
			{
				unified: "1fa97",
				native: "🪗"
			}
		],
		version: 13
	},
	guitar: {
		id: "guitar",
		name: "Guitar",
		keywords: [
			"music",
			"instrument"
		],
		skins: [
			{
				unified: "1f3b8",
				native: "🎸"
			}
		],
		version: 1
	},
	musical_keyboard: {
		id: "musical_keyboard",
		name: "Musical Keyboard",
		keywords: [
			"piano",
			"instrument",
			"compose"
		],
		skins: [
			{
				unified: "1f3b9",
				native: "🎹"
			}
		],
		version: 1
	},
	trumpet: {
		id: "trumpet",
		name: "Trumpet",
		keywords: [
			"music",
			"brass"
		],
		skins: [
			{
				unified: "1f3ba",
				native: "🎺"
			}
		],
		version: 1
	},
	violin: {
		id: "violin",
		name: "Violin",
		keywords: [
			"music",
			"instrument",
			"orchestra",
			"symphony"
		],
		skins: [
			{
				unified: "1f3bb",
				native: "🎻"
			}
		],
		version: 1
	},
	banjo: {
		id: "banjo",
		name: "Banjo",
		keywords: [
			"music",
			"instructment"
		],
		skins: [
			{
				unified: "1fa95",
				native: "🪕"
			}
		],
		version: 12
	},
	drum_with_drumsticks: {
		id: "drum_with_drumsticks",
		name: "Drum",
		keywords: [
			"with",
			"drumsticks",
			"music",
			"instrument",
			"snare"
		],
		skins: [
			{
				unified: "1f941",
				native: "🥁"
			}
		],
		version: 3
	},
	long_drum: {
		id: "long_drum",
		name: "Long Drum",
		keywords: [
			"music"
		],
		skins: [
			{
				unified: "1fa98",
				native: "🪘"
			}
		],
		version: 13
	},
	maracas: {
		id: "maracas",
		name: "Maracas",
		keywords: [
			"music",
			"instrument",
			"percussion"
		],
		skins: [
			{
				unified: "1fa87",
				native: "🪇"
			}
		],
		version: 15
	},
	flute: {
		id: "flute",
		name: "Flute",
		keywords: [
			"bamboo",
			"music",
			"instrument",
			"pied",
			"piper"
		],
		skins: [
			{
				unified: "1fa88",
				native: "🪈"
			}
		],
		version: 15
	},
	iphone: {
		id: "iphone",
		name: "Mobile Phone",
		keywords: [
			"iphone",
			"technology",
			"apple",
			"gadgets",
			"dial"
		],
		skins: [
			{
				unified: "1f4f1",
				native: "📱"
			}
		],
		version: 1
	},
	calling: {
		id: "calling",
		name: "Mobile Phone with Arrow",
		keywords: [
			"calling",
			"iphone",
			"incoming"
		],
		skins: [
			{
				unified: "1f4f2",
				native: "📲"
			}
		],
		version: 1
	},
	phone: {
		id: "phone",
		name: "Telephone",
		keywords: [
			"phone",
			"technology",
			"communication",
			"dial"
		],
		skins: [
			{
				unified: "260e-fe0f",
				native: "☎️"
			}
		],
		version: 1
	},
	telephone_receiver: {
		id: "telephone_receiver",
		name: "Telephone Receiver",
		keywords: [
			"technology",
			"communication",
			"dial"
		],
		skins: [
			{
				unified: "1f4de",
				native: "📞"
			}
		],
		version: 1
	},
	pager: {
		id: "pager",
		name: "Pager",
		keywords: [
			"bbcall",
			"oldschool",
			"90s"
		],
		skins: [
			{
				unified: "1f4df",
				native: "📟"
			}
		],
		version: 1
	},
	fax: {
		id: "fax",
		name: "Fax Machine",
		keywords: [
			"communication",
			"technology"
		],
		skins: [
			{
				unified: "1f4e0",
				native: "📠"
			}
		],
		version: 1
	},
	battery: {
		id: "battery",
		name: "Battery",
		keywords: [
			"power",
			"energy",
			"sustain"
		],
		skins: [
			{
				unified: "1f50b",
				native: "🔋"
			}
		],
		version: 1
	},
	low_battery: {
		id: "low_battery",
		name: "Low Battery",
		keywords: [
			"drained",
			"dead"
		],
		skins: [
			{
				unified: "1faab",
				native: "🪫"
			}
		],
		version: 14
	},
	electric_plug: {
		id: "electric_plug",
		name: "Electric Plug",
		keywords: [
			"charger",
			"power"
		],
		skins: [
			{
				unified: "1f50c",
				native: "🔌"
			}
		],
		version: 1
	},
	computer: {
		id: "computer",
		name: "Laptop",
		keywords: [
			"computer",
			"technology",
			"screen",
			"display",
			"monitor"
		],
		skins: [
			{
				unified: "1f4bb",
				native: "💻"
			}
		],
		version: 1
	},
	desktop_computer: {
		id: "desktop_computer",
		name: "Desktop Computer",
		keywords: [
			"technology",
			"computing",
			"screen"
		],
		skins: [
			{
				unified: "1f5a5-fe0f",
				native: "🖥️"
			}
		],
		version: 1
	},
	printer: {
		id: "printer",
		name: "Printer",
		keywords: [
			"paper",
			"ink"
		],
		skins: [
			{
				unified: "1f5a8-fe0f",
				native: "🖨️"
			}
		],
		version: 1
	},
	keyboard: {
		id: "keyboard",
		name: "Keyboard",
		keywords: [
			"technology",
			"computer",
			"type",
			"input",
			"text"
		],
		skins: [
			{
				unified: "2328-fe0f",
				native: "⌨️"
			}
		],
		version: 1
	},
	three_button_mouse: {
		id: "three_button_mouse",
		name: "Computer Mouse",
		keywords: [
			"three",
			"button",
			"click"
		],
		skins: [
			{
				unified: "1f5b1-fe0f",
				native: "🖱️"
			}
		],
		version: 1
	},
	trackball: {
		id: "trackball",
		name: "Trackball",
		keywords: [
			"technology",
			"trackpad"
		],
		skins: [
			{
				unified: "1f5b2-fe0f",
				native: "🖲️"
			}
		],
		version: 1
	},
	minidisc: {
		id: "minidisc",
		name: "Minidisc",
		keywords: [
			"computer",
			"disk",
			"technology",
			"record",
			"data",
			"90s"
		],
		skins: [
			{
				unified: "1f4bd",
				native: "💽"
			}
		],
		version: 1
	},
	floppy_disk: {
		id: "floppy_disk",
		name: "Floppy Disk",
		keywords: [
			"oldschool",
			"technology",
			"save",
			"90s",
			"80s"
		],
		skins: [
			{
				unified: "1f4be",
				native: "💾"
			}
		],
		version: 1
	},
	cd: {
		id: "cd",
		name: "Optical Disc",
		keywords: [
			"cd",
			"disk",
			"technology",
			"dvd",
			"90s"
		],
		skins: [
			{
				unified: "1f4bf",
				native: "💿"
			}
		],
		version: 1
	},
	dvd: {
		id: "dvd",
		name: "Dvd",
		keywords: [
			"cd",
			"disk",
			"disc"
		],
		skins: [
			{
				unified: "1f4c0",
				native: "📀"
			}
		],
		version: 1
	},
	abacus: {
		id: "abacus",
		name: "Abacus",
		keywords: [
			"calculation"
		],
		skins: [
			{
				unified: "1f9ee",
				native: "🧮"
			}
		],
		version: 11
	},
	movie_camera: {
		id: "movie_camera",
		name: "Movie Camera",
		keywords: [
			"film",
			"record"
		],
		skins: [
			{
				unified: "1f3a5",
				native: "🎥"
			}
		],
		version: 1
	},
	film_frames: {
		id: "film_frames",
		name: "Film Frames",
		keywords: [
			"movie"
		],
		skins: [
			{
				unified: "1f39e-fe0f",
				native: "🎞️"
			}
		],
		version: 1
	},
	film_projector: {
		id: "film_projector",
		name: "Film Projector",
		keywords: [
			"video",
			"tape",
			"record",
			"movie"
		],
		skins: [
			{
				unified: "1f4fd-fe0f",
				native: "📽️"
			}
		],
		version: 1
	},
	clapper: {
		id: "clapper",
		name: "Clapper Board",
		keywords: [
			"movie",
			"film",
			"record"
		],
		skins: [
			{
				unified: "1f3ac",
				native: "🎬"
			}
		],
		version: 1
	},
	tv: {
		id: "tv",
		name: "Television",
		keywords: [
			"tv",
			"technology",
			"program",
			"oldschool",
			"show"
		],
		skins: [
			{
				unified: "1f4fa",
				native: "📺"
			}
		],
		version: 1
	},
	camera: {
		id: "camera",
		name: "Camera",
		keywords: [
			"gadgets",
			"photography"
		],
		skins: [
			{
				unified: "1f4f7",
				native: "📷"
			}
		],
		version: 1
	},
	camera_with_flash: {
		id: "camera_with_flash",
		name: "Camera with Flash",
		keywords: [
			"photography",
			"gadgets"
		],
		skins: [
			{
				unified: "1f4f8",
				native: "📸"
			}
		],
		version: 1
	},
	video_camera: {
		id: "video_camera",
		name: "Video Camera",
		keywords: [
			"film",
			"record"
		],
		skins: [
			{
				unified: "1f4f9",
				native: "📹"
			}
		],
		version: 1
	},
	vhs: {
		id: "vhs",
		name: "Videocassette",
		keywords: [
			"vhs",
			"record",
			"video",
			"oldschool",
			"90s",
			"80s"
		],
		skins: [
			{
				unified: "1f4fc",
				native: "📼"
			}
		],
		version: 1
	},
	mag: {
		id: "mag",
		name: "Magnifying Glass Tilted Left",
		keywords: [
			"mag",
			"search",
			"zoom",
			"find",
			"detective"
		],
		skins: [
			{
				unified: "1f50d",
				native: "🔍"
			}
		],
		version: 1
	},
	mag_right: {
		id: "mag_right",
		name: "Magnifying Glass Tilted Right",
		keywords: [
			"mag",
			"search",
			"zoom",
			"find",
			"detective"
		],
		skins: [
			{
				unified: "1f50e",
				native: "🔎"
			}
		],
		version: 1
	},
	candle: {
		id: "candle",
		name: "Candle",
		keywords: [
			"fire",
			"wax"
		],
		skins: [
			{
				unified: "1f56f-fe0f",
				native: "🕯️"
			}
		],
		version: 1
	},
	bulb: {
		id: "bulb",
		name: "Light Bulb",
		keywords: [
			"electricity",
			"idea"
		],
		skins: [
			{
				unified: "1f4a1",
				native: "💡"
			}
		],
		version: 1
	},
	flashlight: {
		id: "flashlight",
		name: "Flashlight",
		keywords: [
			"dark",
			"camping",
			"sight",
			"night"
		],
		skins: [
			{
				unified: "1f526",
				native: "🔦"
			}
		],
		version: 1
	},
	izakaya_lantern: {
		id: "izakaya_lantern",
		name: "Izakaya Lantern",
		keywords: [
			"red",
			"paper",
			"light",
			"halloween",
			"spooky"
		],
		skins: [
			{
				unified: "1f3ee",
				native: "🏮"
			}
		],
		version: 1
	},
	diya_lamp: {
		id: "diya_lamp",
		name: "Diya Lamp",
		keywords: [
			"lighting"
		],
		skins: [
			{
				unified: "1fa94",
				native: "🪔"
			}
		],
		version: 12
	},
	notebook_with_decorative_cover: {
		id: "notebook_with_decorative_cover",
		name: "Notebook with Decorative Cover",
		keywords: [
			"classroom",
			"notes",
			"record",
			"paper",
			"study"
		],
		skins: [
			{
				unified: "1f4d4",
				native: "📔"
			}
		],
		version: 1
	},
	closed_book: {
		id: "closed_book",
		name: "Closed Book",
		keywords: [
			"read",
			"library",
			"knowledge",
			"textbook",
			"learn"
		],
		skins: [
			{
				unified: "1f4d5",
				native: "📕"
			}
		],
		version: 1
	},
	book: {
		id: "book",
		name: "Open Book",
		keywords: [
			"read",
			"library",
			"knowledge",
			"literature",
			"learn",
			"study"
		],
		skins: [
			{
				unified: "1f4d6",
				native: "📖"
			}
		],
		version: 1
	},
	green_book: {
		id: "green_book",
		name: "Green Book",
		keywords: [
			"read",
			"library",
			"knowledge",
			"study"
		],
		skins: [
			{
				unified: "1f4d7",
				native: "📗"
			}
		],
		version: 1
	},
	blue_book: {
		id: "blue_book",
		name: "Blue Book",
		keywords: [
			"read",
			"library",
			"knowledge",
			"learn",
			"study"
		],
		skins: [
			{
				unified: "1f4d8",
				native: "📘"
			}
		],
		version: 1
	},
	orange_book: {
		id: "orange_book",
		name: "Orange Book",
		keywords: [
			"read",
			"library",
			"knowledge",
			"textbook",
			"study"
		],
		skins: [
			{
				unified: "1f4d9",
				native: "📙"
			}
		],
		version: 1
	},
	books: {
		id: "books",
		name: "Books",
		keywords: [
			"literature",
			"library",
			"study"
		],
		skins: [
			{
				unified: "1f4da",
				native: "📚"
			}
		],
		version: 1
	},
	notebook: {
		id: "notebook",
		name: "Notebook",
		keywords: [
			"stationery",
			"record",
			"notes",
			"paper",
			"study"
		],
		skins: [
			{
				unified: "1f4d3",
				native: "📓"
			}
		],
		version: 1
	},
	ledger: {
		id: "ledger",
		name: "Ledger",
		keywords: [
			"notes",
			"paper"
		],
		skins: [
			{
				unified: "1f4d2",
				native: "📒"
			}
		],
		version: 1
	},
	page_with_curl: {
		id: "page_with_curl",
		name: "Page with Curl",
		keywords: [
			"documents",
			"office",
			"paper"
		],
		skins: [
			{
				unified: "1f4c3",
				native: "📃"
			}
		],
		version: 1
	},
	scroll: {
		id: "scroll",
		name: "Scroll",
		keywords: [
			"documents",
			"ancient",
			"history",
			"paper"
		],
		skins: [
			{
				unified: "1f4dc",
				native: "📜"
			}
		],
		version: 1
	},
	page_facing_up: {
		id: "page_facing_up",
		name: "Page Facing Up",
		keywords: [
			"documents",
			"office",
			"paper",
			"information"
		],
		skins: [
			{
				unified: "1f4c4",
				native: "📄"
			}
		],
		version: 1
	},
	newspaper: {
		id: "newspaper",
		name: "Newspaper",
		keywords: [
			"press",
			"headline"
		],
		skins: [
			{
				unified: "1f4f0",
				native: "📰"
			}
		],
		version: 1
	},
	rolled_up_newspaper: {
		id: "rolled_up_newspaper",
		name: "Rolled-Up Newspaper",
		keywords: [
			"rolled",
			"up",
			"press",
			"headline"
		],
		skins: [
			{
				unified: "1f5de-fe0f",
				native: "🗞️"
			}
		],
		version: 1
	},
	bookmark_tabs: {
		id: "bookmark_tabs",
		name: "Bookmark Tabs",
		keywords: [
			"favorite",
			"save",
			"order",
			"tidy"
		],
		skins: [
			{
				unified: "1f4d1",
				native: "📑"
			}
		],
		version: 1
	},
	bookmark: {
		id: "bookmark",
		name: "Bookmark",
		keywords: [
			"favorite",
			"label",
			"save"
		],
		skins: [
			{
				unified: "1f516",
				native: "🔖"
			}
		],
		version: 1
	},
	label: {
		id: "label",
		name: "Label",
		keywords: [
			"sale",
			"tag"
		],
		skins: [
			{
				unified: "1f3f7-fe0f",
				native: "🏷️"
			}
		],
		version: 1
	},
	moneybag: {
		id: "moneybag",
		name: "Money Bag",
		keywords: [
			"moneybag",
			"dollar",
			"payment",
			"coins",
			"sale"
		],
		skins: [
			{
				unified: "1f4b0",
				native: "💰"
			}
		],
		version: 1
	},
	coin: {
		id: "coin",
		name: "Coin",
		keywords: [
			"money",
			"currency"
		],
		skins: [
			{
				unified: "1fa99",
				native: "🪙"
			}
		],
		version: 13
	},
	yen: {
		id: "yen",
		name: "Yen Banknote",
		keywords: [
			"money",
			"sales",
			"japanese",
			"dollar",
			"currency"
		],
		skins: [
			{
				unified: "1f4b4",
				native: "💴"
			}
		],
		version: 1
	},
	dollar: {
		id: "dollar",
		name: "Dollar Banknote",
		keywords: [
			"money",
			"sales",
			"bill",
			"currency"
		],
		skins: [
			{
				unified: "1f4b5",
				native: "💵"
			}
		],
		version: 1
	},
	euro: {
		id: "euro",
		name: "Euro Banknote",
		keywords: [
			"money",
			"sales",
			"dollar",
			"currency"
		],
		skins: [
			{
				unified: "1f4b6",
				native: "💶"
			}
		],
		version: 1
	},
	pound: {
		id: "pound",
		name: "Pound Banknote",
		keywords: [
			"british",
			"sterling",
			"money",
			"sales",
			"bills",
			"uk",
			"england",
			"currency"
		],
		skins: [
			{
				unified: "1f4b7",
				native: "💷"
			}
		],
		version: 1
	},
	money_with_wings: {
		id: "money_with_wings",
		name: "Money with Wings",
		keywords: [
			"dollar",
			"bills",
			"payment",
			"sale"
		],
		skins: [
			{
				unified: "1f4b8",
				native: "💸"
			}
		],
		version: 1
	},
	credit_card: {
		id: "credit_card",
		name: "Credit Card",
		keywords: [
			"money",
			"sales",
			"dollar",
			"bill",
			"payment",
			"shopping"
		],
		skins: [
			{
				unified: "1f4b3",
				native: "💳"
			}
		],
		version: 1
	},
	receipt: {
		id: "receipt",
		name: "Receipt",
		keywords: [
			"accounting",
			"expenses"
		],
		skins: [
			{
				unified: "1f9fe",
				native: "🧾"
			}
		],
		version: 11
	},
	chart: {
		id: "chart",
		name: "Chart Increasing with Yen",
		keywords: [
			"green",
			"square",
			"graph",
			"presentation",
			"stats"
		],
		skins: [
			{
				unified: "1f4b9",
				native: "💹"
			}
		],
		version: 1
	},
	email: {
		id: "email",
		name: "Envelope",
		keywords: [
			"email",
			"letter",
			"postal",
			"inbox",
			"communication"
		],
		skins: [
			{
				unified: "2709-fe0f",
				native: "✉️"
			}
		],
		version: 1
	},
	"e-mail": {
		id: "e-mail",
		name: "E-Mail",
		keywords: [
			"e",
			"mail",
			"communication",
			"inbox"
		],
		skins: [
			{
				unified: "1f4e7",
				native: "📧"
			}
		],
		version: 1
	},
	incoming_envelope: {
		id: "incoming_envelope",
		name: "Incoming Envelope",
		keywords: [
			"email",
			"inbox"
		],
		skins: [
			{
				unified: "1f4e8",
				native: "📨"
			}
		],
		version: 1
	},
	envelope_with_arrow: {
		id: "envelope_with_arrow",
		name: "Envelope with Arrow",
		keywords: [
			"email",
			"communication"
		],
		skins: [
			{
				unified: "1f4e9",
				native: "📩"
			}
		],
		version: 1
	},
	outbox_tray: {
		id: "outbox_tray",
		name: "Outbox Tray",
		keywords: [
			"inbox",
			"email"
		],
		skins: [
			{
				unified: "1f4e4",
				native: "📤"
			}
		],
		version: 1
	},
	inbox_tray: {
		id: "inbox_tray",
		name: "Inbox Tray",
		keywords: [
			"email",
			"documents"
		],
		skins: [
			{
				unified: "1f4e5",
				native: "📥"
			}
		],
		version: 1
	},
	"package": {
		id: "package",
		name: "Package",
		keywords: [
			"mail",
			"gift",
			"cardboard",
			"box",
			"moving"
		],
		skins: [
			{
				unified: "1f4e6",
				native: "📦"
			}
		],
		version: 1
	},
	mailbox: {
		id: "mailbox",
		name: "Closed Mailbox with Raised Flag",
		keywords: [
			"email",
			"inbox",
			"communication"
		],
		skins: [
			{
				unified: "1f4eb",
				native: "📫"
			}
		],
		version: 1
	},
	mailbox_closed: {
		id: "mailbox_closed",
		name: "Closed Mailbox with Lowered Flag",
		keywords: [
			"email",
			"communication",
			"inbox"
		],
		skins: [
			{
				unified: "1f4ea",
				native: "📪"
			}
		],
		version: 1
	},
	mailbox_with_mail: {
		id: "mailbox_with_mail",
		name: "Open Mailbox with Raised Flag",
		keywords: [
			"mail",
			"email",
			"inbox",
			"communication"
		],
		skins: [
			{
				unified: "1f4ec",
				native: "📬"
			}
		],
		version: 1
	},
	mailbox_with_no_mail: {
		id: "mailbox_with_no_mail",
		name: "Open Mailbox with Lowered Flag",
		keywords: [
			"no",
			"mail",
			"email",
			"inbox"
		],
		skins: [
			{
				unified: "1f4ed",
				native: "📭"
			}
		],
		version: 1
	},
	postbox: {
		id: "postbox",
		name: "Postbox",
		keywords: [
			"email",
			"letter",
			"envelope"
		],
		skins: [
			{
				unified: "1f4ee",
				native: "📮"
			}
		],
		version: 1
	},
	ballot_box_with_ballot: {
		id: "ballot_box_with_ballot",
		name: "Ballot Box with Ballot",
		keywords: [
			"election",
			"vote"
		],
		skins: [
			{
				unified: "1f5f3-fe0f",
				native: "🗳️"
			}
		],
		version: 1
	},
	pencil2: {
		id: "pencil2",
		name: "Pencil",
		keywords: [
			"pencil2",
			"stationery",
			"write",
			"paper",
			"writing",
			"school",
			"study"
		],
		skins: [
			{
				unified: "270f-fe0f",
				native: "✏️"
			}
		],
		version: 1
	},
	black_nib: {
		id: "black_nib",
		name: "Black Nib",
		keywords: [
			"pen",
			"stationery",
			"writing",
			"write"
		],
		skins: [
			{
				unified: "2712-fe0f",
				native: "✒️"
			}
		],
		version: 1
	},
	lower_left_fountain_pen: {
		id: "lower_left_fountain_pen",
		name: "Fountain Pen",
		keywords: [
			"lower",
			"left",
			"stationery",
			"writing",
			"write"
		],
		skins: [
			{
				unified: "1f58b-fe0f",
				native: "🖋️"
			}
		],
		version: 1
	},
	lower_left_ballpoint_pen: {
		id: "lower_left_ballpoint_pen",
		name: "Pen",
		keywords: [
			"lower",
			"left",
			"ballpoint",
			"stationery",
			"writing",
			"write"
		],
		skins: [
			{
				unified: "1f58a-fe0f",
				native: "🖊️"
			}
		],
		version: 1
	},
	lower_left_paintbrush: {
		id: "lower_left_paintbrush",
		name: "Paintbrush",
		keywords: [
			"lower",
			"left",
			"drawing",
			"creativity",
			"art"
		],
		skins: [
			{
				unified: "1f58c-fe0f",
				native: "🖌️"
			}
		],
		version: 1
	},
	lower_left_crayon: {
		id: "lower_left_crayon",
		name: "Crayon",
		keywords: [
			"lower",
			"left",
			"drawing",
			"creativity"
		],
		skins: [
			{
				unified: "1f58d-fe0f",
				native: "🖍️"
			}
		],
		version: 1
	},
	memo: {
		id: "memo",
		name: "Memo",
		keywords: [
			"pencil",
			"write",
			"documents",
			"stationery",
			"paper",
			"writing",
			"legal",
			"exam",
			"quiz",
			"test",
			"study",
			"compose"
		],
		skins: [
			{
				unified: "1f4dd",
				native: "📝"
			}
		],
		version: 1
	},
	briefcase: {
		id: "briefcase",
		name: "Briefcase",
		keywords: [
			"business",
			"documents",
			"work",
			"law",
			"legal",
			"job",
			"career"
		],
		skins: [
			{
				unified: "1f4bc",
				native: "💼"
			}
		],
		version: 1
	},
	file_folder: {
		id: "file_folder",
		name: "File Folder",
		keywords: [
			"documents",
			"business",
			"office"
		],
		skins: [
			{
				unified: "1f4c1",
				native: "📁"
			}
		],
		version: 1
	},
	open_file_folder: {
		id: "open_file_folder",
		name: "Open File Folder",
		keywords: [
			"documents",
			"load"
		],
		skins: [
			{
				unified: "1f4c2",
				native: "📂"
			}
		],
		version: 1
	},
	card_index_dividers: {
		id: "card_index_dividers",
		name: "Card Index Dividers",
		keywords: [
			"organizing",
			"business",
			"stationery"
		],
		skins: [
			{
				unified: "1f5c2-fe0f",
				native: "🗂️"
			}
		],
		version: 1
	},
	date: {
		id: "date",
		name: "Calendar",
		keywords: [
			"date",
			"schedule"
		],
		skins: [
			{
				unified: "1f4c5",
				native: "📅"
			}
		],
		version: 1
	},
	calendar: {
		id: "calendar",
		name: "Tear-off Calendar",
		keywords: [
			"tear",
			"off",
			"schedule",
			"date",
			"planning"
		],
		skins: [
			{
				unified: "1f4c6",
				native: "📆"
			}
		],
		version: 1
	},
	spiral_note_pad: {
		id: "spiral_note_pad",
		name: "Spiral Notepad",
		keywords: [
			"note",
			"pad",
			"memo",
			"stationery"
		],
		skins: [
			{
				unified: "1f5d2-fe0f",
				native: "🗒️"
			}
		],
		version: 1
	},
	spiral_calendar_pad: {
		id: "spiral_calendar_pad",
		name: "Spiral Calendar",
		keywords: [
			"pad",
			"date",
			"schedule",
			"planning"
		],
		skins: [
			{
				unified: "1f5d3-fe0f",
				native: "🗓️"
			}
		],
		version: 1
	},
	card_index: {
		id: "card_index",
		name: "Card Index",
		keywords: [
			"business",
			"stationery"
		],
		skins: [
			{
				unified: "1f4c7",
				native: "📇"
			}
		],
		version: 1
	},
	chart_with_upwards_trend: {
		id: "chart_with_upwards_trend",
		name: "Chart Increasing",
		keywords: [
			"with",
			"upwards",
			"trend",
			"graph",
			"presentation",
			"stats",
			"recovery",
			"business",
			"economics",
			"money",
			"sales",
			"good",
			"success"
		],
		skins: [
			{
				unified: "1f4c8",
				native: "📈"
			}
		],
		version: 1
	},
	chart_with_downwards_trend: {
		id: "chart_with_downwards_trend",
		name: "Chart Decreasing",
		keywords: [
			"with",
			"downwards",
			"trend",
			"graph",
			"presentation",
			"stats",
			"recession",
			"business",
			"economics",
			"money",
			"sales",
			"bad",
			"failure"
		],
		skins: [
			{
				unified: "1f4c9",
				native: "📉"
			}
		],
		version: 1
	},
	bar_chart: {
		id: "bar_chart",
		name: "Bar Chart",
		keywords: [
			"graph",
			"presentation",
			"stats"
		],
		skins: [
			{
				unified: "1f4ca",
				native: "📊"
			}
		],
		version: 1
	},
	clipboard: {
		id: "clipboard",
		name: "Clipboard",
		keywords: [
			"stationery",
			"documents"
		],
		skins: [
			{
				unified: "1f4cb",
				native: "📋"
			}
		],
		version: 1
	},
	pushpin: {
		id: "pushpin",
		name: "Pushpin",
		keywords: [
			"stationery",
			"mark",
			"here"
		],
		skins: [
			{
				unified: "1f4cc",
				native: "📌"
			}
		],
		version: 1
	},
	round_pushpin: {
		id: "round_pushpin",
		name: "Round Pushpin",
		keywords: [
			"stationery",
			"location",
			"map",
			"here"
		],
		skins: [
			{
				unified: "1f4cd",
				native: "📍"
			}
		],
		version: 1
	},
	paperclip: {
		id: "paperclip",
		name: "Paperclip",
		keywords: [
			"documents",
			"stationery"
		],
		skins: [
			{
				unified: "1f4ce",
				native: "📎"
			}
		],
		version: 1
	},
	linked_paperclips: {
		id: "linked_paperclips",
		name: "Linked Paperclips",
		keywords: [
			"documents",
			"stationery"
		],
		skins: [
			{
				unified: "1f587-fe0f",
				native: "🖇️"
			}
		],
		version: 1
	},
	straight_ruler: {
		id: "straight_ruler",
		name: "Straight Ruler",
		keywords: [
			"stationery",
			"calculate",
			"length",
			"math",
			"school",
			"drawing",
			"architect",
			"sketch"
		],
		skins: [
			{
				unified: "1f4cf",
				native: "📏"
			}
		],
		version: 1
	},
	triangular_ruler: {
		id: "triangular_ruler",
		name: "Triangular Ruler",
		keywords: [
			"stationery",
			"math",
			"architect",
			"sketch"
		],
		skins: [
			{
				unified: "1f4d0",
				native: "📐"
			}
		],
		version: 1
	},
	scissors: {
		id: "scissors",
		name: "Scissors",
		keywords: [
			"stationery",
			"cut"
		],
		skins: [
			{
				unified: "2702-fe0f",
				native: "✂️"
			}
		],
		version: 1
	},
	card_file_box: {
		id: "card_file_box",
		name: "Card File Box",
		keywords: [
			"business",
			"stationery"
		],
		skins: [
			{
				unified: "1f5c3-fe0f",
				native: "🗃️"
			}
		],
		version: 1
	},
	file_cabinet: {
		id: "file_cabinet",
		name: "File Cabinet",
		keywords: [
			"filing",
			"organizing"
		],
		skins: [
			{
				unified: "1f5c4-fe0f",
				native: "🗄️"
			}
		],
		version: 1
	},
	wastebasket: {
		id: "wastebasket",
		name: "Wastebasket",
		keywords: [
			"bin",
			"trash",
			"rubbish",
			"garbage",
			"toss"
		],
		skins: [
			{
				unified: "1f5d1-fe0f",
				native: "🗑️"
			}
		],
		version: 1
	},
	lock: {
		id: "lock",
		name: "Lock",
		keywords: [
			"locked",
			"security",
			"password",
			"padlock"
		],
		skins: [
			{
				unified: "1f512",
				native: "🔒"
			}
		],
		version: 1
	},
	unlock: {
		id: "unlock",
		name: "Unlocked",
		keywords: [
			"unlock",
			"privacy",
			"security"
		],
		skins: [
			{
				unified: "1f513",
				native: "🔓"
			}
		],
		version: 1
	},
	lock_with_ink_pen: {
		id: "lock_with_ink_pen",
		name: "Locked with Pen",
		keywords: [
			"lock",
			"ink",
			"security",
			"secret"
		],
		skins: [
			{
				unified: "1f50f",
				native: "🔏"
			}
		],
		version: 1
	},
	closed_lock_with_key: {
		id: "closed_lock_with_key",
		name: "Locked with Key",
		keywords: [
			"closed",
			"lock",
			"security",
			"privacy"
		],
		skins: [
			{
				unified: "1f510",
				native: "🔐"
			}
		],
		version: 1
	},
	key: {
		id: "key",
		name: "Key",
		keywords: [
			"lock",
			"door",
			"password"
		],
		skins: [
			{
				unified: "1f511",
				native: "🔑"
			}
		],
		version: 1
	},
	old_key: {
		id: "old_key",
		name: "Old Key",
		keywords: [
			"lock",
			"door",
			"password"
		],
		skins: [
			{
				unified: "1f5dd-fe0f",
				native: "🗝️"
			}
		],
		version: 1
	},
	hammer: {
		id: "hammer",
		name: "Hammer",
		keywords: [
			"tools",
			"build",
			"create"
		],
		skins: [
			{
				unified: "1f528",
				native: "🔨"
			}
		],
		version: 1
	},
	axe: {
		id: "axe",
		name: "Axe",
		keywords: [
			"tool",
			"chop",
			"cut"
		],
		skins: [
			{
				unified: "1fa93",
				native: "🪓"
			}
		],
		version: 12
	},
	pick: {
		id: "pick",
		name: "Pick",
		keywords: [
			"tools",
			"dig"
		],
		skins: [
			{
				unified: "26cf-fe0f",
				native: "⛏️"
			}
		],
		version: 1
	},
	hammer_and_pick: {
		id: "hammer_and_pick",
		name: "Hammer and Pick",
		keywords: [
			"tools",
			"build",
			"create"
		],
		skins: [
			{
				unified: "2692-fe0f",
				native: "⚒️"
			}
		],
		version: 1
	},
	hammer_and_wrench: {
		id: "hammer_and_wrench",
		name: "Hammer and Wrench",
		keywords: [
			"tools",
			"build",
			"create"
		],
		skins: [
			{
				unified: "1f6e0-fe0f",
				native: "🛠️"
			}
		],
		version: 1
	},
	dagger_knife: {
		id: "dagger_knife",
		name: "Dagger",
		keywords: [
			"knife",
			"weapon"
		],
		skins: [
			{
				unified: "1f5e1-fe0f",
				native: "🗡️"
			}
		],
		version: 1
	},
	crossed_swords: {
		id: "crossed_swords",
		name: "Crossed Swords",
		keywords: [
			"weapon"
		],
		skins: [
			{
				unified: "2694-fe0f",
				native: "⚔️"
			}
		],
		version: 1
	},
	bomb: {
		id: "bomb",
		name: "Bomb",
		keywords: [
			"boom",
			"explode",
			"explosion",
			"terrorism"
		],
		skins: [
			{
				unified: "1f4a3",
				native: "💣"
			}
		],
		version: 1
	},
	boomerang: {
		id: "boomerang",
		name: "Boomerang",
		keywords: [
			"weapon"
		],
		skins: [
			{
				unified: "1fa83",
				native: "🪃"
			}
		],
		version: 13
	},
	bow_and_arrow: {
		id: "bow_and_arrow",
		name: "Bow and Arrow",
		keywords: [
			"sports"
		],
		skins: [
			{
				unified: "1f3f9",
				native: "🏹"
			}
		],
		version: 1
	},
	shield: {
		id: "shield",
		name: "Shield",
		keywords: [
			"protection",
			"security"
		],
		skins: [
			{
				unified: "1f6e1-fe0f",
				native: "🛡️"
			}
		],
		version: 1
	},
	carpentry_saw: {
		id: "carpentry_saw",
		name: "Carpentry Saw",
		keywords: [
			"cut",
			"chop"
		],
		skins: [
			{
				unified: "1fa9a",
				native: "🪚"
			}
		],
		version: 13
	},
	wrench: {
		id: "wrench",
		name: "Wrench",
		keywords: [
			"tools",
			"diy",
			"ikea",
			"fix",
			"maintainer"
		],
		skins: [
			{
				unified: "1f527",
				native: "🔧"
			}
		],
		version: 1
	},
	screwdriver: {
		id: "screwdriver",
		name: "Screwdriver",
		keywords: [
			"tools"
		],
		skins: [
			{
				unified: "1fa9b",
				native: "🪛"
			}
		],
		version: 13
	},
	nut_and_bolt: {
		id: "nut_and_bolt",
		name: "Nut and Bolt",
		keywords: [
			"handy",
			"tools",
			"fix"
		],
		skins: [
			{
				unified: "1f529",
				native: "🔩"
			}
		],
		version: 1
	},
	gear: {
		id: "gear",
		name: "Gear",
		keywords: [
			"cog"
		],
		skins: [
			{
				unified: "2699-fe0f",
				native: "⚙️"
			}
		],
		version: 1
	},
	compression: {
		id: "compression",
		name: "Clamp",
		keywords: [
			"compression",
			"tool"
		],
		skins: [
			{
				unified: "1f5dc-fe0f",
				native: "🗜️"
			}
		],
		version: 1
	},
	scales: {
		id: "scales",
		name: "Balance Scale",
		keywords: [
			"scales",
			"law",
			"fairness",
			"weight"
		],
		skins: [
			{
				unified: "2696-fe0f",
				native: "⚖️"
			}
		],
		version: 1
	},
	probing_cane: {
		id: "probing_cane",
		name: "White Cane",
		keywords: [
			"probing",
			"accessibility"
		],
		skins: [
			{
				unified: "1f9af",
				native: "🦯"
			}
		],
		version: 12
	},
	link: {
		id: "link",
		name: "Link",
		keywords: [
			"rings",
			"url"
		],
		skins: [
			{
				unified: "1f517",
				native: "🔗"
			}
		],
		version: 1
	},
	chains: {
		id: "chains",
		name: "Chains",
		keywords: [
			"lock",
			"arrest"
		],
		skins: [
			{
				unified: "26d3-fe0f",
				native: "⛓️"
			}
		],
		version: 1
	},
	hook: {
		id: "hook",
		name: "Hook",
		keywords: [
			"tools"
		],
		skins: [
			{
				unified: "1fa9d",
				native: "🪝"
			}
		],
		version: 13
	},
	toolbox: {
		id: "toolbox",
		name: "Toolbox",
		keywords: [
			"tools",
			"diy",
			"fix",
			"maintainer",
			"mechanic"
		],
		skins: [
			{
				unified: "1f9f0",
				native: "🧰"
			}
		],
		version: 11
	},
	magnet: {
		id: "magnet",
		name: "Magnet",
		keywords: [
			"attraction",
			"magnetic"
		],
		skins: [
			{
				unified: "1f9f2",
				native: "🧲"
			}
		],
		version: 11
	},
	ladder: {
		id: "ladder",
		name: "Ladder",
		keywords: [
			"tools"
		],
		skins: [
			{
				unified: "1fa9c",
				native: "🪜"
			}
		],
		version: 13
	},
	alembic: {
		id: "alembic",
		name: "Alembic",
		keywords: [
			"distilling",
			"science",
			"experiment",
			"chemistry"
		],
		skins: [
			{
				unified: "2697-fe0f",
				native: "⚗️"
			}
		],
		version: 1
	},
	test_tube: {
		id: "test_tube",
		name: "Test Tube",
		keywords: [
			"chemistry",
			"experiment",
			"lab",
			"science"
		],
		skins: [
			{
				unified: "1f9ea",
				native: "🧪"
			}
		],
		version: 11
	},
	petri_dish: {
		id: "petri_dish",
		name: "Petri Dish",
		keywords: [
			"bacteria",
			"biology",
			"culture",
			"lab"
		],
		skins: [
			{
				unified: "1f9eb",
				native: "🧫"
			}
		],
		version: 11
	},
	dna: {
		id: "dna",
		name: "Dna",
		keywords: [
			"biologist",
			"genetics",
			"life"
		],
		skins: [
			{
				unified: "1f9ec",
				native: "🧬"
			}
		],
		version: 11
	},
	microscope: {
		id: "microscope",
		name: "Microscope",
		keywords: [
			"laboratory",
			"experiment",
			"zoomin",
			"science",
			"study"
		],
		skins: [
			{
				unified: "1f52c",
				native: "🔬"
			}
		],
		version: 1
	},
	telescope: {
		id: "telescope",
		name: "Telescope",
		keywords: [
			"stars",
			"space",
			"zoom",
			"science",
			"astronomy"
		],
		skins: [
			{
				unified: "1f52d",
				native: "🔭"
			}
		],
		version: 1
	},
	satellite_antenna: {
		id: "satellite_antenna",
		name: "Satellite Antenna",
		keywords: [
			"communication",
			"future",
			"radio",
			"space"
		],
		skins: [
			{
				unified: "1f4e1",
				native: "📡"
			}
		],
		version: 1
	},
	syringe: {
		id: "syringe",
		name: "Syringe",
		keywords: [
			"health",
			"hospital",
			"drugs",
			"blood",
			"medicine",
			"needle",
			"doctor",
			"nurse"
		],
		skins: [
			{
				unified: "1f489",
				native: "💉"
			}
		],
		version: 1
	},
	drop_of_blood: {
		id: "drop_of_blood",
		name: "Drop of Blood",
		keywords: [
			"period",
			"hurt",
			"harm",
			"wound"
		],
		skins: [
			{
				unified: "1fa78",
				native: "🩸"
			}
		],
		version: 12
	},
	pill: {
		id: "pill",
		name: "Pill",
		keywords: [
			"health",
			"medicine",
			"doctor",
			"pharmacy",
			"drug"
		],
		skins: [
			{
				unified: "1f48a",
				native: "💊"
			}
		],
		version: 1
	},
	adhesive_bandage: {
		id: "adhesive_bandage",
		name: "Adhesive Bandage",
		keywords: [
			"heal"
		],
		skins: [
			{
				unified: "1fa79",
				native: "🩹"
			}
		],
		version: 12
	},
	crutch: {
		id: "crutch",
		name: "Crutch",
		keywords: [
			"accessibility",
			"assist"
		],
		skins: [
			{
				unified: "1fa7c",
				native: "🩼"
			}
		],
		version: 14
	},
	stethoscope: {
		id: "stethoscope",
		name: "Stethoscope",
		keywords: [
			"health"
		],
		skins: [
			{
				unified: "1fa7a",
				native: "🩺"
			}
		],
		version: 12
	},
	"x-ray": {
		id: "x-ray",
		name: "X-Ray",
		keywords: [
			"x",
			"ray",
			"skeleton",
			"medicine"
		],
		skins: [
			{
				unified: "1fa7b",
				native: "🩻"
			}
		],
		version: 14
	},
	door: {
		id: "door",
		name: "Door",
		keywords: [
			"house",
			"entry",
			"exit"
		],
		skins: [
			{
				unified: "1f6aa",
				native: "🚪"
			}
		],
		version: 1
	},
	elevator: {
		id: "elevator",
		name: "Elevator",
		keywords: [
			"lift"
		],
		skins: [
			{
				unified: "1f6d7",
				native: "🛗"
			}
		],
		version: 13
	},
	mirror: {
		id: "mirror",
		name: "Mirror",
		keywords: [
			"reflection"
		],
		skins: [
			{
				unified: "1fa9e",
				native: "🪞"
			}
		],
		version: 13
	},
	window: {
		id: "window",
		name: "Window",
		keywords: [
			"scenery"
		],
		skins: [
			{
				unified: "1fa9f",
				native: "🪟"
			}
		],
		version: 13
	},
	bed: {
		id: "bed",
		name: "Bed",
		keywords: [
			"sleep",
			"rest"
		],
		skins: [
			{
				unified: "1f6cf-fe0f",
				native: "🛏️"
			}
		],
		version: 1
	},
	couch_and_lamp: {
		id: "couch_and_lamp",
		name: "Couch and Lamp",
		keywords: [
			"read",
			"chill"
		],
		skins: [
			{
				unified: "1f6cb-fe0f",
				native: "🛋️"
			}
		],
		version: 1
	},
	chair: {
		id: "chair",
		name: "Chair",
		keywords: [
			"sit",
			"furniture"
		],
		skins: [
			{
				unified: "1fa91",
				native: "🪑"
			}
		],
		version: 12
	},
	toilet: {
		id: "toilet",
		name: "Toilet",
		keywords: [
			"restroom",
			"wc",
			"washroom",
			"bathroom",
			"potty"
		],
		skins: [
			{
				unified: "1f6bd",
				native: "🚽"
			}
		],
		version: 1
	},
	plunger: {
		id: "plunger",
		name: "Plunger",
		keywords: [
			"toilet"
		],
		skins: [
			{
				unified: "1faa0",
				native: "🪠"
			}
		],
		version: 13
	},
	shower: {
		id: "shower",
		name: "Shower",
		keywords: [
			"clean",
			"water",
			"bathroom"
		],
		skins: [
			{
				unified: "1f6bf",
				native: "🚿"
			}
		],
		version: 1
	},
	bathtub: {
		id: "bathtub",
		name: "Bathtub",
		keywords: [
			"clean",
			"shower",
			"bathroom"
		],
		skins: [
			{
				unified: "1f6c1",
				native: "🛁"
			}
		],
		version: 1
	},
	mouse_trap: {
		id: "mouse_trap",
		name: "Mouse Trap",
		keywords: [
			"cheese"
		],
		skins: [
			{
				unified: "1faa4",
				native: "🪤"
			}
		],
		version: 13
	},
	razor: {
		id: "razor",
		name: "Razor",
		keywords: [
			"cut"
		],
		skins: [
			{
				unified: "1fa92",
				native: "🪒"
			}
		],
		version: 12
	},
	lotion_bottle: {
		id: "lotion_bottle",
		name: "Lotion Bottle",
		keywords: [
			"moisturizer",
			"sunscreen"
		],
		skins: [
			{
				unified: "1f9f4",
				native: "🧴"
			}
		],
		version: 11
	},
	safety_pin: {
		id: "safety_pin",
		name: "Safety Pin",
		keywords: [
			"diaper"
		],
		skins: [
			{
				unified: "1f9f7",
				native: "🧷"
			}
		],
		version: 11
	},
	broom: {
		id: "broom",
		name: "Broom",
		keywords: [
			"cleaning",
			"sweeping",
			"witch"
		],
		skins: [
			{
				unified: "1f9f9",
				native: "🧹"
			}
		],
		version: 11
	},
	basket: {
		id: "basket",
		name: "Basket",
		keywords: [
			"laundry"
		],
		skins: [
			{
				unified: "1f9fa",
				native: "🧺"
			}
		],
		version: 11
	},
	roll_of_paper: {
		id: "roll_of_paper",
		name: "Roll of Paper",
		keywords: [
		],
		skins: [
			{
				unified: "1f9fb",
				native: "🧻"
			}
		],
		version: 11
	},
	bucket: {
		id: "bucket",
		name: "Bucket",
		keywords: [
			"water",
			"container"
		],
		skins: [
			{
				unified: "1faa3",
				native: "🪣"
			}
		],
		version: 13
	},
	soap: {
		id: "soap",
		name: "Soap",
		keywords: [
			"bar",
			"bathing",
			"cleaning",
			"lather"
		],
		skins: [
			{
				unified: "1f9fc",
				native: "🧼"
			}
		],
		version: 11
	},
	bubbles: {
		id: "bubbles",
		name: "Bubbles",
		keywords: [
			"soap",
			"fun",
			"carbonation",
			"sparkling"
		],
		skins: [
			{
				unified: "1fae7",
				native: "🫧"
			}
		],
		version: 14
	},
	toothbrush: {
		id: "toothbrush",
		name: "Toothbrush",
		keywords: [
			"hygiene",
			"dental"
		],
		skins: [
			{
				unified: "1faa5",
				native: "🪥"
			}
		],
		version: 13
	},
	sponge: {
		id: "sponge",
		name: "Sponge",
		keywords: [
			"absorbing",
			"cleaning",
			"porous"
		],
		skins: [
			{
				unified: "1f9fd",
				native: "🧽"
			}
		],
		version: 11
	},
	fire_extinguisher: {
		id: "fire_extinguisher",
		name: "Fire Extinguisher",
		keywords: [
			"quench"
		],
		skins: [
			{
				unified: "1f9ef",
				native: "🧯"
			}
		],
		version: 11
	},
	shopping_trolley: {
		id: "shopping_trolley",
		name: "Shopping Cart",
		keywords: [
			"trolley"
		],
		skins: [
			{
				unified: "1f6d2",
				native: "🛒"
			}
		],
		version: 3
	},
	smoking: {
		id: "smoking",
		name: "Cigarette",
		keywords: [
			"smoking",
			"kills",
			"tobacco",
			"joint",
			"smoke"
		],
		skins: [
			{
				unified: "1f6ac",
				native: "🚬"
			}
		],
		version: 1
	},
	coffin: {
		id: "coffin",
		name: "Coffin",
		keywords: [
			"vampire",
			"dead",
			"die",
			"death",
			"rip",
			"graveyard",
			"cemetery",
			"casket",
			"funeral",
			"box"
		],
		skins: [
			{
				unified: "26b0-fe0f",
				native: "⚰️"
			}
		],
		version: 1
	},
	headstone: {
		id: "headstone",
		name: "Headstone",
		keywords: [
			"death",
			"rip",
			"grave"
		],
		skins: [
			{
				unified: "1faa6",
				native: "🪦"
			}
		],
		version: 13
	},
	funeral_urn: {
		id: "funeral_urn",
		name: "Funeral Urn",
		keywords: [
			"dead",
			"die",
			"death",
			"rip",
			"ashes"
		],
		skins: [
			{
				unified: "26b1-fe0f",
				native: "⚱️"
			}
		],
		version: 1
	},
	nazar_amulet: {
		id: "nazar_amulet",
		name: "Nazar Amulet",
		keywords: [
			"bead",
			"charm"
		],
		skins: [
			{
				unified: "1f9ff",
				native: "🧿"
			}
		],
		version: 11
	},
	hamsa: {
		id: "hamsa",
		name: "Hamsa",
		keywords: [
			"religion",
			"protection"
		],
		skins: [
			{
				unified: "1faac",
				native: "🪬"
			}
		],
		version: 14
	},
	moyai: {
		id: "moyai",
		name: "Moai",
		keywords: [
			"moyai",
			"rock",
			"easter",
			"island"
		],
		skins: [
			{
				unified: "1f5ff",
				native: "🗿"
			}
		],
		version: 1
	},
	placard: {
		id: "placard",
		name: "Placard",
		keywords: [
			"announcement"
		],
		skins: [
			{
				unified: "1faa7",
				native: "🪧"
			}
		],
		version: 13
	},
	identification_card: {
		id: "identification_card",
		name: "Identification Card",
		keywords: [
			"document"
		],
		skins: [
			{
				unified: "1faaa",
				native: "🪪"
			}
		],
		version: 14
	},
	atm: {
		id: "atm",
		name: "Atm Sign",
		keywords: [
			"money",
			"sales",
			"cash",
			"blue",
			"square",
			"payment",
			"bank"
		],
		skins: [
			{
				unified: "1f3e7",
				native: "🏧"
			}
		],
		version: 1
	},
	put_litter_in_its_place: {
		id: "put_litter_in_its_place",
		name: "Litter in Bin Sign",
		keywords: [
			"put",
			"its",
			"place",
			"blue",
			"square",
			"human",
			"info"
		],
		skins: [
			{
				unified: "1f6ae",
				native: "🚮"
			}
		],
		version: 1
	},
	potable_water: {
		id: "potable_water",
		name: "Potable Water",
		keywords: [
			"blue",
			"square",
			"liquid",
			"restroom",
			"cleaning",
			"faucet"
		],
		skins: [
			{
				unified: "1f6b0",
				native: "🚰"
			}
		],
		version: 1
	},
	wheelchair: {
		id: "wheelchair",
		name: "Wheelchair Symbol",
		keywords: [
			"blue",
			"square",
			"disabled",
			"accessibility"
		],
		skins: [
			{
				unified: "267f",
				native: "♿"
			}
		],
		version: 1
	},
	mens: {
		id: "mens",
		name: "Men’s Room",
		keywords: [
			"mens",
			"men",
			"s",
			"toilet",
			"restroom",
			"wc",
			"blue",
			"square",
			"gender",
			"male"
		],
		skins: [
			{
				unified: "1f6b9",
				native: "🚹"
			}
		],
		version: 1
	},
	womens: {
		id: "womens",
		name: "Women’s Room",
		keywords: [
			"womens",
			"women",
			"s",
			"purple",
			"square",
			"woman",
			"female",
			"toilet",
			"loo",
			"restroom",
			"gender"
		],
		skins: [
			{
				unified: "1f6ba",
				native: "🚺"
			}
		],
		version: 1
	},
	restroom: {
		id: "restroom",
		name: "Restroom",
		keywords: [
			"blue",
			"square",
			"toilet",
			"refresh",
			"wc",
			"gender"
		],
		skins: [
			{
				unified: "1f6bb",
				native: "🚻"
			}
		],
		version: 1
	},
	baby_symbol: {
		id: "baby_symbol",
		name: "Baby Symbol",
		keywords: [
			"orange",
			"square",
			"child"
		],
		skins: [
			{
				unified: "1f6bc",
				native: "🚼"
			}
		],
		version: 1
	},
	wc: {
		id: "wc",
		name: "Water Closet",
		keywords: [
			"wc",
			"toilet",
			"restroom",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f6be",
				native: "🚾"
			}
		],
		version: 1
	},
	passport_control: {
		id: "passport_control",
		name: "Passport Control",
		keywords: [
			"custom",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f6c2",
				native: "🛂"
			}
		],
		version: 1
	},
	customs: {
		id: "customs",
		name: "Customs",
		keywords: [
			"passport",
			"border",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f6c3",
				native: "🛃"
			}
		],
		version: 1
	},
	baggage_claim: {
		id: "baggage_claim",
		name: "Baggage Claim",
		keywords: [
			"blue",
			"square",
			"airport",
			"transport"
		],
		skins: [
			{
				unified: "1f6c4",
				native: "🛄"
			}
		],
		version: 1
	},
	left_luggage: {
		id: "left_luggage",
		name: "Left Luggage",
		keywords: [
			"blue",
			"square",
			"travel"
		],
		skins: [
			{
				unified: "1f6c5",
				native: "🛅"
			}
		],
		version: 1
	},
	warning: {
		id: "warning",
		name: "Warning",
		keywords: [
			"exclamation",
			"wip",
			"alert",
			"error",
			"problem",
			"issue"
		],
		skins: [
			{
				unified: "26a0-fe0f",
				native: "⚠️"
			}
		],
		version: 1
	},
	children_crossing: {
		id: "children_crossing",
		name: "Children Crossing",
		keywords: [
			"school",
			"warning",
			"danger",
			"sign",
			"driving",
			"yellow",
			"diamond"
		],
		skins: [
			{
				unified: "1f6b8",
				native: "🚸"
			}
		],
		version: 1
	},
	no_entry: {
		id: "no_entry",
		name: "No Entry",
		keywords: [
			"limit",
			"security",
			"privacy",
			"bad",
			"denied",
			"stop",
			"circle"
		],
		skins: [
			{
				unified: "26d4",
				native: "⛔"
			}
		],
		version: 1
	},
	no_entry_sign: {
		id: "no_entry_sign",
		name: "Prohibited",
		keywords: [
			"no",
			"entry",
			"sign",
			"forbid",
			"stop",
			"limit",
			"denied",
			"disallow",
			"circle"
		],
		skins: [
			{
				unified: "1f6ab",
				native: "🚫"
			}
		],
		version: 1
	},
	no_bicycles: {
		id: "no_bicycles",
		name: "No Bicycles",
		keywords: [
			"cyclist",
			"prohibited",
			"circle"
		],
		skins: [
			{
				unified: "1f6b3",
				native: "🚳"
			}
		],
		version: 1
	},
	no_smoking: {
		id: "no_smoking",
		name: "No Smoking",
		keywords: [
			"cigarette",
			"blue",
			"square",
			"smell",
			"smoke"
		],
		skins: [
			{
				unified: "1f6ad",
				native: "🚭"
			}
		],
		version: 1
	},
	do_not_litter: {
		id: "do_not_litter",
		name: "No Littering",
		keywords: [
			"do",
			"not",
			"litter",
			"trash",
			"bin",
			"garbage",
			"circle"
		],
		skins: [
			{
				unified: "1f6af",
				native: "🚯"
			}
		],
		version: 1
	},
	"non-potable_water": {
		id: "non-potable_water",
		name: "Non-Potable Water",
		keywords: [
			"non",
			"potable",
			"drink",
			"faucet",
			"tap",
			"circle"
		],
		skins: [
			{
				unified: "1f6b1",
				native: "🚱"
			}
		],
		version: 1
	},
	no_pedestrians: {
		id: "no_pedestrians",
		name: "No Pedestrians",
		keywords: [
			"rules",
			"crossing",
			"walking",
			"circle"
		],
		skins: [
			{
				unified: "1f6b7",
				native: "🚷"
			}
		],
		version: 1
	},
	no_mobile_phones: {
		id: "no_mobile_phones",
		name: "No Mobile Phones",
		keywords: [
			"iphone",
			"mute",
			"circle"
		],
		skins: [
			{
				unified: "1f4f5",
				native: "📵"
			}
		],
		version: 1
	},
	underage: {
		id: "underage",
		name: "No One Under Eighteen",
		keywords: [
			"underage",
			"18",
			"drink",
			"pub",
			"night",
			"minor",
			"circle"
		],
		skins: [
			{
				unified: "1f51e",
				native: "🔞"
			}
		],
		version: 1
	},
	radioactive_sign: {
		id: "radioactive_sign",
		name: "Radioactive",
		keywords: [
			"sign",
			"nuclear",
			"danger"
		],
		skins: [
			{
				unified: "2622-fe0f",
				native: "☢️"
			}
		],
		version: 1
	},
	biohazard_sign: {
		id: "biohazard_sign",
		name: "Biohazard",
		keywords: [
			"sign",
			"danger"
		],
		skins: [
			{
				unified: "2623-fe0f",
				native: "☣️"
			}
		],
		version: 1
	},
	arrow_up: {
		id: "arrow_up",
		name: "Up Arrow",
		keywords: [
			"blue",
			"square",
			"continue",
			"top",
			"direction"
		],
		skins: [
			{
				unified: "2b06-fe0f",
				native: "⬆️"
			}
		],
		version: 1
	},
	arrow_upper_right: {
		id: "arrow_upper_right",
		name: "Up-Right Arrow",
		keywords: [
			"upper",
			"right",
			"up",
			"blue",
			"square",
			"point",
			"direction",
			"diagonal",
			"northeast"
		],
		skins: [
			{
				unified: "2197-fe0f",
				native: "↗️"
			}
		],
		version: 1
	},
	arrow_right: {
		id: "arrow_right",
		name: "Right Arrow",
		keywords: [
			"blue",
			"square",
			"next"
		],
		skins: [
			{
				unified: "27a1-fe0f",
				native: "➡️"
			}
		],
		version: 1
	},
	arrow_lower_right: {
		id: "arrow_lower_right",
		name: "South East Arrow",
		keywords: [
			"lower",
			"right",
			"down",
			"blue",
			"square",
			"direction",
			"diagonal",
			"southeast"
		],
		skins: [
			{
				unified: "2198-fe0f",
				native: "↘️"
			}
		],
		version: 1
	},
	arrow_down: {
		id: "arrow_down",
		name: "Down Arrow",
		keywords: [
			"blue",
			"square",
			"direction",
			"bottom"
		],
		skins: [
			{
				unified: "2b07-fe0f",
				native: "⬇️"
			}
		],
		version: 1
	},
	arrow_lower_left: {
		id: "arrow_lower_left",
		name: "Down-Left Arrow",
		keywords: [
			"lower",
			"left",
			"down",
			"blue",
			"square",
			"direction",
			"diagonal",
			"southwest"
		],
		skins: [
			{
				unified: "2199-fe0f",
				native: "↙️"
			}
		],
		version: 1
	},
	arrow_left: {
		id: "arrow_left",
		name: "Left Arrow",
		keywords: [
			"blue",
			"square",
			"previous",
			"back"
		],
		skins: [
			{
				unified: "2b05-fe0f",
				native: "⬅️"
			}
		],
		version: 1
	},
	arrow_upper_left: {
		id: "arrow_upper_left",
		name: "Up-Left Arrow",
		keywords: [
			"upper",
			"left",
			"up",
			"blue",
			"square",
			"point",
			"direction",
			"diagonal",
			"northwest"
		],
		skins: [
			{
				unified: "2196-fe0f",
				native: "↖️"
			}
		],
		version: 1
	},
	arrow_up_down: {
		id: "arrow_up_down",
		name: "Up Down Arrow",
		keywords: [
			"blue",
			"square",
			"direction",
			"way",
			"vertical"
		],
		skins: [
			{
				unified: "2195-fe0f",
				native: "↕️"
			}
		],
		version: 1
	},
	left_right_arrow: {
		id: "left_right_arrow",
		name: "Left Right Arrow",
		keywords: [
			"shape",
			"direction",
			"horizontal",
			"sideways"
		],
		skins: [
			{
				unified: "2194-fe0f",
				native: "↔️"
			}
		],
		version: 1
	},
	leftwards_arrow_with_hook: {
		id: "leftwards_arrow_with_hook",
		name: "Right Arrow Curving Left",
		keywords: [
			"leftwards",
			"with",
			"hook",
			"back",
			"return",
			"blue",
			"square",
			"undo",
			"enter"
		],
		skins: [
			{
				unified: "21a9-fe0f",
				native: "↩️"
			}
		],
		version: 1
	},
	arrow_right_hook: {
		id: "arrow_right_hook",
		name: "Left Arrow Curving Right",
		keywords: [
			"hook",
			"blue",
			"square",
			"return",
			"rotate",
			"direction"
		],
		skins: [
			{
				unified: "21aa-fe0f",
				native: "↪️"
			}
		],
		version: 1
	},
	arrow_heading_up: {
		id: "arrow_heading_up",
		name: "Right Arrow Curving Up",
		keywords: [
			"heading",
			"blue",
			"square",
			"direction",
			"top"
		],
		skins: [
			{
				unified: "2934-fe0f",
				native: "⤴️"
			}
		],
		version: 1
	},
	arrow_heading_down: {
		id: "arrow_heading_down",
		name: "Right Arrow Curving Down",
		keywords: [
			"heading",
			"blue",
			"square",
			"direction",
			"bottom"
		],
		skins: [
			{
				unified: "2935-fe0f",
				native: "⤵️"
			}
		],
		version: 1
	},
	arrows_clockwise: {
		id: "arrows_clockwise",
		name: "Clockwise Vertical Arrows",
		keywords: [
			"sync",
			"cycle",
			"round",
			"repeat"
		],
		skins: [
			{
				unified: "1f503",
				native: "🔃"
			}
		],
		version: 1
	},
	arrows_counterclockwise: {
		id: "arrows_counterclockwise",
		name: "Counterclockwise Arrows Button",
		keywords: [
			"blue",
			"square",
			"sync",
			"cycle"
		],
		skins: [
			{
				unified: "1f504",
				native: "🔄"
			}
		],
		version: 1
	},
	back: {
		id: "back",
		name: "Back Arrow",
		keywords: [
			"words",
			"return"
		],
		skins: [
			{
				unified: "1f519",
				native: "🔙"
			}
		],
		version: 1
	},
	end: {
		id: "end",
		name: "End Arrow",
		keywords: [
			"words"
		],
		skins: [
			{
				unified: "1f51a",
				native: "🔚"
			}
		],
		version: 1
	},
	on: {
		id: "on",
		name: "On! Arrow",
		keywords: [
			"on",
			"words"
		],
		skins: [
			{
				unified: "1f51b",
				native: "🔛"
			}
		],
		version: 1
	},
	soon: {
		id: "soon",
		name: "Soon Arrow",
		keywords: [
			"words"
		],
		skins: [
			{
				unified: "1f51c",
				native: "🔜"
			}
		],
		version: 1
	},
	top: {
		id: "top",
		name: "Top Arrow",
		keywords: [
			"words",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f51d",
				native: "🔝"
			}
		],
		version: 1
	},
	place_of_worship: {
		id: "place_of_worship",
		name: "Place of Worship",
		keywords: [
			"religion",
			"church",
			"temple",
			"prayer"
		],
		skins: [
			{
				unified: "1f6d0",
				native: "🛐"
			}
		],
		version: 1
	},
	atom_symbol: {
		id: "atom_symbol",
		name: "Atom Symbol",
		keywords: [
			"science",
			"physics",
			"chemistry"
		],
		skins: [
			{
				unified: "269b-fe0f",
				native: "⚛️"
			}
		],
		version: 1
	},
	om_symbol: {
		id: "om_symbol",
		name: "Om",
		keywords: [
			"symbol",
			"hinduism",
			"buddhism",
			"sikhism",
			"jainism"
		],
		skins: [
			{
				unified: "1f549-fe0f",
				native: "🕉️"
			}
		],
		version: 1
	},
	star_of_david: {
		id: "star_of_david",
		name: "Star of David",
		keywords: [
			"judaism"
		],
		skins: [
			{
				unified: "2721-fe0f",
				native: "✡️"
			}
		],
		version: 1
	},
	wheel_of_dharma: {
		id: "wheel_of_dharma",
		name: "Wheel of Dharma",
		keywords: [
			"hinduism",
			"buddhism",
			"sikhism",
			"jainism"
		],
		skins: [
			{
				unified: "2638-fe0f",
				native: "☸️"
			}
		],
		version: 1
	},
	yin_yang: {
		id: "yin_yang",
		name: "Yin Yang",
		keywords: [
			"balance"
		],
		skins: [
			{
				unified: "262f-fe0f",
				native: "☯️"
			}
		],
		version: 1
	},
	latin_cross: {
		id: "latin_cross",
		name: "Latin Cross",
		keywords: [
			"christianity"
		],
		skins: [
			{
				unified: "271d-fe0f",
				native: "✝️"
			}
		],
		version: 1
	},
	orthodox_cross: {
		id: "orthodox_cross",
		name: "Orthodox Cross",
		keywords: [
			"suppedaneum",
			"religion"
		],
		skins: [
			{
				unified: "2626-fe0f",
				native: "☦️"
			}
		],
		version: 1
	},
	star_and_crescent: {
		id: "star_and_crescent",
		name: "Star and Crescent",
		keywords: [
			"islam"
		],
		skins: [
			{
				unified: "262a-fe0f",
				native: "☪️"
			}
		],
		version: 1
	},
	peace_symbol: {
		id: "peace_symbol",
		name: "Peace Symbol",
		keywords: [
			"hippie"
		],
		skins: [
			{
				unified: "262e-fe0f",
				native: "☮️"
			}
		],
		version: 1
	},
	menorah_with_nine_branches: {
		id: "menorah_with_nine_branches",
		name: "Menorah",
		keywords: [
			"with",
			"nine",
			"branches",
			"hanukkah",
			"candles",
			"jewish"
		],
		skins: [
			{
				unified: "1f54e",
				native: "🕎"
			}
		],
		version: 1
	},
	six_pointed_star: {
		id: "six_pointed_star",
		name: "Dotted Six-Pointed Star",
		keywords: [
			"six",
			"pointed",
			"purple",
			"square",
			"religion",
			"jewish",
			"hexagram"
		],
		skins: [
			{
				unified: "1f52f",
				native: "🔯"
			}
		],
		version: 1
	},
	khanda: {
		id: "khanda",
		name: "Khanda",
		keywords: [
			"Sikhism",
			"religion"
		],
		skins: [
			{
				unified: "1faaf",
				native: "🪯"
			}
		],
		version: 15
	},
	aries: {
		id: "aries",
		name: "Aries",
		keywords: [
			"sign",
			"purple",
			"square",
			"zodiac",
			"astrology"
		],
		skins: [
			{
				unified: "2648",
				native: "♈"
			}
		],
		version: 1
	},
	taurus: {
		id: "taurus",
		name: "Taurus",
		keywords: [
			"purple",
			"square",
			"sign",
			"zodiac",
			"astrology"
		],
		skins: [
			{
				unified: "2649",
				native: "♉"
			}
		],
		version: 1
	},
	gemini: {
		id: "gemini",
		name: "Gemini",
		keywords: [
			"sign",
			"zodiac",
			"purple",
			"square",
			"astrology"
		],
		skins: [
			{
				unified: "264a",
				native: "♊"
			}
		],
		version: 1
	},
	cancer: {
		id: "cancer",
		name: "Cancer",
		keywords: [
			"sign",
			"zodiac",
			"purple",
			"square",
			"astrology"
		],
		skins: [
			{
				unified: "264b",
				native: "♋"
			}
		],
		version: 1
	},
	leo: {
		id: "leo",
		name: "Leo",
		keywords: [
			"sign",
			"purple",
			"square",
			"zodiac",
			"astrology"
		],
		skins: [
			{
				unified: "264c",
				native: "♌"
			}
		],
		version: 1
	},
	virgo: {
		id: "virgo",
		name: "Virgo",
		keywords: [
			"sign",
			"zodiac",
			"purple",
			"square",
			"astrology"
		],
		skins: [
			{
				unified: "264d",
				native: "♍"
			}
		],
		version: 1
	},
	libra: {
		id: "libra",
		name: "Libra",
		keywords: [
			"sign",
			"purple",
			"square",
			"zodiac",
			"astrology"
		],
		skins: [
			{
				unified: "264e",
				native: "♎"
			}
		],
		version: 1
	},
	scorpius: {
		id: "scorpius",
		name: "Scorpio",
		keywords: [
			"scorpius",
			"sign",
			"zodiac",
			"purple",
			"square",
			"astrology"
		],
		skins: [
			{
				unified: "264f",
				native: "♏"
			}
		],
		version: 1
	},
	sagittarius: {
		id: "sagittarius",
		name: "Sagittarius",
		keywords: [
			"sign",
			"zodiac",
			"purple",
			"square",
			"astrology"
		],
		skins: [
			{
				unified: "2650",
				native: "♐"
			}
		],
		version: 1
	},
	capricorn: {
		id: "capricorn",
		name: "Capricorn",
		keywords: [
			"sign",
			"zodiac",
			"purple",
			"square",
			"astrology"
		],
		skins: [
			{
				unified: "2651",
				native: "♑"
			}
		],
		version: 1
	},
	aquarius: {
		id: "aquarius",
		name: "Aquarius",
		keywords: [
			"sign",
			"purple",
			"square",
			"zodiac",
			"astrology"
		],
		skins: [
			{
				unified: "2652",
				native: "♒"
			}
		],
		version: 1
	},
	pisces: {
		id: "pisces",
		name: "Pisces",
		keywords: [
			"purple",
			"square",
			"sign",
			"zodiac",
			"astrology"
		],
		skins: [
			{
				unified: "2653",
				native: "♓"
			}
		],
		version: 1
	},
	ophiuchus: {
		id: "ophiuchus",
		name: "Ophiuchus",
		keywords: [
			"sign",
			"purple",
			"square",
			"constellation",
			"astrology"
		],
		skins: [
			{
				unified: "26ce",
				native: "⛎"
			}
		],
		version: 1
	},
	twisted_rightwards_arrows: {
		id: "twisted_rightwards_arrows",
		name: "Shuffle Tracks Button",
		keywords: [
			"twisted",
			"rightwards",
			"arrows",
			"blue",
			"square",
			"music",
			"random"
		],
		skins: [
			{
				unified: "1f500",
				native: "🔀"
			}
		],
		version: 1
	},
	repeat: {
		id: "repeat",
		name: "Repeat Button",
		keywords: [
			"loop",
			"record"
		],
		skins: [
			{
				unified: "1f501",
				native: "🔁"
			}
		],
		version: 1
	},
	repeat_one: {
		id: "repeat_one",
		name: "Repeat Single Button",
		keywords: [
			"one",
			"blue",
			"square",
			"loop"
		],
		skins: [
			{
				unified: "1f502",
				native: "🔂"
			}
		],
		version: 1
	},
	arrow_forward: {
		id: "arrow_forward",
		name: "Play Button",
		keywords: [
			"arrow",
			"forward",
			"blue",
			"square",
			"right",
			"direction"
		],
		skins: [
			{
				unified: "25b6-fe0f",
				native: "▶️"
			}
		],
		version: 1
	},
	fast_forward: {
		id: "fast_forward",
		name: "Fast-Forward Button",
		keywords: [
			"fast",
			"forward",
			"blue",
			"square",
			"play",
			"speed",
			"continue"
		],
		skins: [
			{
				unified: "23e9",
				native: "⏩"
			}
		],
		version: 1
	},
	black_right_pointing_double_triangle_with_vertical_bar: {
		id: "black_right_pointing_double_triangle_with_vertical_bar",
		name: "Next Track Button",
		keywords: [
			"black",
			"right",
			"pointing",
			"double",
			"triangle",
			"with",
			"vertical",
			"bar",
			"forward",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "23ed-fe0f",
				native: "⏭️"
			}
		],
		version: 1
	},
	black_right_pointing_triangle_with_double_vertical_bar: {
		id: "black_right_pointing_triangle_with_double_vertical_bar",
		name: "Play or Pause Button",
		keywords: [
			"black",
			"right",
			"pointing",
			"triangle",
			"with",
			"double",
			"vertical",
			"bar",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "23ef-fe0f",
				native: "⏯️"
			}
		],
		version: 1
	},
	arrow_backward: {
		id: "arrow_backward",
		name: "Reverse Button",
		keywords: [
			"arrow",
			"backward",
			"blue",
			"square",
			"left",
			"direction"
		],
		skins: [
			{
				unified: "25c0-fe0f",
				native: "◀️"
			}
		],
		version: 1
	},
	rewind: {
		id: "rewind",
		name: "Fast Reverse Button",
		keywords: [
			"rewind",
			"play",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "23ea",
				native: "⏪"
			}
		],
		version: 1
	},
	black_left_pointing_double_triangle_with_vertical_bar: {
		id: "black_left_pointing_double_triangle_with_vertical_bar",
		name: "Last Track Button",
		keywords: [
			"black",
			"left",
			"pointing",
			"double",
			"triangle",
			"with",
			"vertical",
			"bar",
			"backward"
		],
		skins: [
			{
				unified: "23ee-fe0f",
				native: "⏮️"
			}
		],
		version: 1
	},
	arrow_up_small: {
		id: "arrow_up_small",
		name: "Upwards Button",
		keywords: [
			"arrow",
			"up",
			"small",
			"blue",
			"square",
			"triangle",
			"direction",
			"point",
			"forward",
			"top"
		],
		skins: [
			{
				unified: "1f53c",
				native: "🔼"
			}
		],
		version: 1
	},
	arrow_double_up: {
		id: "arrow_double_up",
		name: "Fast Up Button",
		keywords: [
			"arrow",
			"double",
			"blue",
			"square",
			"direction",
			"top"
		],
		skins: [
			{
				unified: "23eb",
				native: "⏫"
			}
		],
		version: 1
	},
	arrow_down_small: {
		id: "arrow_down_small",
		name: "Downwards Button",
		keywords: [
			"arrow",
			"down",
			"small",
			"blue",
			"square",
			"direction",
			"bottom"
		],
		skins: [
			{
				unified: "1f53d",
				native: "🔽"
			}
		],
		version: 1
	},
	arrow_double_down: {
		id: "arrow_double_down",
		name: "Fast Down Button",
		keywords: [
			"arrow",
			"double",
			"blue",
			"square",
			"direction",
			"bottom"
		],
		skins: [
			{
				unified: "23ec",
				native: "⏬"
			}
		],
		version: 1
	},
	double_vertical_bar: {
		id: "double_vertical_bar",
		name: "Pause Button",
		keywords: [
			"double",
			"vertical",
			"bar",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "23f8-fe0f",
				native: "⏸️"
			}
		],
		version: 1
	},
	black_square_for_stop: {
		id: "black_square_for_stop",
		name: "Stop Button",
		keywords: [
			"black",
			"square",
			"for",
			"blue"
		],
		skins: [
			{
				unified: "23f9-fe0f",
				native: "⏹️"
			}
		],
		version: 1
	},
	black_circle_for_record: {
		id: "black_circle_for_record",
		name: "Record Button",
		keywords: [
			"black",
			"circle",
			"for",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "23fa-fe0f",
				native: "⏺️"
			}
		],
		version: 1
	},
	eject: {
		id: "eject",
		name: "Eject Button",
		keywords: [
			"blue",
			"square"
		],
		skins: [
			{
				unified: "23cf-fe0f",
				native: "⏏️"
			}
		],
		version: 1
	},
	cinema: {
		id: "cinema",
		name: "Cinema",
		keywords: [
			"blue",
			"square",
			"record",
			"film",
			"movie",
			"curtain",
			"stage",
			"theater"
		],
		skins: [
			{
				unified: "1f3a6",
				native: "🎦"
			}
		],
		version: 1
	},
	low_brightness: {
		id: "low_brightness",
		name: "Dim Button",
		keywords: [
			"low",
			"brightness",
			"sun",
			"afternoon",
			"warm",
			"summer"
		],
		skins: [
			{
				unified: "1f505",
				native: "🔅"
			}
		],
		version: 1
	},
	high_brightness: {
		id: "high_brightness",
		name: "Bright Button",
		keywords: [
			"high",
			"brightness",
			"sun",
			"light"
		],
		skins: [
			{
				unified: "1f506",
				native: "🔆"
			}
		],
		version: 1
	},
	signal_strength: {
		id: "signal_strength",
		name: "Antenna Bars",
		keywords: [
			"signal",
			"strength",
			"blue",
			"square",
			"reception",
			"phone",
			"internet",
			"connection",
			"wifi",
			"bluetooth"
		],
		skins: [
			{
				unified: "1f4f6",
				native: "📶"
			}
		],
		version: 1
	},
	wireless: {
		id: "wireless",
		name: "Wireless",
		keywords: [
			"wifi",
			"internet",
			"contactless",
			"signal"
		],
		skins: [
			{
				unified: "1f6dc",
				native: "🛜"
			}
		],
		version: 15
	},
	vibration_mode: {
		id: "vibration_mode",
		name: "Vibration Mode",
		keywords: [
			"orange",
			"square",
			"phone"
		],
		skins: [
			{
				unified: "1f4f3",
				native: "📳"
			}
		],
		version: 1
	},
	mobile_phone_off: {
		id: "mobile_phone_off",
		name: "Mobile Phone off",
		keywords: [
			"mute",
			"orange",
			"square",
			"silence",
			"quiet"
		],
		skins: [
			{
				unified: "1f4f4",
				native: "📴"
			}
		],
		version: 1
	},
	female_sign: {
		id: "female_sign",
		name: "Female Sign",
		keywords: [
			"woman",
			"women",
			"lady",
			"girl"
		],
		skins: [
			{
				unified: "2640-fe0f",
				native: "♀️"
			}
		],
		version: 4
	},
	male_sign: {
		id: "male_sign",
		name: "Male Sign",
		keywords: [
			"man",
			"boy",
			"men"
		],
		skins: [
			{
				unified: "2642-fe0f",
				native: "♂️"
			}
		],
		version: 4
	},
	transgender_symbol: {
		id: "transgender_symbol",
		name: "Transgender Symbol",
		keywords: [
			"lgbtq"
		],
		skins: [
			{
				unified: "26a7-fe0f",
				native: "⚧️"
			}
		],
		version: 13
	},
	heavy_multiplication_x: {
		id: "heavy_multiplication_x",
		name: "Multiply",
		keywords: [
			"heavy",
			"multiplication",
			"x",
			"sign",
			"math",
			"calculation"
		],
		skins: [
			{
				unified: "2716-fe0f",
				native: "✖️"
			}
		],
		version: 1
	},
	heavy_plus_sign: {
		id: "heavy_plus_sign",
		name: "Plus",
		keywords: [
			"heavy",
			"sign",
			"math",
			"calculation",
			"addition",
			"more",
			"increase"
		],
		skins: [
			{
				unified: "2795",
				native: "➕"
			}
		],
		version: 1
	},
	heavy_minus_sign: {
		id: "heavy_minus_sign",
		name: "Minus",
		keywords: [
			"heavy",
			"sign",
			"math",
			"calculation",
			"subtract",
			"less"
		],
		skins: [
			{
				unified: "2796",
				native: "➖"
			}
		],
		version: 1
	},
	heavy_division_sign: {
		id: "heavy_division_sign",
		name: "Divide",
		keywords: [
			"heavy",
			"division",
			"sign",
			"math",
			"calculation"
		],
		skins: [
			{
				unified: "2797",
				native: "➗"
			}
		],
		version: 1
	},
	heavy_equals_sign: {
		id: "heavy_equals_sign",
		name: "Heavy Equals Sign",
		keywords: [
			"math"
		],
		skins: [
			{
				unified: "1f7f0",
				native: "🟰"
			}
		],
		version: 14
	},
	infinity: {
		id: "infinity",
		name: "Infinity",
		keywords: [
			"forever"
		],
		skins: [
			{
				unified: "267e-fe0f",
				native: "♾️"
			}
		],
		version: 11
	},
	bangbang: {
		id: "bangbang",
		name: "Double Exclamation Mark",
		keywords: [
			"bangbang",
			"surprise"
		],
		skins: [
			{
				unified: "203c-fe0f",
				native: "‼️"
			}
		],
		version: 1
	},
	interrobang: {
		id: "interrobang",
		name: "Exclamation Question Mark",
		keywords: [
			"interrobang",
			"wat",
			"punctuation",
			"surprise"
		],
		skins: [
			{
				unified: "2049-fe0f",
				native: "⁉️"
			}
		],
		version: 1
	},
	question: {
		id: "question",
		name: "Red Question Mark",
		keywords: [
			"doubt",
			"confused"
		],
		skins: [
			{
				unified: "2753",
				native: "❓"
			}
		],
		version: 1
	},
	grey_question: {
		id: "grey_question",
		name: "White Question Mark",
		keywords: [
			"grey",
			"doubts",
			"gray",
			"huh",
			"confused"
		],
		skins: [
			{
				unified: "2754",
				native: "❔"
			}
		],
		version: 1
	},
	grey_exclamation: {
		id: "grey_exclamation",
		name: "White Exclamation Mark",
		keywords: [
			"grey",
			"surprise",
			"punctuation",
			"gray",
			"wow",
			"warning"
		],
		skins: [
			{
				unified: "2755",
				native: "❕"
			}
		],
		version: 1
	},
	exclamation: {
		id: "exclamation",
		name: "Red Exclamation Mark",
		keywords: [
			"heavy",
			"danger",
			"surprise",
			"punctuation",
			"wow",
			"warning"
		],
		skins: [
			{
				unified: "2757",
				native: "❗"
			}
		],
		version: 1
	},
	wavy_dash: {
		id: "wavy_dash",
		name: "Wavy Dash",
		keywords: [
			"draw",
			"line",
			"moustache",
			"mustache",
			"squiggle",
			"scribble"
		],
		skins: [
			{
				unified: "3030-fe0f",
				native: "〰️"
			}
		],
		version: 1
	},
	currency_exchange: {
		id: "currency_exchange",
		name: "Currency Exchange",
		keywords: [
			"money",
			"sales",
			"dollar",
			"travel"
		],
		skins: [
			{
				unified: "1f4b1",
				native: "💱"
			}
		],
		version: 1
	},
	heavy_dollar_sign: {
		id: "heavy_dollar_sign",
		name: "Heavy Dollar Sign",
		keywords: [
			"money",
			"sales",
			"payment",
			"currency",
			"buck"
		],
		skins: [
			{
				unified: "1f4b2",
				native: "💲"
			}
		],
		version: 1
	},
	medical_symbol: {
		id: "medical_symbol",
		name: "Medical Symbol",
		keywords: [
			"staff",
			"of",
			"aesculapius",
			"health",
			"hospital"
		],
		skins: [
			{
				unified: "2695-fe0f",
				native: "⚕️"
			}
		],
		version: 4
	},
	recycle: {
		id: "recycle",
		name: "Recycling Symbol",
		keywords: [
			"recycle",
			"arrow",
			"environment",
			"garbage",
			"trash"
		],
		skins: [
			{
				unified: "267b-fe0f",
				native: "♻️"
			}
		],
		version: 1
	},
	fleur_de_lis: {
		id: "fleur_de_lis",
		name: "Fleur-De-Lis",
		keywords: [
			"fleur",
			"de",
			"lis",
			"decorative",
			"scout"
		],
		skins: [
			{
				unified: "269c-fe0f",
				native: "⚜️"
			}
		],
		version: 1
	},
	trident: {
		id: "trident",
		name: "Trident Emblem",
		keywords: [
			"weapon",
			"spear"
		],
		skins: [
			{
				unified: "1f531",
				native: "🔱"
			}
		],
		version: 1
	},
	name_badge: {
		id: "name_badge",
		name: "Name Badge",
		keywords: [
			"fire",
			"forbid"
		],
		skins: [
			{
				unified: "1f4db",
				native: "📛"
			}
		],
		version: 1
	},
	beginner: {
		id: "beginner",
		name: "Japanese Symbol for Beginner",
		keywords: [
			"badge",
			"shield"
		],
		skins: [
			{
				unified: "1f530",
				native: "🔰"
			}
		],
		version: 1
	},
	o: {
		id: "o",
		name: "Hollow Red Circle",
		keywords: [
			"o",
			"round"
		],
		skins: [
			{
				unified: "2b55",
				native: "⭕"
			}
		],
		version: 1
	},
	white_check_mark: {
		id: "white_check_mark",
		name: "Check Mark Button",
		keywords: [
			"white",
			"green",
			"square",
			"ok",
			"agree",
			"vote",
			"election",
			"answer",
			"tick"
		],
		skins: [
			{
				unified: "2705",
				native: "✅"
			}
		],
		version: 1
	},
	ballot_box_with_check: {
		id: "ballot_box_with_check",
		name: "Check Box with Check",
		keywords: [
			"ballot",
			"ok",
			"agree",
			"confirm",
			"black",
			"square",
			"vote",
			"election",
			"yes",
			"tick"
		],
		skins: [
			{
				unified: "2611-fe0f",
				native: "☑️"
			}
		],
		version: 1
	},
	heavy_check_mark: {
		id: "heavy_check_mark",
		name: "Check Mark",
		keywords: [
			"heavy",
			"ok",
			"nike",
			"answer",
			"yes",
			"tick"
		],
		skins: [
			{
				unified: "2714-fe0f",
				native: "✔️"
			}
		],
		version: 1
	},
	x: {
		id: "x",
		name: "Cross Mark",
		keywords: [
			"x",
			"no",
			"delete",
			"remove",
			"cancel",
			"red"
		],
		skins: [
			{
				unified: "274c",
				native: "❌"
			}
		],
		version: 1
	},
	negative_squared_cross_mark: {
		id: "negative_squared_cross_mark",
		name: "Cross Mark Button",
		keywords: [
			"negative",
			"squared",
			"x",
			"green",
			"square",
			"no",
			"deny"
		],
		skins: [
			{
				unified: "274e",
				native: "❎"
			}
		],
		version: 1
	},
	curly_loop: {
		id: "curly_loop",
		name: "Curly Loop",
		keywords: [
			"scribble",
			"draw",
			"shape",
			"squiggle"
		],
		skins: [
			{
				unified: "27b0",
				native: "➰"
			}
		],
		version: 1
	},
	loop: {
		id: "loop",
		name: "Double Curly Loop",
		keywords: [
			"tape",
			"cassette"
		],
		skins: [
			{
				unified: "27bf",
				native: "➿"
			}
		],
		version: 1
	},
	part_alternation_mark: {
		id: "part_alternation_mark",
		name: "Part Alternation Mark",
		keywords: [
			"graph",
			"presentation",
			"stats",
			"business",
			"economics",
			"bad"
		],
		skins: [
			{
				unified: "303d-fe0f",
				native: "〽️"
			}
		],
		version: 1
	},
	eight_spoked_asterisk: {
		id: "eight_spoked_asterisk",
		name: "Eight Spoked Asterisk",
		keywords: [
			"star",
			"sparkle",
			"green",
			"square"
		],
		skins: [
			{
				unified: "2733-fe0f",
				native: "✳️"
			}
		],
		version: 1
	},
	eight_pointed_black_star: {
		id: "eight_pointed_black_star",
		name: "Eight-Pointed Star",
		keywords: [
			"eight",
			"pointed",
			"black",
			"orange",
			"square",
			"shape",
			"polygon"
		],
		skins: [
			{
				unified: "2734-fe0f",
				native: "✴️"
			}
		],
		version: 1
	},
	sparkle: {
		id: "sparkle",
		name: "Sparkle",
		keywords: [
			"stars",
			"green",
			"square",
			"awesome",
			"good",
			"fireworks"
		],
		skins: [
			{
				unified: "2747-fe0f",
				native: "❇️"
			}
		],
		version: 1
	},
	copyright: {
		id: "copyright",
		name: "Copyright",
		keywords: [
			"ip",
			"license",
			"circle",
			"law",
			"legal"
		],
		skins: [
			{
				unified: "00a9-fe0f",
				native: "©️"
			}
		],
		version: 1
	},
	registered: {
		id: "registered",
		name: "Registered",
		keywords: [
			"alphabet",
			"circle"
		],
		skins: [
			{
				unified: "00ae-fe0f",
				native: "®️"
			}
		],
		version: 1
	},
	tm: {
		id: "tm",
		name: "Trade Mark",
		keywords: [
			"tm",
			"trademark",
			"brand",
			"law",
			"legal"
		],
		skins: [
			{
				unified: "2122-fe0f",
				native: "™️"
			}
		],
		version: 1
	},
	hash: {
		id: "hash",
		name: "Hash Key",
		keywords: [
			"keycap",
			"",
			"symbol",
			"blue",
			"square",
			"twitter"
		],
		skins: [
			{
				unified: "0023-fe0f-20e3",
				native: "#️⃣"
			}
		],
		version: 1
	},
	keycap_star: {
		id: "keycap_star",
		name: "Keycap: *",
		keywords: [
			"keycap",
			"star",
			""
		],
		skins: [
			{
				unified: "002a-fe0f-20e3",
				native: "*️⃣"
			}
		],
		version: 2
	},
	zero: {
		id: "zero",
		name: "Keycap 0",
		keywords: [
			"zero",
			"numbers",
			"blue",
			"square",
			"null"
		],
		skins: [
			{
				unified: "0030-fe0f-20e3",
				native: "0️⃣"
			}
		],
		version: 1
	},
	one: {
		id: "one",
		name: "Keycap 1",
		keywords: [
			"one",
			"blue",
			"square",
			"numbers"
		],
		skins: [
			{
				unified: "0031-fe0f-20e3",
				native: "1️⃣"
			}
		],
		version: 1
	},
	two: {
		id: "two",
		name: "Keycap 2",
		keywords: [
			"two",
			"numbers",
			"prime",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "0032-fe0f-20e3",
				native: "2️⃣"
			}
		],
		version: 1
	},
	three: {
		id: "three",
		name: "Keycap 3",
		keywords: [
			"three",
			"numbers",
			"prime",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "0033-fe0f-20e3",
				native: "3️⃣"
			}
		],
		version: 1
	},
	four: {
		id: "four",
		name: "Keycap 4",
		keywords: [
			"four",
			"numbers",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "0034-fe0f-20e3",
				native: "4️⃣"
			}
		],
		version: 1
	},
	five: {
		id: "five",
		name: "Keycap 5",
		keywords: [
			"five",
			"numbers",
			"blue",
			"square",
			"prime"
		],
		skins: [
			{
				unified: "0035-fe0f-20e3",
				native: "5️⃣"
			}
		],
		version: 1
	},
	six: {
		id: "six",
		name: "Keycap 6",
		keywords: [
			"six",
			"numbers",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "0036-fe0f-20e3",
				native: "6️⃣"
			}
		],
		version: 1
	},
	seven: {
		id: "seven",
		name: "Keycap 7",
		keywords: [
			"seven",
			"numbers",
			"blue",
			"square",
			"prime"
		],
		skins: [
			{
				unified: "0037-fe0f-20e3",
				native: "7️⃣"
			}
		],
		version: 1
	},
	eight: {
		id: "eight",
		name: "Keycap 8",
		keywords: [
			"eight",
			"blue",
			"square",
			"numbers"
		],
		skins: [
			{
				unified: "0038-fe0f-20e3",
				native: "8️⃣"
			}
		],
		version: 1
	},
	nine: {
		id: "nine",
		name: "Keycap 9",
		keywords: [
			"nine",
			"blue",
			"square",
			"numbers"
		],
		skins: [
			{
				unified: "0039-fe0f-20e3",
				native: "9️⃣"
			}
		],
		version: 1
	},
	keycap_ten: {
		id: "keycap_ten",
		name: "Keycap 10",
		keywords: [
			"ten",
			"numbers",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f51f",
				native: "🔟"
			}
		],
		version: 1
	},
	capital_abcd: {
		id: "capital_abcd",
		name: "Input Latin Uppercase",
		keywords: [
			"capital",
			"abcd",
			"alphabet",
			"words",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f520",
				native: "🔠"
			}
		],
		version: 1
	},
	abcd: {
		id: "abcd",
		name: "Input Latin Lowercase",
		keywords: [
			"abcd",
			"blue",
			"square",
			"alphabet"
		],
		skins: [
			{
				unified: "1f521",
				native: "🔡"
			}
		],
		version: 1
	},
	symbols: {
		id: "symbols",
		name: "Input Symbols",
		keywords: [
			"blue",
			"square",
			"music",
			"note",
			"ampersand",
			"percent",
			"glyphs",
			"characters"
		],
		skins: [
			{
				unified: "1f523",
				native: "🔣"
			}
		],
		version: 1
	},
	abc: {
		id: "abc",
		name: "Input Latin Letters",
		keywords: [
			"abc",
			"blue",
			"square",
			"alphabet"
		],
		skins: [
			{
				unified: "1f524",
				native: "🔤"
			}
		],
		version: 1
	},
	a: {
		id: "a",
		name: "A Button (blood Type)",
		keywords: [
			"red",
			"square",
			"alphabet",
			"letter"
		],
		skins: [
			{
				unified: "1f170-fe0f",
				native: "🅰️"
			}
		],
		version: 1
	},
	ab: {
		id: "ab",
		name: "Negative Squared Ab",
		keywords: [
			"button",
			"red",
			"square",
			"alphabet"
		],
		skins: [
			{
				unified: "1f18e",
				native: "🆎"
			}
		],
		version: 1
	},
	b: {
		id: "b",
		name: "B Button (blood Type)",
		keywords: [
			"red",
			"square",
			"alphabet",
			"letter"
		],
		skins: [
			{
				unified: "1f171-fe0f",
				native: "🅱️"
			}
		],
		version: 1
	},
	cl: {
		id: "cl",
		name: "Cl Button",
		keywords: [
			"alphabet",
			"words",
			"red",
			"square"
		],
		skins: [
			{
				unified: "1f191",
				native: "🆑"
			}
		],
		version: 1
	},
	cool: {
		id: "cool",
		name: "Cool Button",
		keywords: [
			"words",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f192",
				native: "🆒"
			}
		],
		version: 1
	},
	free: {
		id: "free",
		name: "Free Button",
		keywords: [
			"blue",
			"square",
			"words"
		],
		skins: [
			{
				unified: "1f193",
				native: "🆓"
			}
		],
		version: 1
	},
	information_source: {
		id: "information_source",
		name: "Information",
		keywords: [
			"source",
			"blue",
			"square",
			"alphabet",
			"letter"
		],
		skins: [
			{
				unified: "2139-fe0f",
				native: "ℹ️"
			}
		],
		version: 1
	},
	id: {
		id: "id",
		name: "Id Button",
		keywords: [
			"purple",
			"square",
			"words"
		],
		skins: [
			{
				unified: "1f194",
				native: "🆔"
			}
		],
		version: 1
	},
	m: {
		id: "m",
		name: "Circled M",
		keywords: [
			"alphabet",
			"blue",
			"circle",
			"letter"
		],
		skins: [
			{
				unified: "24c2-fe0f",
				native: "Ⓜ️"
			}
		],
		version: 1
	},
	"new": {
		id: "new",
		name: "New Button",
		keywords: [
			"blue",
			"square",
			"words",
			"start"
		],
		skins: [
			{
				unified: "1f195",
				native: "🆕"
			}
		],
		version: 1
	},
	ng: {
		id: "ng",
		name: "Ng Button",
		keywords: [
			"blue",
			"square",
			"words",
			"shape",
			"icon"
		],
		skins: [
			{
				unified: "1f196",
				native: "🆖"
			}
		],
		version: 1
	},
	o2: {
		id: "o2",
		name: "O Button (blood Type)",
		keywords: [
			"o2",
			"alphabet",
			"red",
			"square",
			"letter"
		],
		skins: [
			{
				unified: "1f17e-fe0f",
				native: "🅾️"
			}
		],
		version: 1
	},
	ok: {
		id: "ok",
		name: "Ok Button",
		keywords: [
			"good",
			"agree",
			"yes",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f197",
				native: "🆗"
			}
		],
		version: 1
	},
	parking: {
		id: "parking",
		name: "P Button",
		keywords: [
			"parking",
			"cars",
			"blue",
			"square",
			"alphabet",
			"letter"
		],
		skins: [
			{
				unified: "1f17f-fe0f",
				native: "🅿️"
			}
		],
		version: 1
	},
	sos: {
		id: "sos",
		name: "Sos Button",
		keywords: [
			"help",
			"red",
			"square",
			"words",
			"emergency",
			"911"
		],
		skins: [
			{
				unified: "1f198",
				native: "🆘"
			}
		],
		version: 1
	},
	up: {
		id: "up",
		name: "Up! Button",
		keywords: [
			"up",
			"blue",
			"square",
			"above",
			"high"
		],
		skins: [
			{
				unified: "1f199",
				native: "🆙"
			}
		],
		version: 1
	},
	vs: {
		id: "vs",
		name: "Vs Button",
		keywords: [
			"words",
			"orange",
			"square"
		],
		skins: [
			{
				unified: "1f19a",
				native: "🆚"
			}
		],
		version: 1
	},
	koko: {
		id: "koko",
		name: "Squared Katakana Koko",
		keywords: [
			"japanese",
			"here",
			"button",
			"blue",
			"square",
			"destination"
		],
		skins: [
			{
				unified: "1f201",
				native: "🈁"
			}
		],
		version: 1
	},
	sa: {
		id: "sa",
		name: "Squared Katakana Sa",
		keywords: [
			"japanese",
			"service",
			"charge",
			"button",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f202-fe0f",
				native: "🈂️"
			}
		],
		version: 1
	},
	u6708: {
		id: "u6708",
		name: "Japanese “monthly Amount” Button",
		keywords: [
			"u6708",
			"monthly",
			"amount",
			"chinese",
			"month",
			"moon",
			"orange",
			"square",
			"kanji"
		],
		skins: [
			{
				unified: "1f237-fe0f",
				native: "🈷️"
			}
		],
		version: 1
	},
	u6709: {
		id: "u6709",
		name: "Squared Cjk Unified Ideograph-6709",
		keywords: [
			"u6709",
			"japanese",
			"not",
			"free",
			"of",
			"charge",
			"button",
			"orange",
			"square",
			"chinese",
			"have",
			"kanji"
		],
		skins: [
			{
				unified: "1f236",
				native: "🈶"
			}
		],
		version: 1
	},
	u6307: {
		id: "u6307",
		name: "Japanese “reserved” Button",
		keywords: [
			"u6307",
			"reserved",
			"chinese",
			"point",
			"green",
			"square",
			"kanji"
		],
		skins: [
			{
				unified: "1f22f",
				native: "🈯"
			}
		],
		version: 1
	},
	ideograph_advantage: {
		id: "ideograph_advantage",
		name: "Japanese “bargain” Button",
		keywords: [
			"ideograph",
			"advantage",
			"bargain",
			"chinese",
			"kanji",
			"obtain",
			"get",
			"circle"
		],
		skins: [
			{
				unified: "1f250",
				native: "🉐"
			}
		],
		version: 1
	},
	u5272: {
		id: "u5272",
		name: "Japanese “discount” Button",
		keywords: [
			"u5272",
			"discount",
			"cut",
			"divide",
			"chinese",
			"kanji",
			"pink",
			"square"
		],
		skins: [
			{
				unified: "1f239",
				native: "🈹"
			}
		],
		version: 1
	},
	u7121: {
		id: "u7121",
		name: "Japanese “free of Charge” Button",
		keywords: [
			"u7121",
			"free",
			"charge",
			"nothing",
			"chinese",
			"kanji",
			"orange",
			"square"
		],
		skins: [
			{
				unified: "1f21a",
				native: "🈚"
			}
		],
		version: 1
	},
	u7981: {
		id: "u7981",
		name: "Japanese “prohibited” Button",
		keywords: [
			"u7981",
			"prohibited",
			"kanji",
			"chinese",
			"forbidden",
			"limit",
			"restricted",
			"red",
			"square"
		],
		skins: [
			{
				unified: "1f232",
				native: "🈲"
			}
		],
		version: 1
	},
	accept: {
		id: "accept",
		name: "Circled Ideograph Accept",
		keywords: [
			"japanese",
			"acceptable",
			"button",
			"ok",
			"good",
			"chinese",
			"kanji",
			"agree",
			"yes",
			"orange",
			"circle"
		],
		skins: [
			{
				unified: "1f251",
				native: "🉑"
			}
		],
		version: 1
	},
	u7533: {
		id: "u7533",
		name: "Japanese “application” Button",
		keywords: [
			"u7533",
			"application",
			"chinese",
			"kanji",
			"orange",
			"square"
		],
		skins: [
			{
				unified: "1f238",
				native: "🈸"
			}
		],
		version: 1
	},
	u5408: {
		id: "u5408",
		name: "Japanese “passing Grade” Button",
		keywords: [
			"u5408",
			"passing",
			"grade",
			"chinese",
			"join",
			"kanji",
			"red",
			"square"
		],
		skins: [
			{
				unified: "1f234",
				native: "🈴"
			}
		],
		version: 1
	},
	u7a7a: {
		id: "u7a7a",
		name: "Japanese “vacancy” Button",
		keywords: [
			"u7a7a",
			"vacancy",
			"kanji",
			"chinese",
			"empty",
			"sky",
			"blue",
			"square"
		],
		skins: [
			{
				unified: "1f233",
				native: "🈳"
			}
		],
		version: 1
	},
	congratulations: {
		id: "congratulations",
		name: "Circled Ideograph Congratulation",
		keywords: [
			"congratulations",
			"japanese",
			"button",
			"chinese",
			"kanji",
			"red",
			"circle"
		],
		skins: [
			{
				unified: "3297-fe0f",
				native: "㊗️"
			}
		],
		version: 1
	},
	secret: {
		id: "secret",
		name: "Circled Ideograph Secret",
		keywords: [
			"japanese",
			"button",
			"privacy",
			"chinese",
			"sshh",
			"kanji",
			"red",
			"circle"
		],
		skins: [
			{
				unified: "3299-fe0f",
				native: "㊙️"
			}
		],
		version: 1
	},
	u55b6: {
		id: "u55b6",
		name: "Squared Cjk Unified Ideograph-55b6",
		keywords: [
			"u55b6",
			"japanese",
			"open",
			"for",
			"business",
			"button",
			"opening",
			"hours",
			"orange",
			"square"
		],
		skins: [
			{
				unified: "1f23a",
				native: "🈺"
			}
		],
		version: 1
	},
	u6e80: {
		id: "u6e80",
		name: "Japanese “no Vacancy” Button",
		keywords: [
			"u6e80",
			"no",
			"vacancy",
			"full",
			"chinese",
			"red",
			"square",
			"kanji"
		],
		skins: [
			{
				unified: "1f235",
				native: "🈵"
			}
		],
		version: 1
	},
	red_circle: {
		id: "red_circle",
		name: "Red Circle",
		keywords: [
			"shape",
			"error",
			"danger"
		],
		skins: [
			{
				unified: "1f534",
				native: "🔴"
			}
		],
		version: 1
	},
	large_orange_circle: {
		id: "large_orange_circle",
		name: "Orange Circle",
		keywords: [
			"large",
			"round"
		],
		skins: [
			{
				unified: "1f7e0",
				native: "🟠"
			}
		],
		version: 12
	},
	large_yellow_circle: {
		id: "large_yellow_circle",
		name: "Yellow Circle",
		keywords: [
			"large",
			"round"
		],
		skins: [
			{
				unified: "1f7e1",
				native: "🟡"
			}
		],
		version: 12
	},
	large_green_circle: {
		id: "large_green_circle",
		name: "Green Circle",
		keywords: [
			"large",
			"round"
		],
		skins: [
			{
				unified: "1f7e2",
				native: "🟢"
			}
		],
		version: 12
	},
	large_blue_circle: {
		id: "large_blue_circle",
		name: "Blue Circle",
		keywords: [
			"large",
			"shape",
			"icon",
			"button"
		],
		skins: [
			{
				unified: "1f535",
				native: "🔵"
			}
		],
		version: 1
	},
	large_purple_circle: {
		id: "large_purple_circle",
		name: "Purple Circle",
		keywords: [
			"large",
			"round"
		],
		skins: [
			{
				unified: "1f7e3",
				native: "🟣"
			}
		],
		version: 12
	},
	large_brown_circle: {
		id: "large_brown_circle",
		name: "Brown Circle",
		keywords: [
			"large",
			"round"
		],
		skins: [
			{
				unified: "1f7e4",
				native: "🟤"
			}
		],
		version: 12
	},
	black_circle: {
		id: "black_circle",
		name: "Black Circle",
		keywords: [
			"shape",
			"button",
			"round"
		],
		skins: [
			{
				unified: "26ab",
				native: "⚫"
			}
		],
		version: 1
	},
	white_circle: {
		id: "white_circle",
		name: "White Circle",
		keywords: [
			"shape",
			"round"
		],
		skins: [
			{
				unified: "26aa",
				native: "⚪"
			}
		],
		version: 1
	},
	large_red_square: {
		id: "large_red_square",
		name: "Red Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7e5",
				native: "🟥"
			}
		],
		version: 12
	},
	large_orange_square: {
		id: "large_orange_square",
		name: "Orange Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7e7",
				native: "🟧"
			}
		],
		version: 12
	},
	large_yellow_square: {
		id: "large_yellow_square",
		name: "Yellow Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7e8",
				native: "🟨"
			}
		],
		version: 12
	},
	large_green_square: {
		id: "large_green_square",
		name: "Green Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7e9",
				native: "🟩"
			}
		],
		version: 12
	},
	large_blue_square: {
		id: "large_blue_square",
		name: "Blue Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7e6",
				native: "🟦"
			}
		],
		version: 12
	},
	large_purple_square: {
		id: "large_purple_square",
		name: "Purple Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7ea",
				native: "🟪"
			}
		],
		version: 12
	},
	large_brown_square: {
		id: "large_brown_square",
		name: "Brown Square",
		keywords: [
			"large"
		],
		skins: [
			{
				unified: "1f7eb",
				native: "🟫"
			}
		],
		version: 12
	},
	black_large_square: {
		id: "black_large_square",
		name: "Black Large Square",
		keywords: [
			"shape",
			"icon",
			"button"
		],
		skins: [
			{
				unified: "2b1b",
				native: "⬛"
			}
		],
		version: 1
	},
	white_large_square: {
		id: "white_large_square",
		name: "White Large Square",
		keywords: [
			"shape",
			"icon",
			"stone",
			"button"
		],
		skins: [
			{
				unified: "2b1c",
				native: "⬜"
			}
		],
		version: 1
	},
	black_medium_square: {
		id: "black_medium_square",
		name: "Black Medium Square",
		keywords: [
			"shape",
			"button",
			"icon"
		],
		skins: [
			{
				unified: "25fc-fe0f",
				native: "◼️"
			}
		],
		version: 1
	},
	white_medium_square: {
		id: "white_medium_square",
		name: "White Medium Square",
		keywords: [
			"shape",
			"stone",
			"icon"
		],
		skins: [
			{
				unified: "25fb-fe0f",
				native: "◻️"
			}
		],
		version: 1
	},
	black_medium_small_square: {
		id: "black_medium_small_square",
		name: "Black Medium Small Square",
		keywords: [
			"icon",
			"shape",
			"button"
		],
		skins: [
			{
				unified: "25fe",
				native: "◾"
			}
		],
		version: 1
	},
	white_medium_small_square: {
		id: "white_medium_small_square",
		name: "White Medium Small Square",
		keywords: [
			"shape",
			"stone",
			"icon",
			"button"
		],
		skins: [
			{
				unified: "25fd",
				native: "◽"
			}
		],
		version: 1
	},
	black_small_square: {
		id: "black_small_square",
		name: "Black Small Square",
		keywords: [
			"shape",
			"icon"
		],
		skins: [
			{
				unified: "25aa-fe0f",
				native: "▪️"
			}
		],
		version: 1
	},
	white_small_square: {
		id: "white_small_square",
		name: "White Small Square",
		keywords: [
			"shape",
			"icon"
		],
		skins: [
			{
				unified: "25ab-fe0f",
				native: "▫️"
			}
		],
		version: 1
	},
	large_orange_diamond: {
		id: "large_orange_diamond",
		name: "Large Orange Diamond",
		keywords: [
			"shape",
			"jewel",
			"gem"
		],
		skins: [
			{
				unified: "1f536",
				native: "🔶"
			}
		],
		version: 1
	},
	large_blue_diamond: {
		id: "large_blue_diamond",
		name: "Large Blue Diamond",
		keywords: [
			"shape",
			"jewel",
			"gem"
		],
		skins: [
			{
				unified: "1f537",
				native: "🔷"
			}
		],
		version: 1
	},
	small_orange_diamond: {
		id: "small_orange_diamond",
		name: "Small Orange Diamond",
		keywords: [
			"shape",
			"jewel",
			"gem"
		],
		skins: [
			{
				unified: "1f538",
				native: "🔸"
			}
		],
		version: 1
	},
	small_blue_diamond: {
		id: "small_blue_diamond",
		name: "Small Blue Diamond",
		keywords: [
			"shape",
			"jewel",
			"gem"
		],
		skins: [
			{
				unified: "1f539",
				native: "🔹"
			}
		],
		version: 1
	},
	small_red_triangle: {
		id: "small_red_triangle",
		name: "Red Triangle Pointed Up",
		keywords: [
			"small",
			"shape",
			"direction",
			"top"
		],
		skins: [
			{
				unified: "1f53a",
				native: "🔺"
			}
		],
		version: 1
	},
	small_red_triangle_down: {
		id: "small_red_triangle_down",
		name: "Red Triangle Pointed Down",
		keywords: [
			"small",
			"shape",
			"direction",
			"bottom"
		],
		skins: [
			{
				unified: "1f53b",
				native: "🔻"
			}
		],
		version: 1
	},
	diamond_shape_with_a_dot_inside: {
		id: "diamond_shape_with_a_dot_inside",
		name: "Diamond with a Dot",
		keywords: [
			"shape",
			"inside",
			"jewel",
			"blue",
			"gem",
			"crystal",
			"fancy"
		],
		skins: [
			{
				unified: "1f4a0",
				native: "💠"
			}
		],
		version: 1
	},
	radio_button: {
		id: "radio_button",
		name: "Radio Button",
		keywords: [
			"input",
			"old",
			"music",
			"circle"
		],
		skins: [
			{
				unified: "1f518",
				native: "🔘"
			}
		],
		version: 1
	},
	white_square_button: {
		id: "white_square_button",
		name: "White Square Button",
		keywords: [
			"shape",
			"input"
		],
		skins: [
			{
				unified: "1f533",
				native: "🔳"
			}
		],
		version: 1
	},
	black_square_button: {
		id: "black_square_button",
		name: "Black Square Button",
		keywords: [
			"shape",
			"input",
			"frame"
		],
		skins: [
			{
				unified: "1f532",
				native: "🔲"
			}
		],
		version: 1
	},
	checkered_flag: {
		id: "checkered_flag",
		name: "Chequered Flag",
		keywords: [
			"checkered",
			"contest",
			"finishline",
			"race",
			"gokart"
		],
		skins: [
			{
				unified: "1f3c1",
				native: "🏁"
			}
		],
		version: 1
	},
	triangular_flag_on_post: {
		id: "triangular_flag_on_post",
		name: "Triangular Flag",
		keywords: [
			"on",
			"post",
			"mark",
			"milestone",
			"place"
		],
		skins: [
			{
				unified: "1f6a9",
				native: "🚩"
			}
		],
		version: 1
	},
	crossed_flags: {
		id: "crossed_flags",
		name: "Crossed Flags",
		keywords: [
			"japanese",
			"nation",
			"country",
			"border"
		],
		skins: [
			{
				unified: "1f38c",
				native: "🎌"
			}
		],
		version: 1
	},
	waving_black_flag: {
		id: "waving_black_flag",
		name: "Black Flag",
		keywords: [
			"waving",
			"pirate"
		],
		skins: [
			{
				unified: "1f3f4",
				native: "🏴"
			}
		],
		version: 1
	},
	waving_white_flag: {
		id: "waving_white_flag",
		name: "White Flag",
		keywords: [
			"waving",
			"losing",
			"loser",
			"lost",
			"surrender",
			"give",
			"up",
			"fail"
		],
		skins: [
			{
				unified: "1f3f3-fe0f",
				native: "🏳️"
			}
		],
		version: 1
	},
	"rainbow-flag": {
		id: "rainbow-flag",
		name: "Rainbow Flag",
		keywords: [
			"pride",
			"gay",
			"lgbt",
			"glbt",
			"queer",
			"homosexual",
			"lesbian",
			"bisexual",
			"transgender"
		],
		skins: [
			{
				unified: "1f3f3-fe0f-200d-1f308",
				native: "🏳️‍🌈"
			}
		],
		version: 4
	},
	transgender_flag: {
		id: "transgender_flag",
		name: "Transgender Flag",
		keywords: [
			"lgbtq"
		],
		skins: [
			{
				unified: "1f3f3-fe0f-200d-26a7-fe0f",
				native: "🏳️‍⚧️"
			}
		],
		version: 13
	},
	pirate_flag: {
		id: "pirate_flag",
		name: "Pirate Flag",
		keywords: [
			"skull",
			"crossbones",
			"banner"
		],
		skins: [
			{
				unified: "1f3f4-200d-2620-fe0f",
				native: "🏴‍☠️"
			}
		],
		version: 11
	},
	"flag-ac": {
		id: "flag-ac",
		name: "Ascension Island Flag",
		keywords: [
			"ac"
		],
		skins: [
			{
				unified: "1f1e6-1f1e8",
				native: "🇦🇨"
			}
		],
		version: 2
	},
	"flag-ad": {
		id: "flag-ad",
		name: "Andorra Flag",
		keywords: [
			"ad",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1e9",
				native: "🇦🇩"
			}
		],
		version: 2
	},
	"flag-ae": {
		id: "flag-ae",
		name: "United Arab Emirates Flag",
		keywords: [
			"ae",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1ea",
				native: "🇦🇪"
			}
		],
		version: 2
	},
	"flag-af": {
		id: "flag-af",
		name: "Afghanistan Flag",
		keywords: [
			"af",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1eb",
				native: "🇦🇫"
			}
		],
		version: 2
	},
	"flag-ag": {
		id: "flag-ag",
		name: "Antigua & Barbuda Flag",
		keywords: [
			"ag",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1ec",
				native: "🇦🇬"
			}
		],
		version: 2
	},
	"flag-ai": {
		id: "flag-ai",
		name: "Anguilla Flag",
		keywords: [
			"ai",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1ee",
				native: "🇦🇮"
			}
		],
		version: 2
	},
	"flag-al": {
		id: "flag-al",
		name: "Albania Flag",
		keywords: [
			"al",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f1",
				native: "🇦🇱"
			}
		],
		version: 2
	},
	"flag-am": {
		id: "flag-am",
		name: "Armenia Flag",
		keywords: [
			"am",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f2",
				native: "🇦🇲"
			}
		],
		version: 2
	},
	"flag-ao": {
		id: "flag-ao",
		name: "Angola Flag",
		keywords: [
			"ao",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f4",
				native: "🇦🇴"
			}
		],
		version: 2
	},
	"flag-aq": {
		id: "flag-aq",
		name: "Antarctica Flag",
		keywords: [
			"aq",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f6",
				native: "🇦🇶"
			}
		],
		version: 2
	},
	"flag-ar": {
		id: "flag-ar",
		name: "Argentina Flag",
		keywords: [
			"ar",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f7",
				native: "🇦🇷"
			}
		],
		version: 2
	},
	"flag-as": {
		id: "flag-as",
		name: "American Samoa Flag",
		keywords: [
			"as",
			"ws",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f8",
				native: "🇦🇸"
			}
		],
		version: 2
	},
	"flag-at": {
		id: "flag-at",
		name: "Austria Flag",
		keywords: [
			"at",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1f9",
				native: "🇦🇹"
			}
		],
		version: 2
	},
	"flag-au": {
		id: "flag-au",
		name: "Australia Flag",
		keywords: [
			"au",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1fa",
				native: "🇦🇺"
			}
		],
		version: 2
	},
	"flag-aw": {
		id: "flag-aw",
		name: "Aruba Flag",
		keywords: [
			"aw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1fc",
				native: "🇦🇼"
			}
		],
		version: 2
	},
	"flag-ax": {
		id: "flag-ax",
		name: "Åland Islands Flag",
		keywords: [
			"ax",
			"aland",
			"Aland",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1fd",
				native: "🇦🇽"
			}
		],
		version: 2
	},
	"flag-az": {
		id: "flag-az",
		name: "Azerbaijan Flag",
		keywords: [
			"az",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e6-1f1ff",
				native: "🇦🇿"
			}
		],
		version: 2
	},
	"flag-ba": {
		id: "flag-ba",
		name: "Bosnia & Herzegovina Flag",
		keywords: [
			"ba",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1e6",
				native: "🇧🇦"
			}
		],
		version: 2
	},
	"flag-bb": {
		id: "flag-bb",
		name: "Barbados Flag",
		keywords: [
			"bb",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1e7",
				native: "🇧🇧"
			}
		],
		version: 2
	},
	"flag-bd": {
		id: "flag-bd",
		name: "Bangladesh Flag",
		keywords: [
			"bd",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1e9",
				native: "🇧🇩"
			}
		],
		version: 2
	},
	"flag-be": {
		id: "flag-be",
		name: "Belgium Flag",
		keywords: [
			"be",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1ea",
				native: "🇧🇪"
			}
		],
		version: 2
	},
	"flag-bf": {
		id: "flag-bf",
		name: "Burkina Faso Flag",
		keywords: [
			"bf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1eb",
				native: "🇧🇫"
			}
		],
		version: 2
	},
	"flag-bg": {
		id: "flag-bg",
		name: "Bulgaria Flag",
		keywords: [
			"bg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1ec",
				native: "🇧🇬"
			}
		],
		version: 2
	},
	"flag-bh": {
		id: "flag-bh",
		name: "Bahrain Flag",
		keywords: [
			"bh",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1ed",
				native: "🇧🇭"
			}
		],
		version: 2
	},
	"flag-bi": {
		id: "flag-bi",
		name: "Burundi Flag",
		keywords: [
			"bi",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1ee",
				native: "🇧🇮"
			}
		],
		version: 2
	},
	"flag-bj": {
		id: "flag-bj",
		name: "Benin Flag",
		keywords: [
			"bj",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1ef",
				native: "🇧🇯"
			}
		],
		version: 2
	},
	"flag-bl": {
		id: "flag-bl",
		name: "St. Barthélemy Flag",
		keywords: [
			"bl",
			"st",
			"barthelemy",
			"saint",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f1",
				native: "🇧🇱"
			}
		],
		version: 2
	},
	"flag-bm": {
		id: "flag-bm",
		name: "Bermuda Flag",
		keywords: [
			"bm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f2",
				native: "🇧🇲"
			}
		],
		version: 2
	},
	"flag-bn": {
		id: "flag-bn",
		name: "Brunei Flag",
		keywords: [
			"bn",
			"darussalam",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f3",
				native: "🇧🇳"
			}
		],
		version: 2
	},
	"flag-bo": {
		id: "flag-bo",
		name: "Bolivia Flag",
		keywords: [
			"bo",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f4",
				native: "🇧🇴"
			}
		],
		version: 2
	},
	"flag-bq": {
		id: "flag-bq",
		name: "Caribbean Netherlands Flag",
		keywords: [
			"bq",
			"bonaire",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f6",
				native: "🇧🇶"
			}
		],
		version: 2
	},
	"flag-br": {
		id: "flag-br",
		name: "Brazil Flag",
		keywords: [
			"br",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f7",
				native: "🇧🇷"
			}
		],
		version: 2
	},
	"flag-bs": {
		id: "flag-bs",
		name: "Bahamas Flag",
		keywords: [
			"bs",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f8",
				native: "🇧🇸"
			}
		],
		version: 2
	},
	"flag-bt": {
		id: "flag-bt",
		name: "Bhutan Flag",
		keywords: [
			"bt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1f9",
				native: "🇧🇹"
			}
		],
		version: 2
	},
	"flag-bv": {
		id: "flag-bv",
		name: "Bouvet Island Flag",
		keywords: [
			"bv",
			"norway"
		],
		skins: [
			{
				unified: "1f1e7-1f1fb",
				native: "🇧🇻"
			}
		],
		version: 2
	},
	"flag-bw": {
		id: "flag-bw",
		name: "Botswana Flag",
		keywords: [
			"bw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1fc",
				native: "🇧🇼"
			}
		],
		version: 2
	},
	"flag-by": {
		id: "flag-by",
		name: "Belarus Flag",
		keywords: [
			"by",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1fe",
				native: "🇧🇾"
			}
		],
		version: 2
	},
	"flag-bz": {
		id: "flag-bz",
		name: "Belize Flag",
		keywords: [
			"bz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e7-1f1ff",
				native: "🇧🇿"
			}
		],
		version: 2
	},
	"flag-ca": {
		id: "flag-ca",
		name: "Canada Flag",
		keywords: [
			"ca",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1e6",
				native: "🇨🇦"
			}
		],
		version: 2
	},
	"flag-cc": {
		id: "flag-cc",
		name: "Cocos (keeling) Islands Flag",
		keywords: [
			"cc",
			"keeling",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1e8",
				native: "🇨🇨"
			}
		],
		version: 2
	},
	"flag-cd": {
		id: "flag-cd",
		name: "Congo - Kinshasa Flag",
		keywords: [
			"cd",
			"democratic",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1e9",
				native: "🇨🇩"
			}
		],
		version: 2
	},
	"flag-cf": {
		id: "flag-cf",
		name: "Central African Republic Flag",
		keywords: [
			"cf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1eb",
				native: "🇨🇫"
			}
		],
		version: 2
	},
	"flag-cg": {
		id: "flag-cg",
		name: "Congo - Brazzaville Flag",
		keywords: [
			"cg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1ec",
				native: "🇨🇬"
			}
		],
		version: 2
	},
	"flag-ch": {
		id: "flag-ch",
		name: "Switzerland Flag",
		keywords: [
			"ch",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1ed",
				native: "🇨🇭"
			}
		],
		version: 2
	},
	"flag-ci": {
		id: "flag-ci",
		name: "Côte D’ivoire Flag",
		keywords: [
			"ci",
			"cote",
			"d",
			"ivoire",
			"ivory",
			"coast",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1ee",
				native: "🇨🇮"
			}
		],
		version: 2
	},
	"flag-ck": {
		id: "flag-ck",
		name: "Cook Islands Flag",
		keywords: [
			"ck",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1f0",
				native: "🇨🇰"
			}
		],
		version: 2
	},
	"flag-cl": {
		id: "flag-cl",
		name: "Chile Flag",
		keywords: [
			"cl",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1f1",
				native: "🇨🇱"
			}
		],
		version: 2
	},
	"flag-cm": {
		id: "flag-cm",
		name: "Cameroon Flag",
		keywords: [
			"cm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1f2",
				native: "🇨🇲"
			}
		],
		version: 2
	},
	cn: {
		id: "cn",
		name: "China Flag",
		keywords: [
			"cn",
			"chinese",
			"prc",
			"country",
			"nation",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1f3",
				native: "🇨🇳"
			}
		],
		version: 1
	},
	"flag-co": {
		id: "flag-co",
		name: "Colombia Flag",
		keywords: [
			"co",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1f4",
				native: "🇨🇴"
			}
		],
		version: 2
	},
	"flag-cp": {
		id: "flag-cp",
		name: "Clipperton Island Flag",
		keywords: [
			"cp"
		],
		skins: [
			{
				unified: "1f1e8-1f1f5",
				native: "🇨🇵"
			}
		],
		version: 2
	},
	"flag-cr": {
		id: "flag-cr",
		name: "Costa Rica Flag",
		keywords: [
			"cr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1f7",
				native: "🇨🇷"
			}
		],
		version: 2
	},
	"flag-cu": {
		id: "flag-cu",
		name: "Cuba Flag",
		keywords: [
			"cu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1fa",
				native: "🇨🇺"
			}
		],
		version: 2
	},
	"flag-cv": {
		id: "flag-cv",
		name: "Cape Verde Flag",
		keywords: [
			"cv",
			"cabo",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1fb",
				native: "🇨🇻"
			}
		],
		version: 2
	},
	"flag-cw": {
		id: "flag-cw",
		name: "Curaçao Flag",
		keywords: [
			"cw",
			"curacao",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1fc",
				native: "🇨🇼"
			}
		],
		version: 2
	},
	"flag-cx": {
		id: "flag-cx",
		name: "Christmas Island Flag",
		keywords: [
			"cx",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1fd",
				native: "🇨🇽"
			}
		],
		version: 2
	},
	"flag-cy": {
		id: "flag-cy",
		name: "Cyprus Flag",
		keywords: [
			"cy",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1fe",
				native: "🇨🇾"
			}
		],
		version: 2
	},
	"flag-cz": {
		id: "flag-cz",
		name: "Czechia Flag",
		keywords: [
			"cz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e8-1f1ff",
				native: "🇨🇿"
			}
		],
		version: 2
	},
	de: {
		id: "de",
		name: "Germany Flag",
		keywords: [
			"de",
			"german",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e9-1f1ea",
				native: "🇩🇪"
			}
		],
		version: 1
	},
	"flag-dg": {
		id: "flag-dg",
		name: "Diego Garcia Flag",
		keywords: [
			"dg"
		],
		skins: [
			{
				unified: "1f1e9-1f1ec",
				native: "🇩🇬"
			}
		],
		version: 2
	},
	"flag-dj": {
		id: "flag-dj",
		name: "Djibouti Flag",
		keywords: [
			"dj",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e9-1f1ef",
				native: "🇩🇯"
			}
		],
		version: 2
	},
	"flag-dk": {
		id: "flag-dk",
		name: "Denmark Flag",
		keywords: [
			"dk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e9-1f1f0",
				native: "🇩🇰"
			}
		],
		version: 2
	},
	"flag-dm": {
		id: "flag-dm",
		name: "Dominica Flag",
		keywords: [
			"dm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e9-1f1f2",
				native: "🇩🇲"
			}
		],
		version: 2
	},
	"flag-do": {
		id: "flag-do",
		name: "Dominican Republic Flag",
		keywords: [
			"do",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e9-1f1f4",
				native: "🇩🇴"
			}
		],
		version: 2
	},
	"flag-dz": {
		id: "flag-dz",
		name: "Algeria Flag",
		keywords: [
			"dz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1e9-1f1ff",
				native: "🇩🇿"
			}
		],
		version: 2
	},
	"flag-ea": {
		id: "flag-ea",
		name: "Ceuta & Melilla Flag",
		keywords: [
			"ea"
		],
		skins: [
			{
				unified: "1f1ea-1f1e6",
				native: "🇪🇦"
			}
		],
		version: 2
	},
	"flag-ec": {
		id: "flag-ec",
		name: "Ecuador Flag",
		keywords: [
			"ec",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1e8",
				native: "🇪🇨"
			}
		],
		version: 2
	},
	"flag-ee": {
		id: "flag-ee",
		name: "Estonia Flag",
		keywords: [
			"ee",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1ea",
				native: "🇪🇪"
			}
		],
		version: 2
	},
	"flag-eg": {
		id: "flag-eg",
		name: "Egypt Flag",
		keywords: [
			"eg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1ec",
				native: "🇪🇬"
			}
		],
		version: 2
	},
	"flag-eh": {
		id: "flag-eh",
		name: "Western Sahara Flag",
		keywords: [
			"eh",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1ed",
				native: "🇪🇭"
			}
		],
		version: 2
	},
	"flag-er": {
		id: "flag-er",
		name: "Eritrea Flag",
		keywords: [
			"er",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1f7",
				native: "🇪🇷"
			}
		],
		version: 2
	},
	es: {
		id: "es",
		name: "Spain Flag",
		keywords: [
			"es",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1f8",
				native: "🇪🇸"
			}
		],
		version: 1
	},
	"flag-et": {
		id: "flag-et",
		name: "Ethiopia Flag",
		keywords: [
			"et",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1f9",
				native: "🇪🇹"
			}
		],
		version: 2
	},
	"flag-eu": {
		id: "flag-eu",
		name: "European Union Flag",
		keywords: [
			"eu",
			"banner"
		],
		skins: [
			{
				unified: "1f1ea-1f1fa",
				native: "🇪🇺"
			}
		],
		version: 2
	},
	"flag-fi": {
		id: "flag-fi",
		name: "Finland Flag",
		keywords: [
			"fi",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1eb-1f1ee",
				native: "🇫🇮"
			}
		],
		version: 2
	},
	"flag-fj": {
		id: "flag-fj",
		name: "Fiji Flag",
		keywords: [
			"fj",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1eb-1f1ef",
				native: "🇫🇯"
			}
		],
		version: 2
	},
	"flag-fk": {
		id: "flag-fk",
		name: "Falkland Islands Flag",
		keywords: [
			"fk",
			"malvinas",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1eb-1f1f0",
				native: "🇫🇰"
			}
		],
		version: 2
	},
	"flag-fm": {
		id: "flag-fm",
		name: "Micronesia Flag",
		keywords: [
			"fm",
			"federated",
			"states",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1eb-1f1f2",
				native: "🇫🇲"
			}
		],
		version: 2
	},
	"flag-fo": {
		id: "flag-fo",
		name: "Faroe Islands Flag",
		keywords: [
			"fo",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1eb-1f1f4",
				native: "🇫🇴"
			}
		],
		version: 2
	},
	fr: {
		id: "fr",
		name: "France Flag",
		keywords: [
			"fr",
			"banner",
			"nation",
			"french",
			"country"
		],
		skins: [
			{
				unified: "1f1eb-1f1f7",
				native: "🇫🇷"
			}
		],
		version: 1
	},
	"flag-ga": {
		id: "flag-ga",
		name: "Gabon Flag",
		keywords: [
			"ga",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1e6",
				native: "🇬🇦"
			}
		],
		version: 2
	},
	gb: {
		id: "gb",
		name: "United Kingdom Flag",
		keywords: [
			"gb",
			"uk",
			"great",
			"britain",
			"northern",
			"ireland",
			"nation",
			"country",
			"banner",
			"british",
			"UK",
			"english",
			"england",
			"union",
			"jack"
		],
		skins: [
			{
				unified: "1f1ec-1f1e7",
				native: "🇬🇧"
			}
		],
		version: 1
	},
	"flag-gd": {
		id: "flag-gd",
		name: "Grenada Flag",
		keywords: [
			"gd",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1e9",
				native: "🇬🇩"
			}
		],
		version: 2
	},
	"flag-ge": {
		id: "flag-ge",
		name: "Georgia Flag",
		keywords: [
			"ge",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1ea",
				native: "🇬🇪"
			}
		],
		version: 2
	},
	"flag-gf": {
		id: "flag-gf",
		name: "French Guiana Flag",
		keywords: [
			"gf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1eb",
				native: "🇬🇫"
			}
		],
		version: 2
	},
	"flag-gg": {
		id: "flag-gg",
		name: "Guernsey Flag",
		keywords: [
			"gg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1ec",
				native: "🇬🇬"
			}
		],
		version: 2
	},
	"flag-gh": {
		id: "flag-gh",
		name: "Ghana Flag",
		keywords: [
			"gh",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1ed",
				native: "🇬🇭"
			}
		],
		version: 2
	},
	"flag-gi": {
		id: "flag-gi",
		name: "Gibraltar Flag",
		keywords: [
			"gi",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1ee",
				native: "🇬🇮"
			}
		],
		version: 2
	},
	"flag-gl": {
		id: "flag-gl",
		name: "Greenland Flag",
		keywords: [
			"gl",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f1",
				native: "🇬🇱"
			}
		],
		version: 2
	},
	"flag-gm": {
		id: "flag-gm",
		name: "Gambia Flag",
		keywords: [
			"gm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f2",
				native: "🇬🇲"
			}
		],
		version: 2
	},
	"flag-gn": {
		id: "flag-gn",
		name: "Guinea Flag",
		keywords: [
			"gn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f3",
				native: "🇬🇳"
			}
		],
		version: 2
	},
	"flag-gp": {
		id: "flag-gp",
		name: "Guadeloupe Flag",
		keywords: [
			"gp",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f5",
				native: "🇬🇵"
			}
		],
		version: 2
	},
	"flag-gq": {
		id: "flag-gq",
		name: "Equatorial Guinea Flag",
		keywords: [
			"gq",
			"gn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f6",
				native: "🇬🇶"
			}
		],
		version: 2
	},
	"flag-gr": {
		id: "flag-gr",
		name: "Greece Flag",
		keywords: [
			"gr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f7",
				native: "🇬🇷"
			}
		],
		version: 2
	},
	"flag-gs": {
		id: "flag-gs",
		name: "South Georgia & South Sandwich Islands Flag",
		keywords: [
			"gs",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f8",
				native: "🇬🇸"
			}
		],
		version: 2
	},
	"flag-gt": {
		id: "flag-gt",
		name: "Guatemala Flag",
		keywords: [
			"gt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1f9",
				native: "🇬🇹"
			}
		],
		version: 2
	},
	"flag-gu": {
		id: "flag-gu",
		name: "Guam Flag",
		keywords: [
			"gu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1fa",
				native: "🇬🇺"
			}
		],
		version: 2
	},
	"flag-gw": {
		id: "flag-gw",
		name: "Guinea-Bissau Flag",
		keywords: [
			"gw",
			"guinea",
			"bissau",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1fc",
				native: "🇬🇼"
			}
		],
		version: 2
	},
	"flag-gy": {
		id: "flag-gy",
		name: "Guyana Flag",
		keywords: [
			"gy",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ec-1f1fe",
				native: "🇬🇾"
			}
		],
		version: 2
	},
	"flag-hk": {
		id: "flag-hk",
		name: "Hong Kong Sar China Flag",
		keywords: [
			"hk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ed-1f1f0",
				native: "🇭🇰"
			}
		],
		version: 2
	},
	"flag-hm": {
		id: "flag-hm",
		name: "Heard & Mcdonald Islands Flag",
		keywords: [
			"hm"
		],
		skins: [
			{
				unified: "1f1ed-1f1f2",
				native: "🇭🇲"
			}
		],
		version: 2
	},
	"flag-hn": {
		id: "flag-hn",
		name: "Honduras Flag",
		keywords: [
			"hn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ed-1f1f3",
				native: "🇭🇳"
			}
		],
		version: 2
	},
	"flag-hr": {
		id: "flag-hr",
		name: "Croatia Flag",
		keywords: [
			"hr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ed-1f1f7",
				native: "🇭🇷"
			}
		],
		version: 2
	},
	"flag-ht": {
		id: "flag-ht",
		name: "Haiti Flag",
		keywords: [
			"ht",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ed-1f1f9",
				native: "🇭🇹"
			}
		],
		version: 2
	},
	"flag-hu": {
		id: "flag-hu",
		name: "Hungary Flag",
		keywords: [
			"hu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ed-1f1fa",
				native: "🇭🇺"
			}
		],
		version: 2
	},
	"flag-ic": {
		id: "flag-ic",
		name: "Canary Islands Flag",
		keywords: [
			"ic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1e8",
				native: "🇮🇨"
			}
		],
		version: 2
	},
	"flag-id": {
		id: "flag-id",
		name: "Indonesia Flag",
		keywords: [
			"id",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1e9",
				native: "🇮🇩"
			}
		],
		version: 2
	},
	"flag-ie": {
		id: "flag-ie",
		name: "Ireland Flag",
		keywords: [
			"ie",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1ea",
				native: "🇮🇪"
			}
		],
		version: 2
	},
	"flag-il": {
		id: "flag-il",
		name: "Israel Flag",
		keywords: [
			"il",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f1",
				native: "🇮🇱"
			}
		],
		version: 2
	},
	"flag-im": {
		id: "flag-im",
		name: "Isle of Man Flag",
		keywords: [
			"im",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f2",
				native: "🇮🇲"
			}
		],
		version: 2
	},
	"flag-in": {
		id: "flag-in",
		name: "India Flag",
		keywords: [
			"in",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f3",
				native: "🇮🇳"
			}
		],
		version: 2
	},
	"flag-io": {
		id: "flag-io",
		name: "British Indian Ocean Territory Flag",
		keywords: [
			"io",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f4",
				native: "🇮🇴"
			}
		],
		version: 2
	},
	"flag-iq": {
		id: "flag-iq",
		name: "Iraq Flag",
		keywords: [
			"iq",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f6",
				native: "🇮🇶"
			}
		],
		version: 2
	},
	"flag-ir": {
		id: "flag-ir",
		name: "Iran Flag",
		keywords: [
			"ir",
			"islamic",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f7",
				native: "🇮🇷"
			}
		],
		version: 2
	},
	"flag-is": {
		id: "flag-is",
		name: "Iceland Flag",
		keywords: [
			"is",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f8",
				native: "🇮🇸"
			}
		],
		version: 2
	},
	it: {
		id: "it",
		name: "Italy Flag",
		keywords: [
			"it",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ee-1f1f9",
				native: "🇮🇹"
			}
		],
		version: 1
	},
	"flag-je": {
		id: "flag-je",
		name: "Jersey Flag",
		keywords: [
			"je",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ef-1f1ea",
				native: "🇯🇪"
			}
		],
		version: 2
	},
	"flag-jm": {
		id: "flag-jm",
		name: "Jamaica Flag",
		keywords: [
			"jm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ef-1f1f2",
				native: "🇯🇲"
			}
		],
		version: 2
	},
	"flag-jo": {
		id: "flag-jo",
		name: "Jordan Flag",
		keywords: [
			"jo",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ef-1f1f4",
				native: "🇯🇴"
			}
		],
		version: 2
	},
	jp: {
		id: "jp",
		name: "Japan Flag",
		keywords: [
			"jp",
			"japanese",
			"nation",
			"country",
			"banner",
			"ja"
		],
		skins: [
			{
				unified: "1f1ef-1f1f5",
				native: "🇯🇵"
			}
		],
		version: 1
	},
	"flag-ke": {
		id: "flag-ke",
		name: "Kenya Flag",
		keywords: [
			"ke",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1ea",
				native: "🇰🇪"
			}
		],
		version: 2
	},
	"flag-kg": {
		id: "flag-kg",
		name: "Kyrgyzstan Flag",
		keywords: [
			"kg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1ec",
				native: "🇰🇬"
			}
		],
		version: 2
	},
	"flag-kh": {
		id: "flag-kh",
		name: "Cambodia Flag",
		keywords: [
			"kh",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1ed",
				native: "🇰🇭"
			}
		],
		version: 2
	},
	"flag-ki": {
		id: "flag-ki",
		name: "Kiribati Flag",
		keywords: [
			"ki",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1ee",
				native: "🇰🇮"
			}
		],
		version: 2
	},
	"flag-km": {
		id: "flag-km",
		name: "Comoros Flag",
		keywords: [
			"km",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1f2",
				native: "🇰🇲"
			}
		],
		version: 2
	},
	"flag-kn": {
		id: "flag-kn",
		name: "St. Kitts & Nevis Flag",
		keywords: [
			"kn",
			"st",
			"saint",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1f3",
				native: "🇰🇳"
			}
		],
		version: 2
	},
	"flag-kp": {
		id: "flag-kp",
		name: "North Korea Flag",
		keywords: [
			"kp",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1f5",
				native: "🇰🇵"
			}
		],
		version: 2
	},
	kr: {
		id: "kr",
		name: "South Korea Flag",
		keywords: [
			"kr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1f7",
				native: "🇰🇷"
			}
		],
		version: 1
	},
	"flag-kw": {
		id: "flag-kw",
		name: "Kuwait Flag",
		keywords: [
			"kw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1fc",
				native: "🇰🇼"
			}
		],
		version: 2
	},
	"flag-ky": {
		id: "flag-ky",
		name: "Cayman Islands Flag",
		keywords: [
			"ky",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1fe",
				native: "🇰🇾"
			}
		],
		version: 2
	},
	"flag-kz": {
		id: "flag-kz",
		name: "Kazakhstan Flag",
		keywords: [
			"kz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f0-1f1ff",
				native: "🇰🇿"
			}
		],
		version: 2
	},
	"flag-la": {
		id: "flag-la",
		name: "Laos Flag",
		keywords: [
			"la",
			"lao",
			"democratic",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1e6",
				native: "🇱🇦"
			}
		],
		version: 2
	},
	"flag-lb": {
		id: "flag-lb",
		name: "Lebanon Flag",
		keywords: [
			"lb",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1e7",
				native: "🇱🇧"
			}
		],
		version: 2
	},
	"flag-lc": {
		id: "flag-lc",
		name: "St. Lucia Flag",
		keywords: [
			"lc",
			"st",
			"saint",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1e8",
				native: "🇱🇨"
			}
		],
		version: 2
	},
	"flag-li": {
		id: "flag-li",
		name: "Liechtenstein Flag",
		keywords: [
			"li",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1ee",
				native: "🇱🇮"
			}
		],
		version: 2
	},
	"flag-lk": {
		id: "flag-lk",
		name: "Sri Lanka Flag",
		keywords: [
			"lk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1f0",
				native: "🇱🇰"
			}
		],
		version: 2
	},
	"flag-lr": {
		id: "flag-lr",
		name: "Liberia Flag",
		keywords: [
			"lr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1f7",
				native: "🇱🇷"
			}
		],
		version: 2
	},
	"flag-ls": {
		id: "flag-ls",
		name: "Lesotho Flag",
		keywords: [
			"ls",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1f8",
				native: "🇱🇸"
			}
		],
		version: 2
	},
	"flag-lt": {
		id: "flag-lt",
		name: "Lithuania Flag",
		keywords: [
			"lt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1f9",
				native: "🇱🇹"
			}
		],
		version: 2
	},
	"flag-lu": {
		id: "flag-lu",
		name: "Luxembourg Flag",
		keywords: [
			"lu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1fa",
				native: "🇱🇺"
			}
		],
		version: 2
	},
	"flag-lv": {
		id: "flag-lv",
		name: "Latvia Flag",
		keywords: [
			"lv",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1fb",
				native: "🇱🇻"
			}
		],
		version: 2
	},
	"flag-ly": {
		id: "flag-ly",
		name: "Libya Flag",
		keywords: [
			"ly",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f1-1f1fe",
				native: "🇱🇾"
			}
		],
		version: 2
	},
	"flag-ma": {
		id: "flag-ma",
		name: "Morocco Flag",
		keywords: [
			"ma",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1e6",
				native: "🇲🇦"
			}
		],
		version: 2
	},
	"flag-mc": {
		id: "flag-mc",
		name: "Monaco Flag",
		keywords: [
			"mc",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1e8",
				native: "🇲🇨"
			}
		],
		version: 2
	},
	"flag-md": {
		id: "flag-md",
		name: "Moldova Flag",
		keywords: [
			"md",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1e9",
				native: "🇲🇩"
			}
		],
		version: 2
	},
	"flag-me": {
		id: "flag-me",
		name: "Montenegro Flag",
		keywords: [
			"me",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1ea",
				native: "🇲🇪"
			}
		],
		version: 2
	},
	"flag-mf": {
		id: "flag-mf",
		name: "St. Martin Flag",
		keywords: [
			"mf",
			"st"
		],
		skins: [
			{
				unified: "1f1f2-1f1eb",
				native: "🇲🇫"
			}
		],
		version: 2
	},
	"flag-mg": {
		id: "flag-mg",
		name: "Madagascar Flag",
		keywords: [
			"mg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1ec",
				native: "🇲🇬"
			}
		],
		version: 2
	},
	"flag-mh": {
		id: "flag-mh",
		name: "Marshall Islands Flag",
		keywords: [
			"mh",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1ed",
				native: "🇲🇭"
			}
		],
		version: 2
	},
	"flag-mk": {
		id: "flag-mk",
		name: "North Macedonia Flag",
		keywords: [
			"mk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f0",
				native: "🇲🇰"
			}
		],
		version: 2
	},
	"flag-ml": {
		id: "flag-ml",
		name: "Mali Flag",
		keywords: [
			"ml",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f1",
				native: "🇲🇱"
			}
		],
		version: 2
	},
	"flag-mm": {
		id: "flag-mm",
		name: "Myanmar (burma) Flag",
		keywords: [
			"mm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f2",
				native: "🇲🇲"
			}
		],
		version: 2
	},
	"flag-mn": {
		id: "flag-mn",
		name: "Mongolia Flag",
		keywords: [
			"mn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f3",
				native: "🇲🇳"
			}
		],
		version: 2
	},
	"flag-mo": {
		id: "flag-mo",
		name: "Macao Sar China Flag",
		keywords: [
			"mo",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f4",
				native: "🇲🇴"
			}
		],
		version: 2
	},
	"flag-mp": {
		id: "flag-mp",
		name: "Northern Mariana Islands Flag",
		keywords: [
			"mp",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f5",
				native: "🇲🇵"
			}
		],
		version: 2
	},
	"flag-mq": {
		id: "flag-mq",
		name: "Martinique Flag",
		keywords: [
			"mq",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f6",
				native: "🇲🇶"
			}
		],
		version: 2
	},
	"flag-mr": {
		id: "flag-mr",
		name: "Mauritania Flag",
		keywords: [
			"mr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f7",
				native: "🇲🇷"
			}
		],
		version: 2
	},
	"flag-ms": {
		id: "flag-ms",
		name: "Montserrat Flag",
		keywords: [
			"ms",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f8",
				native: "🇲🇸"
			}
		],
		version: 2
	},
	"flag-mt": {
		id: "flag-mt",
		name: "Malta Flag",
		keywords: [
			"mt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1f9",
				native: "🇲🇹"
			}
		],
		version: 2
	},
	"flag-mu": {
		id: "flag-mu",
		name: "Mauritius Flag",
		keywords: [
			"mu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1fa",
				native: "🇲🇺"
			}
		],
		version: 2
	},
	"flag-mv": {
		id: "flag-mv",
		name: "Maldives Flag",
		keywords: [
			"mv",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1fb",
				native: "🇲🇻"
			}
		],
		version: 2
	},
	"flag-mw": {
		id: "flag-mw",
		name: "Malawi Flag",
		keywords: [
			"mw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1fc",
				native: "🇲🇼"
			}
		],
		version: 2
	},
	"flag-mx": {
		id: "flag-mx",
		name: "Mexico Flag",
		keywords: [
			"mx",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1fd",
				native: "🇲🇽"
			}
		],
		version: 2
	},
	"flag-my": {
		id: "flag-my",
		name: "Malaysia Flag",
		keywords: [
			"my",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1fe",
				native: "🇲🇾"
			}
		],
		version: 2
	},
	"flag-mz": {
		id: "flag-mz",
		name: "Mozambique Flag",
		keywords: [
			"mz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f2-1f1ff",
				native: "🇲🇿"
			}
		],
		version: 2
	},
	"flag-na": {
		id: "flag-na",
		name: "Namibia Flag",
		keywords: [
			"na",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1e6",
				native: "🇳🇦"
			}
		],
		version: 2
	},
	"flag-nc": {
		id: "flag-nc",
		name: "New Caledonia Flag",
		keywords: [
			"nc",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1e8",
				native: "🇳🇨"
			}
		],
		version: 2
	},
	"flag-ne": {
		id: "flag-ne",
		name: "Niger Flag",
		keywords: [
			"ne",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1ea",
				native: "🇳🇪"
			}
		],
		version: 2
	},
	"flag-nf": {
		id: "flag-nf",
		name: "Norfolk Island Flag",
		keywords: [
			"nf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1eb",
				native: "🇳🇫"
			}
		],
		version: 2
	},
	"flag-ng": {
		id: "flag-ng",
		name: "Nigeria Flag",
		keywords: [
			"ng",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1ec",
				native: "🇳🇬"
			}
		],
		version: 2
	},
	"flag-ni": {
		id: "flag-ni",
		name: "Nicaragua Flag",
		keywords: [
			"ni",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1ee",
				native: "🇳🇮"
			}
		],
		version: 2
	},
	"flag-nl": {
		id: "flag-nl",
		name: "Netherlands Flag",
		keywords: [
			"nl",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1f1",
				native: "🇳🇱"
			}
		],
		version: 2
	},
	"flag-no": {
		id: "flag-no",
		name: "Norway Flag",
		keywords: [
			"no",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1f4",
				native: "🇳🇴"
			}
		],
		version: 2
	},
	"flag-np": {
		id: "flag-np",
		name: "Nepal Flag",
		keywords: [
			"np",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1f5",
				native: "🇳🇵"
			}
		],
		version: 2
	},
	"flag-nr": {
		id: "flag-nr",
		name: "Nauru Flag",
		keywords: [
			"nr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1f7",
				native: "🇳🇷"
			}
		],
		version: 2
	},
	"flag-nu": {
		id: "flag-nu",
		name: "Niue Flag",
		keywords: [
			"nu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1fa",
				native: "🇳🇺"
			}
		],
		version: 2
	},
	"flag-nz": {
		id: "flag-nz",
		name: "New Zealand Flag",
		keywords: [
			"nz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f3-1f1ff",
				native: "🇳🇿"
			}
		],
		version: 2
	},
	"flag-om": {
		id: "flag-om",
		name: "Oman Flag",
		keywords: [
			"om",
			"symbol",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f4-1f1f2",
				native: "🇴🇲"
			}
		],
		version: 2
	},
	"flag-pa": {
		id: "flag-pa",
		name: "Panama Flag",
		keywords: [
			"pa",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1e6",
				native: "🇵🇦"
			}
		],
		version: 2
	},
	"flag-pe": {
		id: "flag-pe",
		name: "Peru Flag",
		keywords: [
			"pe",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1ea",
				native: "🇵🇪"
			}
		],
		version: 2
	},
	"flag-pf": {
		id: "flag-pf",
		name: "French Polynesia Flag",
		keywords: [
			"pf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1eb",
				native: "🇵🇫"
			}
		],
		version: 2
	},
	"flag-pg": {
		id: "flag-pg",
		name: "Papua New Guinea Flag",
		keywords: [
			"pg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1ec",
				native: "🇵🇬"
			}
		],
		version: 2
	},
	"flag-ph": {
		id: "flag-ph",
		name: "Philippines Flag",
		keywords: [
			"ph",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1ed",
				native: "🇵🇭"
			}
		],
		version: 2
	},
	"flag-pk": {
		id: "flag-pk",
		name: "Pakistan Flag",
		keywords: [
			"pk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f0",
				native: "🇵🇰"
			}
		],
		version: 2
	},
	"flag-pl": {
		id: "flag-pl",
		name: "Poland Flag",
		keywords: [
			"pl",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f1",
				native: "🇵🇱"
			}
		],
		version: 2
	},
	"flag-pm": {
		id: "flag-pm",
		name: "St. Pierre & Miquelon Flag",
		keywords: [
			"pm",
			"st",
			"saint",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f2",
				native: "🇵🇲"
			}
		],
		version: 2
	},
	"flag-pn": {
		id: "flag-pn",
		name: "Pitcairn Islands Flag",
		keywords: [
			"pn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f3",
				native: "🇵🇳"
			}
		],
		version: 2
	},
	"flag-pr": {
		id: "flag-pr",
		name: "Puerto Rico Flag",
		keywords: [
			"pr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f7",
				native: "🇵🇷"
			}
		],
		version: 2
	},
	"flag-ps": {
		id: "flag-ps",
		name: "Palestinian Territories Flag",
		keywords: [
			"ps",
			"palestine",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f8",
				native: "🇵🇸"
			}
		],
		version: 2
	},
	"flag-pt": {
		id: "flag-pt",
		name: "Portugal Flag",
		keywords: [
			"pt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1f9",
				native: "🇵🇹"
			}
		],
		version: 2
	},
	"flag-pw": {
		id: "flag-pw",
		name: "Palau Flag",
		keywords: [
			"pw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1fc",
				native: "🇵🇼"
			}
		],
		version: 2
	},
	"flag-py": {
		id: "flag-py",
		name: "Paraguay Flag",
		keywords: [
			"py",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f5-1f1fe",
				native: "🇵🇾"
			}
		],
		version: 2
	},
	"flag-qa": {
		id: "flag-qa",
		name: "Qatar Flag",
		keywords: [
			"qa",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f6-1f1e6",
				native: "🇶🇦"
			}
		],
		version: 2
	},
	"flag-re": {
		id: "flag-re",
		name: "Réunion Flag",
		keywords: [
			"re",
			"reunion",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f7-1f1ea",
				native: "🇷🇪"
			}
		],
		version: 2
	},
	"flag-ro": {
		id: "flag-ro",
		name: "Romania Flag",
		keywords: [
			"ro",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f7-1f1f4",
				native: "🇷🇴"
			}
		],
		version: 2
	},
	"flag-rs": {
		id: "flag-rs",
		name: "Serbia Flag",
		keywords: [
			"rs",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f7-1f1f8",
				native: "🇷🇸"
			}
		],
		version: 2
	},
	ru: {
		id: "ru",
		name: "Russia Flag",
		keywords: [
			"ru",
			"russian",
			"federation",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f7-1f1fa",
				native: "🇷🇺"
			}
		],
		version: 1
	},
	"flag-rw": {
		id: "flag-rw",
		name: "Rwanda Flag",
		keywords: [
			"rw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f7-1f1fc",
				native: "🇷🇼"
			}
		],
		version: 2
	},
	"flag-sa": {
		id: "flag-sa",
		name: "Saudi Arabia Flag",
		keywords: [
			"sa",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1e6",
				native: "🇸🇦"
			}
		],
		version: 2
	},
	"flag-sb": {
		id: "flag-sb",
		name: "Solomon Islands Flag",
		keywords: [
			"sb",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1e7",
				native: "🇸🇧"
			}
		],
		version: 2
	},
	"flag-sc": {
		id: "flag-sc",
		name: "Seychelles Flag",
		keywords: [
			"sc",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1e8",
				native: "🇸🇨"
			}
		],
		version: 2
	},
	"flag-sd": {
		id: "flag-sd",
		name: "Sudan Flag",
		keywords: [
			"sd",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1e9",
				native: "🇸🇩"
			}
		],
		version: 2
	},
	"flag-se": {
		id: "flag-se",
		name: "Sweden Flag",
		keywords: [
			"se",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1ea",
				native: "🇸🇪"
			}
		],
		version: 2
	},
	"flag-sg": {
		id: "flag-sg",
		name: "Singapore Flag",
		keywords: [
			"sg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1ec",
				native: "🇸🇬"
			}
		],
		version: 2
	},
	"flag-sh": {
		id: "flag-sh",
		name: "St. Helena Flag",
		keywords: [
			"sh",
			"st",
			"saint",
			"ascension",
			"tristan",
			"cunha",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1ed",
				native: "🇸🇭"
			}
		],
		version: 2
	},
	"flag-si": {
		id: "flag-si",
		name: "Slovenia Flag",
		keywords: [
			"si",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1ee",
				native: "🇸🇮"
			}
		],
		version: 2
	},
	"flag-sj": {
		id: "flag-sj",
		name: "Svalbard & Jan Mayen Flag",
		keywords: [
			"sj"
		],
		skins: [
			{
				unified: "1f1f8-1f1ef",
				native: "🇸🇯"
			}
		],
		version: 2
	},
	"flag-sk": {
		id: "flag-sk",
		name: "Slovakia Flag",
		keywords: [
			"sk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f0",
				native: "🇸🇰"
			}
		],
		version: 2
	},
	"flag-sl": {
		id: "flag-sl",
		name: "Sierra Leone Flag",
		keywords: [
			"sl",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f1",
				native: "🇸🇱"
			}
		],
		version: 2
	},
	"flag-sm": {
		id: "flag-sm",
		name: "San Marino Flag",
		keywords: [
			"sm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f2",
				native: "🇸🇲"
			}
		],
		version: 2
	},
	"flag-sn": {
		id: "flag-sn",
		name: "Senegal Flag",
		keywords: [
			"sn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f3",
				native: "🇸🇳"
			}
		],
		version: 2
	},
	"flag-so": {
		id: "flag-so",
		name: "Somalia Flag",
		keywords: [
			"so",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f4",
				native: "🇸🇴"
			}
		],
		version: 2
	},
	"flag-sr": {
		id: "flag-sr",
		name: "Suriname Flag",
		keywords: [
			"sr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f7",
				native: "🇸🇷"
			}
		],
		version: 2
	},
	"flag-ss": {
		id: "flag-ss",
		name: "South Sudan Flag",
		keywords: [
			"ss",
			"sd",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f8",
				native: "🇸🇸"
			}
		],
		version: 2
	},
	"flag-st": {
		id: "flag-st",
		name: "São Tomé & Príncipe Flag",
		keywords: [
			"st",
			"sao",
			"tome",
			"principe",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1f9",
				native: "🇸🇹"
			}
		],
		version: 2
	},
	"flag-sv": {
		id: "flag-sv",
		name: "El Salvador Flag",
		keywords: [
			"sv",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1fb",
				native: "🇸🇻"
			}
		],
		version: 2
	},
	"flag-sx": {
		id: "flag-sx",
		name: "Sint Maarten Flag",
		keywords: [
			"sx",
			"dutch",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1fd",
				native: "🇸🇽"
			}
		],
		version: 2
	},
	"flag-sy": {
		id: "flag-sy",
		name: "Syria Flag",
		keywords: [
			"sy",
			"syrian",
			"arab",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1fe",
				native: "🇸🇾"
			}
		],
		version: 2
	},
	"flag-sz": {
		id: "flag-sz",
		name: "Eswatini Flag",
		keywords: [
			"sz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f8-1f1ff",
				native: "🇸🇿"
			}
		],
		version: 2
	},
	"flag-ta": {
		id: "flag-ta",
		name: "Tristan Da Cunha Flag",
		keywords: [
			"ta"
		],
		skins: [
			{
				unified: "1f1f9-1f1e6",
				native: "🇹🇦"
			}
		],
		version: 2
	},
	"flag-tc": {
		id: "flag-tc",
		name: "Turks & Caicos Islands Flag",
		keywords: [
			"tc",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1e8",
				native: "🇹🇨"
			}
		],
		version: 2
	},
	"flag-td": {
		id: "flag-td",
		name: "Chad Flag",
		keywords: [
			"td",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1e9",
				native: "🇹🇩"
			}
		],
		version: 2
	},
	"flag-tf": {
		id: "flag-tf",
		name: "French Southern Territories Flag",
		keywords: [
			"tf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1eb",
				native: "🇹🇫"
			}
		],
		version: 2
	},
	"flag-tg": {
		id: "flag-tg",
		name: "Togo Flag",
		keywords: [
			"tg",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1ec",
				native: "🇹🇬"
			}
		],
		version: 2
	},
	"flag-th": {
		id: "flag-th",
		name: "Thailand Flag",
		keywords: [
			"th",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1ed",
				native: "🇹🇭"
			}
		],
		version: 2
	},
	"flag-tj": {
		id: "flag-tj",
		name: "Tajikistan Flag",
		keywords: [
			"tj",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1ef",
				native: "🇹🇯"
			}
		],
		version: 2
	},
	"flag-tk": {
		id: "flag-tk",
		name: "Tokelau Flag",
		keywords: [
			"tk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f0",
				native: "🇹🇰"
			}
		],
		version: 2
	},
	"flag-tl": {
		id: "flag-tl",
		name: "Timor-Leste Flag",
		keywords: [
			"tl",
			"timor",
			"leste",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f1",
				native: "🇹🇱"
			}
		],
		version: 2
	},
	"flag-tm": {
		id: "flag-tm",
		name: "Turkmenistan Flag",
		keywords: [
			"tm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f2",
				native: "🇹🇲"
			}
		],
		version: 2
	},
	"flag-tn": {
		id: "flag-tn",
		name: "Tunisia Flag",
		keywords: [
			"tn",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f3",
				native: "🇹🇳"
			}
		],
		version: 2
	},
	"flag-to": {
		id: "flag-to",
		name: "Tonga Flag",
		keywords: [
			"to",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f4",
				native: "🇹🇴"
			}
		],
		version: 2
	},
	"flag-tr": {
		id: "flag-tr",
		name: "Turkey Flag",
		keywords: [
			"tr",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f7",
				native: "🇹🇷"
			}
		],
		version: 2
	},
	"flag-tt": {
		id: "flag-tt",
		name: "Trinidad & Tobago Flag",
		keywords: [
			"tt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1f9",
				native: "🇹🇹"
			}
		],
		version: 2
	},
	"flag-tv": {
		id: "flag-tv",
		name: "Tuvalu Flag",
		keywords: [
			"tv",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1fb",
				native: "🇹🇻"
			}
		],
		version: 2
	},
	"flag-tw": {
		id: "flag-tw",
		name: "Taiwan Flag",
		keywords: [
			"tw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1fc",
				native: "🇹🇼"
			}
		],
		version: 2
	},
	"flag-tz": {
		id: "flag-tz",
		name: "Tanzania Flag",
		keywords: [
			"tz",
			"united",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1f9-1f1ff",
				native: "🇹🇿"
			}
		],
		version: 2
	},
	"flag-ua": {
		id: "flag-ua",
		name: "Ukraine Flag",
		keywords: [
			"ua",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fa-1f1e6",
				native: "🇺🇦"
			}
		],
		version: 2
	},
	"flag-ug": {
		id: "flag-ug",
		name: "Uganda Flag",
		keywords: [
			"ug",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fa-1f1ec",
				native: "🇺🇬"
			}
		],
		version: 2
	},
	"flag-um": {
		id: "flag-um",
		name: "U.s. Outlying Islands Flag",
		keywords: [
			"um",
			"u",
			"s"
		],
		skins: [
			{
				unified: "1f1fa-1f1f2",
				native: "🇺🇲"
			}
		],
		version: 2
	},
	"flag-un": {
		id: "flag-un",
		name: "United Nations Flag",
		keywords: [
			"un",
			"banner"
		],
		skins: [
			{
				unified: "1f1fa-1f1f3",
				native: "🇺🇳"
			}
		],
		version: 4
	},
	us: {
		id: "us",
		name: "United States Flag",
		keywords: [
			"us",
			"america",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fa-1f1f8",
				native: "🇺🇸"
			}
		],
		version: 1
	},
	"flag-uy": {
		id: "flag-uy",
		name: "Uruguay Flag",
		keywords: [
			"uy",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fa-1f1fe",
				native: "🇺🇾"
			}
		],
		version: 2
	},
	"flag-uz": {
		id: "flag-uz",
		name: "Uzbekistan Flag",
		keywords: [
			"uz",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fa-1f1ff",
				native: "🇺🇿"
			}
		],
		version: 2
	},
	"flag-va": {
		id: "flag-va",
		name: "Vatican City Flag",
		keywords: [
			"va",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1e6",
				native: "🇻🇦"
			}
		],
		version: 2
	},
	"flag-vc": {
		id: "flag-vc",
		name: "St. Vincent & Grenadines Flag",
		keywords: [
			"vc",
			"st",
			"saint",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1e8",
				native: "🇻🇨"
			}
		],
		version: 2
	},
	"flag-ve": {
		id: "flag-ve",
		name: "Venezuela Flag",
		keywords: [
			"ve",
			"bolivarian",
			"republic",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1ea",
				native: "🇻🇪"
			}
		],
		version: 2
	},
	"flag-vg": {
		id: "flag-vg",
		name: "British Virgin Islands Flag",
		keywords: [
			"vg",
			"bvi",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1ec",
				native: "🇻🇬"
			}
		],
		version: 2
	},
	"flag-vi": {
		id: "flag-vi",
		name: "U.s. Virgin Islands Flag",
		keywords: [
			"vi",
			"u",
			"s",
			"us",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1ee",
				native: "🇻🇮"
			}
		],
		version: 2
	},
	"flag-vn": {
		id: "flag-vn",
		name: "Vietnam Flag",
		keywords: [
			"vn",
			"viet",
			"nam",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1f3",
				native: "🇻🇳"
			}
		],
		version: 2
	},
	"flag-vu": {
		id: "flag-vu",
		name: "Vanuatu Flag",
		keywords: [
			"vu",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fb-1f1fa",
				native: "🇻🇺"
			}
		],
		version: 2
	},
	"flag-wf": {
		id: "flag-wf",
		name: "Wallis & Futuna Flag",
		keywords: [
			"wf",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fc-1f1eb",
				native: "🇼🇫"
			}
		],
		version: 2
	},
	"flag-ws": {
		id: "flag-ws",
		name: "Samoa Flag",
		keywords: [
			"ws",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fc-1f1f8",
				native: "🇼🇸"
			}
		],
		version: 2
	},
	"flag-xk": {
		id: "flag-xk",
		name: "Kosovo Flag",
		keywords: [
			"xk",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fd-1f1f0",
				native: "🇽🇰"
			}
		],
		version: 2
	},
	"flag-ye": {
		id: "flag-ye",
		name: "Yemen Flag",
		keywords: [
			"ye",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fe-1f1ea",
				native: "🇾🇪"
			}
		],
		version: 2
	},
	"flag-yt": {
		id: "flag-yt",
		name: "Mayotte Flag",
		keywords: [
			"yt",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1fe-1f1f9",
				native: "🇾🇹"
			}
		],
		version: 2
	},
	"flag-za": {
		id: "flag-za",
		name: "South Africa Flag",
		keywords: [
			"za",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ff-1f1e6",
				native: "🇿🇦"
			}
		],
		version: 2
	},
	"flag-zm": {
		id: "flag-zm",
		name: "Zambia Flag",
		keywords: [
			"zm",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ff-1f1f2",
				native: "🇿🇲"
			}
		],
		version: 2
	},
	"flag-zw": {
		id: "flag-zw",
		name: "Zimbabwe Flag",
		keywords: [
			"zw",
			"nation",
			"country",
			"banner"
		],
		skins: [
			{
				unified: "1f1ff-1f1fc",
				native: "🇿🇼"
			}
		],
		version: 2
	},
	"flag-england": {
		id: "flag-england",
		name: "England Flag",
		keywords: [
			"english"
		],
		skins: [
			{
				unified: "1f3f4-e0067-e0062-e0065-e006e-e0067-e007f",
				native: "🏴󠁧󠁢󠁥󠁮󠁧󠁿"
			}
		],
		version: 5
	},
	"flag-scotland": {
		id: "flag-scotland",
		name: "Scotland Flag",
		keywords: [
			"scottish"
		],
		skins: [
			{
				unified: "1f3f4-e0067-e0062-e0073-e0063-e0074-e007f",
				native: "🏴󠁧󠁢󠁳󠁣󠁴󠁿"
			}
		],
		version: 5
	},
	"flag-wales": {
		id: "flag-wales",
		name: "Wales Flag",
		keywords: [
			"welsh"
		],
		skins: [
			{
				unified: "1f3f4-e0067-e0062-e0077-e006c-e0073-e007f",
				native: "🏴󠁧󠁢󠁷󠁬󠁳󠁿"
			}
		],
		version: 5
	}
};
var aliases = {
	satisfied: "laughing",
	grinning_face_with_star_eyes: "star-struck",
	grinning_face_with_one_large_and_one_small_eye: "zany_face",
	smiling_face_with_smiling_eyes_and_hand_covering_mouth: "face_with_hand_over_mouth",
	face_with_finger_covering_closed_lips: "shushing_face",
	face_with_one_eyebrow_raised: "face_with_raised_eyebrow",
	face_with_open_mouth_vomiting: "face_vomiting",
	shocked_face_with_exploding_head: "exploding_head",
	serious_face_with_symbols_covering_mouth: "face_with_symbols_on_mouth",
	poop: "hankey",
	shit: "hankey",
	collision: "boom",
	raised_hand: "hand",
	hand_with_index_and_middle_fingers_crossed: "crossed_fingers",
	sign_of_the_horns: "the_horns",
	reversed_hand_with_middle_finger_extended: "middle_finger",
	thumbsup: "+1",
	thumbsdown: "-1",
	punch: "facepunch",
	mother_christmas: "mrs_claus",
	running: "runner",
	"man-with-bunny-ears-partying": "men-with-bunny-ears-partying",
	"woman-with-bunny-ears-partying": "women-with-bunny-ears-partying",
	women_holding_hands: "two_women_holding_hands",
	woman_and_man_holding_hands: "man_and_woman_holding_hands",
	couple: "man_and_woman_holding_hands",
	men_holding_hands: "two_men_holding_hands",
	paw_prints: "feet",
	flipper: "dolphin",
	honeybee: "bee",
	lady_beetle: "ladybug",
	cooking: "fried_egg",
	knife: "hocho",
	red_car: "car",
	sailboat: "boat",
	waxing_gibbous_moon: "moon",
	sun_small_cloud: "mostly_sunny",
	sun_behind_cloud: "barely_sunny",
	sun_behind_rain_cloud: "partly_sunny_rain",
	lightning_cloud: "lightning",
	tornado_cloud: "tornado",
	tshirt: "shirt",
	shoe: "mans_shoe",
	telephone: "phone",
	lantern: "izakaya_lantern",
	open_book: "book",
	envelope: "email",
	pencil: "memo",
	heavy_exclamation_mark: "exclamation",
	staff_of_aesculapius: "medical_symbol",
	"flag-cn": "cn",
	"flag-de": "de",
	"flag-es": "es",
	"flag-fr": "fr",
	uk: "gb",
	"flag-gb": "gb",
	"flag-it": "it",
	"flag-jp": "jp",
	"flag-kr": "kr",
	"flag-ru": "ru",
	"flag-us": "us"
};
var sheet = {
	cols: 61,
	rows: 61
};
var data = {
	categories: categories,
	emojis: emojis,
	aliases: aliases,
	sheet: sheet
};

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $c770c458706daa72$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}


var $fb96b826c0c5f37a$var$n, $fb96b826c0c5f37a$export$41c562ebe57d11e2, $fb96b826c0c5f37a$var$u, $fb96b826c0c5f37a$var$t, $fb96b826c0c5f37a$var$r, $fb96b826c0c5f37a$var$o, $fb96b826c0c5f37a$var$e = {}, $fb96b826c0c5f37a$var$c = [], $fb96b826c0c5f37a$var$s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function $fb96b826c0c5f37a$var$a(n1, l1) {
    for(var u1 in l1)n1[u1] = l1[u1];
    return n1;
}
function $fb96b826c0c5f37a$var$h(n2) {
    var l2 = n2.parentNode;
    l2 && l2.removeChild(n2);
}
function $fb96b826c0c5f37a$export$c8a8987d4410bf2d(l3, u2, i1) {
    var t1, r1, o1, f1 = {};
    for(o1 in u2)"key" == o1 ? t1 = u2[o1] : "ref" == o1 ? r1 = u2[o1] : f1[o1] = u2[o1];
    if (arguments.length > 2 && (f1.children = arguments.length > 3 ? $fb96b826c0c5f37a$var$n.call(arguments, 2) : i1), "function" == typeof l3 && null != l3.defaultProps) for(o1 in l3.defaultProps)void 0 === f1[o1] && (f1[o1] = l3.defaultProps[o1]);
    return $fb96b826c0c5f37a$var$y(l3, f1, t1, r1, null);
}
function $fb96b826c0c5f37a$var$y(n3, i2, t2, r2, o2) {
    var f2 = {
        type: n3,
        props: i2,
        key: t2,
        ref: r2,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == o2 ? ++$fb96b826c0c5f37a$var$u : o2
    };
    return null == o2 && null != $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode && $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode(f2), f2;
}
function $fb96b826c0c5f37a$export$7d1e3a5e95ceca43() {
    return {
        current: null
    };
}
function $fb96b826c0c5f37a$export$ffb0004e005737fa(n4) {
    return n4.children;
}
function $fb96b826c0c5f37a$export$16fa2f45be04daa8(n5, l4) {
    this.props = n5, this.context = l4;
}
function $fb96b826c0c5f37a$var$k(n6, l5) {
    if (null == l5) return n6.__ ? $fb96b826c0c5f37a$var$k(n6.__, n6.__.__k.indexOf(n6) + 1) : null;
    for(var u3; l5 < n6.__k.length; l5++)if (null != (u3 = n6.__k[l5]) && null != u3.__e) return u3.__e;
    return "function" == typeof n6.type ? $fb96b826c0c5f37a$var$k(n6) : null;
}
function $fb96b826c0c5f37a$var$b(n7) {
    var l6, u4;
    if (null != (n7 = n7.__) && null != n7.__c) {
        for(n7.__e = n7.__c.base = null, l6 = 0; l6 < n7.__k.length; l6++)if (null != (u4 = n7.__k[l6]) && null != u4.__e) {
            n7.__e = n7.__c.base = u4.__e;
            break;
        }
        return $fb96b826c0c5f37a$var$b(n7);
    }
}
function $fb96b826c0c5f37a$var$m(n8) {
    (!n8.__d && (n8.__d = !0) && $fb96b826c0c5f37a$var$t.push(n8) && !$fb96b826c0c5f37a$var$g.__r++ || $fb96b826c0c5f37a$var$o !== $fb96b826c0c5f37a$export$41c562ebe57d11e2.debounceRendering) && (($fb96b826c0c5f37a$var$o = $fb96b826c0c5f37a$export$41c562ebe57d11e2.debounceRendering) || $fb96b826c0c5f37a$var$r)($fb96b826c0c5f37a$var$g);
}
function $fb96b826c0c5f37a$var$g() {
    for(var n9; $fb96b826c0c5f37a$var$g.__r = $fb96b826c0c5f37a$var$t.length;)n9 = $fb96b826c0c5f37a$var$t.sort(function(n10, l7) {
        return n10.__v.__b - l7.__v.__b;
    }), $fb96b826c0c5f37a$var$t = [], n9.some(function(n11) {
        var l8, u5, i3, t3, r3, o3;
        n11.__d && (r3 = (t3 = (l8 = n11).__v).__e, (o3 = l8.__P) && (u5 = [], (i3 = $fb96b826c0c5f37a$var$a({}, t3)).__v = t3.__v + 1, $fb96b826c0c5f37a$var$j(o3, t3, i3, l8.__n, void 0 !== o3.ownerSVGElement, null != t3.__h ? [
            r3
        ] : null, u5, null == r3 ? $fb96b826c0c5f37a$var$k(t3) : r3, t3.__h), $fb96b826c0c5f37a$var$z(u5, t3), t3.__e != r3 && $fb96b826c0c5f37a$var$b(t3)));
    });
}
function $fb96b826c0c5f37a$var$w(n12, l9, u6, i4, t4, r4, o4, f3, s1, a1) {
    var h1, v1, p1, _1, b1, m1, g1, w1 = i4 && i4.__k || $fb96b826c0c5f37a$var$c, A1 = w1.length;
    for(u6.__k = [], h1 = 0; h1 < l9.length; h1++)if (null != (_1 = u6.__k[h1] = null == (_1 = l9[h1]) || "boolean" == typeof _1 ? null : "string" == typeof _1 || "number" == typeof _1 || "bigint" == typeof _1 ? $fb96b826c0c5f37a$var$y(null, _1, null, null, _1) : Array.isArray(_1) ? $fb96b826c0c5f37a$var$y($fb96b826c0c5f37a$export$ffb0004e005737fa, {
        children: _1
    }, null, null, null) : _1.__b > 0 ? $fb96b826c0c5f37a$var$y(_1.type, _1.props, _1.key, null, _1.__v) : _1)) {
        if (_1.__ = u6, _1.__b = u6.__b + 1, null === (p1 = w1[h1]) || p1 && _1.key == p1.key && _1.type === p1.type) w1[h1] = void 0;
        else for(v1 = 0; v1 < A1; v1++){
            if ((p1 = w1[v1]) && _1.key == p1.key && _1.type === p1.type) {
                w1[v1] = void 0;
                break;
            }
            p1 = null;
        }
        $fb96b826c0c5f37a$var$j(n12, _1, p1 = p1 || $fb96b826c0c5f37a$var$e, t4, r4, o4, f3, s1, a1), b1 = _1.__e, (v1 = _1.ref) && p1.ref != v1 && (g1 || (g1 = []), p1.ref && g1.push(p1.ref, null, _1), g1.push(v1, _1.__c || b1, _1)), null != b1 ? (null == m1 && (m1 = b1), "function" == typeof _1.type && _1.__k === p1.__k ? _1.__d = s1 = $fb96b826c0c5f37a$var$x(_1, s1, n12) : s1 = $fb96b826c0c5f37a$var$P(n12, _1, p1, w1, b1, s1), "function" == typeof u6.type && (u6.__d = s1)) : s1 && p1.__e == s1 && s1.parentNode != n12 && (s1 = $fb96b826c0c5f37a$var$k(p1));
    }
    for(u6.__e = m1, h1 = A1; h1--;)null != w1[h1] && ("function" == typeof u6.type && null != w1[h1].__e && w1[h1].__e == u6.__d && (u6.__d = $fb96b826c0c5f37a$var$k(i4, h1 + 1)), $fb96b826c0c5f37a$var$N(w1[h1], w1[h1]));
    if (g1) for(h1 = 0; h1 < g1.length; h1++)$fb96b826c0c5f37a$var$M(g1[h1], g1[++h1], g1[++h1]);
}
function $fb96b826c0c5f37a$var$x(n13, l10, u7) {
    for(var i5, t5 = n13.__k, r5 = 0; t5 && r5 < t5.length; r5++)(i5 = t5[r5]) && (i5.__ = n13, l10 = "function" == typeof i5.type ? $fb96b826c0c5f37a$var$x(i5, l10, u7) : $fb96b826c0c5f37a$var$P(u7, i5, i5, t5, i5.__e, l10));
    return l10;
}
function $fb96b826c0c5f37a$export$47e4c5b300681277(n14, l11) {
    return l11 = l11 || [], null == n14 || "boolean" == typeof n14 || (Array.isArray(n14) ? n14.some(function(n15) {
        $fb96b826c0c5f37a$export$47e4c5b300681277(n15, l11);
    }) : l11.push(n14)), l11;
}
function $fb96b826c0c5f37a$var$P(n16, l12, u8, i6, t6, r6) {
    var o5, f4, e1;
    if (void 0 !== l12.__d) o5 = l12.__d, l12.__d = void 0;
    else if (null == u8 || t6 != r6 || null == t6.parentNode) n: if (null == r6 || r6.parentNode !== n16) n16.appendChild(t6), o5 = null;
    else {
        for(f4 = r6, e1 = 0; (f4 = f4.nextSibling) && e1 < i6.length; e1 += 2)if (f4 == t6) break n;
        n16.insertBefore(t6, r6), o5 = r6;
    }
    return void 0 !== o5 ? o5 : t6.nextSibling;
}
function $fb96b826c0c5f37a$var$C(n17, l13, u9, i7, t7) {
    var r7;
    for(r7 in u9)"children" === r7 || "key" === r7 || r7 in l13 || $fb96b826c0c5f37a$var$H(n17, r7, null, u9[r7], i7);
    for(r7 in l13)t7 && "function" != typeof l13[r7] || "children" === r7 || "key" === r7 || "value" === r7 || "checked" === r7 || u9[r7] === l13[r7] || $fb96b826c0c5f37a$var$H(n17, r7, l13[r7], u9[r7], i7);
}
function $fb96b826c0c5f37a$var$$(n18, l14, u10) {
    "-" === l14[0] ? n18.setProperty(l14, u10) : n18[l14] = null == u10 ? "" : "number" != typeof u10 || $fb96b826c0c5f37a$var$s.test(l14) ? u10 : u10 + "px";
}
function $fb96b826c0c5f37a$var$H(n19, l15, u11, i8, t8) {
    var r8;
    n: if ("style" === l15) {
        if ("string" == typeof u11) n19.style.cssText = u11;
        else {
            if ("string" == typeof i8 && (n19.style.cssText = i8 = ""), i8) for(l15 in i8)u11 && l15 in u11 || $fb96b826c0c5f37a$var$$(n19.style, l15, "");
            if (u11) for(l15 in u11)i8 && u11[l15] === i8[l15] || $fb96b826c0c5f37a$var$$(n19.style, l15, u11[l15]);
        }
    } else if ("o" === l15[0] && "n" === l15[1]) r8 = l15 !== (l15 = l15.replace(/Capture$/, "")), l15 = l15.toLowerCase() in n19 ? l15.toLowerCase().slice(2) : l15.slice(2), n19.l || (n19.l = {}), n19.l[l15 + r8] = u11, u11 ? i8 || n19.addEventListener(l15, r8 ? $fb96b826c0c5f37a$var$T : $fb96b826c0c5f37a$var$I, r8) : n19.removeEventListener(l15, r8 ? $fb96b826c0c5f37a$var$T : $fb96b826c0c5f37a$var$I, r8);
    else if ("dangerouslySetInnerHTML" !== l15) {
        if (t8) l15 = l15.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");
        else if ("href" !== l15 && "list" !== l15 && "form" !== l15 && "tabIndex" !== l15 && "download" !== l15 && l15 in n19) try {
            n19[l15] = null == u11 ? "" : u11;
            break n;
        } catch (n) {}
        "function" == typeof u11 || (null != u11 && (!1 !== u11 || "a" === l15[0] && "r" === l15[1]) ? n19.setAttribute(l15, u11) : n19.removeAttribute(l15));
    }
}
function $fb96b826c0c5f37a$var$I(n20) {
    this.l[n20.type + !1]($fb96b826c0c5f37a$export$41c562ebe57d11e2.event ? $fb96b826c0c5f37a$export$41c562ebe57d11e2.event(n20) : n20);
}
function $fb96b826c0c5f37a$var$T(n21) {
    this.l[n21.type + !0]($fb96b826c0c5f37a$export$41c562ebe57d11e2.event ? $fb96b826c0c5f37a$export$41c562ebe57d11e2.event(n21) : n21);
}
function $fb96b826c0c5f37a$var$j(n22, u12, i9, t9, r9, o6, f5, e2, c1) {
    var s2, h2, v2, y1, p2, k1, b2, m2, g2, x1, A2, P1 = u12.type;
    if (void 0 !== u12.constructor) return null;
    null != i9.__h && (c1 = i9.__h, e2 = u12.__e = i9.__e, u12.__h = null, o6 = [
        e2
    ]), (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__b) && s2(u12);
    try {
        n: if ("function" == typeof P1) {
            if (m2 = u12.props, g2 = (s2 = P1.contextType) && t9[s2.__c], x1 = s2 ? g2 ? g2.props.value : s2.__ : t9, i9.__c ? b2 = (h2 = u12.__c = i9.__c).__ = h2.__E : ("prototype" in P1 && P1.prototype.render ? u12.__c = h2 = new P1(m2, x1) : (u12.__c = h2 = new $fb96b826c0c5f37a$export$16fa2f45be04daa8(m2, x1), h2.constructor = P1, h2.render = $fb96b826c0c5f37a$var$O), g2 && g2.sub(h2), h2.props = m2, h2.state || (h2.state = {}), h2.context = x1, h2.__n = t9, v2 = h2.__d = !0, h2.__h = []), null == h2.__s && (h2.__s = h2.state), null != P1.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = $fb96b826c0c5f37a$var$a({}, h2.__s)), $fb96b826c0c5f37a$var$a(h2.__s, P1.getDerivedStateFromProps(m2, h2.__s))), y1 = h2.props, p2 = h2.state, v2) null == P1.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
            else {
                if (null == P1.getDerivedStateFromProps && m2 !== y1 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(m2, x1), !h2.__e && null != h2.shouldComponentUpdate && !1 === h2.shouldComponentUpdate(m2, h2.__s, x1) || u12.__v === i9.__v) {
                    h2.props = m2, h2.state = h2.__s, u12.__v !== i9.__v && (h2.__d = !1), h2.__v = u12, u12.__e = i9.__e, u12.__k = i9.__k, u12.__k.forEach(function(n23) {
                        n23 && (n23.__ = u12);
                    }), h2.__h.length && f5.push(h2);
                    break n;
                }
                null != h2.componentWillUpdate && h2.componentWillUpdate(m2, h2.__s, x1), null != h2.componentDidUpdate && h2.__h.push(function() {
                    h2.componentDidUpdate(y1, p2, k1);
                });
            }
            h2.context = x1, h2.props = m2, h2.state = h2.__s, (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__r) && s2(u12), h2.__d = !1, h2.__v = u12, h2.__P = n22, s2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s, null != h2.getChildContext && (t9 = $fb96b826c0c5f37a$var$a($fb96b826c0c5f37a$var$a({}, t9), h2.getChildContext())), v2 || null == h2.getSnapshotBeforeUpdate || (k1 = h2.getSnapshotBeforeUpdate(y1, p2)), A2 = null != s2 && s2.type === $fb96b826c0c5f37a$export$ffb0004e005737fa && null == s2.key ? s2.props.children : s2, $fb96b826c0c5f37a$var$w(n22, Array.isArray(A2) ? A2 : [
                A2
            ], u12, i9, t9, r9, o6, f5, e2, c1), h2.base = u12.__e, u12.__h = null, h2.__h.length && f5.push(h2), b2 && (h2.__E = h2.__ = null), h2.__e = !1;
        } else null == o6 && u12.__v === i9.__v ? (u12.__k = i9.__k, u12.__e = i9.__e) : u12.__e = $fb96b826c0c5f37a$var$L(i9.__e, u12, i9, t9, r9, o6, f5, c1);
        (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.diffed) && s2(u12);
    } catch (n24) {
        u12.__v = null, (c1 || null != o6) && (u12.__e = e2, u12.__h = !!c1, o6[o6.indexOf(e2)] = null), $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n24, u12, i9);
    }
}
function $fb96b826c0c5f37a$var$z(n25, u13) {
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c(u13, n25), n25.some(function(u14) {
        try {
            n25 = u14.__h, u14.__h = [], n25.some(function(n26) {
                n26.call(u14);
            });
        } catch (n27) {
            $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n27, u14.__v);
        }
    });
}
function $fb96b826c0c5f37a$var$L(l16, u15, i10, t10, r10, o7, f6, c2) {
    var s3, a2, v3, y2 = i10.props, p3 = u15.props, d1 = u15.type, _2 = 0;
    if ("svg" === d1 && (r10 = !0), null != o7) {
        for(; _2 < o7.length; _2++)if ((s3 = o7[_2]) && "setAttribute" in s3 == !!d1 && (d1 ? s3.localName === d1 : 3 === s3.nodeType)) {
            l16 = s3, o7[_2] = null;
            break;
        }
    }
    if (null == l16) {
        if (null === d1) return document.createTextNode(p3);
        l16 = r10 ? document.createElementNS("http://www.w3.org/2000/svg", d1) : document.createElement(d1, p3.is && p3), o7 = null, c2 = !1;
    }
    if (null === d1) y2 === p3 || c2 && l16.data === p3 || (l16.data = p3);
    else {
        if (o7 = o7 && $fb96b826c0c5f37a$var$n.call(l16.childNodes), a2 = (y2 = i10.props || $fb96b826c0c5f37a$var$e).dangerouslySetInnerHTML, v3 = p3.dangerouslySetInnerHTML, !c2) {
            if (null != o7) for(y2 = {}, _2 = 0; _2 < l16.attributes.length; _2++)y2[l16.attributes[_2].name] = l16.attributes[_2].value;
            (v3 || a2) && (v3 && (a2 && v3.__html == a2.__html || v3.__html === l16.innerHTML) || (l16.innerHTML = v3 && v3.__html || ""));
        }
        if ($fb96b826c0c5f37a$var$C(l16, p3, y2, r10, c2), v3) u15.__k = [];
        else if (_2 = u15.props.children, $fb96b826c0c5f37a$var$w(l16, Array.isArray(_2) ? _2 : [
            _2
        ], u15, i10, t10, r10 && "foreignObject" !== d1, o7, f6, o7 ? o7[0] : i10.__k && $fb96b826c0c5f37a$var$k(i10, 0), c2), null != o7) for(_2 = o7.length; _2--;)null != o7[_2] && $fb96b826c0c5f37a$var$h(o7[_2]);
        c2 || ("value" in p3 && void 0 !== (_2 = p3.value) && (_2 !== y2.value || _2 !== l16.value || "progress" === d1 && !_2) && $fb96b826c0c5f37a$var$H(l16, "value", _2, y2.value, !1), "checked" in p3 && void 0 !== (_2 = p3.checked) && _2 !== l16.checked && $fb96b826c0c5f37a$var$H(l16, "checked", _2, y2.checked, !1));
    }
    return l16;
}
function $fb96b826c0c5f37a$var$M(n28, u16, i11) {
    try {
        "function" == typeof n28 ? n28(u16) : n28.current = u16;
    } catch (n29) {
        $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n29, i11);
    }
}
function $fb96b826c0c5f37a$var$N(n30, u17, i12) {
    var t11, r11;
    if ($fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount && $fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount(n30), (t11 = n30.ref) && (t11.current && t11.current !== n30.__e || $fb96b826c0c5f37a$var$M(t11, null, u17)), null != (t11 = n30.__c)) {
        if (t11.componentWillUnmount) try {
            t11.componentWillUnmount();
        } catch (n31) {
            $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n31, u17);
        }
        t11.base = t11.__P = null;
    }
    if (t11 = n30.__k) for(r11 = 0; r11 < t11.length; r11++)t11[r11] && $fb96b826c0c5f37a$var$N(t11[r11], u17, "function" != typeof n30.type);
    i12 || null == n30.__e || $fb96b826c0c5f37a$var$h(n30.__e), n30.__e = n30.__d = void 0;
}
function $fb96b826c0c5f37a$var$O(n32, l, u18) {
    return this.constructor(n32, u18);
}
function $fb96b826c0c5f37a$export$b3890eb0ae9dca99(u19, i13, t12) {
    var r12, o8, f7;
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__ && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__(u19, i13), o8 = (r12 = "function" == typeof t12) ? null : t12 && t12.__k || i13.__k, f7 = [], $fb96b826c0c5f37a$var$j(i13, u19 = (!r12 && t12 || i13).__k = $fb96b826c0c5f37a$export$c8a8987d4410bf2d($fb96b826c0c5f37a$export$ffb0004e005737fa, null, [
        u19
    ]), o8 || $fb96b826c0c5f37a$var$e, $fb96b826c0c5f37a$var$e, void 0 !== i13.ownerSVGElement, !r12 && t12 ? [
        t12
    ] : o8 ? null : i13.firstChild ? $fb96b826c0c5f37a$var$n.call(i13.childNodes) : null, f7, !r12 && t12 ? t12 : o8 ? o8.__e : i13.firstChild, r12), $fb96b826c0c5f37a$var$z(f7, u19);
}
$fb96b826c0c5f37a$var$n = $fb96b826c0c5f37a$var$c.slice, $fb96b826c0c5f37a$export$41c562ebe57d11e2 = {
    __e: function(n39, l22) {
        for(var u23, i16, t14; l22 = l22.__;)if ((u23 = l22.__c) && !u23.__) try {
            if ((i16 = u23.constructor) && null != i16.getDerivedStateFromError && (u23.setState(i16.getDerivedStateFromError(n39)), t14 = u23.__d), null != u23.componentDidCatch && (u23.componentDidCatch(n39), t14 = u23.__d), t14) return u23.__E = u23;
        } catch (l23) {
            n39 = l23;
        }
        throw n39;
    }
}, $fb96b826c0c5f37a$var$u = 0, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.setState = function(n41, l24) {
    var u24;
    u24 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = $fb96b826c0c5f37a$var$a({}, this.state), "function" == typeof n41 && (n41 = n41($fb96b826c0c5f37a$var$a({}, u24), this.props)), n41 && $fb96b826c0c5f37a$var$a(u24, n41), null != n41 && this.__v && (l24 && this.__h.push(l24), $fb96b826c0c5f37a$var$m(this));
}, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.forceUpdate = function(n42) {
    this.__v && (this.__e = !0, n42 && this.__h.push(n42), $fb96b826c0c5f37a$var$m(this));
}, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.render = $fb96b826c0c5f37a$export$ffb0004e005737fa, $fb96b826c0c5f37a$var$t = [], $fb96b826c0c5f37a$var$r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $fb96b826c0c5f37a$var$g.__r = 0;



var $bd9dd35321b03dd4$var$o = 0;
function $bd9dd35321b03dd4$export$34b9dba7ce09269b(_1, e1, n, t, f) {
    var l, s, u = {};
    for(s in e1)"ref" == s ? l = e1[s] : u[s] = e1[s];
    var a = {
        type: _1,
        props: u,
        key: n,
        ref: l,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: --$bd9dd35321b03dd4$var$o,
        __source: t,
        __self: f
    };
    if ("function" == typeof _1 && (l = _1.defaultProps)) for(s in l)void 0 === u[s] && (u[s] = l[s]);
    return ($fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode && ($fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode(a), a;
}



function $f72b75cf796873c7$var$set(key, value) {
    try {
        window.localStorage[`emoji-mart.${key}`] = JSON.stringify(value);
    } catch (error) {}
}
function $f72b75cf796873c7$var$get(key) {
    try {
        const value = window.localStorage[`emoji-mart.${key}`];
        if (value) return JSON.parse(value);
    } catch (error) {}
}
var $f72b75cf796873c7$export$2e2bcd8739ae039 = {
    set: $f72b75cf796873c7$var$set,
    get: $f72b75cf796873c7$var$get
};


const $c84d045dcc34faf5$var$CACHE = new Map();
const $c84d045dcc34faf5$var$VERSIONS = [
    {
        v: 15,
        emoji: "\uD83E\uDEE8"
    },
    {
        v: 14,
        emoji: "\uD83E\uDEE0"
    },
    {
        v: 13.1,
        emoji: "\uD83D\uDE36\u200D\uD83C\uDF2B\uFE0F"
    },
    {
        v: 13,
        emoji: "\uD83E\uDD78"
    },
    {
        v: 12.1,
        emoji: "\uD83E\uDDD1\u200D\uD83E\uDDB0"
    },
    {
        v: 12,
        emoji: "\uD83E\uDD71"
    },
    {
        v: 11,
        emoji: "\uD83E\uDD70"
    },
    {
        v: 5,
        emoji: "\uD83E\uDD29"
    },
    {
        v: 4,
        emoji: "\uD83D\uDC71\u200D\u2640\uFE0F"
    },
    {
        v: 3,
        emoji: "\uD83E\uDD23"
    },
    {
        v: 2,
        emoji: "\uD83D\uDC4B\uD83C\uDFFB"
    },
    {
        v: 1,
        emoji: "\uD83D\uDE43"
    }, 
];
function $c84d045dcc34faf5$var$latestVersion() {
    for (const { v: v , emoji: emoji  } of $c84d045dcc34faf5$var$VERSIONS){
        if ($c84d045dcc34faf5$var$isSupported(emoji)) return v;
    }
}
function $c84d045dcc34faf5$var$noCountryFlags() {
    if ($c84d045dcc34faf5$var$isSupported("\uD83C\uDDE8\uD83C\uDDE6")) return false;
    return true;
}
function $c84d045dcc34faf5$var$isSupported(emoji) {
    if ($c84d045dcc34faf5$var$CACHE.has(emoji)) return $c84d045dcc34faf5$var$CACHE.get(emoji);
    const supported = $c84d045dcc34faf5$var$isEmojiSupported(emoji);
    $c84d045dcc34faf5$var$CACHE.set(emoji, supported);
    return supported;
}
// https://github.com/koala-interactive/is-emoji-supported
const $c84d045dcc34faf5$var$isEmojiSupported = (()=>{
    let ctx = null;
    try {
        if (!navigator.userAgent.includes("jsdom")) ctx = document.createElement("canvas").getContext("2d", {
            willReadFrequently: true
        });
    } catch  {}
    // Not in browser env
    if (!ctx) return ()=>false;
    const CANVAS_HEIGHT = 25;
    const CANVAS_WIDTH = 20;
    const textSize = Math.floor(CANVAS_HEIGHT / 2);
    // Initialize convas context
    ctx.font = textSize + "px Arial, Sans-Serif";
    ctx.textBaseline = "top";
    ctx.canvas.width = CANVAS_WIDTH * 2;
    ctx.canvas.height = CANVAS_HEIGHT;
    return (unicode)=>{
        ctx.clearRect(0, 0, CANVAS_WIDTH * 2, CANVAS_HEIGHT);
        // Draw in red on the left
        ctx.fillStyle = "#FF0000";
        ctx.fillText(unicode, 0, 22);
        // Draw in blue on right
        ctx.fillStyle = "#0000FF";
        ctx.fillText(unicode, CANVAS_WIDTH, 22);
        const a = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT).data;
        const count = a.length;
        let i = 0;
        // Search the first visible pixel
        for(; i < count && !a[i + 3]; i += 4);
        // No visible pixel
        if (i >= count) return false;
        // Emoji has immutable color, so we check the color of the emoji in two different colors
        // the result show be the same.
        const x = CANVAS_WIDTH + i / 4 % CANVAS_WIDTH;
        const y = Math.floor(i / 4 / CANVAS_WIDTH);
        const b = ctx.getImageData(x, y, 1, 1).data;
        if (a[i] !== b[0] || a[i + 2] !== b[2]) return false;
        // Some emojis are a contraction of different ones, so if it's not
        // supported, it will show multiple characters
        if (ctx.measureText(unicode).width >= CANVAS_WIDTH) return false;
        // Supported
        return true;
    };
})();
var $c84d045dcc34faf5$export$2e2bcd8739ae039 = {
    latestVersion: $c84d045dcc34faf5$var$latestVersion,
    noCountryFlags: $c84d045dcc34faf5$var$noCountryFlags
};



const $b22cfd0a55410b4f$var$DEFAULTS = [
    "+1",
    "grinning",
    "kissing_heart",
    "heart_eyes",
    "laughing",
    "stuck_out_tongue_winking_eye",
    "sweat_smile",
    "joy",
    "scream",
    "disappointed",
    "unamused",
    "weary",
    "sob",
    "sunglasses",
    "heart", 
];
let $b22cfd0a55410b4f$var$Index = null;
function $b22cfd0a55410b4f$var$add(emoji) {
    $b22cfd0a55410b4f$var$Index || ($b22cfd0a55410b4f$var$Index = ($f72b75cf796873c7$export$2e2bcd8739ae039).get("frequently") || {});
    const emojiId = emoji.id || emoji;
    if (!emojiId) return;
    $b22cfd0a55410b4f$var$Index[emojiId] || ($b22cfd0a55410b4f$var$Index[emojiId] = 0);
    $b22cfd0a55410b4f$var$Index[emojiId] += 1;
    ($f72b75cf796873c7$export$2e2bcd8739ae039).set("last", emojiId);
    ($f72b75cf796873c7$export$2e2bcd8739ae039).set("frequently", $b22cfd0a55410b4f$var$Index);
}
function $b22cfd0a55410b4f$var$get({ maxFrequentRows: maxFrequentRows , perLine: perLine  }) {
    if (!maxFrequentRows) return [];
    $b22cfd0a55410b4f$var$Index || ($b22cfd0a55410b4f$var$Index = ($f72b75cf796873c7$export$2e2bcd8739ae039).get("frequently"));
    let emojiIds = [];
    if (!$b22cfd0a55410b4f$var$Index) {
        $b22cfd0a55410b4f$var$Index = {};
        for(let i in $b22cfd0a55410b4f$var$DEFAULTS.slice(0, perLine)){
            const emojiId = $b22cfd0a55410b4f$var$DEFAULTS[i];
            $b22cfd0a55410b4f$var$Index[emojiId] = perLine - i;
            emojiIds.push(emojiId);
        }
        return emojiIds;
    }
    const max = maxFrequentRows * perLine;
    const last = ($f72b75cf796873c7$export$2e2bcd8739ae039).get("last");
    for(let emojiId in $b22cfd0a55410b4f$var$Index)emojiIds.push(emojiId);
    emojiIds.sort((a, b)=>{
        const aScore = $b22cfd0a55410b4f$var$Index[b];
        const bScore = $b22cfd0a55410b4f$var$Index[a];
        if (aScore == bScore) return a.localeCompare(b);
        return aScore - bScore;
    });
    if (emojiIds.length > max) {
        const removedIds = emojiIds.slice(max);
        emojiIds = emojiIds.slice(0, max);
        for (let removedId of removedIds){
            if (removedId == last) continue;
            delete $b22cfd0a55410b4f$var$Index[removedId];
        }
        if (last && emojiIds.indexOf(last) == -1) {
            delete $b22cfd0a55410b4f$var$Index[emojiIds[emojiIds.length - 1]];
            emojiIds.splice(-1, 1, last);
        }
        ($f72b75cf796873c7$export$2e2bcd8739ae039).set("frequently", $b22cfd0a55410b4f$var$Index);
    }
    return emojiIds;
}
var $b22cfd0a55410b4f$export$2e2bcd8739ae039 = {
    add: $b22cfd0a55410b4f$var$add,
    get: $b22cfd0a55410b4f$var$get,
    DEFAULTS: $b22cfd0a55410b4f$var$DEFAULTS
};


var $8d50d93417ef682a$exports = {};
$8d50d93417ef682a$exports = JSON.parse('{"search":"Search","search_no_results_1":"Oh no!","search_no_results_2":"That emoji couldn\u2019t be found","pick":"Pick an emoji\u2026","add_custom":"Add custom emoji","categories":{"activity":"Activity","custom":"Custom","flags":"Flags","foods":"Food & Drink","frequent":"Frequently used","nature":"Animals & Nature","objects":"Objects","people":"Smileys & People","places":"Travel & Places","search":"Search Results","symbols":"Symbols"},"skins":{"1":"Default","2":"Light","3":"Medium-Light","4":"Medium","5":"Medium-Dark","6":"Dark","choose":"Choose default skin tone"}}');


var $b247ea80b67298d5$export$2e2bcd8739ae039 = {
    autoFocus: {
        value: false
    },
    dynamicWidth: {
        value: false
    },
    emojiButtonColors: {
        value: null
    },
    emojiButtonRadius: {
        value: "100%"
    },
    emojiButtonSize: {
        value: 36
    },
    emojiSize: {
        value: 24
    },
    emojiVersion: {
        value: 15,
        choices: [
            1,
            2,
            3,
            4,
            5,
            11,
            12,
            12.1,
            13,
            13.1,
            14,
            15
        ]
    },
    exceptEmojis: {
        value: []
    },
    icons: {
        value: "auto",
        choices: [
            "auto",
            "outline",
            "solid"
        ]
    },
    locale: {
        value: "en",
        choices: [
            "en",
            "ar",
            "be",
            "cs",
            "de",
            "es",
            "fa",
            "fi",
            "fr",
            "hi",
            "it",
            "ja",
            "ko",
            "nl",
            "pl",
            "pt",
            "ru",
            "sa",
            "tr",
            "uk",
            "vi",
            "zh", 
        ]
    },
    maxFrequentRows: {
        value: 4
    },
    navPosition: {
        value: "top",
        choices: [
            "top",
            "bottom",
            "none"
        ]
    },
    noCountryFlags: {
        value: false
    },
    noResultsEmoji: {
        value: null
    },
    perLine: {
        value: 9
    },
    previewEmoji: {
        value: null
    },
    previewPosition: {
        value: "bottom",
        choices: [
            "top",
            "bottom",
            "none"
        ]
    },
    searchPosition: {
        value: "sticky",
        choices: [
            "sticky",
            "static",
            "none"
        ]
    },
    set: {
        value: "native",
        choices: [
            "native",
            "apple",
            "facebook",
            "google",
            "twitter"
        ]
    },
    skin: {
        value: 1,
        choices: [
            1,
            2,
            3,
            4,
            5,
            6
        ]
    },
    skinTonePosition: {
        value: "preview",
        choices: [
            "preview",
            "search",
            "none"
        ]
    },
    theme: {
        value: "auto",
        choices: [
            "auto",
            "light",
            "dark"
        ]
    },
    // Data
    categories: null,
    categoryIcons: null,
    custom: null,
    data: null,
    i18n: null,
    // Callbacks
    getImageURL: null,
    getSpritesheetURL: null,
    onAddCustomEmoji: null,
    onClickOutside: null,
    onEmojiSelect: null,
    // Deprecated
    stickySearch: {
        deprecated: true,
        value: true
    }
};



let $7adb23b0109cc36a$export$dbe3113d60765c1a = null;
let $7adb23b0109cc36a$export$2d0294657ab35f1b = null;
const $7adb23b0109cc36a$var$fetchCache = {};
async function $7adb23b0109cc36a$var$fetchJSON(src) {
    if ($7adb23b0109cc36a$var$fetchCache[src]) return $7adb23b0109cc36a$var$fetchCache[src];
    const response = await fetch(src);
    const json = await response.json();
    $7adb23b0109cc36a$var$fetchCache[src] = json;
    return json;
}
let $7adb23b0109cc36a$var$promise = null;
let $7adb23b0109cc36a$var$initCallback = null;
let $7adb23b0109cc36a$var$initialized = false;
function $7adb23b0109cc36a$export$2cd8252107eb640b(options, { caller: caller  } = {}) {
    $7adb23b0109cc36a$var$promise || ($7adb23b0109cc36a$var$promise = new Promise((resolve)=>{
        $7adb23b0109cc36a$var$initCallback = resolve;
    }));
    if (options) $7adb23b0109cc36a$var$_init(options);
    else if (caller && !$7adb23b0109cc36a$var$initialized) console.warn(`\`${caller}\` requires data to be initialized first. Promise will be pending until \`init\` is called.`);
    return $7adb23b0109cc36a$var$promise;
}
async function $7adb23b0109cc36a$var$_init(props) {
    $7adb23b0109cc36a$var$initialized = true;
    let { emojiVersion: emojiVersion , set: set , locale: locale  } = props;
    emojiVersion || (emojiVersion = ($b247ea80b67298d5$export$2e2bcd8739ae039).emojiVersion.value);
    set || (set = ($b247ea80b67298d5$export$2e2bcd8739ae039).set.value);
    locale || (locale = ($b247ea80b67298d5$export$2e2bcd8739ae039).locale.value);
    if (!$7adb23b0109cc36a$export$2d0294657ab35f1b) {
        $7adb23b0109cc36a$export$2d0294657ab35f1b = (typeof props.data === "function" ? await props.data() : props.data) || await $7adb23b0109cc36a$var$fetchJSON(`https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/sets/${emojiVersion}/${set}.json`);
        $7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons = {};
        $7adb23b0109cc36a$export$2d0294657ab35f1b.natives = {};
        $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.unshift({
            id: "frequent",
            emojis: []
        });
        for(const alias in $7adb23b0109cc36a$export$2d0294657ab35f1b.aliases){
            const emojiId = $7adb23b0109cc36a$export$2d0294657ab35f1b.aliases[alias];
            const emoji = $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId];
            if (!emoji) continue;
            emoji.aliases || (emoji.aliases = []);
            emoji.aliases.push(alias);
        }
        $7adb23b0109cc36a$export$2d0294657ab35f1b.originalCategories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories;
    } else $7adb23b0109cc36a$export$2d0294657ab35f1b.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.filter((c)=>{
        const isCustom = !!c.name;
        if (!isCustom) return true;
        return false;
    });
    $7adb23b0109cc36a$export$dbe3113d60765c1a = (typeof props.i18n === "function" ? await props.i18n() : props.i18n) || (locale == "en" ? ((/*@__PURE__*/$parcel$interopDefault($8d50d93417ef682a$exports))) : await $7adb23b0109cc36a$var$fetchJSON(`https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/i18n/${locale}.json`));
    if (props.custom) for(let i in props.custom){
        i = parseInt(i);
        const category = props.custom[i];
        const prevCategory = props.custom[i - 1];
        if (!category.emojis || !category.emojis.length) continue;
        category.id || (category.id = `custom_${i + 1}`);
        category.name || (category.name = $7adb23b0109cc36a$export$dbe3113d60765c1a.categories.custom);
        if (prevCategory && !category.icon) category.target = prevCategory.target || prevCategory;
        $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.push(category);
        for (const emoji of category.emojis)$7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emoji.id] = emoji;
    }
    if (props.categories) $7adb23b0109cc36a$export$2d0294657ab35f1b.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.originalCategories.filter((c)=>{
        return props.categories.indexOf(c.id) != -1;
    }).sort((c1, c2)=>{
        const i1 = props.categories.indexOf(c1.id);
        const i2 = props.categories.indexOf(c2.id);
        return i1 - i2;
    });
    let latestVersionSupport = null;
    let noCountryFlags = null;
    if (set == "native") {
        latestVersionSupport = ($c84d045dcc34faf5$export$2e2bcd8739ae039).latestVersion();
        noCountryFlags = props.noCountryFlags || ($c84d045dcc34faf5$export$2e2bcd8739ae039).noCountryFlags();
    }
    let categoryIndex = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.length;
    let resetSearchIndex = false;
    while(categoryIndex--){
        const category = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories[categoryIndex];
        if (category.id == "frequent") {
            let { maxFrequentRows: maxFrequentRows , perLine: perLine  } = props;
            maxFrequentRows = maxFrequentRows >= 0 ? maxFrequentRows : ($b247ea80b67298d5$export$2e2bcd8739ae039).maxFrequentRows.value;
            perLine || (perLine = ($b247ea80b67298d5$export$2e2bcd8739ae039).perLine.value);
            category.emojis = ($b22cfd0a55410b4f$export$2e2bcd8739ae039).get({
                maxFrequentRows: maxFrequentRows,
                perLine: perLine
            });
        }
        if (!category.emojis || !category.emojis.length) {
            $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.splice(categoryIndex, 1);
            continue;
        }
        const { categoryIcons: categoryIcons  } = props;
        if (categoryIcons) {
            const icon = categoryIcons[category.id];
            if (icon && !category.icon) category.icon = icon;
        }
        let emojiIndex = category.emojis.length;
        while(emojiIndex--){
            const emojiId = category.emojis[emojiIndex];
            const emoji = emojiId.id ? emojiId : $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId];
            const ignore = ()=>{
                category.emojis.splice(emojiIndex, 1);
            };
            if (!emoji || props.exceptEmojis && props.exceptEmojis.includes(emoji.id)) {
                ignore();
                continue;
            }
            if (latestVersionSupport && emoji.version > latestVersionSupport) {
                ignore();
                continue;
            }
            if (noCountryFlags && category.id == "flags") {
                if (!($e6eae5155b87f591$export$bcb25aa587e9cb13).includes(emoji.id)) {
                    ignore();
                    continue;
                }
            }
            if (!emoji.search) {
                resetSearchIndex = true;
                emoji.search = "," + [
                    [
                        emoji.id,
                        false
                    ],
                    [
                        emoji.name,
                        true
                    ],
                    [
                        emoji.keywords,
                        false
                    ],
                    [
                        emoji.emoticons,
                        false
                    ], 
                ].map(([strings, split])=>{
                    if (!strings) return;
                    return (Array.isArray(strings) ? strings : [
                        strings
                    ]).map((string)=>{
                        return (split ? string.split(/[-|_|\s]+/) : [
                            string
                        ]).map((s)=>s.toLowerCase());
                    }).flat();
                }).flat().filter((a)=>a && a.trim()).join(",");
                if (emoji.emoticons) for (const emoticon of emoji.emoticons){
                    if ($7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons[emoticon]) continue;
                    $7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons[emoticon] = emoji.id;
                }
                let skinIndex = 0;
                for (const skin of emoji.skins){
                    if (!skin) continue;
                    skinIndex++;
                    const { native: native  } = skin;
                    if (native) {
                        $7adb23b0109cc36a$export$2d0294657ab35f1b.natives[native] = emoji.id;
                        emoji.search += `,${native}`;
                    }
                    const skinShortcodes = skinIndex == 1 ? "" : `:skin-tone-${skinIndex}:`;
                    skin.shortcodes = `:${emoji.id}:${skinShortcodes}`;
                }
            }
        }
    }
    if (resetSearchIndex) ($c4d155af13ad4d4b$export$2e2bcd8739ae039).reset();
    $7adb23b0109cc36a$var$initCallback();
}
function $7adb23b0109cc36a$export$75fe5f91d452f94b(props, defaultProps, element) {
    props || (props = {});
    const _props = {};
    for(let k in defaultProps)_props[k] = $7adb23b0109cc36a$export$88c9ddb45cea7241(k, props, defaultProps, element);
    return _props;
}
function $7adb23b0109cc36a$export$88c9ddb45cea7241(propName, props, defaultProps, element) {
    const defaults = defaultProps[propName];
    let value = element && element.getAttribute(propName) || (props[propName] != null && props[propName] != undefined ? props[propName] : null);
    if (!defaults) return value;
    if (value != null && defaults.value && typeof defaults.value != typeof value) {
        if (typeof defaults.value == "boolean") value = value == "false" ? false : true;
        else value = defaults.value.constructor(value);
    }
    if (defaults.transform && value) value = defaults.transform(value);
    if (value == null || defaults.choices && defaults.choices.indexOf(value) == -1) value = defaults.value;
    return value;
}


const $c4d155af13ad4d4b$var$SHORTCODES_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
let $c4d155af13ad4d4b$var$Pool = null;
function $c4d155af13ad4d4b$var$get(emojiId) {
    if (emojiId.id) return emojiId;
    return ($7adb23b0109cc36a$export$2d0294657ab35f1b).emojis[emojiId] || ($7adb23b0109cc36a$export$2d0294657ab35f1b).emojis[($7adb23b0109cc36a$export$2d0294657ab35f1b).aliases[emojiId]] || ($7adb23b0109cc36a$export$2d0294657ab35f1b).emojis[($7adb23b0109cc36a$export$2d0294657ab35f1b).natives[emojiId]];
}
function $c4d155af13ad4d4b$var$reset() {
    $c4d155af13ad4d4b$var$Pool = null;
}
async function $c4d155af13ad4d4b$var$search(value, { maxResults: maxResults , caller: caller  } = {}) {
    if (!value || !value.trim().length) return null;
    maxResults || (maxResults = 90);
    await ($7adb23b0109cc36a$export$2cd8252107eb640b)(null, {
        caller: caller || "SearchIndex.search"
    });
    const values = value.toLowerCase().replace(/(\w)-/, "$1 ").split(/[\s|,]+/).filter((word, i, words)=>{
        return word.trim() && words.indexOf(word) == i;
    });
    if (!values.length) return;
    let pool = $c4d155af13ad4d4b$var$Pool || ($c4d155af13ad4d4b$var$Pool = Object.values(($7adb23b0109cc36a$export$2d0294657ab35f1b).emojis));
    let results, scores;
    for (const value1 of values){
        if (!pool.length) break;
        results = [];
        scores = {};
        for (const emoji of pool){
            if (!emoji.search) continue;
            const score = emoji.search.indexOf(`,${value1}`);
            if (score == -1) continue;
            results.push(emoji);
            scores[emoji.id] || (scores[emoji.id] = 0);
            scores[emoji.id] += emoji.id == value1 ? 0 : score + 1;
        }
        pool = results;
    }
    if (results.length < 2) return results;
    results.sort((a, b)=>{
        const aScore = scores[a.id];
        const bScore = scores[b.id];
        if (aScore == bScore) return a.id.localeCompare(b.id);
        return aScore - bScore;
    });
    if (results.length > maxResults) results = results.slice(0, maxResults);
    return results;
}
var $c4d155af13ad4d4b$export$2e2bcd8739ae039 = {
    search: $c4d155af13ad4d4b$var$search,
    get: $c4d155af13ad4d4b$var$get,
    reset: $c4d155af13ad4d4b$var$reset,
    SHORTCODES_REGEX: $c4d155af13ad4d4b$var$SHORTCODES_REGEX
};


const $e6eae5155b87f591$export$bcb25aa587e9cb13 = [
    "checkered_flag",
    "crossed_flags",
    "pirate_flag",
    "rainbow-flag",
    "transgender_flag",
    "triangular_flag_on_post",
    "waving_black_flag",
    "waving_white_flag", 
];


function $693b183b0a78708f$export$9cb4719e2e525b7a(a, b) {
    return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index)=>val == b[index]);
}
async function $693b183b0a78708f$export$e772c8ff12451969(frames = 1) {
    for(let _ in [
        ...Array(frames).keys()
    ])await new Promise(requestAnimationFrame);
}
function $693b183b0a78708f$export$d10ac59fbe52a745(emoji, { skinIndex: skinIndex = 0  } = {}) {
    const skin = emoji.skins[skinIndex] || (()=>{
        skinIndex = 0;
        return emoji.skins[skinIndex];
    })();
    const emojiData = {
        id: emoji.id,
        name: emoji.name,
        native: skin.native,
        unified: skin.unified,
        keywords: emoji.keywords,
        shortcodes: skin.shortcodes || emoji.shortcodes
    };
    if (emoji.skins.length > 1) emojiData.skin = skinIndex + 1;
    if (skin.src) emojiData.src = skin.src;
    if (emoji.aliases && emoji.aliases.length) emojiData.aliases = emoji.aliases;
    if (emoji.emoticons && emoji.emoticons.length) emojiData.emoticons = emoji.emoticons;
    return emojiData;
}





const $fcccfb36ed0cde68$var$categories = {
    activity: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M12 0C5.373 0 0 5.372 0 12c0 6.627 5.373 12 12 12 6.628 0 12-5.373 12-12 0-6.628-5.372-12-12-12m9.949 11H17.05c.224-2.527 1.232-4.773 1.968-6.113A9.966 9.966 0 0 1 21.949 11M13 11V2.051a9.945 9.945 0 0 1 4.432 1.564c-.858 1.491-2.156 4.22-2.392 7.385H13zm-2 0H8.961c-.238-3.165-1.536-5.894-2.393-7.385A9.95 9.95 0 0 1 11 2.051V11zm0 2v8.949a9.937 9.937 0 0 1-4.432-1.564c.857-1.492 2.155-4.221 2.393-7.385H11zm4.04 0c.236 3.164 1.534 5.893 2.392 7.385A9.92 9.92 0 0 1 13 21.949V13h2.04zM4.982 4.887C5.718 6.227 6.726 8.473 6.951 11h-4.9a9.977 9.977 0 0 1 2.931-6.113M2.051 13h4.9c-.226 2.527-1.233 4.771-1.969 6.113A9.972 9.972 0 0 1 2.051 13m16.967 6.113c-.735-1.342-1.744-3.586-1.968-6.113h4.899a9.961 9.961 0 0 1-2.931 6.113"
            })
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M16.17 337.5c0 44.98 7.565 83.54 13.98 107.9C35.22 464.3 50.46 496 174.9 496c9.566 0 19.59-.4707 29.84-1.271L17.33 307.3C16.53 317.6 16.17 327.7 16.17 337.5zM495.8 174.5c0-44.98-7.565-83.53-13.98-107.9c-4.688-17.54-18.34-31.23-36.04-35.95C435.5 27.91 392.9 16 337 16c-9.564 0-19.59 .4707-29.84 1.271l187.5 187.5C495.5 194.4 495.8 184.3 495.8 174.5zM26.77 248.8l236.3 236.3c142-36.1 203.9-150.4 222.2-221.1L248.9 26.87C106.9 62.96 45.07 177.2 26.77 248.8zM256 335.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L164.7 283.3C161.6 280.2 160 276.1 160 271.1c0-8.529 6.865-16 16-16c4.095 0 8.189 1.562 11.31 4.688l64.01 64C254.4 327.8 256 331.9 256 335.1zM304 287.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L212.7 235.3C209.6 232.2 208 228.1 208 223.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01C302.5 279.8 304 283.9 304 287.1zM256 175.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01c3.125 3.125 4.688 7.219 4.688 11.31c0 9.133-7.468 16-16 16c-4.094 0-8.189-1.562-11.31-4.688l-64.01-64.01C257.6 184.2 256 180.1 256 175.1z"
            })
        })
    },
    custom: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 448 512",
        children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M417.1 368c-5.937 10.27-16.69 16-27.75 16c-5.422 0-10.92-1.375-15.97-4.281L256 311.4V448c0 17.67-14.33 32-31.1 32S192 465.7 192 448V311.4l-118.3 68.29C68.67 382.6 63.17 384 57.75 384c-11.06 0-21.81-5.734-27.75-16c-8.828-15.31-3.594-34.88 11.72-43.72L159.1 256L41.72 187.7C26.41 178.9 21.17 159.3 29.1 144C36.63 132.5 49.26 126.7 61.65 128.2C65.78 128.7 69.88 130.1 73.72 132.3L192 200.6V64c0-17.67 14.33-32 32-32S256 46.33 256 64v136.6l118.3-68.29c3.838-2.213 7.939-3.539 12.07-4.051C398.7 126.7 411.4 132.5 417.1 144c8.828 15.31 3.594 34.88-11.72 43.72L288 256l118.3 68.28C421.6 333.1 426.8 352.7 417.1 368z"
        })
    }),
    flags: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M0 0l6.084 24H8L1.916 0zM21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.563 3h7.875l2 8H8.563l-2-8zm8.832 10l-2.856 1.904L12.063 13h3.332zM19 13l-1.5-6h1.938l2 8H16l3-2z"
            })
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M64 496C64 504.8 56.75 512 48 512h-32C7.25 512 0 504.8 0 496V32c0-17.75 14.25-32 32-32s32 14.25 32 32V496zM476.3 0c-6.365 0-13.01 1.35-19.34 4.233c-45.69 20.86-79.56 27.94-107.8 27.94c-59.96 0-94.81-31.86-163.9-31.87C160.9 .3055 131.6 4.867 96 15.75v350.5c32-9.984 59.87-14.1 84.85-14.1c73.63 0 124.9 31.78 198.6 31.78c31.91 0 68.02-5.971 111.1-23.09C504.1 355.9 512 344.4 512 332.1V30.73C512 11.1 495.3 0 476.3 0z"
            })
        })
    },
    foods: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M17 4.978c-1.838 0-2.876.396-3.68.934.513-1.172 1.768-2.934 4.68-2.934a1 1 0 0 0 0-2c-2.921 0-4.629 1.365-5.547 2.512-.064.078-.119.162-.18.244C11.73 1.838 10.798.023 9.207.023 8.579.022 7.85.306 7 .978 5.027 2.54 5.329 3.902 6.492 4.999 3.609 5.222 0 7.352 0 12.969c0 4.582 4.961 11.009 9 11.009 1.975 0 2.371-.486 3-1 .629.514 1.025 1 3 1 4.039 0 9-6.418 9-11 0-5.953-4.055-8-7-8M8.242 2.546c.641-.508.943-.523.965-.523.426.169.975 1.405 1.357 3.055-1.527-.629-2.741-1.352-2.98-1.846.059-.112.241-.356.658-.686M15 21.978c-1.08 0-1.21-.109-1.559-.402l-.176-.146c-.367-.302-.816-.452-1.266-.452s-.898.15-1.266.452l-.176.146c-.347.292-.477.402-1.557.402-2.813 0-7-5.389-7-9.009 0-5.823 4.488-5.991 5-5.991 1.939 0 2.484.471 3.387 1.251l.323.276a1.995 1.995 0 0 0 2.58 0l.323-.276c.902-.78 1.447-1.251 3.387-1.251.512 0 5 .168 5 6 0 3.617-4.187 9-7 9"
            })
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M481.9 270.1C490.9 279.1 496 291.3 496 304C496 316.7 490.9 328.9 481.9 337.9C472.9 346.9 460.7 352 448 352H64C51.27 352 39.06 346.9 30.06 337.9C21.06 328.9 16 316.7 16 304C16 291.3 21.06 279.1 30.06 270.1C39.06 261.1 51.27 256 64 256H448C460.7 256 472.9 261.1 481.9 270.1zM475.3 388.7C478.3 391.7 480 395.8 480 400V416C480 432.1 473.3 449.3 461.3 461.3C449.3 473.3 432.1 480 416 480H96C79.03 480 62.75 473.3 50.75 461.3C38.74 449.3 32 432.1 32 416V400C32 395.8 33.69 391.7 36.69 388.7C39.69 385.7 43.76 384 48 384H464C468.2 384 472.3 385.7 475.3 388.7zM50.39 220.8C45.93 218.6 42.03 215.5 38.97 211.6C35.91 207.7 33.79 203.2 32.75 198.4C31.71 193.5 31.8 188.5 32.99 183.7C54.98 97.02 146.5 32 256 32C365.5 32 457 97.02 479 183.7C480.2 188.5 480.3 193.5 479.2 198.4C478.2 203.2 476.1 207.7 473 211.6C469.1 215.5 466.1 218.6 461.6 220.8C457.2 222.9 452.3 224 447.3 224H64.67C59.73 224 54.84 222.9 50.39 220.8zM372.7 116.7C369.7 119.7 368 123.8 368 128C368 131.2 368.9 134.3 370.7 136.9C372.5 139.5 374.1 141.6 377.9 142.8C380.8 143.1 384 144.3 387.1 143.7C390.2 143.1 393.1 141.6 395.3 139.3C397.6 137.1 399.1 134.2 399.7 131.1C400.3 128 399.1 124.8 398.8 121.9C397.6 118.1 395.5 116.5 392.9 114.7C390.3 112.9 387.2 111.1 384 111.1C379.8 111.1 375.7 113.7 372.7 116.7V116.7zM244.7 84.69C241.7 87.69 240 91.76 240 96C240 99.16 240.9 102.3 242.7 104.9C244.5 107.5 246.1 109.6 249.9 110.8C252.8 111.1 256 112.3 259.1 111.7C262.2 111.1 265.1 109.6 267.3 107.3C269.6 105.1 271.1 102.2 271.7 99.12C272.3 96.02 271.1 92.8 270.8 89.88C269.6 86.95 267.5 84.45 264.9 82.7C262.3 80.94 259.2 79.1 256 79.1C251.8 79.1 247.7 81.69 244.7 84.69V84.69zM116.7 116.7C113.7 119.7 112 123.8 112 128C112 131.2 112.9 134.3 114.7 136.9C116.5 139.5 118.1 141.6 121.9 142.8C124.8 143.1 128 144.3 131.1 143.7C134.2 143.1 137.1 141.6 139.3 139.3C141.6 137.1 143.1 134.2 143.7 131.1C144.3 128 143.1 124.8 142.8 121.9C141.6 118.1 139.5 116.5 136.9 114.7C134.3 112.9 131.2 111.1 128 111.1C123.8 111.1 119.7 113.7 116.7 116.7L116.7 116.7z"
            })
        })
    },
    frequent: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M13 4h-2l-.001 7H9v2h2v2h2v-2h4v-2h-4z"
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
                })
            ]
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z"
            })
        })
    },
    nature: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M15.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 15.5 8M8.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 8.5 8"
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M18.933 0h-.027c-.97 0-2.138.787-3.018 1.497-1.274-.374-2.612-.51-3.887-.51-1.285 0-2.616.133-3.874.517C7.245.79 6.069 0 5.093 0h-.027C3.352 0 .07 2.67.002 7.026c-.039 2.479.276 4.238 1.04 5.013.254.258.882.677 1.295.882.191 3.177.922 5.238 2.536 6.38.897.637 2.187.949 3.2 1.102C8.04 20.6 8 20.795 8 21c0 1.773 2.35 3 4 3 1.648 0 4-1.227 4-3 0-.201-.038-.393-.072-.586 2.573-.385 5.435-1.877 5.925-7.587.396-.22.887-.568 1.104-.788.763-.774 1.079-2.534 1.04-5.013C23.929 2.67 20.646 0 18.933 0M3.223 9.135c-.237.281-.837 1.155-.884 1.238-.15-.41-.368-1.349-.337-3.291.051-3.281 2.478-4.972 3.091-5.031.256.015.731.27 1.265.646-1.11 1.171-2.275 2.915-2.352 5.125-.133.546-.398.858-.783 1.313M12 22c-.901 0-1.954-.693-2-1 0-.654.475-1.236 1-1.602V20a1 1 0 1 0 2 0v-.602c.524.365 1 .947 1 1.602-.046.307-1.099 1-2 1m3-3.48v.02a4.752 4.752 0 0 0-1.262-1.02c1.092-.516 2.239-1.334 2.239-2.217 0-1.842-1.781-2.195-3.977-2.195-2.196 0-3.978.354-3.978 2.195 0 .883 1.148 1.701 2.238 2.217A4.8 4.8 0 0 0 9 18.539v-.025c-1-.076-2.182-.281-2.973-.842-1.301-.92-1.838-3.045-1.853-6.478l.023-.041c.496-.826 1.49-1.45 1.804-3.102 0-2.047 1.357-3.631 2.362-4.522C9.37 3.178 10.555 3 11.948 3c1.447 0 2.685.192 3.733.57 1 .9 2.316 2.465 2.316 4.48.313 1.651 1.307 2.275 1.803 3.102.035.058.068.117.102.178-.059 5.967-1.949 7.01-4.902 7.19m6.628-8.202c-.037-.065-.074-.13-.113-.195a7.587 7.587 0 0 0-.739-.987c-.385-.455-.648-.768-.782-1.313-.076-2.209-1.241-3.954-2.353-5.124.531-.376 1.004-.63 1.261-.647.636.071 3.044 1.764 3.096 5.031.027 1.81-.347 3.218-.37 3.235"
                })
            ]
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 576 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M332.7 19.85C334.6 8.395 344.5 0 356.1 0C363.6 0 370.6 3.52 375.1 9.502L392 32H444.1C456.8 32 469.1 37.06 478.1 46.06L496 64H552C565.3 64 576 74.75 576 88V112C576 156.2 540.2 192 496 192H426.7L421.6 222.5L309.6 158.5L332.7 19.85zM448 64C439.2 64 432 71.16 432 80C432 88.84 439.2 96 448 96C456.8 96 464 88.84 464 80C464 71.16 456.8 64 448 64zM416 256.1V480C416 497.7 401.7 512 384 512H352C334.3 512 320 497.7 320 480V364.8C295.1 377.1 268.8 384 240 384C211.2 384 184 377.1 160 364.8V480C160 497.7 145.7 512 128 512H96C78.33 512 64 497.7 64 480V249.8C35.23 238.9 12.64 214.5 4.836 183.3L.9558 167.8C-3.331 150.6 7.094 133.2 24.24 128.1C41.38 124.7 58.76 135.1 63.05 152.2L66.93 167.8C70.49 182 83.29 191.1 97.97 191.1H303.8L416 256.1z"
            })
        })
    },
    objects: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M12 0a9 9 0 0 0-5 16.482V21s2.035 3 5 3 5-3 5-3v-4.518A9 9 0 0 0 12 0zm0 2c3.86 0 7 3.141 7 7s-3.14 7-7 7-7-3.141-7-7 3.14-7 7-7zM9 17.477c.94.332 1.946.523 3 .523s2.06-.19 3-.523v.834c-.91.436-1.925.689-3 .689a6.924 6.924 0 0 1-3-.69v-.833zm.236 3.07A8.854 8.854 0 0 0 12 21c.965 0 1.888-.167 2.758-.451C14.155 21.173 13.153 22 12 22c-1.102 0-2.117-.789-2.764-1.453z"
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M14.745 12.449h-.004c-.852-.024-1.188-.858-1.577-1.824-.421-1.061-.703-1.561-1.182-1.566h-.009c-.481 0-.783.497-1.235 1.537-.436.982-.801 1.811-1.636 1.791l-.276-.043c-.565-.171-.853-.691-1.284-1.794-.125-.313-.202-.632-.27-.913-.051-.213-.127-.53-.195-.634C7.067 9.004 7.039 9 6.99 9A1 1 0 0 1 7 7h.01c1.662.017 2.015 1.373 2.198 2.134.486-.981 1.304-2.058 2.797-2.075 1.531.018 2.28 1.153 2.731 2.141l.002-.008C14.944 8.424 15.327 7 16.979 7h.032A1 1 0 1 1 17 9h-.011c-.149.076-.256.474-.319.709a6.484 6.484 0 0 1-.311.951c-.429.973-.79 1.789-1.614 1.789"
                })
            ]
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 384 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM191.4 .0132C89.44 .3257 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.61 288.9-.2837 191.4 .0132zM192 96.01c-44.13 0-80 35.89-80 79.1C112 184.8 104.8 192 96 192S80 184.8 80 176c0-61.76 50.25-111.1 112-111.1c8.844 0 16 7.159 16 16S200.8 96.01 192 96.01z"
            })
        })
    },
    people: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M8 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 8 7M16 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 16 7M15.232 15c-.693 1.195-1.87 2-3.349 2-1.477 0-2.655-.805-3.347-2H15m3-2H6a6 6 0 1 0 12 0"
                })
            ]
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM256 432C332.1 432 396.2 382 415.2 314.1C419.1 300.4 407.8 288 393.6 288H118.4C104.2 288 92.92 300.4 96.76 314.1C115.8 382 179.9 432 256 432V432zM176.4 160C158.7 160 144.4 174.3 144.4 192C144.4 209.7 158.7 224 176.4 224C194 224 208.4 209.7 208.4 192C208.4 174.3 194 160 176.4 160zM336.4 224C354 224 368.4 209.7 368.4 192C368.4 174.3 354 160 336.4 160C318.7 160 304.4 174.3 304.4 192C304.4 209.7 318.7 224 336.4 224z"
            })
        })
    },
    places: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M6.5 12C5.122 12 4 13.121 4 14.5S5.122 17 6.5 17 9 15.879 9 14.5 7.878 12 6.5 12m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5M17.5 12c-1.378 0-2.5 1.121-2.5 2.5s1.122 2.5 2.5 2.5 2.5-1.121 2.5-2.5-1.122-2.5-2.5-2.5m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5"
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                    d: "M22.482 9.494l-1.039-.346L21.4 9h.6c.552 0 1-.439 1-.992 0-.006-.003-.008-.003-.008H23c0-1-.889-2-1.984-2h-.642l-.731-1.717C19.262 3.012 18.091 2 16.764 2H7.236C5.909 2 4.738 3.012 4.357 4.283L3.626 6h-.642C1.889 6 1 7 1 8h.003S1 8.002 1 8.008C1 8.561 1.448 9 2 9h.6l-.043.148-1.039.346a2.001 2.001 0 0 0-1.359 2.097l.751 7.508a1 1 0 0 0 .994.901H3v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h6v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h1.096a.999.999 0 0 0 .994-.901l.751-7.508a2.001 2.001 0 0 0-1.359-2.097M6.273 4.857C6.402 4.43 6.788 4 7.236 4h9.527c.448 0 .834.43.963.857L19.313 9H4.688l1.585-4.143zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.189-3H2.811l-.662-6.607L3 11h18l.852.393L21.189 18z"
                })
            ]
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M39.61 196.8L74.8 96.29C88.27 57.78 124.6 32 165.4 32H346.6C387.4 32 423.7 57.78 437.2 96.29L472.4 196.8C495.6 206.4 512 229.3 512 256V448C512 465.7 497.7 480 480 480H448C430.3 480 416 465.7 416 448V400H96V448C96 465.7 81.67 480 64 480H32C14.33 480 0 465.7 0 448V256C0 229.3 16.36 206.4 39.61 196.8V196.8zM109.1 192H402.9L376.8 117.4C372.3 104.6 360.2 96 346.6 96H165.4C151.8 96 139.7 104.6 135.2 117.4L109.1 192zM96 256C78.33 256 64 270.3 64 288C64 305.7 78.33 320 96 320C113.7 320 128 305.7 128 288C128 270.3 113.7 256 96 256zM416 320C433.7 320 448 305.7 448 288C448 270.3 433.7 256 416 256C398.3 256 384 270.3 384 288C384 305.7 398.3 320 416 320z"
            })
        })
    },
    symbols: {
        outline: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M0 0h11v2H0zM4 11h3V6h4V4H0v2h4zM15.5 17c1.381 0 2.5-1.116 2.5-2.493s-1.119-2.493-2.5-2.493S13 13.13 13 14.507 14.119 17 15.5 17m0-2.986c.276 0 .5.222.5.493 0 .272-.224.493-.5.493s-.5-.221-.5-.493.224-.493.5-.493M21.5 19.014c-1.381 0-2.5 1.116-2.5 2.493S20.119 24 21.5 24s2.5-1.116 2.5-2.493-1.119-2.493-2.5-2.493m0 2.986a.497.497 0 0 1-.5-.493c0-.271.224-.493.5-.493s.5.222.5.493a.497.497 0 0 1-.5.493M22 13l-9 9 1.513 1.5 8.99-9.009zM17 11c2.209 0 4-1.119 4-2.5V2s.985-.161 1.498.949C23.01 4.055 23 6 23 6s1-1.119 1-3.135C24-.02 21 0 21 0h-2v6.347A5.853 5.853 0 0 0 17 6c-2.209 0-4 1.119-4 2.5s1.791 2.5 4 2.5M10.297 20.482l-1.475-1.585a47.54 47.54 0 0 1-1.442 1.129c-.307-.288-.989-1.016-2.045-2.183.902-.836 1.479-1.466 1.729-1.892s.376-.871.376-1.336c0-.592-.273-1.178-.818-1.759-.546-.581-1.329-.871-2.349-.871-1.008 0-1.79.293-2.344.879-.556.587-.832 1.181-.832 1.784 0 .813.419 1.748 1.256 2.805-.847.614-1.444 1.208-1.794 1.784a3.465 3.465 0 0 0-.523 1.833c0 .857.308 1.56.924 2.107.616.549 1.423.823 2.42.823 1.173 0 2.444-.379 3.813-1.137L8.235 24h2.819l-2.09-2.383 1.333-1.135zm-6.736-6.389a1.02 1.02 0 0 1 .73-.286c.31 0 .559.085.747.254a.849.849 0 0 1 .283.659c0 .518-.419 1.112-1.257 1.784-.536-.651-.805-1.231-.805-1.742a.901.901 0 0 1 .302-.669M3.74 22c-.427 0-.778-.116-1.057-.349-.279-.232-.418-.487-.418-.766 0-.594.509-1.288 1.527-2.083.968 1.134 1.717 1.946 2.248 2.438-.921.507-1.686.76-2.3.76"
            })
        }),
        solid: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
                d: "M500.3 7.251C507.7 13.33 512 22.41 512 31.1V175.1C512 202.5 483.3 223.1 447.1 223.1C412.7 223.1 383.1 202.5 383.1 175.1C383.1 149.5 412.7 127.1 447.1 127.1V71.03L351.1 90.23V207.1C351.1 234.5 323.3 255.1 287.1 255.1C252.7 255.1 223.1 234.5 223.1 207.1C223.1 181.5 252.7 159.1 287.1 159.1V63.1C287.1 48.74 298.8 35.61 313.7 32.62L473.7 .6198C483.1-1.261 492.9 1.173 500.3 7.251H500.3zM74.66 303.1L86.5 286.2C92.43 277.3 102.4 271.1 113.1 271.1H174.9C185.6 271.1 195.6 277.3 201.5 286.2L213.3 303.1H239.1C266.5 303.1 287.1 325.5 287.1 351.1V463.1C287.1 490.5 266.5 511.1 239.1 511.1H47.1C21.49 511.1-.0019 490.5-.0019 463.1V351.1C-.0019 325.5 21.49 303.1 47.1 303.1H74.66zM143.1 359.1C117.5 359.1 95.1 381.5 95.1 407.1C95.1 434.5 117.5 455.1 143.1 455.1C170.5 455.1 191.1 434.5 191.1 407.1C191.1 381.5 170.5 359.1 143.1 359.1zM440.3 367.1H496C502.7 367.1 508.6 372.1 510.1 378.4C513.3 384.6 511.6 391.7 506.5 396L378.5 508C372.9 512.1 364.6 513.3 358.6 508.9C352.6 504.6 350.3 496.6 353.3 489.7L391.7 399.1H336C329.3 399.1 323.4 395.9 321 389.6C318.7 383.4 320.4 376.3 325.5 371.1L453.5 259.1C459.1 255 467.4 254.7 473.4 259.1C479.4 263.4 481.6 271.4 478.7 278.3L440.3 367.1zM116.7 219.1L19.85 119.2C-8.112 90.26-6.614 42.31 24.85 15.34C51.82-8.137 93.26-3.642 118.2 21.83L128.2 32.32L137.7 21.83C162.7-3.642 203.6-8.137 231.6 15.34C262.6 42.31 264.1 90.26 236.1 119.2L139.7 219.1C133.2 225.6 122.7 225.6 116.7 219.1H116.7z"
            })
        })
    }
};
const $fcccfb36ed0cde68$var$search = {
    loupe: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"
        })
    }),
    delete: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z"
        })
    })
};
var $fcccfb36ed0cde68$export$2e2bcd8739ae039 = {
    categories: $fcccfb36ed0cde68$var$categories,
    search: $fcccfb36ed0cde68$var$search
};





function $254755d3f438722f$export$2e2bcd8739ae039(props) {
    let { id: id , skin: skin , emoji: emoji  } = props;
    if (props.shortcodes) {
        const matches = props.shortcodes.match(($c4d155af13ad4d4b$export$2e2bcd8739ae039).SHORTCODES_REGEX);
        if (matches) {
            id = matches[1];
            if (matches[2]) skin = matches[2];
        }
    }
    emoji || (emoji = ($c4d155af13ad4d4b$export$2e2bcd8739ae039).get(id || props.native));
    if (!emoji) return props.fallback;
    const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0];
    const imageSrc = emojiSkin.src || (props.set != "native" && !props.spritesheet ? typeof props.getImageURL === "function" ? props.getImageURL(props.set, emojiSkin.unified) : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@15.0.1/img/${props.set}/64/${emojiSkin.unified}.png` : undefined);
    const spritesheetSrc = typeof props.getSpritesheetURL === "function" ? props.getSpritesheetURL(props.set) : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@15.0.1/img/${props.set}/sheets-256/64.png`;
    return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
        class: "emoji-mart-emoji",
        "data-emoji-set": props.set,
        children: imageSrc ? /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("img", {
            style: {
                maxWidth: props.size || "1em",
                maxHeight: props.size || "1em",
                display: "inline-block"
            },
            alt: emojiSkin.native || emojiSkin.shortcodes,
            src: imageSrc
        }) : props.set == "native" ? /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
            style: {
                fontSize: props.size,
                fontFamily: '"EmojiMart", "Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", "Apple Color Emoji", "Twemoji Mozilla", "Noto Color Emoji", "Android Emoji"'
            },
            children: emojiSkin.native
        }) : /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
            style: {
                display: "block",
                width: props.size,
                height: props.size,
                backgroundImage: `url(${spritesheetSrc})`,
                backgroundSize: `${100 * ($7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.cols}% ${100 * ($7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.rows}%`,
                backgroundPosition: `${100 / (($7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.cols - 1) * emojiSkin.x}% ${100 / (($7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.rows - 1) * emojiSkin.y}%`
            }
        })
    });
}







const $6f57cc9cd54c5aaa$var$WindowHTMLElement = typeof window !== "undefined" && window.HTMLElement ? window.HTMLElement : Object;
class $6f57cc9cd54c5aaa$export$2e2bcd8739ae039 extends $6f57cc9cd54c5aaa$var$WindowHTMLElement {
    static get observedAttributes() {
        return Object.keys(this.Props);
    }
    update(props = {}) {
        for(let k in props)this.attributeChangedCallback(k, null, props[k]);
    }
    attributeChangedCallback(attr, _, newValue) {
        if (!this.component) return;
        const value = ($7adb23b0109cc36a$export$88c9ddb45cea7241)(attr, {
            [attr]: newValue
        }, this.constructor.Props, this);
        if (this.component.componentWillReceiveProps) this.component.componentWillReceiveProps({
            [attr]: value
        });
        else {
            this.component.props[attr] = value;
            this.component.forceUpdate();
        }
    }
    disconnectedCallback() {
        this.disconnected = true;
        if (this.component && this.component.unregister) this.component.unregister();
    }
    constructor(props = {}){
        super();
        this.props = props;
        if (props.parent || props.ref) {
            let ref = null;
            const parent = props.parent || (ref = props.ref && props.ref.current);
            if (ref) ref.innerHTML = "";
            if (parent) parent.appendChild(this);
        }
    }
}



class $26f27c338a96b1a6$export$2e2bcd8739ae039 extends ($6f57cc9cd54c5aaa$export$2e2bcd8739ae039) {
    setShadow() {
        this.attachShadow({
            mode: "open"
        });
    }
    injectStyles(styles) {
        if (!styles) return;
        const style = document.createElement("style");
        style.textContent = styles;
        this.shadowRoot.insertBefore(style, this.shadowRoot.firstChild);
    }
    constructor(props, { styles: styles  } = {}){
        super(props);
        this.setShadow();
        this.injectStyles(styles);
    }
}






var $3d90f6e46fb2dd47$export$2e2bcd8739ae039 = {
    fallback: "",
    id: "",
    native: "",
    shortcodes: "",
    size: {
        value: "",
        transform: (value)=>{
            // If the value is a number, then we assume it’s a pixel value.
            if (!/\D/.test(value)) return `${value}px`;
            return value;
        }
    },
    // Shared
    set: ($b247ea80b67298d5$export$2e2bcd8739ae039).set,
    skin: ($b247ea80b67298d5$export$2e2bcd8739ae039).skin
};


class $331b4160623139bf$export$2e2bcd8739ae039 extends ($6f57cc9cd54c5aaa$export$2e2bcd8739ae039) {
    async connectedCallback() {
        const props = ($7adb23b0109cc36a$export$75fe5f91d452f94b)(this.props, ($3d90f6e46fb2dd47$export$2e2bcd8739ae039), this);
        props.element = this;
        props.ref = (component)=>{
            this.component = component;
        };
        await ($7adb23b0109cc36a$export$2cd8252107eb640b)();
        if (this.disconnected) return;
        ($fb96b826c0c5f37a$export$b3890eb0ae9dca99)(/*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)(($254755d3f438722f$export$2e2bcd8739ae039), {
            ...props
        }), this);
    }
    constructor(props){
        super(props);
    }
}
($c770c458706daa72$export$2e2bcd8739ae039)($331b4160623139bf$export$2e2bcd8739ae039, "Props", ($3d90f6e46fb2dd47$export$2e2bcd8739ae039));
if (typeof customElements !== "undefined" && !customElements.get("em-emoji")) customElements.define("em-emoji", $331b4160623139bf$export$2e2bcd8739ae039);






var $1a9a8ef576b7773d$var$r, $1a9a8ef576b7773d$var$i = [], $1a9a8ef576b7773d$var$c = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__b, $1a9a8ef576b7773d$var$f = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__r, $1a9a8ef576b7773d$var$e = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).diffed, $1a9a8ef576b7773d$var$a = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__c, $1a9a8ef576b7773d$var$v = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount;
function $1a9a8ef576b7773d$var$x() {
    var t6;
    for($1a9a8ef576b7773d$var$i.sort(function(n11, t7) {
        return n11.__v.__b - t7.__v.__b;
    }); t6 = $1a9a8ef576b7773d$var$i.pop();)if (t6.__P) try {
        t6.__H.__h.forEach($1a9a8ef576b7773d$var$g), t6.__H.__h.forEach($1a9a8ef576b7773d$var$j), t6.__H.__h = [];
    } catch (u4) {
        t6.__H.__h = [], ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__e(u4, t6.__v);
    }
}
($fb96b826c0c5f37a$export$41c562ebe57d11e2).__b = function(n12) {
    $1a9a8ef576b7773d$var$c && $1a9a8ef576b7773d$var$c(n12);
}, ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__r = function(n13) {
    $1a9a8ef576b7773d$var$f && $1a9a8ef576b7773d$var$f(n13);
    var r8 = (n13.__c).__H;
    r8 && (r8.__h.forEach($1a9a8ef576b7773d$var$g), r8.__h.forEach($1a9a8ef576b7773d$var$j), r8.__h = []);
}, ($fb96b826c0c5f37a$export$41c562ebe57d11e2).diffed = function(t8) {
    $1a9a8ef576b7773d$var$e && $1a9a8ef576b7773d$var$e(t8);
    var o6 = t8.__c;
    o6 && o6.__H && o6.__H.__h.length && (1 !== $1a9a8ef576b7773d$var$i.push(o6) && $1a9a8ef576b7773d$var$r === ($fb96b826c0c5f37a$export$41c562ebe57d11e2).requestAnimationFrame || (($1a9a8ef576b7773d$var$r = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).requestAnimationFrame) || function(n14) {
        var t9, u5 = function() {
            clearTimeout(r9), $1a9a8ef576b7773d$var$b && cancelAnimationFrame(t9), setTimeout(n14);
        }, r9 = setTimeout(u5, 100);
        $1a9a8ef576b7773d$var$b && (t9 = requestAnimationFrame(u5));
    })($1a9a8ef576b7773d$var$x));
}, ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__c = function(t10, u6) {
    u6.some(function(t11) {
        try {
            t11.__h.forEach($1a9a8ef576b7773d$var$g), t11.__h = t11.__h.filter(function(n15) {
                return !n15.__ || $1a9a8ef576b7773d$var$j(n15);
            });
        } catch (r10) {
            u6.some(function(n16) {
                n16.__h && (n16.__h = []);
            }), u6 = [], ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__e(r10, t11.__v);
        }
    }), $1a9a8ef576b7773d$var$a && $1a9a8ef576b7773d$var$a(t10, u6);
}, ($fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount = function(t12) {
    $1a9a8ef576b7773d$var$v && $1a9a8ef576b7773d$var$v(t12);
    var u7, r11 = t12.__c;
    r11 && r11.__H && (r11.__H.__.forEach(function(n17) {
        try {
            $1a9a8ef576b7773d$var$g(n17);
        } catch (n18) {
            u7 = n18;
        }
    }), u7 && ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__e(u7, r11.__v));
};
var $1a9a8ef576b7773d$var$b = "function" == typeof requestAnimationFrame;
function $1a9a8ef576b7773d$var$g(n19) {
    var r12 = n19.__c;
    "function" == typeof r12 && (n19.__c = void 0, r12());
}
function $1a9a8ef576b7773d$var$j(n20) {
    n20.__c = n20.__();
}





function $dc040a17866866fa$var$S(n1, t1) {
    for(var e1 in t1)n1[e1] = t1[e1];
    return n1;
}
function $dc040a17866866fa$var$C(n2, t2) {
    for(var e2 in n2)if ("__source" !== e2 && !(e2 in t2)) return !0;
    for(var r1 in t2)if ("__source" !== r1 && n2[r1] !== t2[r1]) return !0;
    return !1;
}
function $dc040a17866866fa$export$221d75b3f55bb0bd(n3) {
    this.props = n3;
}
($dc040a17866866fa$export$221d75b3f55bb0bd.prototype = new ($fb96b826c0c5f37a$export$16fa2f45be04daa8)).isPureReactComponent = !0, $dc040a17866866fa$export$221d75b3f55bb0bd.prototype.shouldComponentUpdate = function(n6, t5) {
    return $dc040a17866866fa$var$C(this.props, n6) || $dc040a17866866fa$var$C(this.state, t5);
};
var $dc040a17866866fa$var$w = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__b;
($fb96b826c0c5f37a$export$41c562ebe57d11e2).__b = function(n7) {
    n7.type && n7.type.__f && n7.ref && (n7.props.ref = n7.ref, n7.ref = null), $dc040a17866866fa$var$w && $dc040a17866866fa$var$w(n7);
};
var $dc040a17866866fa$var$A = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__e;
($fb96b826c0c5f37a$export$41c562ebe57d11e2).__e = function(n12, t10, e6) {
    if (n12.then) {
        for(var r5, u1 = t10; u1 = u1.__;)if ((r5 = u1.__c) && r5.__c) return null == t10.__e && (t10.__e = e6.__e, t10.__k = e6.__k), r5.__c(n12, t10);
    }
    $dc040a17866866fa$var$A(n12, t10, e6);
};
var $dc040a17866866fa$var$O = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount;
function $dc040a17866866fa$export$74bf444e3cd11ea5() {
    this.__u = 0, this.t = null, this.__b = null;
}
function $dc040a17866866fa$var$U(n13) {
    var t11 = n13.__.__c;
    return t11 && t11.__e && t11.__e(n13);
}
function $dc040a17866866fa$export$998bcd577473dd93() {
    this.u = null, this.o = null;
}
($fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount = function(n17) {
    var t13 = n17.__c;
    t13 && t13.__R && t13.__R(), t13 && !0 === n17.__h && (n17.type = null), $dc040a17866866fa$var$O && $dc040a17866866fa$var$O(n17);
}, ($dc040a17866866fa$export$74bf444e3cd11ea5.prototype = new ($fb96b826c0c5f37a$export$16fa2f45be04daa8)).__c = function(n18, t14) {
    var e8 = t14.__c, r7 = this;
    null == r7.t && (r7.t = []), r7.t.push(e8);
    var u4 = $dc040a17866866fa$var$U(r7.__v), o1 = !1, i1 = function() {
        o1 || (o1 = !0, e8.__R = null, u4 ? u4(l1) : l1());
    };
    e8.__R = i1;
    var l1 = function() {
        if (!--r7.__u) {
            if (r7.state.__e) {
                var n19 = r7.state.__e;
                r7.__v.__k[0] = function n22(t17, e9, r8) {
                    return t17 && (t17.__v = null, t17.__k = t17.__k && t17.__k.map(function(t18) {
                        return n22(t18, e9, r8);
                    }), t17.__c && t17.__c.__P === e9 && (t17.__e && r8.insertBefore(t17.__e, t17.__d), t17.__c.__e = !0, t17.__c.__P = r8)), t17;
                }(n19, n19.__c.__P, n19.__c.__O);
            }
            var t15;
            for(r7.setState({
                __e: r7.__b = null
            }); t15 = r7.t.pop();)t15.forceUpdate();
        }
    }, c1 = !0 === t14.__h;
    (r7.__u++) || c1 || r7.setState({
        __e: r7.__b = r7.__v.__k[0]
    }), n18.then(i1, i1);
}, $dc040a17866866fa$export$74bf444e3cd11ea5.prototype.componentWillUnmount = function() {
    this.t = [];
}, $dc040a17866866fa$export$74bf444e3cd11ea5.prototype.render = function(n23, t19) {
    if (this.__b) {
        if (this.__v.__k) {
            var e10 = document.createElement("div"), r9 = this.__v.__k[0].__c;
            this.__v.__k[0] = function n24(t20, e13, r12) {
                return t20 && (t20.__c && t20.__c.__H && (t20.__c.__H.__.forEach(function(n25) {
                    "function" == typeof n25.__c && n25.__c();
                }), t20.__c.__H = null), null != (t20 = $dc040a17866866fa$var$S({}, t20)).__c && (t20.__c.__P === r12 && (t20.__c.__P = e13), t20.__c = null), t20.__k = t20.__k && t20.__k.map(function(t21) {
                    return n24(t21, e13, r12);
                })), t20;
            }(this.__b, e10, r9.__O = r9.__P);
        }
        this.__b = null;
    }
    var u5 = t19.__e && ($fb96b826c0c5f37a$export$c8a8987d4410bf2d)(($fb96b826c0c5f37a$export$ffb0004e005737fa), null, n23.fallback);
    return u5 && (u5.__h = null), [
        ($fb96b826c0c5f37a$export$c8a8987d4410bf2d)(($fb96b826c0c5f37a$export$ffb0004e005737fa), null, t19.__e ? null : n23.children),
        u5
    ];
};
var $dc040a17866866fa$var$T = function(n26, t22, e14) {
    if (++e14[1] === e14[0] && n26.o.delete(t22), n26.props.revealOrder && ("t" !== n26.props.revealOrder[0] || !n26.o.size)) for(e14 = n26.u; e14;){
        for(; e14.length > 3;)e14.pop()();
        if (e14[1] < e14[0]) break;
        n26.u = e14 = e14[2];
    }
};
($dc040a17866866fa$export$998bcd577473dd93.prototype = new ($fb96b826c0c5f37a$export$16fa2f45be04daa8)).__e = function(n33) {
    var t25 = this, e16 = $dc040a17866866fa$var$U(t25.__v), r13 = t25.o.get(n33);
    return r13[0]++, function(u6) {
        var o2 = function() {
            t25.props.revealOrder ? (r13.push(u6), $dc040a17866866fa$var$T(t25, n33, r13)) : u6();
        };
        e16 ? e16(o2) : o2();
    };
}, $dc040a17866866fa$export$998bcd577473dd93.prototype.render = function(n34) {
    this.u = null, this.o = new Map;
    var t26 = ($fb96b826c0c5f37a$export$47e4c5b300681277)(n34.children);
    n34.revealOrder && "b" === n34.revealOrder[0] && t26.reverse();
    for(var e17 = t26.length; e17--;)this.o.set(t26[e17], this.u = [
        1,
        0,
        this.u
    ]);
    return n34.children;
}, $dc040a17866866fa$export$998bcd577473dd93.prototype.componentDidUpdate = $dc040a17866866fa$export$998bcd577473dd93.prototype.componentDidMount = function() {
    var n35 = this;
    this.o.forEach(function(t27, e18) {
        $dc040a17866866fa$var$T(n35, e18, t27);
    });
};
var $dc040a17866866fa$var$j = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, $dc040a17866866fa$var$P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, $dc040a17866866fa$var$V = "undefined" != typeof document, $dc040a17866866fa$var$z = function(n36) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n36);
};
($fb96b826c0c5f37a$export$16fa2f45be04daa8).prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(n39) {
    Object.defineProperty(($fb96b826c0c5f37a$export$16fa2f45be04daa8).prototype, n39, {
        configurable: !0,
        get: function() {
            return this["UNSAFE_" + n39];
        },
        set: function(t30) {
            Object.defineProperty(this, n39, {
                configurable: !0,
                writable: !0,
                value: t30
            });
        }
    });
});
var $dc040a17866866fa$var$H = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).event;
function $dc040a17866866fa$var$Z() {}
function $dc040a17866866fa$var$Y() {
    return this.cancelBubble;
}
function $dc040a17866866fa$var$q() {
    return this.defaultPrevented;
}
($fb96b826c0c5f37a$export$41c562ebe57d11e2).event = function(n40) {
    return $dc040a17866866fa$var$H && (n40 = $dc040a17866866fa$var$H(n40)), n40.persist = $dc040a17866866fa$var$Z, n40.isPropagationStopped = $dc040a17866866fa$var$Y, n40.isDefaultPrevented = $dc040a17866866fa$var$q, n40.nativeEvent = n40;
};
var $dc040a17866866fa$var$J = {
    configurable: !0,
    get: function() {
        return this.class;
    }
}, $dc040a17866866fa$var$K = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode;
($fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode = function(n41) {
    var t31 = n41.type, e21 = n41.props, r14 = e21;
    if ("string" == typeof t31) {
        var u7 = -1 === t31.indexOf("-");
        for(var o3 in r14 = {}, e21){
            var i2 = e21[o3];
            $dc040a17866866fa$var$V && "children" === o3 && "noscript" === t31 || "value" === o3 && "defaultValue" in e21 && null == i2 || ("defaultValue" === o3 && "value" in e21 && null == e21.value ? o3 = "value" : "download" === o3 && !0 === i2 ? i2 = "" : /ondoubleclick/i.test(o3) ? o3 = "ondblclick" : /^onchange(textarea|input)/i.test(o3 + t31) && !$dc040a17866866fa$var$z(e21.type) ? o3 = "oninput" : /^onfocus$/i.test(o3) ? o3 = "onfocusin" : /^onblur$/i.test(o3) ? o3 = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp)/.test(o3) ? o3 = o3.toLowerCase() : u7 && $dc040a17866866fa$var$P.test(o3) ? o3 = o3.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === i2 && (i2 = void 0), r14[o3] = i2);
        }
        "select" == t31 && r14.multiple && Array.isArray(r14.value) && (r14.value = ($fb96b826c0c5f37a$export$47e4c5b300681277)(e21.children).forEach(function(n42) {
            n42.props.selected = -1 != r14.value.indexOf(n42.props.value);
        })), "select" == t31 && null != r14.defaultValue && (r14.value = ($fb96b826c0c5f37a$export$47e4c5b300681277)(e21.children).forEach(function(n43) {
            n43.props.selected = r14.multiple ? -1 != r14.defaultValue.indexOf(n43.props.value) : r14.defaultValue == n43.props.value;
        })), n41.props = r14, e21.class != e21.className && ($dc040a17866866fa$var$J.enumerable = "className" in e21, null != e21.className && (r14.class = e21.className), Object.defineProperty(r14, "className", $dc040a17866866fa$var$J));
    }
    n41.$$typeof = $dc040a17866866fa$var$j, $dc040a17866866fa$var$K && $dc040a17866866fa$var$K(n41);
};
var $dc040a17866866fa$var$Q = ($fb96b826c0c5f37a$export$41c562ebe57d11e2).__r;
($fb96b826c0c5f37a$export$41c562ebe57d11e2).__r = function(n44) {
    $dc040a17866866fa$var$Q && $dc040a17866866fa$var$Q(n44), n44.__c;
};




const $ec8c39fdad15601a$var$THEME_ICONS = {
    light: "outline",
    dark: "solid"
};
class $ec8c39fdad15601a$export$2e2bcd8739ae039 extends ($dc040a17866866fa$export$221d75b3f55bb0bd) {
    renderIcon(category) {
        const { icon: icon  } = category;
        if (icon) {
            if (icon.svg) return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                class: "flex",
                dangerouslySetInnerHTML: {
                    __html: icon.svg
                }
            });
            if (icon.src) return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("img", {
                src: icon.src
            });
        }
        const categoryIcons = ($fcccfb36ed0cde68$export$2e2bcd8739ae039).categories[category.id] || ($fcccfb36ed0cde68$export$2e2bcd8739ae039).categories.custom;
        const style = this.props.icons == "auto" ? $ec8c39fdad15601a$var$THEME_ICONS[this.props.theme] : this.props.icons;
        return categoryIcons[style] || categoryIcons;
    }
    render() {
        let selectedCategoryIndex = null;
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("nav", {
            id: "nav",
            class: "padding",
            "data-position": this.props.position,
            dir: this.props.dir,
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: "flex relative",
                children: [
                    this.categories.map((category, i)=>{
                        const title = category.name || ($7adb23b0109cc36a$export$dbe3113d60765c1a).categories[category.id];
                        const selected = !this.props.unfocused && category.id == this.state.categoryId;
                        if (selected) selectedCategoryIndex = i;
                        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                            "aria-label": title,
                            "aria-selected": selected || undefined,
                            title: title,
                            type: "button",
                            class: "flex flex-grow flex-center",
                            onMouseDown: (e)=>e.preventDefault(),
                            onClick: ()=>{
                                this.props.onClick({
                                    category: category,
                                    i: i
                                });
                            },
                            children: this.renderIcon(category)
                        });
                    }),
                    /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                        class: "bar",
                        style: {
                            width: `${100 / this.categories.length}%`,
                            opacity: selectedCategoryIndex == null ? 0 : 1,
                            transform: this.props.dir === "rtl" ? `scaleX(-1) translateX(${selectedCategoryIndex * 100}%)` : `translateX(${selectedCategoryIndex * 100}%)`
                        }
                    })
                ]
            })
        });
    }
    constructor(){
        super();
        this.categories = ($7adb23b0109cc36a$export$2d0294657ab35f1b).categories.filter((category)=>{
            return !category.target;
        });
        this.state = {
            categoryId: this.categories[0].id
        };
    }
}





class $e0d4dda61265ff1e$export$2e2bcd8739ae039 extends ($dc040a17866866fa$export$221d75b3f55bb0bd) {
    shouldComponentUpdate(nextProps) {
        for(let k in nextProps){
            if (k == "children") continue;
            if (nextProps[k] != this.props[k]) return true;
        }
        return false;
    }
    render() {
        return this.props.children;
    }
}




const $89bd6bb200cc8fef$var$Performance = {
    rowsPerRender: 10
};
class $89bd6bb200cc8fef$export$2e2bcd8739ae039 extends ($fb96b826c0c5f37a$export$16fa2f45be04daa8) {
    getInitialState(props = this.props) {
        return {
            skin: ($f72b75cf796873c7$export$2e2bcd8739ae039).get("skin") || props.skin,
            theme: this.initTheme(props.theme)
        };
    }
    componentWillMount() {
        this.dir = ($7adb23b0109cc36a$export$dbe3113d60765c1a).rtl ? "rtl" : "ltr";
        this.refs = {
            menu: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
            navigation: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
            scroll: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
            search: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
            searchInput: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
            skinToneButton: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
            skinToneRadio: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)()
        };
        this.initGrid();
        if (this.props.stickySearch == false && this.props.searchPosition == "sticky") {
            console.warn("[EmojiMart] Deprecation warning: `stickySearch` has been renamed `searchPosition`.");
            this.props.searchPosition = "static";
        }
    }
    componentDidMount() {
        this.register();
        this.shadowRoot = this.base.parentNode;
        if (this.props.autoFocus) {
            const { searchInput: searchInput  } = this.refs;
            if (searchInput.current) searchInput.current.focus();
        }
    }
    componentWillReceiveProps(nextProps) {
        this.nextState || (this.nextState = {});
        for(const k1 in nextProps)this.nextState[k1] = nextProps[k1];
        clearTimeout(this.nextStateTimer);
        this.nextStateTimer = setTimeout(()=>{
            let requiresGridReset = false;
            for(const k in this.nextState){
                this.props[k] = this.nextState[k];
                if (k === "custom" || k === "categories") requiresGridReset = true;
            }
            delete this.nextState;
            const nextState = this.getInitialState();
            if (requiresGridReset) return this.reset(nextState);
            this.setState(nextState);
        });
    }
    componentWillUnmount() {
        this.unregister();
    }
    async reset(nextState = {}) {
        await ($7adb23b0109cc36a$export$2cd8252107eb640b)(this.props);
        this.initGrid();
        this.unobserve();
        this.setState(nextState, ()=>{
            this.observeCategories();
            this.observeRows();
        });
    }
    register() {
        document.addEventListener("click", this.handleClickOutside);
        this.observe();
    }
    unregister() {
        document.removeEventListener("click", this.handleClickOutside);
        this.darkMedia?.removeEventListener("change", this.darkMediaCallback);
        this.unobserve();
    }
    observe() {
        this.observeCategories();
        this.observeRows();
    }
    unobserve({ except: except = []  } = {}) {
        if (!Array.isArray(except)) except = [
            except
        ];
        for (const observer of this.observers){
            if (except.includes(observer)) continue;
            observer.disconnect();
        }
        this.observers = [].concat(except);
    }
    initGrid() {
        const { categories: categories  } = ($7adb23b0109cc36a$export$2d0294657ab35f1b);
        this.refs.categories = new Map();
        const navKey = ($7adb23b0109cc36a$export$2d0294657ab35f1b).categories.map((category)=>category.id).join(",");
        if (this.navKey && this.navKey != navKey) this.refs.scroll.current && (this.refs.scroll.current.scrollTop = 0);
        this.navKey = navKey;
        this.grid = [];
        this.grid.setsize = 0;
        const addRow = (rows, category)=>{
            const row = [];
            row.__categoryId = category.id;
            row.__index = rows.length;
            this.grid.push(row);
            const rowIndex = this.grid.length - 1;
            const rowRef = rowIndex % $89bd6bb200cc8fef$var$Performance.rowsPerRender ? {} : ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)();
            rowRef.index = rowIndex;
            rowRef.posinset = this.grid.setsize + 1;
            rows.push(rowRef);
            return row;
        };
        for (let category1 of categories){
            const rows = [];
            let row = addRow(rows, category1);
            for (let emoji of category1.emojis){
                if (row.length == this.getPerLine()) row = addRow(rows, category1);
                this.grid.setsize += 1;
                row.push(emoji);
            }
            this.refs.categories.set(category1.id, {
                root: ($fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
                rows: rows
            });
        }
    }
    initTheme(theme) {
        if (theme != "auto") return theme;
        if (!this.darkMedia) {
            this.darkMedia = matchMedia("(prefers-color-scheme: dark)");
            if (this.darkMedia.media.match(/^not/)) return "light";
            this.darkMedia.addEventListener("change", this.darkMediaCallback);
        }
        return this.darkMedia.matches ? "dark" : "light";
    }
    initDynamicPerLine(props = this.props) {
        if (!props.dynamicWidth) return;
        const { element: element , emojiButtonSize: emojiButtonSize  } = props;
        const calculatePerLine = ()=>{
            const { width: width  } = element.getBoundingClientRect();
            return Math.floor(width / emojiButtonSize);
        };
        const observer = new ResizeObserver(()=>{
            this.unobserve({
                except: observer
            });
            this.setState({
                perLine: calculatePerLine()
            }, ()=>{
                this.initGrid();
                this.forceUpdate(()=>{
                    this.observeCategories();
                    this.observeRows();
                });
            });
        });
        observer.observe(element);
        this.observers.push(observer);
        return calculatePerLine();
    }
    getPerLine() {
        return this.state.perLine || this.props.perLine;
    }
    getEmojiByPos([p1, p2]) {
        const grid = this.state.searchResults || this.grid;
        const emoji = grid[p1] && grid[p1][p2];
        if (!emoji) return;
        return ($c4d155af13ad4d4b$export$2e2bcd8739ae039).get(emoji);
    }
    observeCategories() {
        const navigation = this.refs.navigation.current;
        if (!navigation) return;
        const visibleCategories = new Map();
        const setFocusedCategory = (categoryId)=>{
            if (categoryId != navigation.state.categoryId) navigation.setState({
                categoryId: categoryId
            });
        };
        const observerOptions = {
            root: this.refs.scroll.current,
            threshold: [
                0.0,
                1.0
            ]
        };
        const observer = new IntersectionObserver((entries)=>{
            for (const entry of entries){
                const id = entry.target.dataset.id;
                visibleCategories.set(id, entry.intersectionRatio);
            }
            const ratios = [
                ...visibleCategories
            ];
            for (const [id, ratio] of ratios)if (ratio) {
                setFocusedCategory(id);
                break;
            }
        }, observerOptions);
        for (const { root: root  } of this.refs.categories.values())observer.observe(root.current);
        this.observers.push(observer);
    }
    observeRows() {
        const visibleRows = {
            ...this.state.visibleRows
        };
        const observer = new IntersectionObserver((entries)=>{
            for (const entry of entries){
                const index = parseInt(entry.target.dataset.index);
                if (entry.isIntersecting) visibleRows[index] = true;
                else delete visibleRows[index];
            }
            this.setState({
                visibleRows: visibleRows
            });
        }, {
            root: this.refs.scroll.current,
            rootMargin: `${this.props.emojiButtonSize * ($89bd6bb200cc8fef$var$Performance.rowsPerRender + 5)}px 0px ${this.props.emojiButtonSize * $89bd6bb200cc8fef$var$Performance.rowsPerRender}px`
        });
        for (const { rows: rows  } of this.refs.categories.values()){
            for (const row of rows)if (row.current) observer.observe(row.current);
        }
        this.observers.push(observer);
    }
    preventDefault(e) {
        e.preventDefault();
    }
    unfocusSearch() {
        const input = this.refs.searchInput.current;
        if (!input) return;
        input.blur();
    }
    navigate({ e: e , input: input , left: left , right: right , up: up , down: down  }) {
        const grid = this.state.searchResults || this.grid;
        if (!grid.length) return;
        let [p1, p2] = this.state.pos;
        const pos = (()=>{
            if (p1 == 0) {
                if (p2 == 0 && !e.repeat && (left || up)) return null;
            }
            if (p1 == -1) {
                if (!e.repeat && (right || down) && input.selectionStart == input.value.length) return [
                    0,
                    0
                ];
                return null;
            }
            if (left || right) {
                let row = grid[p1];
                const increment = left ? -1 : 1;
                p2 += increment;
                if (!row[p2]) {
                    p1 += increment;
                    row = grid[p1];
                    if (!row) {
                        p1 = left ? 0 : grid.length - 1;
                        p2 = left ? 0 : grid[p1].length - 1;
                        return [
                            p1,
                            p2
                        ];
                    }
                    p2 = left ? row.length - 1 : 0;
                }
                return [
                    p1,
                    p2
                ];
            }
            if (up || down) {
                p1 += up ? -1 : 1;
                const row = grid[p1];
                if (!row) {
                    p1 = up ? 0 : grid.length - 1;
                    p2 = up ? 0 : grid[p1].length - 1;
                    return [
                        p1,
                        p2
                    ];
                }
                if (!row[p2]) p2 = row.length - 1;
                return [
                    p1,
                    p2
                ];
            }
        })();
        if (pos) e.preventDefault();
        else {
            if (this.state.pos[0] > -1) this.setState({
                pos: [
                    -1,
                    -1
                ]
            });
            return;
        }
        this.setState({
            pos: pos,
            keyboard: true
        }, ()=>{
            this.scrollTo({
                row: pos[0]
            });
        });
    }
    scrollTo({ categoryId: categoryId , row: row  }) {
        const grid = this.state.searchResults || this.grid;
        if (!grid.length) return;
        const scroll = this.refs.scroll.current;
        const scrollRect = scroll.getBoundingClientRect();
        let scrollTop = 0;
        if (row >= 0) categoryId = grid[row].__categoryId;
        if (categoryId) {
            const ref = this.refs[categoryId] || this.refs.categories.get(categoryId).root;
            const categoryRect = ref.current.getBoundingClientRect();
            scrollTop = categoryRect.top - (scrollRect.top - scroll.scrollTop) + 1;
        }
        if (row >= 0) {
            if (!row) scrollTop = 0;
            else {
                const rowIndex = grid[row].__index;
                const rowTop = scrollTop + rowIndex * this.props.emojiButtonSize;
                const rowBot = rowTop + this.props.emojiButtonSize + this.props.emojiButtonSize * 0.88;
                if (rowTop < scroll.scrollTop) scrollTop = rowTop;
                else if (rowBot > scroll.scrollTop + scrollRect.height) scrollTop = rowBot - scrollRect.height;
                else return;
            }
        }
        this.ignoreMouse();
        scroll.scrollTop = scrollTop;
    }
    ignoreMouse() {
        this.mouseIsIgnored = true;
        clearTimeout(this.ignoreMouseTimer);
        this.ignoreMouseTimer = setTimeout(()=>{
            delete this.mouseIsIgnored;
        }, 100);
    }
    handleEmojiOver(pos) {
        if (this.mouseIsIgnored || this.state.showSkins) return;
        this.setState({
            pos: pos || [
                -1,
                -1
            ],
            keyboard: false
        });
    }
    handleEmojiClick({ e: e , emoji: emoji , pos: pos  }) {
        if (!this.props.onEmojiSelect) return;
        if (!emoji && pos) emoji = this.getEmojiByPos(pos);
        if (emoji) {
            const emojiData = ($693b183b0a78708f$export$d10ac59fbe52a745)(emoji, {
                skinIndex: this.state.skin - 1
            });
            if (this.props.maxFrequentRows) ($b22cfd0a55410b4f$export$2e2bcd8739ae039).add(emojiData, this.props);
            this.props.onEmojiSelect(emojiData, e);
        }
    }
    closeSkins() {
        if (!this.state.showSkins) return;
        this.setState({
            showSkins: null,
            tempSkin: null
        });
        this.base.removeEventListener("click", this.handleBaseClick);
        this.base.removeEventListener("keydown", this.handleBaseKeydown);
    }
    handleSkinMouseOver(tempSkin) {
        this.setState({
            tempSkin: tempSkin
        });
    }
    handleSkinClick(skin) {
        this.ignoreMouse();
        this.closeSkins();
        this.setState({
            skin: skin,
            tempSkin: null
        });
        ($f72b75cf796873c7$export$2e2bcd8739ae039).set("skin", skin);
    }
    renderNav() {
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)(($ec8c39fdad15601a$export$2e2bcd8739ae039), {
            ref: this.refs.navigation,
            icons: this.props.icons,
            theme: this.state.theme,
            dir: this.dir,
            unfocused: !!this.state.searchResults,
            position: this.props.navPosition,
            onClick: this.handleCategoryClick
        }, this.navKey);
    }
    renderPreview() {
        const emoji = this.getEmojiByPos(this.state.pos);
        const noSearchResults = this.state.searchResults && !this.state.searchResults.length;
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            id: "preview",
            class: "flex flex-middle",
            dir: this.dir,
            "data-position": this.props.previewPosition,
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    class: "flex flex-middle flex-grow",
                    children: [
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                            class: "flex flex-auto flex-middle flex-center",
                            style: {
                                height: this.props.emojiButtonSize,
                                fontSize: this.props.emojiButtonSize
                            },
                            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)(($254755d3f438722f$export$2e2bcd8739ae039), {
                                emoji: emoji,
                                id: noSearchResults ? this.props.noResultsEmoji || "cry" : this.props.previewEmoji || (this.props.previewPosition == "top" ? "point_down" : "point_up"),
                                set: this.props.set,
                                size: this.props.emojiButtonSize,
                                skin: this.state.tempSkin || this.state.skin,
                                spritesheet: true,
                                getSpritesheetURL: this.props.getSpritesheetURL
                            })
                        }),
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                            class: `margin-${this.dir[0]}`,
                            children: emoji || noSearchResults ? /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                                class: `padding-${this.dir[2]} align-${this.dir[0]}`,
                                children: [
                                    /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                                        class: "preview-title ellipsis",
                                        children: emoji ? emoji.name : ($7adb23b0109cc36a$export$dbe3113d60765c1a).search_no_results_1
                                    }),
                                    /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                                        class: "preview-subtitle ellipsis color-c",
                                        children: emoji ? emoji.skins[0].shortcodes : ($7adb23b0109cc36a$export$dbe3113d60765c1a).search_no_results_2
                                    })
                                ]
                            }) : /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                                class: "preview-placeholder color-c",
                                children: ($7adb23b0109cc36a$export$dbe3113d60765c1a).pick
                            })
                        })
                    ]
                }),
                !emoji && this.props.skinTonePosition == "preview" && this.renderSkinToneButton()
            ]
        });
    }
    renderEmojiButton(emoji, { pos: pos , posinset: posinset , grid: grid  }) {
        const size = this.props.emojiButtonSize;
        const skin = this.state.tempSkin || this.state.skin;
        const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0];
        const native = emojiSkin.native;
        const selected = ($693b183b0a78708f$export$9cb4719e2e525b7a)(this.state.pos, pos);
        const key = pos.concat(emoji.id).join("");
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)(($e0d4dda61265ff1e$export$2e2bcd8739ae039), {
            selected: selected,
            skin: skin,
            size: size,
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                "aria-label": native,
                "aria-selected": selected || undefined,
                "aria-posinset": posinset,
                "aria-setsize": grid.setsize,
                "data-keyboard": this.state.keyboard,
                title: this.props.previewPosition == "none" ? emoji.name : undefined,
                type: "button",
                class: "flex flex-center flex-middle",
                tabindex: "-1",
                onClick: (e)=>this.handleEmojiClick({
                        e: e,
                        emoji: emoji
                    }),
                onMouseEnter: ()=>this.handleEmojiOver(pos),
                onMouseLeave: ()=>this.handleEmojiOver(),
                style: {
                    width: this.props.emojiButtonSize,
                    height: this.props.emojiButtonSize,
                    fontSize: this.props.emojiSize,
                    lineHeight: 0
                },
                children: [
                    /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                        "aria-hidden": "true",
                        class: "background",
                        style: {
                            borderRadius: this.props.emojiButtonRadius,
                            backgroundColor: this.props.emojiButtonColors ? this.props.emojiButtonColors[(posinset - 1) % this.props.emojiButtonColors.length] : undefined
                        }
                    }),
                    /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)(($254755d3f438722f$export$2e2bcd8739ae039), {
                        emoji: emoji,
                        set: this.props.set,
                        size: this.props.emojiSize,
                        skin: skin,
                        spritesheet: true,
                        getSpritesheetURL: this.props.getSpritesheetURL
                    })
                ]
            })
        }, key);
    }
    renderSearch() {
        const renderSkinTone = this.props.previewPosition == "none" || this.props.skinTonePosition == "search";
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    class: "spacer"
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    class: "flex flex-middle",
                    children: [
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                            class: "search relative flex-grow",
                            children: [
                                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("input", {
                                    type: "search",
                                    ref: this.refs.searchInput,
                                    placeholder: ($7adb23b0109cc36a$export$dbe3113d60765c1a).search,
                                    onClick: this.handleSearchClick,
                                    onInput: this.handleSearchInput,
                                    onKeyDown: this.handleSearchKeyDown,
                                    autoComplete: "off"
                                }),
                                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                                    class: "icon loupe flex",
                                    children: ($fcccfb36ed0cde68$export$2e2bcd8739ae039).search.loupe
                                }),
                                this.state.searchResults && /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                                    title: "Clear",
                                    "aria-label": "Clear",
                                    type: "button",
                                    class: "icon delete flex",
                                    onClick: this.clearSearch,
                                    onMouseDown: this.preventDefault,
                                    children: ($fcccfb36ed0cde68$export$2e2bcd8739ae039).search.delete
                                })
                            ]
                        }),
                        renderSkinTone && this.renderSkinToneButton()
                    ]
                })
            ]
        });
    }
    renderSearchResults() {
        const { searchResults: searchResults  } = this.state;
        if (!searchResults) return null;
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: "category",
            ref: this.refs.search,
            children: [
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    class: `sticky padding-small align-${this.dir[0]}`,
                    children: ($7adb23b0109cc36a$export$dbe3113d60765c1a).categories.search
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    children: !searchResults.length ? /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                        class: `padding-small align-${this.dir[0]}`,
                        children: this.props.onAddCustomEmoji && /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("a", {
                            onClick: this.props.onAddCustomEmoji,
                            children: ($7adb23b0109cc36a$export$dbe3113d60765c1a).add_custom
                        })
                    }) : searchResults.map((row, i)=>{
                        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                            class: "flex",
                            children: row.map((emoji, ii)=>{
                                return this.renderEmojiButton(emoji, {
                                    pos: [
                                        i,
                                        ii
                                    ],
                                    posinset: i * this.props.perLine + ii + 1,
                                    grid: searchResults
                                });
                            })
                        });
                    })
                })
            ]
        });
    }
    renderCategories() {
        const { categories: categories  } = ($7adb23b0109cc36a$export$2d0294657ab35f1b);
        const hidden = !!this.state.searchResults;
        const perLine = this.getPerLine();
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            style: {
                visibility: hidden ? "hidden" : undefined,
                display: hidden ? "none" : undefined,
                height: "100%"
            },
            children: categories.map((category)=>{
                const { root: root , rows: rows  } = this.refs.categories.get(category.id);
                return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    "data-id": category.target ? category.target.id : category.id,
                    class: "category",
                    ref: root,
                    children: [
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                            class: `sticky padding-small align-${this.dir[0]}`,
                            children: category.name || ($7adb23b0109cc36a$export$dbe3113d60765c1a).categories[category.id]
                        }),
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                            class: "relative",
                            style: {
                                height: rows.length * this.props.emojiButtonSize
                            },
                            children: rows.map((row, i)=>{
                                const targetRow = row.index - row.index % $89bd6bb200cc8fef$var$Performance.rowsPerRender;
                                const visible = this.state.visibleRows[targetRow];
                                const ref = "current" in row ? row : undefined;
                                if (!visible && !ref) return null;
                                const start = i * perLine;
                                const end = start + perLine;
                                const emojiIds = category.emojis.slice(start, end);
                                if (emojiIds.length < perLine) emojiIds.push(...new Array(perLine - emojiIds.length));
                                return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                                    "data-index": row.index,
                                    ref: ref,
                                    class: "flex row",
                                    style: {
                                        top: i * this.props.emojiButtonSize
                                    },
                                    children: visible && emojiIds.map((emojiId, ii)=>{
                                        if (!emojiId) return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                                            style: {
                                                width: this.props.emojiButtonSize,
                                                height: this.props.emojiButtonSize
                                            }
                                        });
                                        const emoji = ($c4d155af13ad4d4b$export$2e2bcd8739ae039).get(emojiId);
                                        return this.renderEmojiButton(emoji, {
                                            pos: [
                                                row.index,
                                                ii
                                            ],
                                            posinset: row.posinset + ii,
                                            grid: this.grid
                                        });
                                    })
                                }, row.index);
                            })
                        })
                    ]
                });
            })
        });
    }
    renderSkinToneButton() {
        if (this.props.skinTonePosition == "none") return null;
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: "flex flex-auto flex-center flex-middle",
            style: {
                position: "relative",
                width: this.props.emojiButtonSize,
                height: this.props.emojiButtonSize
            },
            children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                type: "button",
                ref: this.refs.skinToneButton,
                class: "skin-tone-button flex flex-auto flex-center flex-middle",
                "aria-selected": this.state.showSkins ? "" : undefined,
                "aria-label": ($7adb23b0109cc36a$export$dbe3113d60765c1a).skins.choose,
                title: ($7adb23b0109cc36a$export$dbe3113d60765c1a).skins.choose,
                onClick: this.openSkins,
                style: {
                    width: this.props.emojiSize,
                    height: this.props.emojiSize
                },
                children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                    class: `skin-tone skin-tone-${this.state.skin}`
                })
            })
        });
    }
    renderLiveRegion() {
        const emoji = this.getEmojiByPos(this.state.pos);
        const contents = emoji ? emoji.name : "";
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            "aria-live": "polite",
            class: "sr-only",
            children: contents
        });
    }
    renderSkins() {
        const skinToneButton = this.refs.skinToneButton.current;
        const skinToneButtonRect = skinToneButton.getBoundingClientRect();
        const baseRect = this.base.getBoundingClientRect();
        const position = {};
        if (this.dir == "ltr") position.right = baseRect.right - skinToneButtonRect.right - 3;
        else position.left = skinToneButtonRect.left - baseRect.left - 3;
        if (this.props.previewPosition == "bottom" && this.props.skinTonePosition == "preview") position.bottom = baseRect.bottom - skinToneButtonRect.top + 6;
        else {
            position.top = skinToneButtonRect.bottom - baseRect.top + 3;
            position.bottom = "auto";
        }
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            ref: this.refs.menu,
            role: "radiogroup",
            dir: this.dir,
            "aria-label": ($7adb23b0109cc36a$export$dbe3113d60765c1a).skins.choose,
            class: "menu hidden",
            "data-position": position.top ? "top" : "bottom",
            style: position,
            children: [
                ...Array(6).keys()
            ].map((i)=>{
                const skin = i + 1;
                const checked = this.state.skin == skin;
                return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    children: [
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("input", {
                            type: "radio",
                            name: "skin-tone",
                            value: skin,
                            "aria-label": ($7adb23b0109cc36a$export$dbe3113d60765c1a).skins[skin],
                            ref: checked ? this.refs.skinToneRadio : null,
                            defaultChecked: checked,
                            onChange: ()=>this.handleSkinMouseOver(skin),
                            onKeyDown: (e)=>{
                                if (e.code == "Enter" || e.code == "Space" || e.code == "Tab") {
                                    e.preventDefault();
                                    this.handleSkinClick(skin);
                                }
                            }
                        }),
                        /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                            "aria-hidden": "true",
                            tabindex: "-1",
                            onClick: ()=>this.handleSkinClick(skin),
                            onMouseEnter: ()=>this.handleSkinMouseOver(skin),
                            onMouseLeave: ()=>this.handleSkinMouseOver(),
                            class: "option flex flex-grow flex-middle",
                            children: [
                                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                                    class: `skin-tone skin-tone-${skin}`
                                }),
                                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                                    class: "margin-small-lr",
                                    children: ($7adb23b0109cc36a$export$dbe3113d60765c1a).skins[skin]
                                })
                            ]
                        })
                    ]
                });
            })
        });
    }
    render() {
        const lineWidth = this.props.perLine * this.props.emojiButtonSize;
        return /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("section", {
            id: "root",
            class: "flex flex-column",
            dir: this.dir,
            style: {
                width: this.props.dynamicWidth ? "100%" : `calc(${lineWidth}px + (var(--padding) + var(--sidebar-width)))`
            },
            "data-emoji-set": this.props.set,
            "data-theme": this.state.theme,
            "data-menu": this.state.showSkins ? "" : undefined,
            children: [
                this.props.previewPosition == "top" && this.renderPreview(),
                this.props.navPosition == "top" && this.renderNav(),
                this.props.searchPosition == "sticky" && /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    class: "padding-lr",
                    children: this.renderSearch()
                }),
                /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    ref: this.refs.scroll,
                    class: "scroll flex-grow padding-lr",
                    children: /*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                        style: {
                            width: this.props.dynamicWidth ? "100%" : lineWidth,
                            height: "100%"
                        },
                        children: [
                            this.props.searchPosition == "static" && this.renderSearch(),
                            this.renderSearchResults(),
                            this.renderCategories()
                        ]
                    })
                }),
                this.props.navPosition == "bottom" && this.renderNav(),
                this.props.previewPosition == "bottom" && this.renderPreview(),
                this.state.showSkins && this.renderSkins(),
                this.renderLiveRegion()
            ]
        });
    }
    constructor(props){
        super();
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "darkMediaCallback", ()=>{
            if (this.props.theme != "auto") return;
            this.setState({
                theme: this.darkMedia.matches ? "dark" : "light"
            });
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleClickOutside", (e)=>{
            const { element: element  } = this.props;
            if (e.target != element) {
                if (this.state.showSkins) this.closeSkins();
                if (this.props.onClickOutside) this.props.onClickOutside(e);
            }
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleBaseClick", (e)=>{
            if (!this.state.showSkins) return;
            if (!e.target.closest(".menu")) {
                e.preventDefault();
                e.stopImmediatePropagation();
                this.closeSkins();
            }
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleBaseKeydown", (e)=>{
            if (!this.state.showSkins) return;
            if (e.key == "Escape") {
                e.preventDefault();
                e.stopImmediatePropagation();
                this.closeSkins();
            }
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleSearchClick", ()=>{
            const emoji = this.getEmojiByPos(this.state.pos);
            if (!emoji) return;
            this.setState({
                pos: [
                    -1,
                    -1
                ]
            });
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleSearchInput", async ()=>{
            const input = this.refs.searchInput.current;
            if (!input) return;
            const { value: value  } = input;
            const searchResults = await ($c4d155af13ad4d4b$export$2e2bcd8739ae039).search(value);
            const afterRender = ()=>{
                if (!this.refs.scroll.current) return;
                this.refs.scroll.current.scrollTop = 0;
            };
            if (!searchResults) return this.setState({
                searchResults: searchResults,
                pos: [
                    -1,
                    -1
                ]
            }, afterRender);
            const pos = input.selectionStart == input.value.length ? [
                0,
                0
            ] : [
                -1,
                -1
            ];
            const grid = [];
            grid.setsize = searchResults.length;
            let row = null;
            for (let emoji of searchResults){
                if (!grid.length || row.length == this.getPerLine()) {
                    row = [];
                    row.__categoryId = "search";
                    row.__index = grid.length;
                    grid.push(row);
                }
                row.push(emoji);
            }
            this.ignoreMouse();
            this.setState({
                searchResults: grid,
                pos: pos
            }, afterRender);
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleSearchKeyDown", (e)=>{
            // const specialKey = e.altKey || e.ctrlKey || e.metaKey
            const input = e.currentTarget;
            e.stopImmediatePropagation();
            switch(e.key){
                case "ArrowLeft":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        left: true
                    });
                    break;
                case "ArrowRight":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        right: true
                    });
                    break;
                case "ArrowUp":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        up: true
                    });
                    break;
                case "ArrowDown":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        down: true
                    });
                    break;
                case "Enter":
                    e.preventDefault();
                    this.handleEmojiClick({
                        e: e,
                        pos: this.state.pos
                    });
                    break;
                case "Escape":
                    e.preventDefault();
                    if (this.state.searchResults) this.clearSearch();
                    else this.unfocusSearch();
                    break;
            }
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "clearSearch", ()=>{
            const input = this.refs.searchInput.current;
            if (!input) return;
            input.value = "";
            input.focus();
            this.handleSearchInput();
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "handleCategoryClick", ({ category: category , i: i  })=>{
            this.scrollTo(i == 0 ? {
                row: -1
            } : {
                categoryId: category.id
            });
        });
        ($c770c458706daa72$export$2e2bcd8739ae039)(this, "openSkins", (e)=>{
            const { currentTarget: currentTarget  } = e;
            const rect = currentTarget.getBoundingClientRect();
            this.setState({
                showSkins: rect
            }, async ()=>{
                // Firefox requires 2 frames for the transition to consistenly work
                await ($693b183b0a78708f$export$e772c8ff12451969)(2);
                const menu = this.refs.menu.current;
                if (!menu) return;
                menu.classList.remove("hidden");
                this.refs.skinToneRadio.current.focus();
                this.base.addEventListener("click", this.handleBaseClick, true);
                this.base.addEventListener("keydown", this.handleBaseKeydown, true);
            });
        });
        this.observers = [];
        this.state = {
            pos: [
                -1,
                -1
            ],
            perLine: this.initDynamicPerLine(props),
            visibleRows: {
                0: true
            },
            ...this.getInitialState(props)
        };
    }
}









class $efa000751917694d$export$2e2bcd8739ae039 extends ($26f27c338a96b1a6$export$2e2bcd8739ae039) {
    async connectedCallback() {
        const props = ($7adb23b0109cc36a$export$75fe5f91d452f94b)(this.props, ($b247ea80b67298d5$export$2e2bcd8739ae039), this);
        props.element = this;
        props.ref = (component)=>{
            this.component = component;
        };
        await ($7adb23b0109cc36a$export$2cd8252107eb640b)(props);
        if (this.disconnected) return;
        ($fb96b826c0c5f37a$export$b3890eb0ae9dca99)(/*#__PURE__*/ ($bd9dd35321b03dd4$export$34b9dba7ce09269b)(($89bd6bb200cc8fef$export$2e2bcd8739ae039), {
            ...props
        }), this.shadowRoot);
    }
    constructor(props){
        super(props, {
            styles: ((/*@__PURE__*/$parcel$interopDefault($329d53ba9fd7125f$exports)))
        });
    }
}
($c770c458706daa72$export$2e2bcd8739ae039)($efa000751917694d$export$2e2bcd8739ae039, "Props", ($b247ea80b67298d5$export$2e2bcd8739ae039));
if (typeof customElements !== "undefined" && !customElements.get("em-emoji-picker")) customElements.define("em-emoji-picker", $efa000751917694d$export$2e2bcd8739ae039);


var $329d53ba9fd7125f$exports = {};
$329d53ba9fd7125f$exports = ":host {\n  width: min-content;\n  height: 435px;\n  min-height: 230px;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow);\n  --border-radius: 10px;\n  --category-icon-size: 18px;\n  --font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", sans-serif;\n  --font-size: 15px;\n  --preview-placeholder-size: 21px;\n  --preview-title-size: 1.1em;\n  --preview-subtitle-size: .9em;\n  --shadow-color: 0deg 0% 0%;\n  --shadow: .3px .5px 2.7px hsl(var(--shadow-color) / .14), .4px .8px 1px -3.2px hsl(var(--shadow-color) / .14), 1px 2px 2.5px -4.5px hsl(var(--shadow-color) / .14);\n  display: flex;\n}\n\n[data-theme=\"light\"] {\n  --em-rgb-color: var(--rgb-color, 34, 36, 39);\n  --em-rgb-accent: var(--rgb-accent, 34, 102, 237);\n  --em-rgb-background: var(--rgb-background, 255, 255, 255);\n  --em-rgb-input: var(--rgb-input, 255, 255, 255);\n  --em-color-border: var(--color-border, rgba(0, 0, 0, .05));\n  --em-color-border-over: var(--color-border-over, rgba(0, 0, 0, .1));\n}\n\n[data-theme=\"dark\"] {\n  --em-rgb-color: var(--rgb-color, 222, 222, 221);\n  --em-rgb-accent: var(--rgb-accent, 58, 130, 247);\n  --em-rgb-background: var(--rgb-background, 21, 22, 23);\n  --em-rgb-input: var(--rgb-input, 0, 0, 0);\n  --em-color-border: var(--color-border, rgba(255, 255, 255, .1));\n  --em-color-border-over: var(--color-border-over, rgba(255, 255, 255, .2));\n}\n\n#root {\n  --color-a: rgb(var(--em-rgb-color));\n  --color-b: rgba(var(--em-rgb-color), .65);\n  --color-c: rgba(var(--em-rgb-color), .45);\n  --padding: 12px;\n  --padding-small: calc(var(--padding) / 2);\n  --sidebar-width: 16px;\n  --duration: 225ms;\n  --duration-fast: 125ms;\n  --duration-instant: 50ms;\n  --easing: cubic-bezier(.4, 0, .2, 1);\n  width: 100%;\n  text-align: left;\n  border-radius: var(--border-radius);\n  background-color: rgb(var(--em-rgb-background));\n  position: relative;\n}\n\n@media (prefers-reduced-motion) {\n  #root {\n    --duration: 0;\n    --duration-fast: 0;\n    --duration-instant: 0;\n  }\n}\n\n#root[data-menu] button {\n  cursor: auto;\n}\n\n#root[data-menu] .menu button {\n  cursor: pointer;\n}\n\n:host, #root, input, button {\n  color: rgb(var(--em-rgb-color));\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  line-height: normal;\n}\n\n*, :before, :after {\n  box-sizing: border-box;\n  min-width: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.relative {\n  position: relative;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-auto {\n  flex: none;\n}\n\n.flex-center {\n  justify-content: center;\n}\n\n.flex-column {\n  flex-direction: column;\n}\n\n.flex-grow {\n  flex: auto;\n}\n\n.flex-middle {\n  align-items: center;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.padding {\n  padding: var(--padding);\n}\n\n.padding-t {\n  padding-top: var(--padding);\n}\n\n.padding-lr {\n  padding-left: var(--padding);\n  padding-right: var(--padding);\n}\n\n.padding-r {\n  padding-right: var(--padding);\n}\n\n.padding-small {\n  padding: var(--padding-small);\n}\n\n.padding-small-b {\n  padding-bottom: var(--padding-small);\n}\n\n.padding-small-lr {\n  padding-left: var(--padding-small);\n  padding-right: var(--padding-small);\n}\n\n.margin {\n  margin: var(--padding);\n}\n\n.margin-r {\n  margin-right: var(--padding);\n}\n\n.margin-l {\n  margin-left: var(--padding);\n}\n\n.margin-small-l {\n  margin-left: var(--padding-small);\n}\n\n.margin-small-lr {\n  margin-left: var(--padding-small);\n  margin-right: var(--padding-small);\n}\n\n.align-l {\n  text-align: left;\n}\n\n.align-r {\n  text-align: right;\n}\n\n.color-a {\n  color: var(--color-a);\n}\n\n.color-b {\n  color: var(--color-b);\n}\n\n.color-c {\n  color: var(--color-c);\n}\n\n.ellipsis {\n  white-space: nowrap;\n  max-width: 100%;\n  width: auto;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.sr-only {\n  width: 1px;\n  height: 1px;\n  position: absolute;\n  top: auto;\n  left: -10000px;\n  overflow: hidden;\n}\n\na {\n  cursor: pointer;\n  color: rgb(var(--em-rgb-accent));\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n.spacer {\n  height: 10px;\n}\n\n[dir=\"rtl\"] .scroll {\n  padding-left: 0;\n  padding-right: var(--padding);\n}\n\n.scroll {\n  padding-right: 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.scroll::-webkit-scrollbar {\n  width: var(--sidebar-width);\n  height: var(--sidebar-width);\n}\n\n.scroll::-webkit-scrollbar-track {\n  border: 0;\n}\n\n.scroll::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n  display: none;\n}\n\n.scroll::-webkit-scrollbar-corner {\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.scroll::-webkit-scrollbar-thumb {\n  min-height: 20%;\n  min-height: 65px;\n  border: 4px solid rgb(var(--em-rgb-background));\n  border-radius: 8px;\n}\n\n.scroll::-webkit-scrollbar-thumb:hover {\n  background-color: var(--em-color-border-over) !important;\n}\n\n.scroll:hover::-webkit-scrollbar-thumb {\n  background-color: var(--em-color-border);\n}\n\n.sticky {\n  z-index: 1;\n  background-color: rgba(var(--em-rgb-background), .9);\n  -webkit-backdrop-filter: blur(4px);\n  backdrop-filter: blur(4px);\n  font-weight: 500;\n  position: sticky;\n  top: -1px;\n}\n\n[dir=\"rtl\"] .search input[type=\"search\"] {\n  padding: 10px 2.2em 10px 2em;\n}\n\n[dir=\"rtl\"] .search .loupe {\n  left: auto;\n  right: .7em;\n}\n\n[dir=\"rtl\"] .search .delete {\n  left: .7em;\n  right: auto;\n}\n\n.search {\n  z-index: 2;\n  position: relative;\n}\n\n.search input, .search button {\n  font-size: calc(var(--font-size)  - 1px);\n}\n\n.search input[type=\"search\"] {\n  width: 100%;\n  background-color: var(--em-color-border);\n  transition-duration: var(--duration);\n  transition-property: background-color, box-shadow;\n  transition-timing-function: var(--easing);\n  border: 0;\n  border-radius: 10px;\n  outline: 0;\n  padding: 10px 2em 10px 2.2em;\n  display: block;\n}\n\n.search input[type=\"search\"]::-ms-input-placeholder {\n  color: inherit;\n  opacity: .6;\n}\n\n.search input[type=\"search\"]::placeholder {\n  color: inherit;\n  opacity: .6;\n}\n\n.search input[type=\"search\"], .search input[type=\"search\"]::-webkit-search-decoration, .search input[type=\"search\"]::-webkit-search-cancel-button, .search input[type=\"search\"]::-webkit-search-results-button, .search input[type=\"search\"]::-webkit-search-results-decoration {\n  -webkit-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n}\n\n.search input[type=\"search\"]:focus {\n  background-color: rgb(var(--em-rgb-input));\n  box-shadow: inset 0 0 0 1px rgb(var(--em-rgb-accent)), 0 1px 3px rgba(65, 69, 73, .2);\n}\n\n.search .icon {\n  z-index: 1;\n  color: rgba(var(--em-rgb-color), .7);\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.search .loupe {\n  pointer-events: none;\n  left: .7em;\n}\n\n.search .delete {\n  right: .7em;\n}\n\nsvg {\n  fill: currentColor;\n  width: 1em;\n  height: 1em;\n}\n\nbutton {\n  -webkit-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n  cursor: pointer;\n  color: currentColor;\n  background-color: rgba(0, 0, 0, 0);\n  border: 0;\n}\n\n#nav {\n  z-index: 2;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-right: var(--sidebar-width);\n  position: relative;\n}\n\n#nav button {\n  color: var(--color-b);\n  transition: color var(--duration) var(--easing);\n}\n\n#nav button:hover {\n  color: var(--color-a);\n}\n\n#nav svg, #nav img {\n  width: var(--category-icon-size);\n  height: var(--category-icon-size);\n}\n\n#nav[dir=\"rtl\"] .bar {\n  left: auto;\n  right: 0;\n}\n\n#nav .bar {\n  width: 100%;\n  height: 3px;\n  background-color: rgb(var(--em-rgb-accent));\n  transition: transform var(--duration) var(--easing);\n  border-radius: 3px 3px 0 0;\n  position: absolute;\n  bottom: -12px;\n  left: 0;\n}\n\n#nav button[aria-selected] {\n  color: rgb(var(--em-rgb-accent));\n}\n\n#preview {\n  z-index: 2;\n  padding: calc(var(--padding)  + 4px) var(--padding);\n  padding-right: var(--sidebar-width);\n  position: relative;\n}\n\n#preview .preview-placeholder {\n  font-size: var(--preview-placeholder-size);\n}\n\n#preview .preview-title {\n  font-size: var(--preview-title-size);\n}\n\n#preview .preview-subtitle {\n  font-size: var(--preview-subtitle-size);\n}\n\n#nav:before, #preview:before {\n  content: \"\";\n  height: 2px;\n  position: absolute;\n  left: 0;\n  right: 0;\n}\n\n#nav[data-position=\"top\"]:before, #preview[data-position=\"top\"]:before {\n  background: linear-gradient(to bottom, var(--em-color-border), transparent);\n  top: 100%;\n}\n\n#nav[data-position=\"bottom\"]:before, #preview[data-position=\"bottom\"]:before {\n  background: linear-gradient(to top, var(--em-color-border), transparent);\n  bottom: 100%;\n}\n\n.category:last-child {\n  min-height: calc(100% + 1px);\n}\n\n.category button {\n  font-family: -apple-system, BlinkMacSystemFont, Helvetica Neue, sans-serif;\n  position: relative;\n}\n\n.category button > * {\n  position: relative;\n}\n\n.category button .background {\n  opacity: 0;\n  background-color: var(--em-color-border);\n  transition: opacity var(--duration-fast) var(--easing) var(--duration-instant);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.category button:hover .background {\n  transition-duration: var(--duration-instant);\n  transition-delay: 0s;\n}\n\n.category button[aria-selected] .background {\n  opacity: 1;\n}\n\n.category button[data-keyboard] .background {\n  transition: none;\n}\n\n.row {\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.skin-tone-button {\n  border: 1px solid rgba(0, 0, 0, 0);\n  border-radius: 100%;\n}\n\n.skin-tone-button:hover {\n  border-color: var(--em-color-border);\n}\n\n.skin-tone-button:active .skin-tone {\n  transform: scale(.85) !important;\n}\n\n.skin-tone-button .skin-tone {\n  transition: transform var(--duration) var(--easing);\n}\n\n.skin-tone-button[aria-selected] {\n  background-color: var(--em-color-border);\n  border-top-color: rgba(0, 0, 0, .05);\n  border-bottom-color: rgba(0, 0, 0, 0);\n  border-left-width: 0;\n  border-right-width: 0;\n}\n\n.skin-tone-button[aria-selected] .skin-tone {\n  transform: scale(.9);\n}\n\n.menu {\n  z-index: 2;\n  white-space: nowrap;\n  border: 1px solid var(--em-color-border);\n  background-color: rgba(var(--em-rgb-background), .9);\n  -webkit-backdrop-filter: blur(4px);\n  backdrop-filter: blur(4px);\n  transition-property: opacity, transform;\n  transition-duration: var(--duration);\n  transition-timing-function: var(--easing);\n  border-radius: 10px;\n  padding: 4px;\n  position: absolute;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, .05);\n}\n\n.menu.hidden {\n  opacity: 0;\n}\n\n.menu[data-position=\"bottom\"] {\n  transform-origin: 100% 100%;\n}\n\n.menu[data-position=\"bottom\"].hidden {\n  transform: scale(.9)rotate(-3deg)translateY(5%);\n}\n\n.menu[data-position=\"top\"] {\n  transform-origin: 100% 0;\n}\n\n.menu[data-position=\"top\"].hidden {\n  transform: scale(.9)rotate(3deg)translateY(-5%);\n}\n\n.menu input[type=\"radio\"] {\n  clip: rect(0 0 0 0);\n  width: 1px;\n  height: 1px;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  overflow: hidden;\n}\n\n.menu input[type=\"radio\"]:checked + .option {\n  box-shadow: 0 0 0 2px rgb(var(--em-rgb-accent));\n}\n\n.option {\n  width: 100%;\n  border-radius: 6px;\n  padding: 4px 6px;\n}\n\n.option:hover {\n  color: #fff;\n  background-color: rgb(var(--em-rgb-accent));\n}\n\n.skin-tone {\n  width: 16px;\n  height: 16px;\n  border-radius: 100%;\n  display: inline-block;\n  position: relative;\n  overflow: hidden;\n}\n\n.skin-tone:after {\n  content: \"\";\n  mix-blend-mode: overlay;\n  background: linear-gradient(rgba(255, 255, 255, .2), rgba(0, 0, 0, 0));\n  border: 1px solid rgba(0, 0, 0, .8);\n  border-radius: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  box-shadow: inset 0 -2px 3px #000, inset 0 1px 2px #fff;\n}\n\n.skin-tone-1 {\n  background-color: #ffc93a;\n}\n\n.skin-tone-2 {\n  background-color: #ffdab7;\n}\n\n.skin-tone-3 {\n  background-color: #e7b98f;\n}\n\n.skin-tone-4 {\n  background-color: #c88c61;\n}\n\n.skin-tone-5 {\n  background-color: #a46134;\n}\n\n.skin-tone-6 {\n  background-color: #5d4437;\n}\n\n[data-index] {\n  justify-content: space-between;\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone:after {\n  box-shadow: none;\n  border-color: rgba(0, 0, 0, .5);\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone-1 {\n  background-color: #fade72;\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone-2 {\n  background-color: #f3dfd0;\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone-3 {\n  background-color: #eed3a8;\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone-4 {\n  background-color: #cfad8d;\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone-5 {\n  background-color: #a8805d;\n}\n\n[data-emoji-set=\"twitter\"] .skin-tone-6 {\n  background-color: #765542;\n}\n\n[data-emoji-set=\"google\"] .skin-tone:after {\n  box-shadow: inset 0 0 2px 2px rgba(0, 0, 0, .4);\n}\n\n[data-emoji-set=\"google\"] .skin-tone-1 {\n  background-color: #f5c748;\n}\n\n[data-emoji-set=\"google\"] .skin-tone-2 {\n  background-color: #f1d5aa;\n}\n\n[data-emoji-set=\"google\"] .skin-tone-3 {\n  background-color: #d4b48d;\n}\n\n[data-emoji-set=\"google\"] .skin-tone-4 {\n  background-color: #aa876b;\n}\n\n[data-emoji-set=\"google\"] .skin-tone-5 {\n  background-color: #916544;\n}\n\n[data-emoji-set=\"google\"] .skin-tone-6 {\n  background-color: #61493f;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone:after {\n  border-color: rgba(0, 0, 0, .4);\n  box-shadow: inset 0 -2px 3px #000, inset 0 1px 4px #fff;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone-1 {\n  background-color: #f5c748;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone-2 {\n  background-color: #f1d5aa;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone-3 {\n  background-color: #d4b48d;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone-4 {\n  background-color: #aa876b;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone-5 {\n  background-color: #916544;\n}\n\n[data-emoji-set=\"facebook\"] .skin-tone-6 {\n  background-color: #61493f;\n}\n\n";

function $e5534fc185f7111e$export$2e2bcd8739ae039(props) {
    const ref = (React.useRef)(null);
    const instance = (React.useRef)(null);
    if (instance.current) instance.current.update(props);
    (React.useEffect)(()=>{
        instance.current = new ($efa000751917694d$export$2e2bcd8739ae039)({
            ...props,
            ref: ref
        });
        return ()=>{
            instance.current = null;
        };
    }, []);
    return /*#__PURE__*/ (React).createElement("div", {
        ref: ref
    });
}

const ChatInput = ({ primaryColor, senderId, channelCurrent, setError, }) => {
    const chatInputRef = React.useRef(null);
    const [text, setText] = React.useState("");
    const [showPicker, setShowPicker] = React.useState(false);
    const [files, setFiles] = React.useState([]);
    const onSendMessage = () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const uuid = uuidv4();
            const messageId = `${senderId}-${uuid}`;
            const result = yield (channelCurrent === null || channelCurrent === void 0 ? void 0 : channelCurrent.sendMessage({
                id: messageId,
                text: text.trim(),
                attachments: getAttachments(),
                mentioned_users: [],
            }));
            if (result) {
                setText("");
                setFiles([]);
            }
        }
        catch (err) {
            setText("");
            setFiles([]);
            setError(err.message || ERROR_MESSAGE);
        }
    });
    const checkDisabledButton = () => {
        if ((text.trim() === "" && files.length === 0) ||
            (files.length > 0 && files.some((item) => item.loading || item.error))) {
            return true;
        }
        return false;
    };
    const handleInputChange = (event) => {
        setText(event.target.value);
        chatInputRef.current.style.height = `${chatInputRef.current.scrollHeight}px`;
    };
    const handleKeyPress = (event) => {
        if (text &&
            event.key === "Enter" &&
            !event.shiftKey &&
            window.innerWidth > 800) {
            event.preventDefault();
            onSendMessage();
        }
    };
    const handleEmojiClick = (emoji) => {
        const input = chatInputRef.current;
        if (input) {
            const selectionStart = input.selectionStart;
            const selectionEnd = input.selectionEnd;
            setText(text.substring(0, selectionStart) + emoji + text.substring(selectionEnd));
            // Move the cursor to the end of the inserted emoji
            input.selectionStart = input.selectionEnd = selectionStart + 1;
        }
    };
    const onChangeUpload = (event) => {
        const filesArr = Array.from(event.target.files).map((file) => {
            return {
                loading: true,
                type: file.type,
                name: file.name,
                size: file.size,
                error: false,
                url: "",
            };
        });
        setFiles(filesArr);
        Array.from(event.target.files).forEach((file) => __awaiter(void 0, void 0, void 0, function* () {
            try {
                const response = yield channelCurrent.sendFile(file);
                setFiles((prev) => {
                    return prev.map((item) => {
                        if (item.name === file.name) {
                            return Object.assign(Object.assign({}, item), { loading: false, url: response.file });
                        }
                        return item;
                    });
                });
            }
            catch (error) {
                setFiles((prev) => {
                    return prev.map((item) => {
                        if (item.name === file.name) {
                            return Object.assign(Object.assign({}, item), { loading: false, error: true });
                        }
                        return item;
                    });
                });
            }
        }));
    };
    const onRemoveFile = (index) => {
        setFiles((prev) => {
            return prev.filter((_, i) => i !== index);
        });
    };
    const getAttachments = () => {
        if (files.length === 0)
            return [];
        const attachments = files
            .filter((item) => !item.error)
            .map((file) => {
            const type = file.type.split("/")[0];
            switch (type) {
                case "image":
                    return {
                        fallback: file.name,
                        type: "image",
                        image_url: file.url,
                    };
                case "video":
                    return {
                        type: "video",
                        asset_url: file.url,
                        file_size: file.size,
                        mime_type: file.type,
                        title: file.name,
                    };
                case "application":
                    return {
                        type: "file",
                        asset_url: file.url,
                        file_size: file.size,
                        mime_type: file.type,
                        title: file.name,
                    };
                default:
                    return {
                        type: "file",
                        asset_url: file.url,
                        mime_type: "",
                        title: file.name,
                    };
            }
        });
        return attachments || [];
    };
    const renderMedia = (data) => {
        const fileType = data.type.split("/")[0];
        const sizeInMB = getSizeInMb(data.size);
        switch (fileType) {
            case "image":
                return (React.createElement("img", { src: data.url, alt: data.name, style: {
                        width: "60px",
                        height: "60px",
                        objectFit: "cover",
                    } }));
            case "video":
                return (React.createElement("div", { className: "attachment-cont", title: data.name },
                    React.createElement("div", { className: "attachment-icon" },
                        React.createElement(IconFileVideo, { width: 24, height: 24, color: primaryColor })),
                    React.createElement("div", { className: "attachment-data" },
                        React.createElement("p", { className: "p1" }, data.name),
                        React.createElement("p", { className: "p2" }, sizeInMB))));
            case "audio":
                return (React.createElement("div", { className: "attachment-cont", title: data.name },
                    React.createElement("div", { className: "attachment-icon" },
                        React.createElement(IconFileAudio, { width: 24, height: 24, color: primaryColor })),
                    React.createElement("div", { className: "attachment-data" },
                        React.createElement("p", { className: "p1" }, data.name),
                        React.createElement("p", { className: "p2" }, sizeInMB))));
            case "application":
                return (React.createElement("div", { className: "attachment-cont", title: data.name },
                    React.createElement("div", { className: "attachment-icon" }, getIconFile(data.type, 24, 24, primaryColor)),
                    React.createElement("div", { className: "attachment-data" },
                        React.createElement("p", { className: "p1" }, data.name),
                        React.createElement("p", { className: "p2" }, sizeInMB))));
            default:
                return (React.createElement("div", { className: "attachment-cont", title: data.name },
                    React.createElement("div", { className: "attachment-icon" },
                        React.createElement(IconFile, { width: 24, height: 24, color: primaryColor })),
                    React.createElement("div", { className: "attachment-data" },
                        React.createElement("p", { className: "p1" }, data.name),
                        React.createElement("p", { className: "p2" }, sizeInMB))));
        }
    };
    return (React.createElement("div", { className: "chatbox-input" },
        files.length > 0 && (React.createElement("div", { className: "chatbox-input-attachment" }, files.map((item, index) => {
            return (React.createElement("div", { className: "attachment-col", key: index },
                React.createElement("div", { className: "attachment-item" }, item.loading ? (React.createElement("div", { style: {
                        backgroundColor: "#d6d6d6",
                        width: "100%",
                        height: "100%",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                    } },
                    React.createElement(LoadingSpinner, { primaryColor: primaryColor }))) : item.error ? (React.createElement("div", { style: {
                        border: "1px solid #d32f2f",
                        fontSize: "14px",
                        color: "#d32f2f",
                        width: "100%",
                        height: "100%",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                    } }, "Error")) : (renderMedia(item))),
                React.createElement("div", { className: "attachment-remove", onClick: () => onRemoveFile(index) },
                    React.createElement(IconClose, { width: 20, height: 20, color: "#d32f2f" }))));
        }))),
        React.createElement("div", { className: "chatbox-input-textarea" },
            React.createElement("textarea", { ref: chatInputRef, placeholder: "Send a Message", spellCheck: "false", required: true, value: text, onChange: handleInputChange, onKeyDown: handleKeyPress }),
            React.createElement("div", { className: "chatbox-input-emoji" },
                React.createElement("button", { type: "button", onClick: (event) => {
                        event.stopPropagation();
                        setShowPicker(!showPicker);
                    } },
                    React.createElement(IconEmoji, null)),
                showPicker && (React.createElement("div", { className: "chatbox-picker" },
                    React.createElement($e5534fc185f7111e$export$2e2bcd8739ae039, { data: data, onEmojiSelect: (emoji) => {
                            handleEmojiClick(emoji.native);
                        }, onClickOutside: () => setShowPicker(false) })))),
            React.createElement("div", { className: "chatbox-input-upload" },
                React.createElement("label", null,
                    React.createElement(IconLink, null),
                    React.createElement("input", { id: "file-input", type: "file", multiple: true, onChange: onChangeUpload })))),
        React.createElement("div", { className: `chatbox-input-send ${checkDisabledButton() ? "disabled" : ""}` },
            React.createElement("span", { id: "send-btn", className: "material-symbols-outlined", onClick: onSendMessage, style: {
                    color: primaryColor,
                } }, "send"))));
};

const Notification = ({ message, onClose }) => {
    React.useEffect(() => {
        const timer = setTimeout(onClose, 3000);
        return () => clearTimeout(timer); // Cleanup the timer if the component unmounts
    }, [onClose, 3000]);
    return (React.createElement("div", { className: "notification" },
        React.createElement("p", null, message),
        React.createElement("button", { onClick: onClose },
            React.createElement(IconClose, { width: 20, height: 20, color: "#721c24" }))));
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "@import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,500;0,600;1,700&display=swap\");\n\n/* Import Material Symbols Outlined font */\n@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');\n\n/* Import Material Symbols Rounded font */\n@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0');\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: \"Poppins\", sans-serif;\n}\n\n@keyframes color {\n    0% {\n        background-position: 0 50%;\n    }\n\n    50% {\n        background-position: 100% 50%;\n    }\n\n    100% {\n        background-position: 0 50%;\n    }\n}\n\n.chatbox-spinner {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0 15px;\n}\n\n\n.lds-ring,\n.lds-ring div {\n  box-sizing: border-box;\n}\n.lds-ring {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  width: 20px;\n  height: 20px;\n}\n.lds-ring div {\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border: 2px solid currentColor;\n  border-radius: 50%;\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: currentColor transparent transparent transparent;\n}\n.lds-ring div:nth-child(1) {\n  animation-delay: -0.45s;\n}\n.lds-ring div:nth-child(2) {\n  animation-delay: -0.3s;\n}\n.lds-ring div:nth-child(3) {\n  animation-delay: -0.15s;\n}\n@keyframes lds-ring {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.chatbox-toggler {\n    position: fixed;\n    bottom: 40px;\n    right: 40px;\n    outline: none;\n    border: none;\n    height: 40px;\n    width: 40px;\n    display: flex;\n    cursor: pointer;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    background: #4aa017;\n    transition: all 0.2s ease;\n    box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1),\n        0 32px 64px -48px rgba(0, 0, 0, 0.5);\n\n    &:hover {\n        background: #4aa017;\n    }\n\n    svg path {\n        fill: #fff;\n    }\n\n    @media (max-width: 991px) {\n        bottom: 20px;\n        right: 20px;\n    }\n\n    @media (max-width: 767px) {\n        bottom: 20px;\n        right: 20px;\n    }\n\n    @media (max-width: 575px) {\n        bottom: 20px;\n        right: 20px;\n    }\n\n    @media (max-width: 375px) {\n        bottom: 20px;\n        right: 20px;\n    }\n\n    @media (max-width: 320px) {\n        bottom: 20px;\n        right: 20px;\n    }\n}\n\n.chatbox-container.show-chatbox .chatbox-toggler {\n    transform: rotate(90deg);\n    background: #4aa017;\n}\n\n.chatbox-toggler span {\n    color: #fff;\n    position: absolute;\n    font-size: 1.2rem;\n    font-weight: 600;\n    transition: all 0.2s ease;\n}\n\n.chatbox-toggler span:last-child,\n.chatbox-container.show-chatbox .chatbox-toggler span:first-child {\n    opacity: 0;\n}\n\n.chatbox-container.show-chatbox .chatbox-toggler span:last-child {\n    opacity: 1;\n}\n\n.chatbox-wrapper {\n    position: fixed;\n    right: 70px;\n    bottom: 80px;\n    overflow: hidden;\n    width: 600px;\n    height: 520px;\n    transform: scale(0.5);\n    opacity: 0;\n    pointer-events: none;\n    background: #fff;\n    transform-origin: bottom right;\n    border-radius: 15px;\n    box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1),\n        0 32px 64px -48px rgba (0, 0, 0, 0.5);\n    transition: all 0.1s ease;\n}\n\n.chatbox-container.show-chatbox .chatbox-wrapper {\n    opacity: 1;\n    pointer-events: auto;\n    transform: scale(1);\n}\n\n.chatbox-wrapper header {\n    background: #4aa017;\n    position: relative;\n    color: #fff;\n    padding: 12px;\n    border-radius: 15px 15px 0 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.chatbox-wrapper header span {\n    position: absolute;\n    right: 15px;\n    top: 50%;\n    display: none;\n    cursor: pointer;\n    transform: translateY(-50%);\n}\n\n@media screen and (max-width: 992px) {\n    .chatbox-wrapper header span {\n        display: block;\n    }\n}\n\n.chatbox-wrapper header span svg {\n    height: 20px;\n    width: 20px;\n    fill: #fff;\n}\n\n.chatbox-wrapper header span:hover {\n    opacity: 0.8;\n}\n\n.chatbox-wrapper header span:first-child {\n    right: 55px;\n}\n\n.chatbox-wrapper header span:last-child {\n    right: 15px;\n}\n\n.chatbox-wrapper header h2 {\n    color: #fff;\n    font-size: 16px;\n    font-weight: 600;\n    letter-spacing: 0.5px;\n}\n\n.chatbox-body {\n    width: 100%;\n    height: calc(100% - 50px);\n    display: flex;\n    flex-direction: column;\n}\n\n.chatbox-wrapper main {\n    height: calc(100% - 49px);\n    display: flex;\n}\n\n.chatbox-cont {\n    width: calc(100% - 200px);\n}\n\n.chatbox-timeline {\n    padding: 15px;\n    background-color: #F0F4FA;\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);\n    flex: 1;\n    overflow-y: auto;\n    display: flex;\n    flex-direction: column-reverse;\n}\n\n.chatbox .chat {\n    display: flex;\n    list-style: none;\n    margin: -1px 0 0;\n}\n\n.chatbox :where(.chatbox, textarea)::-webkit-scrollbar {\n    width: 6px;\n}\n\n.chatbox :where(.chatbox, textarea)::-webkit-scrollbar-track {\n    background: #fff;\n    border-radius: 25px;\n}\n\n.chatbox :where(.chatbox, textarea)::-webkit-scrollbar-thumb {\n    background: #ccc;\n    border-radius: 25px;\n}\n\n.chatbox :where(.chatbox, textarea)::-webkit-scrollbar-thumb:hover {\n    background: #b3b3b3;\n}\n\n.chatbox-list {\n    width: 200px;\n    height: 100%;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    background-color: #F8FAFF;\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);\n    padding: 6px 0;\n}\n\n.chatbox-list-col {\n    padding: 6px 12px;\n}\n\n.chatbox-cont {\n    width: calc(100% - 200px);\n    height: 100%;\n}\n\n.chatbox-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 15px;\n    background-color: #F8FAFF;\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);\n}\n\n.chatbox-header-name {\n    display: flex;\n    align-items: center;\n}\n\n.chatbox-header-name .p1 {\n    font-size: 14px;\n    font-weight: 600;\n    padding-left: 12px;\n}\n\n.chatbox-item {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    border-radius: 12px;\n    padding: 12px;\n    background-color: #fff;\n}\n\n.chatbox-item.active {\n    background-color: rgba(1, 98, 196, 0.5);\n}\n\n.chatbox-item .chatbox-item-cont {\n    flex: 1;\n    padding-left: 10px;\n}\n\n.chatbox-item .chatbox-item-cont span {\n    font-size: 14px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    display: block;\n    width: 100%;\n}\n\n.chatbox-input {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    padding: 15px;\n    background-color: #F8FAFF;\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);\n    flex-wrap: wrap;\n}\n\n.chatbox-input-attachment {\n    display: flex;\n    overflow-x: auto;\n    padding-bottom: 15px;\n}\n\n.chatbox-input-attachment .attachment-col {\n    margin-right: 15px;\n    position: relative;\n}\n\n.chatbox-input-attachment .attachment-remove {\n    position: absolute;\n    top: 0;\n    right: 0;\n    cursor: pointer;\n}\n\n.chatbox-input-attachment .attachment-item {\n    min-width: 60px;\n    max-width: 120px;\n    height: 60px;\n    background-color: #fff;\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.chatbox-input-attachment .attachment-cont {\n    display: flex;\n    padding: 15px;\n\n}\n\n.chatbox-input-attachment .attachment-icon {\n    width: 24px;\n}\n\n.chatbox-input-attachment .attachment-data {\n    width: calc(100% - 24px);\n    padding-left: 5px;\n}\n\n.chatbox-input-attachment .attachment-data .p1{\n    font-size: 12px;\n    font-weight: 600;\n    width: 100%;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n}\n\n.chatbox-input-attachment .attachment-data .p2{\n    font-size: 10px;\n}\n\n.chatbox-input-textarea {\n    width: calc(100% - 40px);\n    display: flex;\n    padding-right: 15px;\n    position: relative;\n}\n\n.chatbox-input-textarea textarea {\n    width: 100%;\n    border: none;\n    outline: none;\n    font-size: 14px;\n    line-height: 1.5;\n    resize: none;\n    border-radius: 12px;\n    height: 50px!important;\n    background: rgba(145, 158, 171, 0.12);\n    padding: 15px 70px 15px 15px;\n}\n\n.chatbox-input-emoji {\n    position: absolute;\n    right: 60px;\n    top: 13px;\n}\n\n.chatbox-input-emoji > button {\n    border: none;\n    display: flex;\n    cursor: pointer;\n}\n\n.chatbox-picker {\n    position: absolute;\n    bottom: 30px;\n    right: 0;\n    z-index: 1;\n}\n\n.chatbox-input-upload {\n    position: absolute;\n    right: 25px;\n    top: 13px;\n}\n\n.chatbox-input-upload label {\n    display: flex;\n    cursor: pointer;\n}\n\n.chatbox-input-upload input {\n    display: none;\n}\n\n.chatbox-input-send {\n    width: 40px;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    transition: 0.1s ease;\n}\n\n.chatbox-input-send:hover {\n    background: rgba(145, 158, 171, 0.12);\n}\n\n.chatbox-input-send span {\n    color: #4aa017;\n    font-size: 25px;\n    cursor: pointer;\n    transition: 0.3s ease;\n}\n\n.chatbox-input-send.disabled {\n    pointer-events: none;\n    opacity: .5;\n}\n\n.chatbox-input textarea:valid~span {\n    visibility: visible;\n}\n\n.messageItem {\n    display: flex;\n}\n\n.listMessages-item {\n    display: flex;\n    margin-bottom: 15px;\n}\n\n.listMessages-item.myMessage {\n    justify-content: flex-start;\n}\n\n.listMessages-item.myMessage .messageItem-avatar {\n    order: 1;\n}\n\n.listMessages-item.myMessage .messageItem-info {\n    order: 2;\n}\n\n.listMessages-item.myMessage .messageItem-line {\n    background-color: #fff;\n}\n\n.listMessages-item.otherMessage {\n    justify-content: flex-end;\n}\n\n.listMessages-item.otherMessage .messageItem-avatar {\n    order: 2;\n}\n\n.listMessages-item.otherMessage .messageItem-info {\n    order: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n}\n\n.listMessages-item.otherMessage .messageItem-line {\n    background-color: #0162C4;\n    color: #fff;\n}\n\n.listMessages-item.otherMessage .messageItem-name .span1{\n    order: 2;\n}\n\n.listMessages-item.otherMessage .messageItem-name .span2{\n    order: 1;\n}\n\n.messageItem-info {\n    padding: 0 10px;\n}\n\n.messageItem-name {\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n}\n\n.messageItem-name .span1 {\n    font-weight: 600;\n}\n\n.messageItem-name .span2 {\n    color: #666;\n    padding: 0 10px;\n}\n\n.messageItem-line {\n    padding: 10px;\n    border-radius: 12px;\n    font-size: 14px;\n    display: inline-flex;\n    max-width: 80%;\n}\n\n.msgAttachments-item {\n    margin-bottom: 15px;\n    padding: 5px;\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);\n    border-radius: 12px;\n}\n\n.msgAttachments-item:last-child {\n    margin-bottom: 0;\n}\n\n.msgAttachments-file {\n    display: flex;\n}\n\n.msgAttachments-file-data {\n    flex: 1;\n    padding-left: 10px;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.notification {\n    background-color: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n    padding: 10px 15px;\n    position: absolute;\n    bottom: 15px;\n    left: 15px;\n    right: 15px;\n    z-index: 10;\n    border-radius: 4px;\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n    width: calc(100% - 30px);\n    animation: slideUp 0.3s ease-out;\n}\n\n.notification p {\n  margin: 0;\n  padding: 0;\n  flex: 1;\n  font-size: 14px;\n}\n\n.notification button {\n  background: none;\n  border: none;\n  color: #721c24;\n  cursor: pointer;\n  font-size: 16px;\n  margin-left: 20px;\n}\n\n\n/* -----------------------mobile----------------------- */\n\n@media (max-width: 767px) {\n    .chatbox-wrapper {\n        width: 100%;\n        height: 100%;\n        border-radius: 0;\n        bottom: 0;\n        right: 0;\n    }\n\n    .chatbox-wrapper header {\n        border-radius: 0;\n    }\n\n    .chatbox-wrapper .chatbox-input {\n        position: relative;\n    }\n\n    .chatbox-wrapper .chatbox-input textarea {\n        padding: 16px 15px 16px 0;\n    }\n\n    .chatbox-wrapper .chatbox-input span {\n        height: 55px;\n        line-height: 55px;\n        font-size: 1.35rem;\n    }\n}\n\n@media (max-width: 575px) {\n    .chatbox-wrapper {\n        width: 100%;\n        height: 100%;\n        border-radius: 0;\n        bottom: 0;\n        right: 0;\n    }\n\n    .chatbox-wrapper header {\n        border-radius: 0;\n    }\n\n    .chatbox-wrapper .chatbox-input {\n        position: relative;\n    }\n\n    .chatbox-wrapper .chatbox-input textarea {\n        padding: 16px 15px 16px 0;\n    }\n\n    .chatbox-wrapper .chatbox-input span {\n        height: 55px;\n        line-height: 55px;\n        font-size: 1.35rem;\n    }\n}";
styleInject(css_248z);

const BASE_URL = "http://42.119.181.15:8448";
const chatClient = ErmisChat.getInstance("dz5f4d5kzrue", {
    enableInsights: true,
    enableWSFallback: true,
    allowServerSideConnect: true,
    baseURL: BASE_URL,
});
const paramsQueryChannels = {
    filter: { type: ChatType.Messaging },
    sort: [{ last_message_at: -1 }],
    options: {
        limit: 10,
        offset: 0,
        message_limit: 25,
        presence: true,
        watch: true,
    },
};
const ErmisChatWidget = ({ openWidget = false, onToggleWidget, token, senderId, receiverId = "", primaryColor = "#eb4034", }) => {
    const lowCaseSenderId = senderId.toLowerCase();
    const lowCaseReceiverId = receiverId.toLowerCase() || "";
    const [isLoggedIn, setIsLoggedIn] = React.useState(false);
    const [channelCurrent, setChannelCurrent] = React.useState(null);
    const [channels, setChannels] = React.useState([]);
    const [error, setError] = React.useState(null);
    React.useEffect(() => {
        if (lowCaseSenderId && token) {
            const connectUser = () => __awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield chatClient.connectUser({
                        id: lowCaseSenderId,
                        name: lowCaseSenderId,
                        image: "",
                    }, `Bearer ${token}`);
                    setIsLoggedIn(true);
                }
                catch (err) {
                    setError(err.message || ERROR_MESSAGE);
                }
            });
            connectUser();
        }
        else {
            setIsLoggedIn(false);
        }
    }, [lowCaseSenderId, token]);
    const toggleChatbox = () => {
        onToggleWidget();
    };
    const getFriendIds = (channels) => {
        const friendIds = channels.map((channel) => {
            const dataUser = Object.values(channel.data.members).find((member) => member.user.id !== lowCaseSenderId);
            return dataUser ? dataUser.user.id : "";
        });
        return friendIds || [];
    };
    const findChannelOfReceiverId = (channels) => __awaiter(void 0, void 0, void 0, function* () {
        const channel = channels.find((channel) => {
            return channel.data.members.find((member) => member.user.id === lowCaseReceiverId);
        });
        if (channel) {
            try {
                const chanelId = channel.data.id;
                const channelType = channel.data.type;
                const channelSelected = chatClient.channel(channelType, chanelId);
                const response = yield channel.query({
                    messages: { limit: 50 },
                });
                if (response) {
                    setChannelCurrent(channelSelected);
                }
            }
            catch (err) {
                setError(err.message || ERROR_MESSAGE);
            }
        }
        return null;
    });
    const createChannel = () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const newChannel = yield chatClient.channel(ChatType.Messaging, {
                members: [lowCaseReceiverId, lowCaseSenderId],
            });
            yield newChannel.create();
            return newChannel;
        }
        catch (err) {
            setError(err.message || ERROR_MESSAGE);
            return null;
        }
    });
    const getData = React.useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (isLoggedIn && openWidget) {
            // get list channel
            yield chatClient
                .queryChannels(paramsQueryChannels.filter, paramsQueryChannels.sort, paramsQueryChannels.options)
                .then((response) => __awaiter(void 0, void 0, void 0, function* () {
                const friendIds = getFriendIds(response);
                if (!lowCaseReceiverId) {
                    setChannels(response);
                }
                else if (friendIds.includes(lowCaseReceiverId)) {
                    // check receiverId existing in list channel
                    setChannels(response);
                    findChannelOfReceiverId(response);
                }
                else {
                    // create new channel with receiverId
                    const newChannel = yield createChannel();
                    if (newChannel) {
                        const newListChannel = response.push(newChannel);
                        setChannels(newListChannel);
                        findChannelOfReceiverId(newListChannel);
                    }
                    else {
                        setChannels(response);
                    }
                }
            }))
                .catch((err) => {
                setError(err.message || ERROR_MESSAGE);
            });
        }
    }), [lowCaseReceiverId, isLoggedIn, openWidget]);
    React.useEffect(() => {
        getData();
    }, [getData]);
    return (React.createElement("div", { className: `chatbox-container ${openWidget ? "show-chatbox" : ""}`, style: {
            background: primaryColor,
            backgroundColor: primaryColor,
        } },
        React.createElement("button", { className: "chatbox-toggler", onClick: toggleChatbox, style: { background: primaryColor } },
            React.createElement("span", { className: "material-symbols-rounded" },
                React.createElement(ChatIcon, null)),
            React.createElement("span", { className: "material-symbols-outlined" }, "Close")),
        React.createElement("div", { className: "chatbox-wrapper" },
            React.createElement("header", { style: { background: primaryColor } },
                React.createElement("h2", null, "Ermis chat"),
                React.createElement("span", { className: "close-btn material-symbols-outlined", onClick: toggleChatbox }, "close")),
            React.createElement("main", null,
                React.createElement(ChannelList, { chatClient: chatClient, senderId: lowCaseSenderId, channels: channels, channelCurrent: channelCurrent, setChannelCurrent: setChannelCurrent, setError: setError }),
                React.createElement("div", { className: "chatbox-cont" }, channelCurrent ? (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "chatbox-header" },
                        React.createElement("div", { className: "chatbox-header-name" },
                            React.createElement(ChannelAvatar, { senderId: lowCaseSenderId, channel: channelCurrent, width: 30, height: 30 }),
                            React.createElement("p", { className: "p1" }, getChannelName(channelCurrent, lowCaseSenderId)))),
                    React.createElement("div", { className: "chatbox-body" },
                        React.createElement(ChatTimeline, { senderId: lowCaseSenderId, channelCurrent: channelCurrent, primaryColor: primaryColor, setError: setError }),
                        React.createElement(ChatInput, { primaryColor: primaryColor, senderId: lowCaseSenderId, channelCurrent: channelCurrent, setError: setError })))) : (React.createElement("div", { style: {
                        width: "100%",
                        height: "100%",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                    } },
                    React.createElement(NoChat, null))))),
            error && (React.createElement(Notification, { message: error, onClose: () => setError(null) })))));
};

exports.Button = Button;
exports.ErmisChatWidget = ErmisChatWidget;
